(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(self, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/web-pdf-jr/WebPDFJRWorker.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/babel-polyfill/lib/index.js":
/*!**************************************************!*\
  !*** ./node_modules/babel-polyfill/lib/index.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

__webpack_require__(/*! core-js/shim */ "./node_modules/core-js/shim.js");

__webpack_require__(/*! regenerator-runtime/runtime */ "./node_modules/babel-polyfill/node_modules/regenerator-runtime/runtime.js");

__webpack_require__(/*! core-js/fn/regexp/escape */ "./node_modules/core-js/fn/regexp/escape.js");

if (global._babelPolyfill) {
  throw new Error("only one instance of babel-polyfill is allowed");
}
global._babelPolyfill = true;

var DEFINE_PROPERTY = "defineProperty";
function define(O, key, value) {
  O[key] || Object[DEFINE_PROPERTY](O, key, {
    writable: true,
    configurable: true,
    value: value
  });
}

define(String.prototype, "padLeft", "".padStart);
define(String.prototype, "padRight", "".padEnd);

"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
  [][key] && define(Array, key, Function.call.bind([][key]));
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/babel-polyfill/node_modules/regenerator-runtime/runtime.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/babel-polyfill/node_modules/regenerator-runtime/runtime.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    if (typeof global.process === "object" && global.process.domain) {
      invoke = global.process.domain.bind(invoke);
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // Among the various tricks for obtaining a reference to the global
  // object, this seems to be the most reliable technique that does not
  // use indirect eval (which violates Content Security Policy).
  typeof global === "object" ? global :
  typeof window === "object" ? window :
  typeof self === "object" ? self : this
);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/core-js/fn/regexp/escape.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/fn/regexp/escape.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/core.regexp.escape */ "./node_modules/core-js/modules/core.regexp.escape.js");
module.exports = __webpack_require__(/*! ../../modules/_core */ "./node_modules/core-js/modules/_core.js").RegExp.escape;


/***/ }),

/***/ "./node_modules/core-js/modules/_a-function.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_a-function.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_a-number-value.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/_a-number-value.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");
module.exports = function (it, msg) {
  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
  return +it;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_add-to-unscopables.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/_add-to-unscopables.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('unscopables');
var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js")(ArrayProto, UNSCOPABLES, {});
module.exports = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_advance-string-index.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/_advance-string-index.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var at = __webpack_require__(/*! ./_string-at */ "./node_modules/core-js/modules/_string-at.js")(true);

 // `AdvanceStringIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-advancestringindex
module.exports = function (S, index, unicode) {
  return index + (unicode ? at(S, index).length : 1);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_an-instance.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_an-instance.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_an-object.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_an-object.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_array-copy-within.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/_array-copy-within.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)

var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var toAbsoluteIndex = __webpack_require__(/*! ./_to-absolute-index */ "./node_modules/core-js/modules/_to-absolute-index.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");

module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
  var O = toObject(this);
  var len = toLength(O.length);
  var to = toAbsoluteIndex(target, len);
  var from = toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;
  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }
  while (count-- > 0) {
    if (from in O) O[to] = O[from];
    else delete O[to];
    to += inc;
    from += inc;
  } return O;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_array-fill.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_array-fill.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)

var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var toAbsoluteIndex = __webpack_require__(/*! ./_to-absolute-index */ "./node_modules/core-js/modules/_to-absolute-index.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = toLength(O.length);
  var aLen = arguments.length;
  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
  var end = aLen > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_array-from-iterable.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/_array-from-iterable.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/core-js/modules/_for-of.js");

module.exports = function (iter, ITERATOR) {
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_array-includes.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/_array-includes.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var toAbsoluteIndex = __webpack_require__(/*! ./_to-absolute-index */ "./node_modules/core-js/modules/_to-absolute-index.js");
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_array-methods.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_array-methods.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var IObject = __webpack_require__(/*! ./_iobject */ "./node_modules/core-js/modules/_iobject.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var asc = __webpack_require__(/*! ./_array-species-create */ "./node_modules/core-js/modules/_array-species-create.js");
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_array-reduce.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/_array-reduce.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var IObject = __webpack_require__(/*! ./_iobject */ "./node_modules/core-js/modules/_iobject.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");

module.exports = function (that, callbackfn, aLen, memo, isRight) {
  aFunction(callbackfn);
  var O = toObject(that);
  var self = IObject(O);
  var length = toLength(O.length);
  var index = isRight ? length - 1 : 0;
  var i = isRight ? -1 : 1;
  if (aLen < 2) for (;;) {
    if (index in self) {
      memo = self[index];
      index += i;
      break;
    }
    index += i;
    if (isRight ? index < 0 : length <= index) {
      throw TypeError('Reduce of empty array with no initial value');
    }
  }
  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {
    memo = callbackfn(memo, self[index], index, O);
  }
  return memo;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_array-species-constructor.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/modules/_array-species-constructor.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var isArray = __webpack_require__(/*! ./_is-array */ "./node_modules/core-js/modules/_is-array.js");
var SPECIES = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_array-species-create.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/_array-species-create.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = __webpack_require__(/*! ./_array-species-constructor */ "./node_modules/core-js/modules/_array-species-constructor.js");

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_bind.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_bind.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var invoke = __webpack_require__(/*! ./_invoke */ "./node_modules/core-js/modules/_invoke.js");
var arraySlice = [].slice;
var factories = {};

var construct = function (F, len, args) {
  if (!(len in factories)) {
    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
    // eslint-disable-next-line no-new-func
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  } return factories[len](F, args);
};

module.exports = Function.bind || function bind(that /* , ...args */) {
  var fn = aFunction(this);
  var partArgs = arraySlice.call(arguments, 1);
  var bound = function (/* args... */) {
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };
  if (isObject(fn.prototype)) bound.prototype = fn.prototype;
  return bound;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_classof.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_classof.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");
var TAG = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_cof.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_cof.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_collection-strong.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/_collection-strong.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
var create = __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js");
var redefineAll = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/modules/_redefine-all.js");
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/modules/_an-instance.js");
var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/core-js/modules/_for-of.js");
var $iterDefine = __webpack_require__(/*! ./_iter-define */ "./node_modules/core-js/modules/_iter-define.js");
var step = __webpack_require__(/*! ./_iter-step */ "./node_modules/core-js/modules/_iter-step.js");
var setSpecies = __webpack_require__(/*! ./_set-species */ "./node_modules/core-js/modules/_set-species.js");
var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");
var fastKey = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js").fastKey;
var validate = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/modules/_validate-collection.js");
var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;         // collection type
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function () {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target
      this._k = kind;                     // kind
      this._l = undefined;                // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};


/***/ }),

/***/ "./node_modules/core-js/modules/_collection-to-json.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/_collection-to-json.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof = __webpack_require__(/*! ./_classof */ "./node_modules/core-js/modules/_classof.js");
var from = __webpack_require__(/*! ./_array-from-iterable */ "./node_modules/core-js/modules/_array-from-iterable.js");
module.exports = function (NAME) {
  return function toJSON() {
    if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
    return from(this);
  };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_collection-weak.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/_collection-weak.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var redefineAll = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/modules/_redefine-all.js");
var getWeak = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js").getWeak;
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/modules/_an-instance.js");
var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/core-js/modules/_for-of.js");
var createArrayMethod = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js");
var $has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var validate = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/modules/_validate-collection.js");
var arrayFind = createArrayMethod(5);
var arrayFindIndex = createArrayMethod(6);
var id = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function (that) {
  return that._l || (that._l = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function () {
  this.a = [];
};
var findUncaughtFrozen = function (store, key) {
  return arrayFind(store.a, function (it) {
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function (key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function (key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function (key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function (key) {
    var index = arrayFindIndex(this.a, function (it) {
      return it[0] === key;
    });
    if (~index) this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;      // collection type
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function (key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var data = getWeak(anObject(key), true);
    if (data === true) uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};


/***/ }),

/***/ "./node_modules/core-js/modules/_collection.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_collection.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
var redefineAll = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/modules/_redefine-all.js");
var meta = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js");
var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/core-js/modules/_for-of.js");
var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/modules/_an-instance.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var $iterDetect = __webpack_require__(/*! ./_iter-detect */ "./node_modules/core-js/modules/_iter-detect.js");
var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js");
var inheritIfRequired = __webpack_require__(/*! ./_inherit-if-required */ "./node_modules/core-js/modules/_inherit-if-required.js");

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  var fixMethod = function (KEY) {
    var fn = proto[KEY];
    redefine(proto, KEY,
      KEY == 'delete' ? function (a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a) {
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance = new C();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new C();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });
    if (!ACCEPT_ITERABLES) {
      C = wrapper(function (target, iterable) {
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base(), target, C);
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
    // weak collections should not contains .clear method
    if (IS_WEAK && proto.clear) delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_core.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_core.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var core = module.exports = { version: '2.6.9' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),

/***/ "./node_modules/core-js/modules/_create-property.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/_create-property.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $defineProperty = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");
var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_ctx.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_ctx.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_date-to-iso-string.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/_date-to-iso-string.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var getTime = Date.prototype.getTime;
var $toISOString = Date.prototype.toISOString;

var lz = function (num) {
  return num > 9 ? num : '0' + num;
};

// PhantomJS / old WebKit has a broken implementations
module.exports = (fails(function () {
  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
}) || !fails(function () {
  $toISOString.call(new Date(NaN));
})) ? function toISOString() {
  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
  var d = this;
  var y = d.getUTCFullYear();
  var m = d.getUTCMilliseconds();
  var s = y < 0 ? '-' : y > 9999 ? '+' : '';
  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
} : $toISOString;


/***/ }),

/***/ "./node_modules/core-js/modules/_date-to-primitive.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/_date-to-primitive.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");
var NUMBER = 'number';

module.exports = function (hint) {
  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
  return toPrimitive(anObject(this), hint != NUMBER);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_defined.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_defined.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_descriptors.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_descriptors.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),

/***/ "./node_modules/core-js/modules/_dom-create.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_dom-create.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var document = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};


/***/ }),

/***/ "./node_modules/core-js/modules/_enum-bug-keys.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_enum-bug-keys.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');


/***/ }),

/***/ "./node_modules/core-js/modules/_enum-keys.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_enum-keys.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");
var gOPS = __webpack_require__(/*! ./_object-gops */ "./node_modules/core-js/modules/_object-gops.js");
var pIE = __webpack_require__(/*! ./_object-pie */ "./node_modules/core-js/modules/_object-pie.js");
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_export.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_export.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if (target) redefine(target, key, out, type & $export.U);
    // export
    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;


/***/ }),

/***/ "./node_modules/core-js/modules/_fails-is-regexp.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/_fails-is-regexp.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var MATCH = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('match');
module.exports = function (KEY) {
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch (e) {
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch (f) { /* empty */ }
  } return true;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_fails.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/modules/_fails.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};


/***/ }),

/***/ "./node_modules/core-js/modules/_fix-re-wks.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_fix-re-wks.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

__webpack_require__(/*! ./es6.regexp.exec */ "./node_modules/core-js/modules/es6.regexp.exec.js");
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");
var wks = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js");
var regexpExec = __webpack_require__(/*! ./_regexp-exec */ "./node_modules/core-js/modules/_regexp-exec.js");

var SPECIES = wks('species');

var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  // #replace needs built-in support for named groups.
  // #match works fine because it just return the exec results, even if it has
  // a "grops" property.
  var re = /./;
  re.exec = function () {
    var result = [];
    result.groups = { a: '7' };
    return result;
  };
  return ''.replace(re, '$<a>') !== '7';
});

var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {
  // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
  var re = /(?:)/;
  var originalExec = re.exec;
  re.exec = function () { return originalExec.apply(this, arguments); };
  var result = 'ab'.split(re);
  return result.length === 2 && result[0] === 'a' && result[1] === 'b';
})();

module.exports = function (KEY, length, exec) {
  var SYMBOL = wks(KEY);

  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  });

  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;
    re.exec = function () { execCalled = true; return null; };
    if (KEY === 'split') {
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES] = function () { return re; };
    }
    re[SYMBOL]('');
    return !execCalled;
  }) : undefined;

  if (
    !DELEGATES_TO_SYMBOL ||
    !DELEGATES_TO_EXEC ||
    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||
    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
  ) {
    var nativeRegExpMethod = /./[SYMBOL];
    var fns = exec(
      defined,
      SYMBOL,
      ''[KEY],
      function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {
        if (regexp.exec === regexpExec) {
          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
            // The native String method already delegates to @@method (this
            // polyfilled function), leasing to infinite recursion.
            // We avoid it by directly calling the native @@method method.
            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
          }
          return { done: true, value: nativeMethod.call(str, regexp, arg2) };
        }
        return { done: false };
      }
    );
    var strfn = fns[0];
    var rxfn = fns[1];

    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return rxfn.call(string, this); }
    );
  }
};


/***/ }),

/***/ "./node_modules/core-js/modules/_flags.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/modules/_flags.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 21.2.5.3 get RegExp.prototype.flags
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_flatten-into-array.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/_flatten-into-array.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
var isArray = __webpack_require__(/*! ./_is-array */ "./node_modules/core-js/modules/_is-array.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var IS_CONCAT_SPREADABLE = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('isConcatSpreadable');

function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
  var targetIndex = start;
  var sourceIndex = 0;
  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
  var element, spreadable;

  while (sourceIndex < sourceLen) {
    if (sourceIndex in source) {
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

      spreadable = false;
      if (isObject(element)) {
        spreadable = element[IS_CONCAT_SPREADABLE];
        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
      }

      if (spreadable && depth > 0) {
        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
      } else {
        if (targetIndex >= 0x1fffffffffffff) throw TypeError();
        target[targetIndex] = element;
      }

      targetIndex++;
    }
    sourceIndex++;
  }
  return targetIndex;
}

module.exports = flattenIntoArray;


/***/ }),

/***/ "./node_modules/core-js/modules/_for-of.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_for-of.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var call = __webpack_require__(/*! ./_iter-call */ "./node_modules/core-js/modules/_iter-call.js");
var isArrayIter = __webpack_require__(/*! ./_is-array-iter */ "./node_modules/core-js/modules/_is-array-iter.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var getIterFn = __webpack_require__(/*! ./core.get-iterator-method */ "./node_modules/core-js/modules/core.get-iterator-method.js");
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;


/***/ }),

/***/ "./node_modules/core-js/modules/_function-to-string.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/_function-to-string.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./_shared */ "./node_modules/core-js/modules/_shared.js")('native-function-to-string', Function.toString);


/***/ }),

/***/ "./node_modules/core-js/modules/_global.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_global.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),

/***/ "./node_modules/core-js/modules/_has.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_has.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_hide.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_hide.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");
var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");
module.exports = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_html.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_html.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var document = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").document;
module.exports = document && document.documentElement;


/***/ }),

/***/ "./node_modules/core-js/modules/_ie8-dom-define.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/_ie8-dom-define.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") && !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return Object.defineProperty(__webpack_require__(/*! ./_dom-create */ "./node_modules/core-js/modules/_dom-create.js")('div'), 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),

/***/ "./node_modules/core-js/modules/_inherit-if-required.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/_inherit-if-required.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var setPrototypeOf = __webpack_require__(/*! ./_set-proto */ "./node_modules/core-js/modules/_set-proto.js").set;
module.exports = function (that, target, C) {
  var S = target.constructor;
  var P;
  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  } return that;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_invoke.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_invoke.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_iobject.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_iobject.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_is-array-iter.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_is-array-iter.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// check on default Array iterator
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");
var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_is-array.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/modules/_is-array.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};


/***/ }),

/***/ "./node_modules/core-js/modules/_is-integer.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_is-integer.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var floor = Math.floor;
module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_is-object.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_is-object.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),

/***/ "./node_modules/core-js/modules/_is-regexp.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_is-regexp.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.8 IsRegExp(argument)
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");
var MATCH = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('match');
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};


/***/ }),

/***/ "./node_modules/core-js/modules/_iter-call.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-call.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// call something on iterator step with safe closing on error
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};


/***/ }),

/***/ "./node_modules/core-js/modules/_iter-create.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-create.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var create = __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js");
var descriptor = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");
var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js");
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js")(IteratorPrototype, __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};


/***/ }),

/***/ "./node_modules/core-js/modules/_iter-define.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-define.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");
var $iterCreate = __webpack_require__(/*! ./_iter-create */ "./node_modules/core-js/modules/_iter-create.js");
var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js");
var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");
var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_iter-detect.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-detect.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_iter-step.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-step.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (done, value) {
  return { value: value, done: !!done };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_iterators.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_iterators.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {};


/***/ }),

/***/ "./node_modules/core-js/modules/_library.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_library.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = false;


/***/ }),

/***/ "./node_modules/core-js/modules/_math-expm1.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_math-expm1.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = (!$expm1
  // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || $expm1(-2e-17) != -2e-17
) ? function expm1(x) {
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;


/***/ }),

/***/ "./node_modules/core-js/modules/_math-fround.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_math-fround.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.16 Math.fround(x)
var sign = __webpack_require__(/*! ./_math-sign */ "./node_modules/core-js/modules/_math-sign.js");
var pow = Math.pow;
var EPSILON = pow(2, -52);
var EPSILON32 = pow(2, -23);
var MAX32 = pow(2, 127) * (2 - EPSILON32);
var MIN32 = pow(2, -126);

var roundTiesToEven = function (n) {
  return n + 1 / EPSILON - 1 / EPSILON;
};

module.exports = Math.fround || function fround(x) {
  var $abs = Math.abs(x);
  var $sign = sign(x);
  var a, result;
  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
  a = (1 + EPSILON32 / EPSILON) * $abs;
  result = a - (a - $abs);
  // eslint-disable-next-line no-self-compare
  if (result > MAX32 || result != result) return $sign * Infinity;
  return $sign * result;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_math-log1p.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_math-log1p.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x) {
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_math-scale.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_math-scale.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// https://rwaldron.github.io/proposal-math-extensions/
module.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {
  if (
    arguments.length === 0
      // eslint-disable-next-line no-self-compare
      || x != x
      // eslint-disable-next-line no-self-compare
      || inLow != inLow
      // eslint-disable-next-line no-self-compare
      || inHigh != inHigh
      // eslint-disable-next-line no-self-compare
      || outLow != outLow
      // eslint-disable-next-line no-self-compare
      || outHigh != outHigh
  ) return NaN;
  if (x === Infinity || x === -Infinity) return x;
  return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_math-sign.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_math-sign.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_meta.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_meta.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var META = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js")('meta');
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var setDesc = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};


/***/ }),

/***/ "./node_modules/core-js/modules/_metadata.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/modules/_metadata.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Map = __webpack_require__(/*! ./es6.map */ "./node_modules/core-js/modules/es6.map.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var shared = __webpack_require__(/*! ./_shared */ "./node_modules/core-js/modules/_shared.js")('metadata');
var store = shared.store || (shared.store = new (__webpack_require__(/*! ./es6.weak-map */ "./node_modules/core-js/modules/es6.weak-map.js"))());

var getOrCreateMetadataMap = function (target, targetKey, create) {
  var targetMetadata = store.get(target);
  if (!targetMetadata) {
    if (!create) return undefined;
    store.set(target, targetMetadata = new Map());
  }
  var keyMetadata = targetMetadata.get(targetKey);
  if (!keyMetadata) {
    if (!create) return undefined;
    targetMetadata.set(targetKey, keyMetadata = new Map());
  } return keyMetadata;
};
var ordinaryHasOwnMetadata = function (MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
};
var ordinaryGetOwnMetadata = function (MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
};
var ordinaryDefineOwnMetadata = function (MetadataKey, MetadataValue, O, P) {
  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
};
var ordinaryOwnMetadataKeys = function (target, targetKey) {
  var metadataMap = getOrCreateMetadataMap(target, targetKey, false);
  var keys = [];
  if (metadataMap) metadataMap.forEach(function (_, key) { keys.push(key); });
  return keys;
};
var toMetaKey = function (it) {
  return it === undefined || typeof it == 'symbol' ? it : String(it);
};
var exp = function (O) {
  $export($export.S, 'Reflect', O);
};

module.exports = {
  store: store,
  map: getOrCreateMetadataMap,
  has: ordinaryHasOwnMetadata,
  get: ordinaryGetOwnMetadata,
  set: ordinaryDefineOwnMetadata,
  keys: ordinaryOwnMetadataKeys,
  key: toMetaKey,
  exp: exp
};


/***/ }),

/***/ "./node_modules/core-js/modules/_microtask.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_microtask.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var macrotask = __webpack_require__(/*! ./_task */ "./node_modules/core-js/modules/_task.js").set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js")(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise.resolve(undefined);
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_new-promise-capability.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/modules/_new-promise-capability.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 25.4.1.5 NewPromiseCapability(C)
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-assign.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_object-assign.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)
var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");
var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");
var gOPS = __webpack_require__(/*! ./_object-gops */ "./node_modules/core-js/modules/_object-gops.js");
var pIE = __webpack_require__(/*! ./_object-pie */ "./node_modules/core-js/modules/_object-pie.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var IObject = __webpack_require__(/*! ./_iobject */ "./node_modules/core-js/modules/_iobject.js");
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS || isEnum.call(S, key)) T[key] = S[key];
    }
  } return T;
} : $assign;


/***/ }),

/***/ "./node_modules/core-js/modules/_object-create.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_object-create.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var dPs = __webpack_require__(/*! ./_object-dps */ "./node_modules/core-js/modules/_object-dps.js");
var enumBugKeys = __webpack_require__(/*! ./_enum-bug-keys */ "./node_modules/core-js/modules/_enum-bug-keys.js");
var IE_PROTO = __webpack_require__(/*! ./_shared-key */ "./node_modules/core-js/modules/_shared-key.js")('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(/*! ./_dom-create */ "./node_modules/core-js/modules/_dom-create.js")('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__(/*! ./_html */ "./node_modules/core-js/modules/_html.js").appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-dp.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-dp.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ./_ie8-dom-define */ "./node_modules/core-js/modules/_ie8-dom-define.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");
var dP = Object.defineProperty;

exports.f = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-dps.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-dps.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");

module.exports = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-forced-pam.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/_object-forced-pam.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Forced replacement prototype accessors methods
module.exports = __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js") || !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  var K = Math.random();
  // In FF throws only define methods
  // eslint-disable-next-line no-undef, no-useless-call
  __defineSetter__.call(null, K, function () { /* empty */ });
  delete __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js")[K];
});


/***/ }),

/***/ "./node_modules/core-js/modules/_object-gopd.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gopd.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var pIE = __webpack_require__(/*! ./_object-pie */ "./node_modules/core-js/modules/_object-pie.js");
var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ./_ie8-dom-define */ "./node_modules/core-js/modules/_ie8-dom-define.js");
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-gopn-ext.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gopn-ext.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var gOPN = __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js").f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-gopn.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gopn.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = __webpack_require__(/*! ./_object-keys-internal */ "./node_modules/core-js/modules/_object-keys-internal.js");
var hiddenKeys = __webpack_require__(/*! ./_enum-bug-keys */ "./node_modules/core-js/modules/_enum-bug-keys.js").concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-gops.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gops.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;


/***/ }),

/***/ "./node_modules/core-js/modules/_object-gpo.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gpo.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var IE_PROTO = __webpack_require__(/*! ./_shared-key */ "./node_modules/core-js/modules/_shared-key.js")('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-keys-internal.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/_object-keys-internal.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var arrayIndexOf = __webpack_require__(/*! ./_array-includes */ "./node_modules/core-js/modules/_array-includes.js")(false);
var IE_PROTO = __webpack_require__(/*! ./_shared-key */ "./node_modules/core-js/modules/_shared-key.js")('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-keys.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_object-keys.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = __webpack_require__(/*! ./_object-keys-internal */ "./node_modules/core-js/modules/_object-keys-internal.js");
var enumBugKeys = __webpack_require__(/*! ./_enum-bug-keys */ "./node_modules/core-js/modules/_enum-bug-keys.js");

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-pie.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-pie.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;


/***/ }),

/***/ "./node_modules/core-js/modules/_object-sap.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-sap.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// most Object methods by ES6 should accept primitives
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-to-array.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/_object-to-array.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");
var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var isEnum = __webpack_require__(/*! ./_object-pie */ "./node_modules/core-js/modules/_object-pie.js").f;
module.exports = function (isEntries) {
  return function (it) {
    var O = toIObject(it);
    var keys = getKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) {
      key = keys[i++];
      if (!DESCRIPTORS || isEnum.call(O, key)) {
        result.push(isEntries ? [key, O[key]] : O[key]);
      }
    }
    return result;
  };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_own-keys.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/modules/_own-keys.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// all object keys, includes non-enumerable and symbols
var gOPN = __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js");
var gOPS = __webpack_require__(/*! ./_object-gops */ "./node_modules/core-js/modules/_object-gops.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var Reflect = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
  var keys = gOPN.f(anObject(it));
  var getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_parse-float.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_parse-float.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $parseFloat = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").parseFloat;
var $trim = __webpack_require__(/*! ./_string-trim */ "./node_modules/core-js/modules/_string-trim.js").trim;

module.exports = 1 / $parseFloat(__webpack_require__(/*! ./_string-ws */ "./node_modules/core-js/modules/_string-ws.js") + '-0') !== -Infinity ? function parseFloat(str) {
  var string = $trim(String(str), 3);
  var result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;


/***/ }),

/***/ "./node_modules/core-js/modules/_parse-int.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_parse-int.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $parseInt = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").parseInt;
var $trim = __webpack_require__(/*! ./_string-trim */ "./node_modules/core-js/modules/_string-trim.js").trim;
var ws = __webpack_require__(/*! ./_string-ws */ "./node_modules/core-js/modules/_string-ws.js");
var hex = /^[-+]?0[xX]/;

module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
  var string = $trim(String(str), 3);
  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
} : $parseInt;


/***/ }),

/***/ "./node_modules/core-js/modules/_perform.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_perform.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};


/***/ }),

/***/ "./node_modules/core-js/modules/_promise-resolve.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/_promise-resolve.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var newPromiseCapability = __webpack_require__(/*! ./_new-promise-capability */ "./node_modules/core-js/modules/_new-promise-capability.js");

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_property-desc.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_property-desc.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_redefine-all.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/_redefine-all.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
module.exports = function (target, src, safe) {
  for (var key in src) redefine(target, key, src[key], safe);
  return target;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_redefine.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/modules/_redefine.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var SRC = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js")('src');
var $toString = __webpack_require__(/*! ./_function-to-string */ "./node_modules/core-js/modules/_function-to-string.js");
var TO_STRING = 'toString';
var TPL = ('' + $toString).split(TO_STRING);

__webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js").inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});


/***/ }),

/***/ "./node_modules/core-js/modules/_regexp-exec-abstract.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/_regexp-exec-abstract.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var classof = __webpack_require__(/*! ./_classof */ "./node_modules/core-js/modules/_classof.js");
var builtinExec = RegExp.prototype.exec;

 // `RegExpExec` abstract operation
// https://tc39.github.io/ecma262/#sec-regexpexec
module.exports = function (R, S) {
  var exec = R.exec;
  if (typeof exec === 'function') {
    var result = exec.call(R, S);
    if (typeof result !== 'object') {
      throw new TypeError('RegExp exec method returned something other than an Object or null');
    }
    return result;
  }
  if (classof(R) !== 'RegExp') {
    throw new TypeError('RegExp#exec called on incompatible receiver');
  }
  return builtinExec.call(R, S);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_regexp-exec.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_regexp-exec.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var regexpFlags = __webpack_require__(/*! ./_flags */ "./node_modules/core-js/modules/_flags.js");

var nativeExec = RegExp.prototype.exec;
// This always refers to the native implementation, because the
// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
// which loads this file before patching the method.
var nativeReplace = String.prototype.replace;

var patchedExec = nativeExec;

var LAST_INDEX = 'lastIndex';

var UPDATES_LAST_INDEX_WRONG = (function () {
  var re1 = /a/,
      re2 = /b*/g;
  nativeExec.call(re1, 'a');
  nativeExec.call(re2, 'a');
  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;
})();

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

if (PATCH) {
  patchedExec = function exec(str) {
    var re = this;
    var lastIndex, reCopy, match, i;

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + re.source + '$(?!\\s)', regexpFlags.call(re));
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];

    match = nativeExec.call(re, str);

    if (UPDATES_LAST_INDEX_WRONG && match) {
      re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      // eslint-disable-next-line no-loop-func
      nativeReplace.call(match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    return match;
  };
}

module.exports = patchedExec;


/***/ }),

/***/ "./node_modules/core-js/modules/_replacer.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/modules/_replacer.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (regExp, replace) {
  var replacer = replace === Object(replace) ? function (part) {
    return replace[part];
  } : replace;
  return function (it) {
    return String(it).replace(regExp, replacer);
  };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_same-value.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_same-value.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_set-collection-from.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/_set-collection-from.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-setmap-offrom/
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/core-js/modules/_for-of.js");

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {
    var mapFn = arguments[1];
    var mapping, A, n, cb;
    aFunction(this);
    mapping = mapFn !== undefined;
    if (mapping) aFunction(mapFn);
    if (source == undefined) return new this();
    A = [];
    if (mapping) {
      n = 0;
      cb = ctx(mapFn, arguments[2], 2);
      forOf(source, false, function (nextItem) {
        A.push(cb(nextItem, n++));
      });
    } else {
      forOf(source, false, A.push, A);
    }
    return new this(A);
  } });
};


/***/ }),

/***/ "./node_modules/core-js/modules/_set-collection-of.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/_set-collection-of.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-setmap-offrom/
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { of: function of() {
    var length = arguments.length;
    var A = new Array(length);
    while (length--) A[length] = arguments[length];
    return new this(A);
  } });
};


/***/ }),

/***/ "./node_modules/core-js/modules/_set-proto.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_set-proto.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js")(Function.call, __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js").f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};


/***/ }),

/***/ "./node_modules/core-js/modules/_set-species.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_set-species.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");
var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");
var SPECIES = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('species');

module.exports = function (KEY) {
  var C = global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};


/***/ }),

/***/ "./node_modules/core-js/modules/_set-to-string-tag.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/_set-to-string-tag.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var TAG = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};


/***/ }),

/***/ "./node_modules/core-js/modules/_shared-key.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_shared-key.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(/*! ./_shared */ "./node_modules/core-js/modules/_shared.js")('keys');
var uid = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js");
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};


/***/ }),

/***/ "./node_modules/core-js/modules/_shared.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_shared.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js");
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js") ? 'pure' : 'global',
  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
});


/***/ }),

/***/ "./node_modules/core-js/modules/_species-constructor.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/_species-constructor.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var SPECIES = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_strict-method.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_strict-method.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");

module.exports = function (method, arg) {
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call
    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);
  });
};


/***/ }),

/***/ "./node_modules/core-js/modules/_string-at.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_string-at.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_string-context.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/_string-context.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// helper for String#{startsWith, endsWith, includes}
var isRegExp = __webpack_require__(/*! ./_is-regexp */ "./node_modules/core-js/modules/_is-regexp.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");

module.exports = function (that, searchString, NAME) {
  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};


/***/ }),

/***/ "./node_modules/core-js/modules/_string-html.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_string-html.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");
var quot = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function (string, tag, attribute, value) {
  var S = String(defined(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function (NAME, exec) {
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function () {
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_string-pad.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_string-pad.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-string-pad-start-end
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var repeat = __webpack_require__(/*! ./_string-repeat */ "./node_modules/core-js/modules/_string-repeat.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");

module.exports = function (that, maxLength, fillString, left) {
  var S = String(defined(that));
  var stringLength = S.length;
  var fillStr = fillString === undefined ? ' ' : String(fillString);
  var intMaxLength = toLength(maxLength);
  if (intMaxLength <= stringLength || fillStr == '') return S;
  var fillLen = intMaxLength - stringLength;
  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_string-repeat.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_string-repeat.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");

module.exports = function repeat(count) {
  var str = String(defined(this));
  var res = '';
  var n = toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
  return res;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_string-trim.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_string-trim.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var spaces = __webpack_require__(/*! ./_string-ws */ "./node_modules/core-js/modules/_string-ws.js");
var space = '[' + spaces + ']';
var non = '\u200b\u0085';
var ltrim = RegExp('^' + space + space + '*');
var rtrim = RegExp(space + space + '*$');

var exporter = function (KEY, exec, ALIAS) {
  var exp = {};
  var FORCE = fails(function () {
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if (ALIAS) exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function (string, TYPE) {
  string = String(defined(string));
  if (TYPE & 1) string = string.replace(ltrim, '');
  if (TYPE & 2) string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;


/***/ }),

/***/ "./node_modules/core-js/modules/_string-ws.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_string-ws.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';


/***/ }),

/***/ "./node_modules/core-js/modules/_task.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_task.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var invoke = __webpack_require__(/*! ./_invoke */ "./node_modules/core-js/modules/_invoke.js");
var html = __webpack_require__(/*! ./_html */ "./node_modules/core-js/modules/_html.js");
var cel = __webpack_require__(/*! ./_dom-create */ "./node_modules/core-js/modules/_dom-create.js");
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (__webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js")(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};


/***/ }),

/***/ "./node_modules/core-js/modules/_to-absolute-index.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/_to-absolute-index.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_to-index.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/modules/_to-index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/ecma262/#sec-toindex
var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
module.exports = function (it) {
  if (it === undefined) return 0;
  var number = toInteger(it);
  var length = toLength(number);
  if (number !== length) throw RangeError('Wrong length!');
  return length;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_to-integer.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_to-integer.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_to-iobject.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_to-iobject.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(/*! ./_iobject */ "./node_modules/core-js/modules/_iobject.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");
module.exports = function (it) {
  return IObject(defined(it));
};


/***/ }),

/***/ "./node_modules/core-js/modules/_to-length.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_to-length.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};


/***/ }),

/***/ "./node_modules/core-js/modules/_to-object.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_to-object.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");
module.exports = function (it) {
  return Object(defined(it));
};


/***/ }),

/***/ "./node_modules/core-js/modules/_to-primitive.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/_to-primitive.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),

/***/ "./node_modules/core-js/modules/_typed-array.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_typed-array.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

if (__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js")) {
  var LIBRARY = __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js");
  var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
  var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
  var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
  var $typed = __webpack_require__(/*! ./_typed */ "./node_modules/core-js/modules/_typed.js");
  var $buffer = __webpack_require__(/*! ./_typed-buffer */ "./node_modules/core-js/modules/_typed-buffer.js");
  var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
  var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/modules/_an-instance.js");
  var propertyDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");
  var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
  var redefineAll = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/modules/_redefine-all.js");
  var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
  var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
  var toIndex = __webpack_require__(/*! ./_to-index */ "./node_modules/core-js/modules/_to-index.js");
  var toAbsoluteIndex = __webpack_require__(/*! ./_to-absolute-index */ "./node_modules/core-js/modules/_to-absolute-index.js");
  var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");
  var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
  var classof = __webpack_require__(/*! ./_classof */ "./node_modules/core-js/modules/_classof.js");
  var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
  var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
  var isArrayIter = __webpack_require__(/*! ./_is-array-iter */ "./node_modules/core-js/modules/_is-array-iter.js");
  var create = __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js");
  var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");
  var gOPN = __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js").f;
  var getIterFn = __webpack_require__(/*! ./core.get-iterator-method */ "./node_modules/core-js/modules/core.get-iterator-method.js");
  var uid = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js");
  var wks = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js");
  var createArrayMethod = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js");
  var createArrayIncludes = __webpack_require__(/*! ./_array-includes */ "./node_modules/core-js/modules/_array-includes.js");
  var speciesConstructor = __webpack_require__(/*! ./_species-constructor */ "./node_modules/core-js/modules/_species-constructor.js");
  var ArrayIterators = __webpack_require__(/*! ./es6.array.iterator */ "./node_modules/core-js/modules/es6.array.iterator.js");
  var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");
  var $iterDetect = __webpack_require__(/*! ./_iter-detect */ "./node_modules/core-js/modules/_iter-detect.js");
  var setSpecies = __webpack_require__(/*! ./_set-species */ "./node_modules/core-js/modules/_set-species.js");
  var arrayFill = __webpack_require__(/*! ./_array-fill */ "./node_modules/core-js/modules/_array-fill.js");
  var arrayCopyWithin = __webpack_require__(/*! ./_array-copy-within */ "./node_modules/core-js/modules/_array-copy-within.js");
  var $DP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");
  var $GOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js");
  var dP = $DP.f;
  var gOPD = $GOPD.f;
  var RangeError = global.RangeError;
  var TypeError = global.TypeError;
  var Uint8Array = global.Uint8Array;
  var ARRAY_BUFFER = 'ArrayBuffer';
  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
  var PROTOTYPE = 'prototype';
  var ArrayProto = Array[PROTOTYPE];
  var $ArrayBuffer = $buffer.ArrayBuffer;
  var $DataView = $buffer.DataView;
  var arrayForEach = createArrayMethod(0);
  var arrayFilter = createArrayMethod(2);
  var arraySome = createArrayMethod(3);
  var arrayEvery = createArrayMethod(4);
  var arrayFind = createArrayMethod(5);
  var arrayFindIndex = createArrayMethod(6);
  var arrayIncludes = createArrayIncludes(true);
  var arrayIndexOf = createArrayIncludes(false);
  var arrayValues = ArrayIterators.values;
  var arrayKeys = ArrayIterators.keys;
  var arrayEntries = ArrayIterators.entries;
  var arrayLastIndexOf = ArrayProto.lastIndexOf;
  var arrayReduce = ArrayProto.reduce;
  var arrayReduceRight = ArrayProto.reduceRight;
  var arrayJoin = ArrayProto.join;
  var arraySort = ArrayProto.sort;
  var arraySlice = ArrayProto.slice;
  var arrayToString = ArrayProto.toString;
  var arrayToLocaleString = ArrayProto.toLocaleString;
  var ITERATOR = wks('iterator');
  var TAG = wks('toStringTag');
  var TYPED_CONSTRUCTOR = uid('typed_constructor');
  var DEF_CONSTRUCTOR = uid('def_constructor');
  var ALL_CONSTRUCTORS = $typed.CONSTR;
  var TYPED_ARRAY = $typed.TYPED;
  var VIEW = $typed.VIEW;
  var WRONG_LENGTH = 'Wrong length!';

  var $map = createArrayMethod(1, function (O, length) {
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });

  var LITTLE_ENDIAN = fails(function () {
    // eslint-disable-next-line no-undef
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });

  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
    new Uint8Array(1).set({});
  });

  var toOffset = function (it, BYTES) {
    var offset = toInteger(it);
    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function (it) {
    if (isObject(it) && TYPED_ARRAY in it) return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function (C, length) {
    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
      throw TypeError('It is not a typed array constructor!');
    } return new C(length);
  };

  var speciesFromList = function (O, list) {
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function (C, list) {
    var index = 0;
    var length = list.length;
    var result = allocate(C, length);
    while (length > index) result[index] = list[index++];
    return result;
  };

  var addGetter = function (it, key, internal) {
    dP(it, key, { get: function () { return this._d[internal]; } });
  };

  var $from = function from(source /* , mapfn, thisArg */) {
    var O = toObject(source);
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var iterFn = getIterFn(O);
    var i, length, values, result, step, iterator;
    if (iterFn != undefined && !isArrayIter(iterFn)) {
      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
        values.push(step.value);
      } O = values;
    }
    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var $of = function of(/* ...items */) {
    var index = 0;
    var length = arguments.length;
    var result = allocate(this, length);
    while (length > index) result[index] = arguments[index++];
    return result;
  };

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });

  var $toLocaleString = function toLocaleString() {
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start /* , end */) {
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn /* , thisArg */) {
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn /* , thisArg */) {
      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
        arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate /* , thisArg */) {
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate /* , thisArg */) {
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn /* , thisArg */) {
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement /* , fromIndex */) {
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement /* , fromIndex */) {
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator) { // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn /* , thisArg */) {
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse() {
      var that = this;
      var length = validate(that).length;
      var middle = Math.floor(length / 2);
      var index = 0;
      var value;
      while (index < middle) {
        value = that[index];
        that[index++] = that[--length];
        that[length] = value;
      } return that;
    },
    some: function some(callbackfn /* , thisArg */) {
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn) {
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end) {
      var O = validate(this);
      var length = O.length;
      var $begin = toAbsoluteIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
        O.buffer,
        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)
      );
    }
  };

  var $slice = function slice(start, end) {
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike /* , offset */) {
    validate(this);
    var offset = toOffset(arguments[1], 1);
    var length = this.length;
    var src = toObject(arrayLike);
    var len = toLength(src.length);
    var index = 0;
    if (len + offset > length) throw RangeError(WRONG_LENGTH);
    while (index < len) this[offset + index] = src[index++];
  };

  var $iterators = {
    entries: function entries() {
      return arrayEntries.call(validate(this));
    },
    keys: function keys() {
      return arrayKeys.call(validate(this));
    },
    values: function values() {
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function (target, key) {
    return isObject(target)
      && target[TYPED_ARRAY]
      && typeof key != 'symbol'
      && key in target
      && String(+key) == String(key);
  };
  var $getDesc = function getOwnPropertyDescriptor(target, key) {
    return isTAIndex(target, key = toPrimitive(key, true))
      ? propertyDesc(2, target[key])
      : gOPD(target, key);
  };
  var $setDesc = function defineProperty(target, key, desc) {
    if (isTAIndex(target, key = toPrimitive(key, true))
      && isObject(desc)
      && has(desc, 'value')
      && !has(desc, 'get')
      && !has(desc, 'set')
      // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable
      && (!has(desc, 'writable') || desc.writable)
      && (!has(desc, 'enumerable') || desc.enumerable)
    ) {
      target[key] = desc.value;
      return target;
    } return dP(target, key, desc);
  };

  if (!ALL_CONSTRUCTORS) {
    $GOPD.f = $getDesc;
    $DP.f = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty: $setDesc
  });

  if (fails(function () { arrayToString.call({}); })) {
    arrayToString = arrayToLocaleString = function toString() {
      return arrayJoin.call(this);
    };
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice: $slice,
    set: $set,
    constructor: function () { /* noop */ },
    toString: arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function () { return this[TYPED_ARRAY]; }
  });

  // eslint-disable-next-line max-statements
  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
    CLAMPED = !!CLAMPED;
    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + KEY;
    var SETTER = 'set' + KEY;
    var TypedArray = global[NAME];
    var Base = TypedArray || {};
    var TAC = TypedArray && getPrototypeOf(TypedArray);
    var FORCED = !TypedArray || !$typed.ABV;
    var O = {};
    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
    var getter = function (that, index) {
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };
    var setter = function (that, index, value) {
      var data = that._d;
      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };
    var addElement = function (that, index) {
      dP(that, index, {
        get: function () {
          return getter(this, index);
        },
        set: function (value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if (FORCED) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME, '_d');
        var index = 0;
        var offset = 0;
        var buffer, byteLength, length, klass;
        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new $ArrayBuffer(byteLength);
        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;
          if ($length === undefined) {
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if (TYPED_ARRAY in data) {
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }
        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });
        while (index < length) addElement(that, index++);
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if (!fails(function () {
      TypedArray(1);
    }) || !fails(function () {
      new TypedArray(-1); // eslint-disable-line no-new
    }) || !$iterDetect(function (iter) {
      new TypedArray(); // eslint-disable-line no-new
      new TypedArray(null); // eslint-disable-line no-new
      new TypedArray(1.5); // eslint-disable-line no-new
      new TypedArray(iter); // eslint-disable-line no-new
    }, true)) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME);
        var klass;
        // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645
        if (!isObject(data)) return new Base(toIndex(data));
        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          return $length !== undefined
            ? new Base(data, toOffset($offset, BYTES), $length)
            : $offset !== undefined
              ? new Base(data, toOffset($offset, BYTES))
              : new Base(data);
        }
        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
    }
    var $nativeIterator = TypedArrayPrototype[ITERATOR];
    var CORRECT_ITER_NAME = !!$nativeIterator
      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
    var $iterator = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
      dP(TypedArrayPrototype, TAG, {
        get: function () { return NAME; }
      });
    }

    O[NAME] = TypedArray;

    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES
    });

    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {
      from: $from,
      of: $of
    });

    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

    $export($export.P, NAME, proto);

    setSpecies(NAME);

    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });

    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;

    $export($export.P + $export.F * fails(function () {
      new TypedArray(1).slice();
    }), NAME, { slice: $slice });

    $export($export.P + $export.F * (fails(function () {
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
    }) || !fails(function () {
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, { toLocaleString: $toLocaleString });

    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function () { /* empty */ };


/***/ }),

/***/ "./node_modules/core-js/modules/_typed-buffer.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/_typed-buffer.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");
var LIBRARY = __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js");
var $typed = __webpack_require__(/*! ./_typed */ "./node_modules/core-js/modules/_typed.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var redefineAll = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/modules/_redefine-all.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/modules/_an-instance.js");
var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var toIndex = __webpack_require__(/*! ./_to-index */ "./node_modules/core-js/modules/_to-index.js");
var gOPN = __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js").f;
var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
var arrayFill = __webpack_require__(/*! ./_array-fill */ "./node_modules/core-js/modules/_array-fill.js");
var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js");
var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length!';
var WRONG_INDEX = 'Wrong index!';
var $ArrayBuffer = global[ARRAY_BUFFER];
var $DataView = global[DATA_VIEW];
var Math = global.Math;
var RangeError = global.RangeError;
// eslint-disable-next-line no-shadow-restricted-names
var Infinity = global.Infinity;
var BaseBuffer = $ArrayBuffer;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;
var BUFFER = 'buffer';
var BYTE_LENGTH = 'byteLength';
var BYTE_OFFSET = 'byteOffset';
var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
function packIEEE754(value, mLen, nBytes) {
  var buffer = new Array(nBytes);
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var i = 0;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  var e, m, c;
  value = abs(value);
  // eslint-disable-next-line no-self-compare
  if (value != value || value === Infinity) {
    // eslint-disable-next-line no-self-compare
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);
    if (value * (c = pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
  buffer[--i] |= s * 128;
  return buffer;
}
function unpackIEEE754(buffer, mLen, nBytes) {
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = eLen - 7;
  var i = nBytes - 1;
  var s = buffer[i--];
  var e = s & 127;
  var m;
  s >>= 7;
  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  } return (s ? -1 : 1) * m * pow(2, e - mLen);
}

function unpackI32(bytes) {
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
}
function packI8(it) {
  return [it & 0xff];
}
function packI16(it) {
  return [it & 0xff, it >> 8 & 0xff];
}
function packI32(it) {
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
}
function packF64(it) {
  return packIEEE754(it, 52, 8);
}
function packF32(it) {
  return packIEEE754(it, 23, 4);
}

function addGetter(C, key, internal) {
  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });
}

function get(view, bytes, index, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
}
function set(view, bytes, index, conversion, value, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = conversion(+value);
  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
}

if (!$typed.ABV) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
    var byteLength = toIndex(length);
    this._b = arrayFill.call(new Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH];
    var offset = toInteger(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if (DESCRIPTORS) {
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if (!fails(function () {
    $ArrayBuffer(1);
  }) || !fails(function () {
    new $ArrayBuffer(-1); // eslint-disable-line no-new
  }) || fails(function () {
    new $ArrayBuffer(); // eslint-disable-line no-new
    new $ArrayBuffer(1.5); // eslint-disable-line no-new
    new $ArrayBuffer(NaN); // eslint-disable-line no-new
    return $ArrayBuffer.name != ARRAY_BUFFER;
  })) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, $ArrayBuffer);
      return new BaseBuffer(toIndex(length));
    };
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
    }
    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var view = new $DataView(new $ArrayBuffer(2));
  var $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;


/***/ }),

/***/ "./node_modules/core-js/modules/_typed.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/modules/_typed.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var uid = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js");
var TYPED = uid('typed_array');
var VIEW = uid('view');
var ABV = !!(global.ArrayBuffer && global.DataView);
var CONSTR = ABV;
var i = 0;
var l = 9;
var Typed;

var TypedArrayConstructors = (
  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
).split(',');

while (i < l) {
  if (Typed = global[TypedArrayConstructors[i++]]) {
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV: ABV,
  CONSTR: CONSTR,
  TYPED: TYPED,
  VIEW: VIEW
};


/***/ }),

/***/ "./node_modules/core-js/modules/_uid.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_uid.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};


/***/ }),

/***/ "./node_modules/core-js/modules/_user-agent.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_user-agent.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';


/***/ }),

/***/ "./node_modules/core-js/modules/_validate-collection.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/_validate-collection.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_wks-define.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_wks-define.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js");
var LIBRARY = __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js");
var wksExt = __webpack_require__(/*! ./_wks-ext */ "./node_modules/core-js/modules/_wks-ext.js");
var defineProperty = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};


/***/ }),

/***/ "./node_modules/core-js/modules/_wks-ext.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_wks-ext.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js");


/***/ }),

/***/ "./node_modules/core-js/modules/_wks.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_wks.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__(/*! ./_shared */ "./node_modules/core-js/modules/_shared.js")('wks');
var uid = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js");
var Symbol = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;


/***/ }),

/***/ "./node_modules/core-js/modules/core.get-iterator-method.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/modules/core.get-iterator-method.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(/*! ./_classof */ "./node_modules/core-js/modules/_classof.js");
var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('iterator');
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");
module.exports = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js").getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};


/***/ }),

/***/ "./node_modules/core-js/modules/core.regexp.escape.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/core.regexp.escape.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/benjamingr/RexExp.escape
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $re = __webpack_require__(/*! ./_replacer */ "./node_modules/core-js/modules/_replacer.js")(/[\\^$*+?.()|[\]{}]/g, '\\$&');

$export($export.S, 'RegExp', { escape: function escape(it) { return $re(it); } });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.copy-within.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.copy-within.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.P, 'Array', { copyWithin: __webpack_require__(/*! ./_array-copy-within */ "./node_modules/core-js/modules/_array-copy-within.js") });

__webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/core-js/modules/_add-to-unscopables.js")('copyWithin');


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.every.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.every.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $every = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js")(4);

$export($export.P + $export.F * !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn /* , thisArg */) {
    return $every(this, callbackfn, arguments[1]);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.fill.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.fill.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.P, 'Array', { fill: __webpack_require__(/*! ./_array-fill */ "./node_modules/core-js/modules/_array-fill.js") });

__webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/core-js/modules/_add-to-unscopables.js")('fill');


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.filter.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.filter.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $filter = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js")(2);

$export($export.P + $export.F * !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments[1]);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.find-index.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.find-index.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $find = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js")(6);
var KEY = 'findIndex';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
__webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/core-js/modules/_add-to-unscopables.js")(KEY);


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.find.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.find.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $find = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js")(5);
var KEY = 'find';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
__webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/core-js/modules/_add-to-unscopables.js")(KEY);


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.for-each.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.for-each.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $forEach = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js")(0);
var STRICT = __webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")([].forEach, true);

$export($export.P + $export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn /* , thisArg */) {
    return $forEach(this, callbackfn, arguments[1]);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.from.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.from.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var call = __webpack_require__(/*! ./_iter-call */ "./node_modules/core-js/modules/_iter-call.js");
var isArrayIter = __webpack_require__(/*! ./_is-array-iter */ "./node_modules/core-js/modules/_is-array-iter.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var createProperty = __webpack_require__(/*! ./_create-property */ "./node_modules/core-js/modules/_create-property.js");
var getIterFn = __webpack_require__(/*! ./core.get-iterator-method */ "./node_modules/core-js/modules/core.get-iterator-method.js");

$export($export.S + $export.F * !__webpack_require__(/*! ./_iter-detect */ "./node_modules/core-js/modules/_iter-detect.js")(function (iter) { Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.index-of.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.index-of.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $indexOf = __webpack_require__(/*! ./_array-includes */ "./node_modules/core-js/modules/_array-includes.js")(false);
var $native = [].indexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? $native.apply(this, arguments) || 0
      : $indexOf(this, searchElement, arguments[1]);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.is-array.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.is-array.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Array', { isArray: __webpack_require__(/*! ./_is-array */ "./node_modules/core-js/modules/_is-array.js") });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.iterator.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.iterator.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var addToUnscopables = __webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/core-js/modules/_add-to-unscopables.js");
var step = __webpack_require__(/*! ./_iter-step */ "./node_modules/core-js/modules/_iter-step.js");
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = __webpack_require__(/*! ./_iter-define */ "./node_modules/core-js/modules/_iter-define.js")(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.join.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.join.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.13 Array.prototype.join(separator)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var arrayJoin = [].join;

// fallback for not array-like strings
$export($export.P + $export.F * (__webpack_require__(/*! ./_iobject */ "./node_modules/core-js/modules/_iobject.js") != Object || !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")(arrayJoin)), 'Array', {
  join: function join(separator) {
    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.last-index-of.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.last-index-of.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var $native = [].lastIndexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")($native)), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
    // convert -0 to +0
    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
    var O = toIObject(this);
    var length = toLength(O.length);
    var index = length - 1;
    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
    if (index < 0) index = length + index;
    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;
    return -1;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.map.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.map.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $map = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js")(1);

$export($export.P + $export.F * !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments[1]);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.of.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.of.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var createProperty = __webpack_require__(/*! ./_create-property */ "./node_modules/core-js/modules/_create-property.js");

// WebKit Array.of isn't generic
$export($export.S + $export.F * __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  function F() { /* empty */ }
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */) {
    var index = 0;
    var aLen = arguments.length;
    var result = new (typeof this == 'function' ? this : Array)(aLen);
    while (aLen > index) createProperty(result, index, arguments[index++]);
    result.length = aLen;
    return result;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.reduce-right.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.reduce-right.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $reduce = __webpack_require__(/*! ./_array-reduce */ "./node_modules/core-js/modules/_array-reduce.js");

$export($export.P + $export.F * !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.reduce.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.reduce.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $reduce = __webpack_require__(/*! ./_array-reduce */ "./node_modules/core-js/modules/_array-reduce.js");

$export($export.P + $export.F * !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.slice.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.slice.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var html = __webpack_require__(/*! ./_html */ "./node_modules/core-js/modules/_html.js");
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");
var toAbsoluteIndex = __webpack_require__(/*! ./_to-absolute-index */ "./node_modules/core-js/modules/_to-absolute-index.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var arraySlice = [].slice;

// fallback for not array-like ES3 strings and DOM objects
$export($export.P + $export.F * __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  if (html) arraySlice.call(html);
}), 'Array', {
  slice: function slice(begin, end) {
    var len = toLength(this.length);
    var klass = cof(this);
    end = end === undefined ? len : end;
    if (klass == 'Array') return arraySlice.call(this, begin, end);
    var start = toAbsoluteIndex(begin, len);
    var upTo = toAbsoluteIndex(end, len);
    var size = toLength(upTo - start);
    var cloned = new Array(size);
    var i = 0;
    for (; i < size; i++) cloned[i] = klass == 'String'
      ? this.charAt(start + i)
      : this[start + i];
    return cloned;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.some.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.some.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $some = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js")(3);

$export($export.P + $export.F * !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn /* , thisArg */) {
    return $some(this, callbackfn, arguments[1]);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.sort.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.sort.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var $sort = [].sort;
var test = [1, 2, 3];

$export($export.P + $export.F * (fails(function () {
  // IE8-
  test.sort(undefined);
}) || !fails(function () {
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn) {
    return comparefn === undefined
      ? $sort.call(toObject(this))
      : $sort.call(toObject(this), aFunction(comparefn));
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.species.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.species.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_set-species */ "./node_modules/core-js/modules/_set-species.js")('Array');


/***/ }),

/***/ "./node_modules/core-js/modules/es6.date.now.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.date.now.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.3.3.1 / 15.9.4.4 Date.now()
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Date', { now: function () { return new Date().getTime(); } });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.date.to-iso-string.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.date.to-iso-string.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toISOString = __webpack_require__(/*! ./_date-to-iso-string */ "./node_modules/core-js/modules/_date-to-iso-string.js");

// PhantomJS / old WebKit has a broken implementations
$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
  toISOString: toISOString
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.date.to-json.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.date.to-json.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");

$export($export.P + $export.F * __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return new Date(NaN).toJSON() !== null
    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;
}), 'Date', {
  // eslint-disable-next-line no-unused-vars
  toJSON: function toJSON(key) {
    var O = toObject(this);
    var pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.date.to-primitive.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.date.to-primitive.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var TO_PRIMITIVE = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('toPrimitive');
var proto = Date.prototype;

if (!(TO_PRIMITIVE in proto)) __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js")(proto, TO_PRIMITIVE, __webpack_require__(/*! ./_date-to-primitive */ "./node_modules/core-js/modules/_date-to-primitive.js"));


/***/ }),

/***/ "./node_modules/core-js/modules/es6.date.to-string.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.date.to-string.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var DateProto = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var $toString = DateProto[TO_STRING];
var getTime = DateProto.getTime;
if (new Date(NaN) + '' != INVALID_DATE) {
  __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js")(DateProto, TO_STRING, function toString() {
    var value = getTime.call(this);
    // eslint-disable-next-line no-self-compare
    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}


/***/ }),

/***/ "./node_modules/core-js/modules/es6.function.bind.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.function.bind.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.P, 'Function', { bind: __webpack_require__(/*! ./_bind */ "./node_modules/core-js/modules/_bind.js") });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.function.has-instance.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.function.has-instance.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");
var HAS_INSTANCE = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('hasInstance');
var FunctionProto = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if (!(HAS_INSTANCE in FunctionProto)) __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f(FunctionProto, HAS_INSTANCE, { value: function (O) {
  if (typeof this != 'function' || !isObject(O)) return false;
  if (!isObject(this.prototype)) return O instanceof this;
  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
  while (O = getPrototypeOf(O)) if (this.prototype === O) return true;
  return false;
} });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.function.name.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.function.name.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
var FProto = Function.prototype;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// 19.2.4.2 name
NAME in FProto || __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") && dP(FProto, NAME, {
  configurable: true,
  get: function () {
    try {
      return ('' + this).match(nameRE)[1];
    } catch (e) {
      return '';
    }
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.map.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/es6.map.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(/*! ./_collection-strong */ "./node_modules/core-js/modules/_collection-strong.js");
var validate = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/modules/_validate-collection.js");
var MAP = 'Map';

// 23.1 Map Objects
module.exports = __webpack_require__(/*! ./_collection */ "./node_modules/core-js/modules/_collection.js")(MAP, function (get) {
  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);


/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.acosh.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.acosh.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.3 Math.acosh(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var log1p = __webpack_require__(/*! ./_math-log1p */ "./node_modules/core-js/modules/_math-log1p.js");
var sqrt = Math.sqrt;
var $acosh = Math.acosh;

$export($export.S + $export.F * !($acosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN
  && $acosh(Infinity) == Infinity
), 'Math', {
  acosh: function acosh(x) {
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? Math.log(x) + Math.LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.asinh.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.asinh.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.5 Math.asinh(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $asinh = Math.asinh;

function asinh(x) {
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

// Tor Browser bug: Math.asinh(0) -> -0
$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.atanh.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.atanh.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.7 Math.atanh(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $atanh = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0
$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x) {
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.cbrt.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.cbrt.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.9 Math.cbrt(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var sign = __webpack_require__(/*! ./_math-sign */ "./node_modules/core-js/modules/_math-sign.js");

$export($export.S, 'Math', {
  cbrt: function cbrt(x) {
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.clz32.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.clz32.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.11 Math.clz32(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  clz32: function clz32(x) {
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.cosh.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.cosh.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.12 Math.cosh(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var exp = Math.exp;

$export($export.S, 'Math', {
  cosh: function cosh(x) {
    return (exp(x = +x) + exp(-x)) / 2;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.expm1.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.expm1.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.14 Math.expm1(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $expm1 = __webpack_require__(/*! ./_math-expm1 */ "./node_modules/core-js/modules/_math-expm1.js");

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.fround.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.fround.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.16 Math.fround(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', { fround: __webpack_require__(/*! ./_math-fround */ "./node_modules/core-js/modules/_math-fround.js") });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.hypot.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.hypot.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var abs = Math.abs;

$export($export.S, 'Math', {
  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;
    while (i < aLen) {
      arg = abs(arguments[i++]);
      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.imul.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.imul.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.18 Math.imul(x, y)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $imul = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y) {
    var UINT16 = 0xffff;
    var xn = +x;
    var yn = +y;
    var xl = UINT16 & xn;
    var yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.log10.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.log10.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.21 Math.log10(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  log10: function log10(x) {
    return Math.log(x) * Math.LOG10E;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.log1p.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.log1p.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.20 Math.log1p(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', { log1p: __webpack_require__(/*! ./_math-log1p */ "./node_modules/core-js/modules/_math-log1p.js") });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.log2.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.log2.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.22 Math.log2(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  log2: function log2(x) {
    return Math.log(x) / Math.LN2;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.sign.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.sign.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.28 Math.sign(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', { sign: __webpack_require__(/*! ./_math-sign */ "./node_modules/core-js/modules/_math-sign.js") });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.sinh.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.sinh.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.30 Math.sinh(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var expm1 = __webpack_require__(/*! ./_math-expm1 */ "./node_modules/core-js/modules/_math-expm1.js");
var exp = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x) {
    return Math.abs(x = +x) < 1
      ? (expm1(x) - expm1(-x)) / 2
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.tanh.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.tanh.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.33 Math.tanh(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var expm1 = __webpack_require__(/*! ./_math-expm1 */ "./node_modules/core-js/modules/_math-expm1.js");
var exp = Math.exp;

$export($export.S, 'Math', {
  tanh: function tanh(x) {
    var a = expm1(x = +x);
    var b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.trunc.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.trunc.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.34 Math.trunc(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  trunc: function trunc(it) {
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.constructor.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.constructor.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");
var inheritIfRequired = __webpack_require__(/*! ./_inherit-if-required */ "./node_modules/core-js/modules/_inherit-if-required.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var gOPN = __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js").f;
var gOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js").f;
var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
var $trim = __webpack_require__(/*! ./_string-trim */ "./node_modules/core-js/modules/_string-trim.js").trim;
var NUMBER = 'Number';
var $Number = global[NUMBER];
var Base = $Number;
var proto = $Number.prototype;
// Opera ~12 has broken Object#toString
var BROKEN_COF = cof(__webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js")(proto)) == NUMBER;
var TRIM = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function (argument) {
  var it = toPrimitive(argument, false);
  if (typeof it == 'string' && it.length > 2) {
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0);
    var third, radix, maxCode;
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
        default: return +it;
      }
      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
  $Number = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var that = this;
    return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)
        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for (var keys = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? gOPN(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++) {
    if (has(Base, key = keys[j]) && !has($Number, key)) {
      dP($Number, key, gOPD(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js")(global, NUMBER, $Number);
}


/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.epsilon.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.epsilon.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.1 Number.EPSILON
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.is-finite.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.is-finite.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.2 Number.isFinite(number)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var _isFinite = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it) {
    return typeof it == 'number' && _isFinite(it);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.is-integer.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.is-integer.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Number', { isInteger: __webpack_require__(/*! ./_is-integer */ "./node_modules/core-js/modules/_is-integer.js") });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.is-nan.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.is-nan.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.4 Number.isNaN(number)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Number', {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare
    return number != number;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.is-safe-integer.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.is-safe-integer.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.5 Number.isSafeInteger(number)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var isInteger = __webpack_require__(/*! ./_is-integer */ "./node_modules/core-js/modules/_is-integer.js");
var abs = Math.abs;

$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number) {
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.max-safe-integer.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.max-safe-integer.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.min-safe-integer.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.min-safe-integer.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.parse-float.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.parse-float.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $parseFloat = __webpack_require__(/*! ./_parse-float */ "./node_modules/core-js/modules/_parse-float.js");
// 20.1.2.12 Number.parseFloat(string)
$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.parse-int.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.parse-int.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $parseInt = __webpack_require__(/*! ./_parse-int */ "./node_modules/core-js/modules/_parse-int.js");
// 20.1.2.13 Number.parseInt(string, radix)
$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.to-fixed.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.to-fixed.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var aNumberValue = __webpack_require__(/*! ./_a-number-value */ "./node_modules/core-js/modules/_a-number-value.js");
var repeat = __webpack_require__(/*! ./_string-repeat */ "./node_modules/core-js/modules/_string-repeat.js");
var $toFixed = 1.0.toFixed;
var floor = Math.floor;
var data = [0, 0, 0, 0, 0, 0];
var ERROR = 'Number.toFixed: incorrect invocation!';
var ZERO = '0';

var multiply = function (n, c) {
  var i = -1;
  var c2 = c;
  while (++i < 6) {
    c2 += n * data[i];
    data[i] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};
var divide = function (n) {
  var i = 6;
  var c = 0;
  while (--i >= 0) {
    c += data[i];
    data[i] = floor(c / n);
    c = (c % n) * 1e7;
  }
};
var numToString = function () {
  var i = 6;
  var s = '';
  while (--i >= 0) {
    if (s !== '' || i === 0 || data[i] !== 0) {
      var t = String(data[i]);
      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
    }
  } return s;
};
var pow = function (x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};
var log = function (x) {
  var n = 0;
  var x2 = x;
  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }
  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  } return n;
};

$export($export.P + $export.F * (!!$toFixed && (
  0.00008.toFixed(3) !== '0.000' ||
  0.9.toFixed(0) !== '1' ||
  1.255.toFixed(2) !== '1.25' ||
  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
) || !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  // V8 ~ Android 4.3-
  $toFixed.call({});
})), 'Number', {
  toFixed: function toFixed(fractionDigits) {
    var x = aNumberValue(this, ERROR);
    var f = toInteger(fractionDigits);
    var s = '';
    var m = ZERO;
    var e, z, j, k;
    if (f < 0 || f > 20) throw RangeError(ERROR);
    // eslint-disable-next-line no-self-compare
    if (x != x) return 'NaN';
    if (x <= -1e21 || x >= 1e21) return String(x);
    if (x < 0) {
      s = '-';
      x = -x;
    }
    if (x > 1e-21) {
      e = log(x * pow(2, 69, 1)) - 69;
      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if (e > 0) {
        multiply(0, z);
        j = f;
        while (j >= 7) {
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while (j >= 23) {
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        m = numToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        m = numToString() + repeat.call(ZERO, f);
      }
    }
    if (f > 0) {
      k = m.length;
      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    } return m;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.to-precision.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.to-precision.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var aNumberValue = __webpack_require__(/*! ./_a-number-value */ "./node_modules/core-js/modules/_a-number-value.js");
var $toPrecision = 1.0.toPrecision;

$export($export.P + $export.F * ($fails(function () {
  // IE7-
  return $toPrecision.call(1, undefined) !== '1';
}) || !$fails(function () {
  // V8 ~ Android 4.3-
  $toPrecision.call({});
})), 'Number', {
  toPrecision: function toPrecision(precision) {
    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.assign.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.assign.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S + $export.F, 'Object', { assign: __webpack_require__(/*! ./_object-assign */ "./node_modules/core-js/modules/_object-assign.js") });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.create.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.create.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js") });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.define-properties.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.define-properties.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js"), 'Object', { defineProperties: __webpack_require__(/*! ./_object-dps */ "./node_modules/core-js/modules/_object-dps.js") });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.define-property.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.define-property.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js"), 'Object', { defineProperty: __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.freeze.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.freeze.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.5 Object.freeze(O)
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var meta = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js").onFreeze;

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('freeze', function ($freeze) {
  return function freeze(it) {
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.get-own-property-descriptor.js":
/*!********************************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.get-own-property-descriptor.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var $getOwnPropertyDescriptor = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js").f;

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('getOwnPropertyDescriptor', function () {
  return function getOwnPropertyDescriptor(it, key) {
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.get-own-property-names.js":
/*!***************************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.get-own-property-names.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 Object.getOwnPropertyNames(O)
__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('getOwnPropertyNames', function () {
  return __webpack_require__(/*! ./_object-gopn-ext */ "./node_modules/core-js/modules/_object-gopn-ext.js").f;
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.get-prototype-of.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.get-prototype-of.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var $getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return $getPrototypeOf(toObject(it));
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.is-extensible.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.is-extensible.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.11 Object.isExtensible(O)
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('isExtensible', function ($isExtensible) {
  return function isExtensible(it) {
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.is-frozen.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.is-frozen.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.12 Object.isFrozen(O)
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('isFrozen', function ($isFrozen) {
  return function isFrozen(it) {
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.is-sealed.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.is-sealed.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.13 Object.isSealed(O)
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('isSealed', function ($isSealed) {
  return function isSealed(it) {
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.is.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.is.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.10 Object.is(value1, value2)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
$export($export.S, 'Object', { is: __webpack_require__(/*! ./_same-value */ "./node_modules/core-js/modules/_same-value.js") });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.keys.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.keys.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 Object.keys(O)
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var $keys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.prevent-extensions.js":
/*!***********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.prevent-extensions.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.15 Object.preventExtensions(O)
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var meta = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js").onFreeze;

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('preventExtensions', function ($preventExtensions) {
  return function preventExtensions(it) {
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.seal.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.seal.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.17 Object.seal(O)
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var meta = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js").onFreeze;

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('seal', function ($seal) {
  return function seal(it) {
    return $seal && isObject(it) ? $seal(meta(it)) : it;
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.set-prototype-of.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.set-prototype-of.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(/*! ./_set-proto */ "./node_modules/core-js/modules/_set-proto.js").set });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.to-string.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.to-string.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.3.6 Object.prototype.toString()
var classof = __webpack_require__(/*! ./_classof */ "./node_modules/core-js/modules/_classof.js");
var test = {};
test[__webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('toStringTag')] = 'z';
if (test + '' != '[object z]') {
  __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js")(Object.prototype, 'toString', function toString() {
    return '[object ' + classof(this) + ']';
  }, true);
}


/***/ }),

/***/ "./node_modules/core-js/modules/es6.parse-float.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.parse-float.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $parseFloat = __webpack_require__(/*! ./_parse-float */ "./node_modules/core-js/modules/_parse-float.js");
// 18.2.4 parseFloat(string)
$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.parse-int.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.parse-int.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $parseInt = __webpack_require__(/*! ./_parse-int */ "./node_modules/core-js/modules/_parse-int.js");
// 18.2.5 parseInt(string, radix)
$export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.promise.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/es6.promise.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js");
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var classof = __webpack_require__(/*! ./_classof */ "./node_modules/core-js/modules/_classof.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/modules/_an-instance.js");
var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/core-js/modules/_for-of.js");
var speciesConstructor = __webpack_require__(/*! ./_species-constructor */ "./node_modules/core-js/modules/_species-constructor.js");
var task = __webpack_require__(/*! ./_task */ "./node_modules/core-js/modules/_task.js").set;
var microtask = __webpack_require__(/*! ./_microtask */ "./node_modules/core-js/modules/_microtask.js")();
var newPromiseCapabilityModule = __webpack_require__(/*! ./_new-promise-capability */ "./node_modules/core-js/modules/_new-promise-capability.js");
var perform = __webpack_require__(/*! ./_perform */ "./node_modules/core-js/modules/_perform.js");
var userAgent = __webpack_require__(/*! ./_user-agent */ "./node_modules/core-js/modules/_user-agent.js");
var promiseResolve = __webpack_require__(/*! ./_promise-resolve */ "./node_modules/core-js/modules/_promise-resolve.js");
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[__webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function')
      && promise.then(empty) instanceof FakePromise
      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      && v8.indexOf('6.6') !== 0
      && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/modules/_redefine-all.js")($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
__webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js")($Promise, PROMISE);
__webpack_require__(/*! ./_set-species */ "./node_modules/core-js/modules/_set-species.js")(PROMISE);
Wrapper = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js")[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(/*! ./_iter-detect */ "./node_modules/core-js/modules/_iter-detect.js")(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.apply.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.apply.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var rApply = (__webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").Reflect || {}).apply;
var fApply = Function.apply;
// MS Edge argumentsList argument is optional
$export($export.S + $export.F * !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  rApply(function () { /* empty */ });
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList) {
    var T = aFunction(target);
    var L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.construct.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.construct.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var create = __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js");
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var bind = __webpack_require__(/*! ./_bind */ "./node_modules/core-js/modules/_bind.js");
var rConstruct = (__webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function () {
  function F() { /* empty */ }
  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);
});
var ARGS_BUG = !fails(function () {
  rConstruct(function () { /* empty */ });
});

$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /* , newTarget */) {
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0: return new Target();
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args))();
    }
    // with altered newTarget, not support built-in constructors
    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.define-property.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.define-property.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  // eslint-disable-next-line no-undef
  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes) {
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch (e) {
      return false;
    }
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.delete-property.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.delete-property.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var gOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js").f;
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey) {
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.enumerate.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.enumerate.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 26.1.5 Reflect.enumerate(target)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var Enumerate = function (iterated) {
  this._t = anObject(iterated); // target
  this._i = 0;                  // next index
  var keys = this._k = [];      // keys
  var key;
  for (key in iterated) keys.push(key);
};
__webpack_require__(/*! ./_iter-create */ "./node_modules/core-js/modules/_iter-create.js")(Enumerate, 'Object', function () {
  var that = this;
  var keys = that._k;
  var key;
  do {
    if (that._i >= keys.length) return { value: undefined, done: true };
  } while (!((key = keys[that._i++]) in that._t));
  return { value: key, done: false };
});

$export($export.S, 'Reflect', {
  enumerate: function enumerate(target) {
    return new Enumerate(target);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.get-own-property-descriptor.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.get-own-property-descriptor.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
    return gOPD.f(anObject(target), propertyKey);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.get-prototype-of.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.get-prototype-of.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.8 Reflect.getPrototypeOf(target)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var getProto = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target) {
    return getProto(anObject(target));
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.get.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.get.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js");
var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

function get(target, propertyKey /* , receiver */) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var desc, proto;
  if (anObject(target) === receiver) return target[propertyKey];
  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')
    ? desc.value
    : desc.get !== undefined
      ? desc.get.call(receiver)
      : undefined;
  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', { get: get });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.has.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.has.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.9 Reflect.has(target, propertyKey)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey) {
    return propertyKey in target;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.is-extensible.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.is-extensible.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.10 Reflect.isExtensible(target)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var $isExtensible = Object.isExtensible;

$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target) {
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.own-keys.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.own-keys.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.11 Reflect.ownKeys(target)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Reflect', { ownKeys: __webpack_require__(/*! ./_own-keys */ "./node_modules/core-js/modules/_own-keys.js") });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.prevent-extensions.js":
/*!************************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.prevent-extensions.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.12 Reflect.preventExtensions(target)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var $preventExtensions = Object.preventExtensions;

$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target) {
    anObject(target);
    try {
      if ($preventExtensions) $preventExtensions(target);
      return true;
    } catch (e) {
      return false;
    }
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.set-prototype-of.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.set-prototype-of.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var setProto = __webpack_require__(/*! ./_set-proto */ "./node_modules/core-js/modules/_set-proto.js");

if (setProto) $export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto) {
    setProto.check(target, proto);
    try {
      setProto.set(target, proto);
      return true;
    } catch (e) {
      return false;
    }
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.set.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.set.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");
var gOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js");
var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

function set(target, propertyKey, V /* , receiver */) {
  var receiver = arguments.length < 4 ? target : arguments[3];
  var ownDesc = gOPD.f(anObject(target), propertyKey);
  var existingDescriptor, proto;
  if (!ownDesc) {
    if (isObject(proto = getPrototypeOf(target))) {
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = createDesc(0);
  }
  if (has(ownDesc, 'value')) {
    if (ownDesc.writable === false || !isObject(receiver)) return false;
    if (existingDescriptor = gOPD.f(receiver, propertyKey)) {
      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
      existingDescriptor.value = V;
      dP.f(receiver, propertyKey, existingDescriptor);
    } else dP.f(receiver, propertyKey, createDesc(0, V));
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', { set: set });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.constructor.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.constructor.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var inheritIfRequired = __webpack_require__(/*! ./_inherit-if-required */ "./node_modules/core-js/modules/_inherit-if-required.js");
var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
var gOPN = __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js").f;
var isRegExp = __webpack_require__(/*! ./_is-regexp */ "./node_modules/core-js/modules/_is-regexp.js");
var $flags = __webpack_require__(/*! ./_flags */ "./node_modules/core-js/modules/_flags.js");
var $RegExp = global.RegExp;
var Base = $RegExp;
var proto = $RegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;
// "new" creates a new object, old webkit buggy here
var CORRECT_NEW = new $RegExp(re1) !== re1;

if (__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") && (!CORRECT_NEW || __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  re2[__webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))) {
  $RegExp = function RegExp(p, f) {
    var tiRE = this instanceof $RegExp;
    var piRE = isRegExp(p);
    var fiU = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
      : inheritIfRequired(CORRECT_NEW
        ? new Base(piRE && !fiU ? p.source : p, f)
        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
      , tiRE ? this : proto, $RegExp);
  };
  var proxy = function (key) {
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function () { return Base[key]; },
      set: function (it) { Base[key] = it; }
    });
  };
  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js")(global, 'RegExp', $RegExp);
}

__webpack_require__(/*! ./_set-species */ "./node_modules/core-js/modules/_set-species.js")('RegExp');


/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.exec.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.exec.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var regexpExec = __webpack_require__(/*! ./_regexp-exec */ "./node_modules/core-js/modules/_regexp-exec.js");
__webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js")({
  target: 'RegExp',
  proto: true,
  forced: regexpExec !== /./.exec
}, {
  exec: regexpExec
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.flags.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.flags.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 21.2.5.3 get RegExp.prototype.flags()
if (__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") && /./g.flags != 'g') __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f(RegExp.prototype, 'flags', {
  configurable: true,
  get: __webpack_require__(/*! ./_flags */ "./node_modules/core-js/modules/_flags.js")
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.match.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.match.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var advanceStringIndex = __webpack_require__(/*! ./_advance-string-index */ "./node_modules/core-js/modules/_advance-string-index.js");
var regExpExec = __webpack_require__(/*! ./_regexp-exec-abstract */ "./node_modules/core-js/modules/_regexp-exec-abstract.js");

// @@match logic
__webpack_require__(/*! ./_fix-re-wks */ "./node_modules/core-js/modules/_fix-re-wks.js")('match', 1, function (defined, MATCH, $match, maybeCallNative) {
  return [
    // `String.prototype.match` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.match
    function match(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[MATCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
    },
    // `RegExp.prototype[@@match]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
    function (regexp) {
      var res = maybeCallNative($match, regexp, this);
      if (res.done) return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      if (!rx.global) return regExpExec(rx, S);
      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
      var A = [];
      var n = 0;
      var result;
      while ((result = regExpExec(rx, S)) !== null) {
        var matchStr = String(result[0]);
        A[n] = matchStr;
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
        n++;
      }
      return n === 0 ? null : A;
    }
  ];
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.replace.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.replace.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var advanceStringIndex = __webpack_require__(/*! ./_advance-string-index */ "./node_modules/core-js/modules/_advance-string-index.js");
var regExpExec = __webpack_require__(/*! ./_regexp-exec-abstract */ "./node_modules/core-js/modules/_regexp-exec-abstract.js");
var max = Math.max;
var min = Math.min;
var floor = Math.floor;
var SUBSTITUTION_SYMBOLS = /\$([$&`']|\d\d?|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&`']|\d\d?)/g;

var maybeToString = function (it) {
  return it === undefined ? it : String(it);
};

// @@replace logic
__webpack_require__(/*! ./_fix-re-wks */ "./node_modules/core-js/modules/_fix-re-wks.js")('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {
  return [
    // `String.prototype.replace` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.replace
    function replace(searchValue, replaceValue) {
      var O = defined(this);
      var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
      return fn !== undefined
        ? fn.call(searchValue, O, replaceValue)
        : $replace.call(String(O), searchValue, replaceValue);
    },
    // `RegExp.prototype[@@replace]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
    function (regexp, replaceValue) {
      var res = maybeCallNative($replace, regexp, this, replaceValue);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var functionalReplace = typeof replaceValue === 'function';
      if (!functionalReplace) replaceValue = String(replaceValue);
      var global = rx.global;
      if (global) {
        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
      }
      var results = [];
      while (true) {
        var result = regExpExec(rx, S);
        if (result === null) break;
        results.push(result);
        if (!global) break;
        var matchStr = String(result[0]);
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
      }
      var accumulatedResult = '';
      var nextSourcePosition = 0;
      for (var i = 0; i < results.length; i++) {
        result = results[i];
        var matched = String(result[0]);
        var position = max(min(toInteger(result.index), S.length), 0);
        var captures = [];
        // NOTE: This is equivalent to
        //   captures = result.slice(1).map(maybeToString)
        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
        var namedCaptures = result.groups;
        if (functionalReplace) {
          var replacerArgs = [matched].concat(captures, position, S);
          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
          var replacement = String(replaceValue.apply(undefined, replacerArgs));
        } else {
          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
        }
        if (position >= nextSourcePosition) {
          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
          nextSourcePosition = position + matched.length;
        }
      }
      return accumulatedResult + S.slice(nextSourcePosition);
    }
  ];

    // https://tc39.github.io/ecma262/#sec-getsubstitution
  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
    var tailPos = position + matched.length;
    var m = captures.length;
    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
    if (namedCaptures !== undefined) {
      namedCaptures = toObject(namedCaptures);
      symbols = SUBSTITUTION_SYMBOLS;
    }
    return $replace.call(replacement, symbols, function (match, ch) {
      var capture;
      switch (ch.charAt(0)) {
        case '$': return '$';
        case '&': return matched;
        case '`': return str.slice(0, position);
        case "'": return str.slice(tailPos);
        case '<':
          capture = namedCaptures[ch.slice(1, -1)];
          break;
        default: // \d\d?
          var n = +ch;
          if (n === 0) return match;
          if (n > m) {
            var f = floor(n / 10);
            if (f === 0) return match;
            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
            return match;
          }
          capture = captures[n - 1];
      }
      return capture === undefined ? '' : capture;
    });
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.search.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.search.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var sameValue = __webpack_require__(/*! ./_same-value */ "./node_modules/core-js/modules/_same-value.js");
var regExpExec = __webpack_require__(/*! ./_regexp-exec-abstract */ "./node_modules/core-js/modules/_regexp-exec-abstract.js");

// @@search logic
__webpack_require__(/*! ./_fix-re-wks */ "./node_modules/core-js/modules/_fix-re-wks.js")('search', 1, function (defined, SEARCH, $search, maybeCallNative) {
  return [
    // `String.prototype.search` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.search
    function search(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[SEARCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
    },
    // `RegExp.prototype[@@search]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
    function (regexp) {
      var res = maybeCallNative($search, regexp, this);
      if (res.done) return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      var previousLastIndex = rx.lastIndex;
      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
      var result = regExpExec(rx, S);
      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
      return result === null ? -1 : result.index;
    }
  ];
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.split.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.split.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isRegExp = __webpack_require__(/*! ./_is-regexp */ "./node_modules/core-js/modules/_is-regexp.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var speciesConstructor = __webpack_require__(/*! ./_species-constructor */ "./node_modules/core-js/modules/_species-constructor.js");
var advanceStringIndex = __webpack_require__(/*! ./_advance-string-index */ "./node_modules/core-js/modules/_advance-string-index.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var callRegExpExec = __webpack_require__(/*! ./_regexp-exec-abstract */ "./node_modules/core-js/modules/_regexp-exec-abstract.js");
var regexpExec = __webpack_require__(/*! ./_regexp-exec */ "./node_modules/core-js/modules/_regexp-exec.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var $min = Math.min;
var $push = [].push;
var $SPLIT = 'split';
var LENGTH = 'length';
var LAST_INDEX = 'lastIndex';
var MAX_UINT32 = 0xffffffff;

// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
var SUPPORTS_Y = !fails(function () { RegExp(MAX_UINT32, 'y'); });

// @@split logic
__webpack_require__(/*! ./_fix-re-wks */ "./node_modules/core-js/modules/_fix-re-wks.js")('split', 2, function (defined, SPLIT, $split, maybeCallNative) {
  var internalSplit;
  if (
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ) {
    // based on es5-shim implementation, need to rework it
    internalSplit = function (separator, limit) {
      var string = String(this);
      if (separator === undefined && limit === 0) return [];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) return $split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var match, lastIndex, lastLength;
      while (match = regexpExec.call(separatorCopy, string)) {
        lastIndex = separatorCopy[LAST_INDEX];
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if (output[LENGTH] >= splitLimit) break;
        }
        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if (lastLastIndex === string[LENGTH]) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
    internalSplit = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);
    };
  } else {
    internalSplit = $split;
  }

  return [
    // `String.prototype.split` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.split
    function split(separator, limit) {
      var O = defined(this);
      var splitter = separator == undefined ? undefined : separator[SPLIT];
      return splitter !== undefined
        ? splitter.call(separator, O, limit)
        : internalSplit.call(String(O), separator, limit);
    },
    // `RegExp.prototype[@@split]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
    //
    // NOTE: This cannot be properly polyfilled in engines that don't support
    // the 'y' flag.
    function (regexp, limit) {
      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var C = speciesConstructor(rx, RegExp);

      var unicodeMatching = rx.unicode;
      var flags = (rx.ignoreCase ? 'i' : '') +
                  (rx.multiline ? 'm' : '') +
                  (rx.unicode ? 'u' : '') +
                  (SUPPORTS_Y ? 'y' : 'g');

      // ^(? + rx + ) is needed, in combination with some S slicing, to
      // simulate the 'y' flag.
      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
      var p = 0;
      var q = 0;
      var A = [];
      while (q < S.length) {
        splitter.lastIndex = SUPPORTS_Y ? q : 0;
        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
        var e;
        if (
          z === null ||
          (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
        ) {
          q = advanceStringIndex(S, q, unicodeMatching);
        } else {
          A.push(S.slice(p, q));
          if (A.length === lim) return A;
          for (var i = 1; i <= z.length - 1; i++) {
            A.push(z[i]);
            if (A.length === lim) return A;
          }
          q = p = e;
        }
      }
      A.push(S.slice(p));
      return A;
    }
  ];
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.to-string.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.to-string.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

__webpack_require__(/*! ./es6.regexp.flags */ "./node_modules/core-js/modules/es6.regexp.flags.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var $flags = __webpack_require__(/*! ./_flags */ "./node_modules/core-js/modules/_flags.js");
var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");
var TO_STRING = 'toString';
var $toString = /./[TO_STRING];

var define = function (fn) {
  __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js")(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if (__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {
  define(function toString() {
    var R = anObject(this);
    return '/'.concat(R.source, '/',
      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
// FF44- RegExp#toString has a wrong name
} else if ($toString.name != TO_STRING) {
  define(function toString() {
    return $toString.call(this);
  });
}


/***/ }),

/***/ "./node_modules/core-js/modules/es6.set.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/es6.set.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(/*! ./_collection-strong */ "./node_modules/core-js/modules/_collection-strong.js");
var validate = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/modules/_validate-collection.js");
var SET = 'Set';

// 23.2 Set Objects
module.exports = __webpack_require__(/*! ./_collection */ "./node_modules/core-js/modules/_collection.js")(SET, function (get) {
  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
  }
}, strong);


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.anchor.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.anchor.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.2 String.prototype.anchor(name)
__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('anchor', function (createHTML) {
  return function anchor(name) {
    return createHTML(this, 'a', 'name', name);
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.big.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.big.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.3 String.prototype.big()
__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('big', function (createHTML) {
  return function big() {
    return createHTML(this, 'big', '', '');
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.blink.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.blink.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.4 String.prototype.blink()
__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('blink', function (createHTML) {
  return function blink() {
    return createHTML(this, 'blink', '', '');
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.bold.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.bold.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.5 String.prototype.bold()
__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('bold', function (createHTML) {
  return function bold() {
    return createHTML(this, 'b', '', '');
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.code-point-at.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.code-point-at.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $at = __webpack_require__(/*! ./_string-at */ "./node_modules/core-js/modules/_string-at.js")(false);
$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos) {
    return $at(this, pos);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.ends-with.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.ends-with.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var context = __webpack_require__(/*! ./_string-context */ "./node_modules/core-js/modules/_string-context.js");
var ENDS_WITH = 'endsWith';
var $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * __webpack_require__(/*! ./_fails-is-regexp */ "./node_modules/core-js/modules/_fails-is-regexp.js")(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = context(this, searchString, ENDS_WITH);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
    var search = String(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.fixed.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.fixed.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.6 String.prototype.fixed()
__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('fixed', function (createHTML) {
  return function fixed() {
    return createHTML(this, 'tt', '', '');
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.fontcolor.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.fontcolor.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.7 String.prototype.fontcolor(color)
__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('fontcolor', function (createHTML) {
  return function fontcolor(color) {
    return createHTML(this, 'font', 'color', color);
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.fontsize.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.fontsize.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.8 String.prototype.fontsize(size)
__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('fontsize', function (createHTML) {
  return function fontsize(size) {
    return createHTML(this, 'font', 'size', size);
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.from-code-point.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.from-code-point.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toAbsoluteIndex = __webpack_require__(/*! ./_to-absolute-index */ "./node_modules/core-js/modules/_to-absolute-index.js");
var fromCharCode = String.fromCharCode;
var $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
    var res = [];
    var aLen = arguments.length;
    var i = 0;
    var code;
    while (aLen > i) {
      code = +arguments[i++];
      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.includes.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.includes.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.7 String.prototype.includes(searchString, position = 0)

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var context = __webpack_require__(/*! ./_string-context */ "./node_modules/core-js/modules/_string-context.js");
var INCLUDES = 'includes';

$export($export.P + $export.F * __webpack_require__(/*! ./_fails-is-regexp */ "./node_modules/core-js/modules/_fails-is-regexp.js")(INCLUDES), 'String', {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~context(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.italics.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.italics.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.9 String.prototype.italics()
__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('italics', function (createHTML) {
  return function italics() {
    return createHTML(this, 'i', '', '');
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.iterator.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.iterator.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $at = __webpack_require__(/*! ./_string-at */ "./node_modules/core-js/modules/_string-at.js")(true);

// 21.1.3.27 String.prototype[@@iterator]()
__webpack_require__(/*! ./_iter-define */ "./node_modules/core-js/modules/_iter-define.js")(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.link.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.link.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.10 String.prototype.link(url)
__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('link', function (createHTML) {
  return function link(url) {
    return createHTML(this, 'a', 'href', url);
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.raw.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.raw.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite) {
    var tpl = toIObject(callSite.raw);
    var len = toLength(tpl.length);
    var aLen = arguments.length;
    var res = [];
    var i = 0;
    while (len > i) {
      res.push(String(tpl[i++]));
      if (i < aLen) res.push(String(arguments[i]));
    } return res.join('');
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.repeat.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.repeat.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: __webpack_require__(/*! ./_string-repeat */ "./node_modules/core-js/modules/_string-repeat.js")
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.small.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.small.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.11 String.prototype.small()
__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('small', function (createHTML) {
  return function small() {
    return createHTML(this, 'small', '', '');
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.starts-with.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.starts-with.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var context = __webpack_require__(/*! ./_string-context */ "./node_modules/core-js/modules/_string-context.js");
var STARTS_WITH = 'startsWith';
var $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * __webpack_require__(/*! ./_fails-is-regexp */ "./node_modules/core-js/modules/_fails-is-regexp.js")(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = context(this, searchString, STARTS_WITH);
    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.strike.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.strike.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.12 String.prototype.strike()
__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('strike', function (createHTML) {
  return function strike() {
    return createHTML(this, 'strike', '', '');
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.sub.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.sub.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.13 String.prototype.sub()
__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('sub', function (createHTML) {
  return function sub() {
    return createHTML(this, 'sub', '', '');
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.sup.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.sup.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.14 String.prototype.sup()
__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('sup', function (createHTML) {
  return function sup() {
    return createHTML(this, 'sup', '', '');
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.trim.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.trim.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 21.1.3.25 String.prototype.trim()
__webpack_require__(/*! ./_string-trim */ "./node_modules/core-js/modules/_string-trim.js")('trim', function ($trim) {
  return function trim() {
    return $trim(this, 3);
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.symbol.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/es6.symbol.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// ECMAScript 6 symbols shim
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
var META = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js").KEY;
var $fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var shared = __webpack_require__(/*! ./_shared */ "./node_modules/core-js/modules/_shared.js");
var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js");
var uid = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js");
var wks = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js");
var wksExt = __webpack_require__(/*! ./_wks-ext */ "./node_modules/core-js/modules/_wks-ext.js");
var wksDefine = __webpack_require__(/*! ./_wks-define */ "./node_modules/core-js/modules/_wks-define.js");
var enumKeys = __webpack_require__(/*! ./_enum-keys */ "./node_modules/core-js/modules/_enum-keys.js");
var isArray = __webpack_require__(/*! ./_is-array */ "./node_modules/core-js/modules/_is-array.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");
var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");
var _create = __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js");
var gOPNExt = __webpack_require__(/*! ./_object-gopn-ext */ "./node_modules/core-js/modules/_object-gopn-ext.js");
var $GOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js");
var $GOPS = __webpack_require__(/*! ./_object-gops */ "./node_modules/core-js/modules/_object-gops.js");
var $DP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");
var $keys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js").f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(/*! ./_object-pie */ "./node_modules/core-js/modules/_object-pie.js").f = $propertyIsEnumerable;
  $GOPS.f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !__webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js")) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
var FAILS_ON_PRIMITIVES = $fails(function () { $GOPS.f(1); });

$export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {
  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
    return $GOPS.f(toObject(it));
  }
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js")($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);


/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.array-buffer.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.array-buffer.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $typed = __webpack_require__(/*! ./_typed */ "./node_modules/core-js/modules/_typed.js");
var buffer = __webpack_require__(/*! ./_typed-buffer */ "./node_modules/core-js/modules/_typed-buffer.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var toAbsoluteIndex = __webpack_require__(/*! ./_to-absolute-index */ "./node_modules/core-js/modules/_to-absolute-index.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var ArrayBuffer = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").ArrayBuffer;
var speciesConstructor = __webpack_require__(/*! ./_species-constructor */ "./node_modules/core-js/modules/_species-constructor.js");
var $ArrayBuffer = buffer.ArrayBuffer;
var $DataView = buffer.DataView;
var $isView = $typed.ABV && ArrayBuffer.isView;
var $slice = $ArrayBuffer.prototype.slice;
var VIEW = $typed.VIEW;
var ARRAY_BUFFER = 'ArrayBuffer';

$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });

$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it) {
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});

$export($export.P + $export.U + $export.F * __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end) {
    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
    var len = anObject(this).byteLength;
    var first = toAbsoluteIndex(start, len);
    var fin = toAbsoluteIndex(end === undefined ? len : end, len);
    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));
    var viewS = new $DataView(this);
    var viewT = new $DataView(result);
    var index = 0;
    while (first < fin) {
      viewT.setUint8(index++, viewS.getUint8(first++));
    } return result;
  }
});

__webpack_require__(/*! ./_set-species */ "./node_modules/core-js/modules/_set-species.js")(ARRAY_BUFFER);


/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.data-view.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.data-view.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
$export($export.G + $export.W + $export.F * !__webpack_require__(/*! ./_typed */ "./node_modules/core-js/modules/_typed.js").ABV, {
  DataView: __webpack_require__(/*! ./_typed-buffer */ "./node_modules/core-js/modules/_typed-buffer.js").DataView
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.float32-array.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.float32-array.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_typed-array */ "./node_modules/core-js/modules/_typed-array.js")('Float32', 4, function (init) {
  return function Float32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.float64-array.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.float64-array.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_typed-array */ "./node_modules/core-js/modules/_typed-array.js")('Float64', 8, function (init) {
  return function Float64Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.int16-array.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.int16-array.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_typed-array */ "./node_modules/core-js/modules/_typed-array.js")('Int16', 2, function (init) {
  return function Int16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.int32-array.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.int32-array.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_typed-array */ "./node_modules/core-js/modules/_typed-array.js")('Int32', 4, function (init) {
  return function Int32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.int8-array.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.int8-array.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_typed-array */ "./node_modules/core-js/modules/_typed-array.js")('Int8', 1, function (init) {
  return function Int8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.uint16-array.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.uint16-array.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_typed-array */ "./node_modules/core-js/modules/_typed-array.js")('Uint16', 2, function (init) {
  return function Uint16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.uint32-array.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.uint32-array.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_typed-array */ "./node_modules/core-js/modules/_typed-array.js")('Uint32', 4, function (init) {
  return function Uint32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.uint8-array.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.uint8-array.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_typed-array */ "./node_modules/core-js/modules/_typed-array.js")('Uint8', 1, function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.uint8-clamped-array.js":
/*!***********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.uint8-clamped-array.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_typed-array */ "./node_modules/core-js/modules/_typed-array.js")('Uint8', 1, function (init) {
  return function Uint8ClampedArray(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
}, true);


/***/ }),

/***/ "./node_modules/core-js/modules/es6.weak-map.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.weak-map.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var each = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js")(0);
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
var meta = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js");
var assign = __webpack_require__(/*! ./_object-assign */ "./node_modules/core-js/modules/_object-assign.js");
var weak = __webpack_require__(/*! ./_collection-weak */ "./node_modules/core-js/modules/_collection-weak.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var validate = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/modules/_validate-collection.js");
var NATIVE_WEAK_MAP = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/modules/_validate-collection.js");
var IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;
var WEAK_MAP = 'WeakMap';
var getWeak = meta.getWeak;
var isExtensible = Object.isExtensible;
var uncaughtFrozenStore = weak.ufstore;
var InternalMap;

var wrapper = function (get) {
  return function WeakMap() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key) {
    if (isObject(key)) {
      var data = getWeak(key);
      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value) {
    return weak.def(validate(this, WEAK_MAP), key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = __webpack_require__(/*! ./_collection */ "./node_modules/core-js/modules/_collection.js")(WEAK_MAP, wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if (NATIVE_WEAK_MAP && IS_IE11) {
  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function (key) {
    var proto = $WeakMap.prototype;
    var method = proto[key];
    redefine(proto, key, function (a, b) {
      // store frozen objects on internal weakmap shim
      if (isObject(a) && !isExtensible(a)) {
        if (!this._f) this._f = new InternalMap();
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}


/***/ }),

/***/ "./node_modules/core-js/modules/es6.weak-set.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.weak-set.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var weak = __webpack_require__(/*! ./_collection-weak */ "./node_modules/core-js/modules/_collection-weak.js");
var validate = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/modules/_validate-collection.js");
var WEAK_SET = 'WeakSet';

// 23.4 WeakSet Objects
__webpack_require__(/*! ./_collection */ "./node_modules/core-js/modules/_collection.js")(WEAK_SET, function (get) {
  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value) {
    return weak.def(validate(this, WEAK_SET), value, true);
  }
}, weak, false, true);


/***/ }),

/***/ "./node_modules/core-js/modules/es7.array.flat-map.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.array.flat-map.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var flattenIntoArray = __webpack_require__(/*! ./_flatten-into-array */ "./node_modules/core-js/modules/_flatten-into-array.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var arraySpeciesCreate = __webpack_require__(/*! ./_array-species-create */ "./node_modules/core-js/modules/_array-species-create.js");

$export($export.P, 'Array', {
  flatMap: function flatMap(callbackfn /* , thisArg */) {
    var O = toObject(this);
    var sourceLen, A;
    aFunction(callbackfn);
    sourceLen = toLength(O.length);
    A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
    return A;
  }
});

__webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/core-js/modules/_add-to-unscopables.js")('flatMap');


/***/ }),

/***/ "./node_modules/core-js/modules/es7.array.flatten.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.array.flatten.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var flattenIntoArray = __webpack_require__(/*! ./_flatten-into-array */ "./node_modules/core-js/modules/_flatten-into-array.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var arraySpeciesCreate = __webpack_require__(/*! ./_array-species-create */ "./node_modules/core-js/modules/_array-species-create.js");

$export($export.P, 'Array', {
  flatten: function flatten(/* depthArg = 1 */) {
    var depthArg = arguments[0];
    var O = toObject(this);
    var sourceLen = toLength(O.length);
    var A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
    return A;
  }
});

__webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/core-js/modules/_add-to-unscopables.js")('flatten');


/***/ }),

/***/ "./node_modules/core-js/modules/es7.array.includes.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.array.includes.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/Array.prototype.includes
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $includes = __webpack_require__(/*! ./_array-includes */ "./node_modules/core-js/modules/_array-includes.js")(true);

$export($export.P, 'Array', {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

__webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/core-js/modules/_add-to-unscopables.js")('includes');


/***/ }),

/***/ "./node_modules/core-js/modules/es7.asap.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/es7.asap.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var microtask = __webpack_require__(/*! ./_microtask */ "./node_modules/core-js/modules/_microtask.js")();
var process = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").process;
var isNode = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js")(process) == 'process';

$export($export.G, {
  asap: function asap(fn) {
    var domain = isNode && process.domain;
    microtask(domain ? domain.bind(fn) : fn);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.error.is-error.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.error.is-error.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/ljharb/proposal-is-error
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");

$export($export.S, 'Error', {
  isError: function isError(it) {
    return cof(it) === 'Error';
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.global.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/es7.global.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-global
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.G, { global: __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js") });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.map.from.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/es7.map.from.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
__webpack_require__(/*! ./_set-collection-from */ "./node_modules/core-js/modules/_set-collection-from.js")('Map');


/***/ }),

/***/ "./node_modules/core-js/modules/es7.map.of.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/es7.map.of.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
__webpack_require__(/*! ./_set-collection-of */ "./node_modules/core-js/modules/_set-collection-of.js")('Map');


/***/ }),

/***/ "./node_modules/core-js/modules/es7.map.to-json.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.map.to-json.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.P + $export.R, 'Map', { toJSON: __webpack_require__(/*! ./_collection-to-json */ "./node_modules/core-js/modules/_collection-to-json.js")('Map') });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.math.clamp.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.math.clamp.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  clamp: function clamp(x, lower, upper) {
    return Math.min(upper, Math.max(lower, x));
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.math.deg-per-rad.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.math.deg-per-rad.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', { DEG_PER_RAD: Math.PI / 180 });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.math.degrees.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.math.degrees.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var RAD_PER_DEG = 180 / Math.PI;

$export($export.S, 'Math', {
  degrees: function degrees(radians) {
    return radians * RAD_PER_DEG;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.math.fscale.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.math.fscale.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var scale = __webpack_require__(/*! ./_math-scale */ "./node_modules/core-js/modules/_math-scale.js");
var fround = __webpack_require__(/*! ./_math-fround */ "./node_modules/core-js/modules/_math-fround.js");

$export($export.S, 'Math', {
  fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {
    return fround(scale(x, inLow, inHigh, outLow, outHigh));
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.math.iaddh.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.math.iaddh.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  iaddh: function iaddh(x0, x1, y0, y1) {
    var $x0 = x0 >>> 0;
    var $x1 = x1 >>> 0;
    var $y0 = y0 >>> 0;
    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.math.imulh.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.math.imulh.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  imulh: function imulh(u, v) {
    var UINT16 = 0xffff;
    var $u = +u;
    var $v = +v;
    var u0 = $u & UINT16;
    var v0 = $v & UINT16;
    var u1 = $u >> 16;
    var v1 = $v >> 16;
    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.math.isubh.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.math.isubh.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  isubh: function isubh(x0, x1, y0, y1) {
    var $x0 = x0 >>> 0;
    var $x1 = x1 >>> 0;
    var $y0 = y0 >>> 0;
    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.math.rad-per-deg.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.math.rad-per-deg.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', { RAD_PER_DEG: 180 / Math.PI });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.math.radians.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.math.radians.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var DEG_PER_RAD = Math.PI / 180;

$export($export.S, 'Math', {
  radians: function radians(degrees) {
    return degrees * DEG_PER_RAD;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.math.scale.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.math.scale.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', { scale: __webpack_require__(/*! ./_math-scale */ "./node_modules/core-js/modules/_math-scale.js") });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.math.signbit.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.math.signbit.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// http://jfbastien.github.io/papers/Math.signbit.html
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', { signbit: function signbit(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0;
} });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.math.umulh.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.math.umulh.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  umulh: function umulh(u, v) {
    var UINT16 = 0xffff;
    var $u = +u;
    var $v = +v;
    var u0 = $u & UINT16;
    var v0 = $v & UINT16;
    var u1 = $u >>> 16;
    var v1 = $v >>> 16;
    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.object.define-getter.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.object.define-getter.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var $defineProperty = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");

// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") && $export($export.P + __webpack_require__(/*! ./_object-forced-pam */ "./node_modules/core-js/modules/_object-forced-pam.js"), 'Object', {
  __defineGetter__: function __defineGetter__(P, getter) {
    $defineProperty.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.object.define-setter.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.object.define-setter.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var $defineProperty = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");

// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") && $export($export.P + __webpack_require__(/*! ./_object-forced-pam */ "./node_modules/core-js/modules/_object-forced-pam.js"), 'Object', {
  __defineSetter__: function __defineSetter__(P, setter) {
    $defineProperty.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.object.entries.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.object.entries.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-values-entries
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $entries = __webpack_require__(/*! ./_object-to-array */ "./node_modules/core-js/modules/_object-to-array.js")(true);

$export($export.S, 'Object', {
  entries: function entries(it) {
    return $entries(it);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.object.get-own-property-descriptors.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.object.get-own-property-descriptors.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var ownKeys = __webpack_require__(/*! ./_own-keys */ "./node_modules/core-js/modules/_own-keys.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var gOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js");
var createProperty = __webpack_require__(/*! ./_create-property */ "./node_modules/core-js/modules/_create-property.js");

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
    var O = toIObject(object);
    var getDesc = gOPD.f;
    var keys = ownKeys(O);
    var result = {};
    var i = 0;
    var key, desc;
    while (keys.length > i) {
      desc = getDesc(O, key = keys[i++]);
      if (desc !== undefined) createProperty(result, key, desc);
    }
    return result;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.object.lookup-getter.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.object.lookup-getter.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");
var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");
var getOwnPropertyDescriptor = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js").f;

// B.2.2.4 Object.prototype.__lookupGetter__(P)
__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") && $export($export.P + __webpack_require__(/*! ./_object-forced-pam */ "./node_modules/core-js/modules/_object-forced-pam.js"), 'Object', {
  __lookupGetter__: function __lookupGetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;
    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.get;
    } while (O = getPrototypeOf(O));
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.object.lookup-setter.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.object.lookup-setter.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");
var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");
var getOwnPropertyDescriptor = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js").f;

// B.2.2.5 Object.prototype.__lookupSetter__(P)
__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") && $export($export.P + __webpack_require__(/*! ./_object-forced-pam */ "./node_modules/core-js/modules/_object-forced-pam.js"), 'Object', {
  __lookupSetter__: function __lookupSetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;
    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.set;
    } while (O = getPrototypeOf(O));
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.object.values.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.object.values.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-values-entries
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $values = __webpack_require__(/*! ./_object-to-array */ "./node_modules/core-js/modules/_object-to-array.js")(false);

$export($export.S, 'Object', {
  values: function values(it) {
    return $values(it);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.observable.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.observable.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/zenparsing/es-observable
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js");
var microtask = __webpack_require__(/*! ./_microtask */ "./node_modules/core-js/modules/_microtask.js")();
var OBSERVABLE = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('observable');
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/modules/_an-instance.js");
var redefineAll = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/modules/_redefine-all.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/core-js/modules/_for-of.js");
var RETURN = forOf.RETURN;

var getMethod = function (fn) {
  return fn == null ? undefined : aFunction(fn);
};

var cleanupSubscription = function (subscription) {
  var cleanup = subscription._c;
  if (cleanup) {
    subscription._c = undefined;
    cleanup();
  }
};

var subscriptionClosed = function (subscription) {
  return subscription._o === undefined;
};

var closeSubscription = function (subscription) {
  if (!subscriptionClosed(subscription)) {
    subscription._o = undefined;
    cleanupSubscription(subscription);
  }
};

var Subscription = function (observer, subscriber) {
  anObject(observer);
  this._c = undefined;
  this._o = observer;
  observer = new SubscriptionObserver(this);
  try {
    var cleanup = subscriber(observer);
    var subscription = cleanup;
    if (cleanup != null) {
      if (typeof cleanup.unsubscribe === 'function') cleanup = function () { subscription.unsubscribe(); };
      else aFunction(cleanup);
      this._c = cleanup;
    }
  } catch (e) {
    observer.error(e);
    return;
  } if (subscriptionClosed(this)) cleanupSubscription(this);
};

Subscription.prototype = redefineAll({}, {
  unsubscribe: function unsubscribe() { closeSubscription(this); }
});

var SubscriptionObserver = function (subscription) {
  this._s = subscription;
};

SubscriptionObserver.prototype = redefineAll({}, {
  next: function next(value) {
    var subscription = this._s;
    if (!subscriptionClosed(subscription)) {
      var observer = subscription._o;
      try {
        var m = getMethod(observer.next);
        if (m) return m.call(observer, value);
      } catch (e) {
        try {
          closeSubscription(subscription);
        } finally {
          throw e;
        }
      }
    }
  },
  error: function error(value) {
    var subscription = this._s;
    if (subscriptionClosed(subscription)) throw value;
    var observer = subscription._o;
    subscription._o = undefined;
    try {
      var m = getMethod(observer.error);
      if (!m) throw value;
      value = m.call(observer, value);
    } catch (e) {
      try {
        cleanupSubscription(subscription);
      } finally {
        throw e;
      }
    } cleanupSubscription(subscription);
    return value;
  },
  complete: function complete(value) {
    var subscription = this._s;
    if (!subscriptionClosed(subscription)) {
      var observer = subscription._o;
      subscription._o = undefined;
      try {
        var m = getMethod(observer.complete);
        value = m ? m.call(observer, value) : undefined;
      } catch (e) {
        try {
          cleanupSubscription(subscription);
        } finally {
          throw e;
        }
      } cleanupSubscription(subscription);
      return value;
    }
  }
});

var $Observable = function Observable(subscriber) {
  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
};

redefineAll($Observable.prototype, {
  subscribe: function subscribe(observer) {
    return new Subscription(observer, this._f);
  },
  forEach: function forEach(fn) {
    var that = this;
    return new (core.Promise || global.Promise)(function (resolve, reject) {
      aFunction(fn);
      var subscription = that.subscribe({
        next: function (value) {
          try {
            return fn(value);
          } catch (e) {
            reject(e);
            subscription.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
    });
  }
});

redefineAll($Observable, {
  from: function from(x) {
    var C = typeof this === 'function' ? this : $Observable;
    var method = getMethod(anObject(x)[OBSERVABLE]);
    if (method) {
      var observable = anObject(method.call(x));
      return observable.constructor === C ? observable : new C(function (observer) {
        return observable.subscribe(observer);
      });
    }
    return new C(function (observer) {
      var done = false;
      microtask(function () {
        if (!done) {
          try {
            if (forOf(x, false, function (it) {
              observer.next(it);
              if (done) return RETURN;
            }) === RETURN) return;
          } catch (e) {
            if (done) throw e;
            observer.error(e);
            return;
          } observer.complete();
        }
      });
      return function () { done = true; };
    });
  },
  of: function of() {
    for (var i = 0, l = arguments.length, items = new Array(l); i < l;) items[i] = arguments[i++];
    return new (typeof this === 'function' ? this : $Observable)(function (observer) {
      var done = false;
      microtask(function () {
        if (!done) {
          for (var j = 0; j < items.length; ++j) {
            observer.next(items[j]);
            if (done) return;
          } observer.complete();
        }
      });
      return function () { done = true; };
    });
  }
});

hide($Observable.prototype, OBSERVABLE, function () { return this; });

$export($export.G, { Observable: $Observable });

__webpack_require__(/*! ./_set-species */ "./node_modules/core-js/modules/_set-species.js")('Observable');


/***/ }),

/***/ "./node_modules/core-js/modules/es7.promise.finally.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.promise.finally.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// https://github.com/tc39/proposal-promise-finally

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js");
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var speciesConstructor = __webpack_require__(/*! ./_species-constructor */ "./node_modules/core-js/modules/_species-constructor.js");
var promiseResolve = __webpack_require__(/*! ./_promise-resolve */ "./node_modules/core-js/modules/_promise-resolve.js");

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.promise.try.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.promise.try.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-promise-try
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var newPromiseCapability = __webpack_require__(/*! ./_new-promise-capability */ "./node_modules/core-js/modules/_new-promise-capability.js");
var perform = __webpack_require__(/*! ./_perform */ "./node_modules/core-js/modules/_perform.js");

$export($export.S, 'Promise', { 'try': function (callbackfn) {
  var promiseCapability = newPromiseCapability.f(this);
  var result = perform(callbackfn);
  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
  return promiseCapability.promise;
} });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.reflect.define-metadata.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.reflect.define-metadata.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(/*! ./_metadata */ "./node_modules/core-js/modules/_metadata.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var toMetaKey = metadata.key;
var ordinaryDefineOwnMetadata = metadata.set;

metadata.exp({ defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {
  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
} });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.reflect.delete-metadata.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.reflect.delete-metadata.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(/*! ./_metadata */ "./node_modules/core-js/modules/_metadata.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var toMetaKey = metadata.key;
var getOrCreateMetadataMap = metadata.map;
var store = metadata.store;

metadata.exp({ deleteMetadata: function deleteMetadata(metadataKey, target /* , targetKey */) {
  var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);
  var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
  if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;
  if (metadataMap.size) return true;
  var targetMetadata = store.get(target);
  targetMetadata['delete'](targetKey);
  return !!targetMetadata.size || store['delete'](target);
} });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.reflect.get-metadata-keys.js":
/*!***********************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.reflect.get-metadata-keys.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Set = __webpack_require__(/*! ./es6.set */ "./node_modules/core-js/modules/es6.set.js");
var from = __webpack_require__(/*! ./_array-from-iterable */ "./node_modules/core-js/modules/_array-from-iterable.js");
var metadata = __webpack_require__(/*! ./_metadata */ "./node_modules/core-js/modules/_metadata.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");
var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;

var ordinaryMetadataKeys = function (O, P) {
  var oKeys = ordinaryOwnMetadataKeys(O, P);
  var parent = getPrototypeOf(O);
  if (parent === null) return oKeys;
  var pKeys = ordinaryMetadataKeys(parent, P);
  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
};

metadata.exp({ getMetadataKeys: function getMetadataKeys(target /* , targetKey */) {
  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
} });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.reflect.get-metadata.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.reflect.get-metadata.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(/*! ./_metadata */ "./node_modules/core-js/modules/_metadata.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");
var ordinaryHasOwnMetadata = metadata.has;
var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;

var ordinaryGetMetadata = function (MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
};

metadata.exp({ getMetadata: function getMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.reflect.get-own-metadata-keys.js":
/*!***************************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.reflect.get-own-metadata-keys.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(/*! ./_metadata */ "./node_modules/core-js/modules/_metadata.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;

metadata.exp({ getOwnMetadataKeys: function getOwnMetadataKeys(target /* , targetKey */) {
  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
} });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.reflect.get-own-metadata.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.reflect.get-own-metadata.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(/*! ./_metadata */ "./node_modules/core-js/modules/_metadata.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;

metadata.exp({ getOwnMetadata: function getOwnMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryGetOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.reflect.has-metadata.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.reflect.has-metadata.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(/*! ./_metadata */ "./node_modules/core-js/modules/_metadata.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");
var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;

var ordinaryHasMetadata = function (MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if (hasOwn) return true;
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
};

metadata.exp({ hasMetadata: function hasMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.reflect.has-own-metadata.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.reflect.has-own-metadata.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(/*! ./_metadata */ "./node_modules/core-js/modules/_metadata.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;

metadata.exp({ hasOwnMetadata: function hasOwnMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryHasOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.reflect.metadata.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.reflect.metadata.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $metadata = __webpack_require__(/*! ./_metadata */ "./node_modules/core-js/modules/_metadata.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var toMetaKey = $metadata.key;
var ordinaryDefineOwnMetadata = $metadata.set;

$metadata.exp({ metadata: function metadata(metadataKey, metadataValue) {
  return function decorator(target, targetKey) {
    ordinaryDefineOwnMetadata(
      metadataKey, metadataValue,
      (targetKey !== undefined ? anObject : aFunction)(target),
      toMetaKey(targetKey)
    );
  };
} });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.set.from.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/es7.set.from.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
__webpack_require__(/*! ./_set-collection-from */ "./node_modules/core-js/modules/_set-collection-from.js")('Set');


/***/ }),

/***/ "./node_modules/core-js/modules/es7.set.of.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/es7.set.of.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
__webpack_require__(/*! ./_set-collection-of */ "./node_modules/core-js/modules/_set-collection-of.js")('Set');


/***/ }),

/***/ "./node_modules/core-js/modules/es7.set.to-json.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.set.to-json.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.P + $export.R, 'Set', { toJSON: __webpack_require__(/*! ./_collection-to-json */ "./node_modules/core-js/modules/_collection-to-json.js")('Set') });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.string.at.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es7.string.at.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/mathiasbynens/String.prototype.at
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $at = __webpack_require__(/*! ./_string-at */ "./node_modules/core-js/modules/_string-at.js")(true);

$export($export.P, 'String', {
  at: function at(pos) {
    return $at(this, pos);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.string.match-all.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.string.match-all.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/String.prototype.matchAll/
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var isRegExp = __webpack_require__(/*! ./_is-regexp */ "./node_modules/core-js/modules/_is-regexp.js");
var getFlags = __webpack_require__(/*! ./_flags */ "./node_modules/core-js/modules/_flags.js");
var RegExpProto = RegExp.prototype;

var $RegExpStringIterator = function (regexp, string) {
  this._r = regexp;
  this._s = string;
};

__webpack_require__(/*! ./_iter-create */ "./node_modules/core-js/modules/_iter-create.js")($RegExpStringIterator, 'RegExp String', function next() {
  var match = this._r.exec(this._s);
  return { value: match, done: match === null };
});

$export($export.P, 'String', {
  matchAll: function matchAll(regexp) {
    defined(this);
    if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');
    var S = String(this);
    var flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp);
    var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
    rx.lastIndex = toLength(regexp.lastIndex);
    return new $RegExpStringIterator(rx, S);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.string.pad-end.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.string.pad-end.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-string-pad-start-end
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $pad = __webpack_require__(/*! ./_string-pad */ "./node_modules/core-js/modules/_string-pad.js");
var userAgent = __webpack_require__(/*! ./_user-agent */ "./node_modules/core-js/modules/_user-agent.js");

// https://github.com/zloirock/core-js/issues/280
var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);

$export($export.P + $export.F * WEBKIT_BUG, 'String', {
  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.string.pad-start.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.string.pad-start.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-string-pad-start-end
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $pad = __webpack_require__(/*! ./_string-pad */ "./node_modules/core-js/modules/_string-pad.js");
var userAgent = __webpack_require__(/*! ./_user-agent */ "./node_modules/core-js/modules/_user-agent.js");

// https://github.com/zloirock/core-js/issues/280
var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);

$export($export.P + $export.F * WEBKIT_BUG, 'String', {
  padStart: function padStart(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.string.trim-left.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.string.trim-left.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
__webpack_require__(/*! ./_string-trim */ "./node_modules/core-js/modules/_string-trim.js")('trimLeft', function ($trim) {
  return function trimLeft() {
    return $trim(this, 1);
  };
}, 'trimStart');


/***/ }),

/***/ "./node_modules/core-js/modules/es7.string.trim-right.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.string.trim-right.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
__webpack_require__(/*! ./_string-trim */ "./node_modules/core-js/modules/_string-trim.js")('trimRight', function ($trim) {
  return function trimRight() {
    return $trim(this, 2);
  };
}, 'trimEnd');


/***/ }),

/***/ "./node_modules/core-js/modules/es7.symbol.async-iterator.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.symbol.async-iterator.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_wks-define */ "./node_modules/core-js/modules/_wks-define.js")('asyncIterator');


/***/ }),

/***/ "./node_modules/core-js/modules/es7.symbol.observable.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.symbol.observable.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_wks-define */ "./node_modules/core-js/modules/_wks-define.js")('observable');


/***/ }),

/***/ "./node_modules/core-js/modules/es7.system.global.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.system.global.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-global
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'System', { global: __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js") });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.weak-map.from.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.weak-map.from.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from
__webpack_require__(/*! ./_set-collection-from */ "./node_modules/core-js/modules/_set-collection-from.js")('WeakMap');


/***/ }),

/***/ "./node_modules/core-js/modules/es7.weak-map.of.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.weak-map.of.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of
__webpack_require__(/*! ./_set-collection-of */ "./node_modules/core-js/modules/_set-collection-of.js")('WeakMap');


/***/ }),

/***/ "./node_modules/core-js/modules/es7.weak-set.from.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.weak-set.from.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from
__webpack_require__(/*! ./_set-collection-from */ "./node_modules/core-js/modules/_set-collection-from.js")('WeakSet');


/***/ }),

/***/ "./node_modules/core-js/modules/es7.weak-set.of.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.weak-set.of.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of
__webpack_require__(/*! ./_set-collection-of */ "./node_modules/core-js/modules/_set-collection-of.js")('WeakSet');


/***/ }),

/***/ "./node_modules/core-js/modules/web.dom.iterable.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/web.dom.iterable.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $iterators = __webpack_require__(/*! ./es6.array.iterator */ "./node_modules/core-js/modules/es6.array.iterator.js");
var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");
var wks = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js");
var ITERATOR = wks('iterator');
var TO_STRING_TAG = wks('toStringTag');
var ArrayValues = Iterators.Array;

var DOMIterables = {
  CSSRuleList: true, // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true, // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true, // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  var key;
  if (proto) {
    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
  }
}


/***/ }),

/***/ "./node_modules/core-js/modules/web.immediate.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/web.immediate.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $task = __webpack_require__(/*! ./_task */ "./node_modules/core-js/modules/_task.js");
$export($export.G + $export.B, {
  setImmediate: $task.set,
  clearImmediate: $task.clear
});


/***/ }),

/***/ "./node_modules/core-js/modules/web.timers.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/web.timers.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// ie9- setTimeout & setInterval additional parameters fix
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var userAgent = __webpack_require__(/*! ./_user-agent */ "./node_modules/core-js/modules/_user-agent.js");
var slice = [].slice;
var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check
var wrap = function (set) {
  return function (fn, time /* , ...args */) {
    var boundArgs = arguments.length > 2;
    var args = boundArgs ? slice.call(arguments, 2) : false;
    return set(boundArgs ? function () {
      // eslint-disable-next-line no-new-func
      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
    } : fn, time);
  };
};
$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout: wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});


/***/ }),

/***/ "./node_modules/core-js/shim.js":
/*!**************************************!*\
  !*** ./node_modules/core-js/shim.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./modules/es6.symbol */ "./node_modules/core-js/modules/es6.symbol.js");
__webpack_require__(/*! ./modules/es6.object.create */ "./node_modules/core-js/modules/es6.object.create.js");
__webpack_require__(/*! ./modules/es6.object.define-property */ "./node_modules/core-js/modules/es6.object.define-property.js");
__webpack_require__(/*! ./modules/es6.object.define-properties */ "./node_modules/core-js/modules/es6.object.define-properties.js");
__webpack_require__(/*! ./modules/es6.object.get-own-property-descriptor */ "./node_modules/core-js/modules/es6.object.get-own-property-descriptor.js");
__webpack_require__(/*! ./modules/es6.object.get-prototype-of */ "./node_modules/core-js/modules/es6.object.get-prototype-of.js");
__webpack_require__(/*! ./modules/es6.object.keys */ "./node_modules/core-js/modules/es6.object.keys.js");
__webpack_require__(/*! ./modules/es6.object.get-own-property-names */ "./node_modules/core-js/modules/es6.object.get-own-property-names.js");
__webpack_require__(/*! ./modules/es6.object.freeze */ "./node_modules/core-js/modules/es6.object.freeze.js");
__webpack_require__(/*! ./modules/es6.object.seal */ "./node_modules/core-js/modules/es6.object.seal.js");
__webpack_require__(/*! ./modules/es6.object.prevent-extensions */ "./node_modules/core-js/modules/es6.object.prevent-extensions.js");
__webpack_require__(/*! ./modules/es6.object.is-frozen */ "./node_modules/core-js/modules/es6.object.is-frozen.js");
__webpack_require__(/*! ./modules/es6.object.is-sealed */ "./node_modules/core-js/modules/es6.object.is-sealed.js");
__webpack_require__(/*! ./modules/es6.object.is-extensible */ "./node_modules/core-js/modules/es6.object.is-extensible.js");
__webpack_require__(/*! ./modules/es6.object.assign */ "./node_modules/core-js/modules/es6.object.assign.js");
__webpack_require__(/*! ./modules/es6.object.is */ "./node_modules/core-js/modules/es6.object.is.js");
__webpack_require__(/*! ./modules/es6.object.set-prototype-of */ "./node_modules/core-js/modules/es6.object.set-prototype-of.js");
__webpack_require__(/*! ./modules/es6.object.to-string */ "./node_modules/core-js/modules/es6.object.to-string.js");
__webpack_require__(/*! ./modules/es6.function.bind */ "./node_modules/core-js/modules/es6.function.bind.js");
__webpack_require__(/*! ./modules/es6.function.name */ "./node_modules/core-js/modules/es6.function.name.js");
__webpack_require__(/*! ./modules/es6.function.has-instance */ "./node_modules/core-js/modules/es6.function.has-instance.js");
__webpack_require__(/*! ./modules/es6.parse-int */ "./node_modules/core-js/modules/es6.parse-int.js");
__webpack_require__(/*! ./modules/es6.parse-float */ "./node_modules/core-js/modules/es6.parse-float.js");
__webpack_require__(/*! ./modules/es6.number.constructor */ "./node_modules/core-js/modules/es6.number.constructor.js");
__webpack_require__(/*! ./modules/es6.number.to-fixed */ "./node_modules/core-js/modules/es6.number.to-fixed.js");
__webpack_require__(/*! ./modules/es6.number.to-precision */ "./node_modules/core-js/modules/es6.number.to-precision.js");
__webpack_require__(/*! ./modules/es6.number.epsilon */ "./node_modules/core-js/modules/es6.number.epsilon.js");
__webpack_require__(/*! ./modules/es6.number.is-finite */ "./node_modules/core-js/modules/es6.number.is-finite.js");
__webpack_require__(/*! ./modules/es6.number.is-integer */ "./node_modules/core-js/modules/es6.number.is-integer.js");
__webpack_require__(/*! ./modules/es6.number.is-nan */ "./node_modules/core-js/modules/es6.number.is-nan.js");
__webpack_require__(/*! ./modules/es6.number.is-safe-integer */ "./node_modules/core-js/modules/es6.number.is-safe-integer.js");
__webpack_require__(/*! ./modules/es6.number.max-safe-integer */ "./node_modules/core-js/modules/es6.number.max-safe-integer.js");
__webpack_require__(/*! ./modules/es6.number.min-safe-integer */ "./node_modules/core-js/modules/es6.number.min-safe-integer.js");
__webpack_require__(/*! ./modules/es6.number.parse-float */ "./node_modules/core-js/modules/es6.number.parse-float.js");
__webpack_require__(/*! ./modules/es6.number.parse-int */ "./node_modules/core-js/modules/es6.number.parse-int.js");
__webpack_require__(/*! ./modules/es6.math.acosh */ "./node_modules/core-js/modules/es6.math.acosh.js");
__webpack_require__(/*! ./modules/es6.math.asinh */ "./node_modules/core-js/modules/es6.math.asinh.js");
__webpack_require__(/*! ./modules/es6.math.atanh */ "./node_modules/core-js/modules/es6.math.atanh.js");
__webpack_require__(/*! ./modules/es6.math.cbrt */ "./node_modules/core-js/modules/es6.math.cbrt.js");
__webpack_require__(/*! ./modules/es6.math.clz32 */ "./node_modules/core-js/modules/es6.math.clz32.js");
__webpack_require__(/*! ./modules/es6.math.cosh */ "./node_modules/core-js/modules/es6.math.cosh.js");
__webpack_require__(/*! ./modules/es6.math.expm1 */ "./node_modules/core-js/modules/es6.math.expm1.js");
__webpack_require__(/*! ./modules/es6.math.fround */ "./node_modules/core-js/modules/es6.math.fround.js");
__webpack_require__(/*! ./modules/es6.math.hypot */ "./node_modules/core-js/modules/es6.math.hypot.js");
__webpack_require__(/*! ./modules/es6.math.imul */ "./node_modules/core-js/modules/es6.math.imul.js");
__webpack_require__(/*! ./modules/es6.math.log10 */ "./node_modules/core-js/modules/es6.math.log10.js");
__webpack_require__(/*! ./modules/es6.math.log1p */ "./node_modules/core-js/modules/es6.math.log1p.js");
__webpack_require__(/*! ./modules/es6.math.log2 */ "./node_modules/core-js/modules/es6.math.log2.js");
__webpack_require__(/*! ./modules/es6.math.sign */ "./node_modules/core-js/modules/es6.math.sign.js");
__webpack_require__(/*! ./modules/es6.math.sinh */ "./node_modules/core-js/modules/es6.math.sinh.js");
__webpack_require__(/*! ./modules/es6.math.tanh */ "./node_modules/core-js/modules/es6.math.tanh.js");
__webpack_require__(/*! ./modules/es6.math.trunc */ "./node_modules/core-js/modules/es6.math.trunc.js");
__webpack_require__(/*! ./modules/es6.string.from-code-point */ "./node_modules/core-js/modules/es6.string.from-code-point.js");
__webpack_require__(/*! ./modules/es6.string.raw */ "./node_modules/core-js/modules/es6.string.raw.js");
__webpack_require__(/*! ./modules/es6.string.trim */ "./node_modules/core-js/modules/es6.string.trim.js");
__webpack_require__(/*! ./modules/es6.string.iterator */ "./node_modules/core-js/modules/es6.string.iterator.js");
__webpack_require__(/*! ./modules/es6.string.code-point-at */ "./node_modules/core-js/modules/es6.string.code-point-at.js");
__webpack_require__(/*! ./modules/es6.string.ends-with */ "./node_modules/core-js/modules/es6.string.ends-with.js");
__webpack_require__(/*! ./modules/es6.string.includes */ "./node_modules/core-js/modules/es6.string.includes.js");
__webpack_require__(/*! ./modules/es6.string.repeat */ "./node_modules/core-js/modules/es6.string.repeat.js");
__webpack_require__(/*! ./modules/es6.string.starts-with */ "./node_modules/core-js/modules/es6.string.starts-with.js");
__webpack_require__(/*! ./modules/es6.string.anchor */ "./node_modules/core-js/modules/es6.string.anchor.js");
__webpack_require__(/*! ./modules/es6.string.big */ "./node_modules/core-js/modules/es6.string.big.js");
__webpack_require__(/*! ./modules/es6.string.blink */ "./node_modules/core-js/modules/es6.string.blink.js");
__webpack_require__(/*! ./modules/es6.string.bold */ "./node_modules/core-js/modules/es6.string.bold.js");
__webpack_require__(/*! ./modules/es6.string.fixed */ "./node_modules/core-js/modules/es6.string.fixed.js");
__webpack_require__(/*! ./modules/es6.string.fontcolor */ "./node_modules/core-js/modules/es6.string.fontcolor.js");
__webpack_require__(/*! ./modules/es6.string.fontsize */ "./node_modules/core-js/modules/es6.string.fontsize.js");
__webpack_require__(/*! ./modules/es6.string.italics */ "./node_modules/core-js/modules/es6.string.italics.js");
__webpack_require__(/*! ./modules/es6.string.link */ "./node_modules/core-js/modules/es6.string.link.js");
__webpack_require__(/*! ./modules/es6.string.small */ "./node_modules/core-js/modules/es6.string.small.js");
__webpack_require__(/*! ./modules/es6.string.strike */ "./node_modules/core-js/modules/es6.string.strike.js");
__webpack_require__(/*! ./modules/es6.string.sub */ "./node_modules/core-js/modules/es6.string.sub.js");
__webpack_require__(/*! ./modules/es6.string.sup */ "./node_modules/core-js/modules/es6.string.sup.js");
__webpack_require__(/*! ./modules/es6.date.now */ "./node_modules/core-js/modules/es6.date.now.js");
__webpack_require__(/*! ./modules/es6.date.to-json */ "./node_modules/core-js/modules/es6.date.to-json.js");
__webpack_require__(/*! ./modules/es6.date.to-iso-string */ "./node_modules/core-js/modules/es6.date.to-iso-string.js");
__webpack_require__(/*! ./modules/es6.date.to-string */ "./node_modules/core-js/modules/es6.date.to-string.js");
__webpack_require__(/*! ./modules/es6.date.to-primitive */ "./node_modules/core-js/modules/es6.date.to-primitive.js");
__webpack_require__(/*! ./modules/es6.array.is-array */ "./node_modules/core-js/modules/es6.array.is-array.js");
__webpack_require__(/*! ./modules/es6.array.from */ "./node_modules/core-js/modules/es6.array.from.js");
__webpack_require__(/*! ./modules/es6.array.of */ "./node_modules/core-js/modules/es6.array.of.js");
__webpack_require__(/*! ./modules/es6.array.join */ "./node_modules/core-js/modules/es6.array.join.js");
__webpack_require__(/*! ./modules/es6.array.slice */ "./node_modules/core-js/modules/es6.array.slice.js");
__webpack_require__(/*! ./modules/es6.array.sort */ "./node_modules/core-js/modules/es6.array.sort.js");
__webpack_require__(/*! ./modules/es6.array.for-each */ "./node_modules/core-js/modules/es6.array.for-each.js");
__webpack_require__(/*! ./modules/es6.array.map */ "./node_modules/core-js/modules/es6.array.map.js");
__webpack_require__(/*! ./modules/es6.array.filter */ "./node_modules/core-js/modules/es6.array.filter.js");
__webpack_require__(/*! ./modules/es6.array.some */ "./node_modules/core-js/modules/es6.array.some.js");
__webpack_require__(/*! ./modules/es6.array.every */ "./node_modules/core-js/modules/es6.array.every.js");
__webpack_require__(/*! ./modules/es6.array.reduce */ "./node_modules/core-js/modules/es6.array.reduce.js");
__webpack_require__(/*! ./modules/es6.array.reduce-right */ "./node_modules/core-js/modules/es6.array.reduce-right.js");
__webpack_require__(/*! ./modules/es6.array.index-of */ "./node_modules/core-js/modules/es6.array.index-of.js");
__webpack_require__(/*! ./modules/es6.array.last-index-of */ "./node_modules/core-js/modules/es6.array.last-index-of.js");
__webpack_require__(/*! ./modules/es6.array.copy-within */ "./node_modules/core-js/modules/es6.array.copy-within.js");
__webpack_require__(/*! ./modules/es6.array.fill */ "./node_modules/core-js/modules/es6.array.fill.js");
__webpack_require__(/*! ./modules/es6.array.find */ "./node_modules/core-js/modules/es6.array.find.js");
__webpack_require__(/*! ./modules/es6.array.find-index */ "./node_modules/core-js/modules/es6.array.find-index.js");
__webpack_require__(/*! ./modules/es6.array.species */ "./node_modules/core-js/modules/es6.array.species.js");
__webpack_require__(/*! ./modules/es6.array.iterator */ "./node_modules/core-js/modules/es6.array.iterator.js");
__webpack_require__(/*! ./modules/es6.regexp.constructor */ "./node_modules/core-js/modules/es6.regexp.constructor.js");
__webpack_require__(/*! ./modules/es6.regexp.exec */ "./node_modules/core-js/modules/es6.regexp.exec.js");
__webpack_require__(/*! ./modules/es6.regexp.to-string */ "./node_modules/core-js/modules/es6.regexp.to-string.js");
__webpack_require__(/*! ./modules/es6.regexp.flags */ "./node_modules/core-js/modules/es6.regexp.flags.js");
__webpack_require__(/*! ./modules/es6.regexp.match */ "./node_modules/core-js/modules/es6.regexp.match.js");
__webpack_require__(/*! ./modules/es6.regexp.replace */ "./node_modules/core-js/modules/es6.regexp.replace.js");
__webpack_require__(/*! ./modules/es6.regexp.search */ "./node_modules/core-js/modules/es6.regexp.search.js");
__webpack_require__(/*! ./modules/es6.regexp.split */ "./node_modules/core-js/modules/es6.regexp.split.js");
__webpack_require__(/*! ./modules/es6.promise */ "./node_modules/core-js/modules/es6.promise.js");
__webpack_require__(/*! ./modules/es6.map */ "./node_modules/core-js/modules/es6.map.js");
__webpack_require__(/*! ./modules/es6.set */ "./node_modules/core-js/modules/es6.set.js");
__webpack_require__(/*! ./modules/es6.weak-map */ "./node_modules/core-js/modules/es6.weak-map.js");
__webpack_require__(/*! ./modules/es6.weak-set */ "./node_modules/core-js/modules/es6.weak-set.js");
__webpack_require__(/*! ./modules/es6.typed.array-buffer */ "./node_modules/core-js/modules/es6.typed.array-buffer.js");
__webpack_require__(/*! ./modules/es6.typed.data-view */ "./node_modules/core-js/modules/es6.typed.data-view.js");
__webpack_require__(/*! ./modules/es6.typed.int8-array */ "./node_modules/core-js/modules/es6.typed.int8-array.js");
__webpack_require__(/*! ./modules/es6.typed.uint8-array */ "./node_modules/core-js/modules/es6.typed.uint8-array.js");
__webpack_require__(/*! ./modules/es6.typed.uint8-clamped-array */ "./node_modules/core-js/modules/es6.typed.uint8-clamped-array.js");
__webpack_require__(/*! ./modules/es6.typed.int16-array */ "./node_modules/core-js/modules/es6.typed.int16-array.js");
__webpack_require__(/*! ./modules/es6.typed.uint16-array */ "./node_modules/core-js/modules/es6.typed.uint16-array.js");
__webpack_require__(/*! ./modules/es6.typed.int32-array */ "./node_modules/core-js/modules/es6.typed.int32-array.js");
__webpack_require__(/*! ./modules/es6.typed.uint32-array */ "./node_modules/core-js/modules/es6.typed.uint32-array.js");
__webpack_require__(/*! ./modules/es6.typed.float32-array */ "./node_modules/core-js/modules/es6.typed.float32-array.js");
__webpack_require__(/*! ./modules/es6.typed.float64-array */ "./node_modules/core-js/modules/es6.typed.float64-array.js");
__webpack_require__(/*! ./modules/es6.reflect.apply */ "./node_modules/core-js/modules/es6.reflect.apply.js");
__webpack_require__(/*! ./modules/es6.reflect.construct */ "./node_modules/core-js/modules/es6.reflect.construct.js");
__webpack_require__(/*! ./modules/es6.reflect.define-property */ "./node_modules/core-js/modules/es6.reflect.define-property.js");
__webpack_require__(/*! ./modules/es6.reflect.delete-property */ "./node_modules/core-js/modules/es6.reflect.delete-property.js");
__webpack_require__(/*! ./modules/es6.reflect.enumerate */ "./node_modules/core-js/modules/es6.reflect.enumerate.js");
__webpack_require__(/*! ./modules/es6.reflect.get */ "./node_modules/core-js/modules/es6.reflect.get.js");
__webpack_require__(/*! ./modules/es6.reflect.get-own-property-descriptor */ "./node_modules/core-js/modules/es6.reflect.get-own-property-descriptor.js");
__webpack_require__(/*! ./modules/es6.reflect.get-prototype-of */ "./node_modules/core-js/modules/es6.reflect.get-prototype-of.js");
__webpack_require__(/*! ./modules/es6.reflect.has */ "./node_modules/core-js/modules/es6.reflect.has.js");
__webpack_require__(/*! ./modules/es6.reflect.is-extensible */ "./node_modules/core-js/modules/es6.reflect.is-extensible.js");
__webpack_require__(/*! ./modules/es6.reflect.own-keys */ "./node_modules/core-js/modules/es6.reflect.own-keys.js");
__webpack_require__(/*! ./modules/es6.reflect.prevent-extensions */ "./node_modules/core-js/modules/es6.reflect.prevent-extensions.js");
__webpack_require__(/*! ./modules/es6.reflect.set */ "./node_modules/core-js/modules/es6.reflect.set.js");
__webpack_require__(/*! ./modules/es6.reflect.set-prototype-of */ "./node_modules/core-js/modules/es6.reflect.set-prototype-of.js");
__webpack_require__(/*! ./modules/es7.array.includes */ "./node_modules/core-js/modules/es7.array.includes.js");
__webpack_require__(/*! ./modules/es7.array.flat-map */ "./node_modules/core-js/modules/es7.array.flat-map.js");
__webpack_require__(/*! ./modules/es7.array.flatten */ "./node_modules/core-js/modules/es7.array.flatten.js");
__webpack_require__(/*! ./modules/es7.string.at */ "./node_modules/core-js/modules/es7.string.at.js");
__webpack_require__(/*! ./modules/es7.string.pad-start */ "./node_modules/core-js/modules/es7.string.pad-start.js");
__webpack_require__(/*! ./modules/es7.string.pad-end */ "./node_modules/core-js/modules/es7.string.pad-end.js");
__webpack_require__(/*! ./modules/es7.string.trim-left */ "./node_modules/core-js/modules/es7.string.trim-left.js");
__webpack_require__(/*! ./modules/es7.string.trim-right */ "./node_modules/core-js/modules/es7.string.trim-right.js");
__webpack_require__(/*! ./modules/es7.string.match-all */ "./node_modules/core-js/modules/es7.string.match-all.js");
__webpack_require__(/*! ./modules/es7.symbol.async-iterator */ "./node_modules/core-js/modules/es7.symbol.async-iterator.js");
__webpack_require__(/*! ./modules/es7.symbol.observable */ "./node_modules/core-js/modules/es7.symbol.observable.js");
__webpack_require__(/*! ./modules/es7.object.get-own-property-descriptors */ "./node_modules/core-js/modules/es7.object.get-own-property-descriptors.js");
__webpack_require__(/*! ./modules/es7.object.values */ "./node_modules/core-js/modules/es7.object.values.js");
__webpack_require__(/*! ./modules/es7.object.entries */ "./node_modules/core-js/modules/es7.object.entries.js");
__webpack_require__(/*! ./modules/es7.object.define-getter */ "./node_modules/core-js/modules/es7.object.define-getter.js");
__webpack_require__(/*! ./modules/es7.object.define-setter */ "./node_modules/core-js/modules/es7.object.define-setter.js");
__webpack_require__(/*! ./modules/es7.object.lookup-getter */ "./node_modules/core-js/modules/es7.object.lookup-getter.js");
__webpack_require__(/*! ./modules/es7.object.lookup-setter */ "./node_modules/core-js/modules/es7.object.lookup-setter.js");
__webpack_require__(/*! ./modules/es7.map.to-json */ "./node_modules/core-js/modules/es7.map.to-json.js");
__webpack_require__(/*! ./modules/es7.set.to-json */ "./node_modules/core-js/modules/es7.set.to-json.js");
__webpack_require__(/*! ./modules/es7.map.of */ "./node_modules/core-js/modules/es7.map.of.js");
__webpack_require__(/*! ./modules/es7.set.of */ "./node_modules/core-js/modules/es7.set.of.js");
__webpack_require__(/*! ./modules/es7.weak-map.of */ "./node_modules/core-js/modules/es7.weak-map.of.js");
__webpack_require__(/*! ./modules/es7.weak-set.of */ "./node_modules/core-js/modules/es7.weak-set.of.js");
__webpack_require__(/*! ./modules/es7.map.from */ "./node_modules/core-js/modules/es7.map.from.js");
__webpack_require__(/*! ./modules/es7.set.from */ "./node_modules/core-js/modules/es7.set.from.js");
__webpack_require__(/*! ./modules/es7.weak-map.from */ "./node_modules/core-js/modules/es7.weak-map.from.js");
__webpack_require__(/*! ./modules/es7.weak-set.from */ "./node_modules/core-js/modules/es7.weak-set.from.js");
__webpack_require__(/*! ./modules/es7.global */ "./node_modules/core-js/modules/es7.global.js");
__webpack_require__(/*! ./modules/es7.system.global */ "./node_modules/core-js/modules/es7.system.global.js");
__webpack_require__(/*! ./modules/es7.error.is-error */ "./node_modules/core-js/modules/es7.error.is-error.js");
__webpack_require__(/*! ./modules/es7.math.clamp */ "./node_modules/core-js/modules/es7.math.clamp.js");
__webpack_require__(/*! ./modules/es7.math.deg-per-rad */ "./node_modules/core-js/modules/es7.math.deg-per-rad.js");
__webpack_require__(/*! ./modules/es7.math.degrees */ "./node_modules/core-js/modules/es7.math.degrees.js");
__webpack_require__(/*! ./modules/es7.math.fscale */ "./node_modules/core-js/modules/es7.math.fscale.js");
__webpack_require__(/*! ./modules/es7.math.iaddh */ "./node_modules/core-js/modules/es7.math.iaddh.js");
__webpack_require__(/*! ./modules/es7.math.isubh */ "./node_modules/core-js/modules/es7.math.isubh.js");
__webpack_require__(/*! ./modules/es7.math.imulh */ "./node_modules/core-js/modules/es7.math.imulh.js");
__webpack_require__(/*! ./modules/es7.math.rad-per-deg */ "./node_modules/core-js/modules/es7.math.rad-per-deg.js");
__webpack_require__(/*! ./modules/es7.math.radians */ "./node_modules/core-js/modules/es7.math.radians.js");
__webpack_require__(/*! ./modules/es7.math.scale */ "./node_modules/core-js/modules/es7.math.scale.js");
__webpack_require__(/*! ./modules/es7.math.umulh */ "./node_modules/core-js/modules/es7.math.umulh.js");
__webpack_require__(/*! ./modules/es7.math.signbit */ "./node_modules/core-js/modules/es7.math.signbit.js");
__webpack_require__(/*! ./modules/es7.promise.finally */ "./node_modules/core-js/modules/es7.promise.finally.js");
__webpack_require__(/*! ./modules/es7.promise.try */ "./node_modules/core-js/modules/es7.promise.try.js");
__webpack_require__(/*! ./modules/es7.reflect.define-metadata */ "./node_modules/core-js/modules/es7.reflect.define-metadata.js");
__webpack_require__(/*! ./modules/es7.reflect.delete-metadata */ "./node_modules/core-js/modules/es7.reflect.delete-metadata.js");
__webpack_require__(/*! ./modules/es7.reflect.get-metadata */ "./node_modules/core-js/modules/es7.reflect.get-metadata.js");
__webpack_require__(/*! ./modules/es7.reflect.get-metadata-keys */ "./node_modules/core-js/modules/es7.reflect.get-metadata-keys.js");
__webpack_require__(/*! ./modules/es7.reflect.get-own-metadata */ "./node_modules/core-js/modules/es7.reflect.get-own-metadata.js");
__webpack_require__(/*! ./modules/es7.reflect.get-own-metadata-keys */ "./node_modules/core-js/modules/es7.reflect.get-own-metadata-keys.js");
__webpack_require__(/*! ./modules/es7.reflect.has-metadata */ "./node_modules/core-js/modules/es7.reflect.has-metadata.js");
__webpack_require__(/*! ./modules/es7.reflect.has-own-metadata */ "./node_modules/core-js/modules/es7.reflect.has-own-metadata.js");
__webpack_require__(/*! ./modules/es7.reflect.metadata */ "./node_modules/core-js/modules/es7.reflect.metadata.js");
__webpack_require__(/*! ./modules/es7.asap */ "./node_modules/core-js/modules/es7.asap.js");
__webpack_require__(/*! ./modules/es7.observable */ "./node_modules/core-js/modules/es7.observable.js");
__webpack_require__(/*! ./modules/web.timers */ "./node_modules/core-js/modules/web.timers.js");
__webpack_require__(/*! ./modules/web.immediate */ "./node_modules/core-js/modules/web.immediate.js");
__webpack_require__(/*! ./modules/web.dom.iterable */ "./node_modules/core-js/modules/web.dom.iterable.js");
module.exports = __webpack_require__(/*! ./modules/_core */ "./node_modules/core-js/modules/_core.js");


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1, eval)("this");
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./src/jr-engine/gsdk/gsdk.hash.js":
/*!*****************************************!*\
  !*** ./src/jr-engine/gsdk/gsdk.hash.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (root, factory) {
  if (( false ? undefined : _typeof(exports)) === "object" && ( false ? undefined : _typeof(module)) === "object") {
    module.exports = factory();
  } else if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else { var i, a; }
})(self, function () {
  return { wasmHash: "07032838b9f7f00138419a59bd39d823", jsHash: "d8232e9fc1c8d1bdeecdd9011ff4c6ba", asmMemHash: "6ed60b0a8baca5b3325dcb646d13272e", asmJSHash: "126067f07c843d6d07f4b3a6f195ec48" };
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./src/pdf-jr/BufferBlock.js":
/*!***********************************!*\
  !*** ./src/pdf-jr/BufferBlock.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var UNDEFINED = 'undefined';
var _URL = (typeof URL === 'undefined' ? 'undefined' : _typeof(URL)) === UNDEFINED ? (typeof webkitURL === 'undefined' ? 'undefined' : _typeof(webkitURL)) === UNDEFINED ? null : webkitURL : URL;
var asyncReadBlobToBuffer = void 0;
var writeBufferToBlob = void 0;
if ((typeof FileReaderSync === 'undefined' ? 'undefined' : _typeof(FileReaderSync)) !== UNDEFINED) {
    asyncReadBlobToBuffer = function asyncReadBlobToBuffer(blob) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var size = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : blob.size;

        var fileReaderSync = new FileReaderSync();
        return fileReaderSync.readAsArrayBuffer(blob.slice(offset, offset + size));
    };
    writeBufferToBlob = function writeBufferToBlob(buffer) {
        return new Blob([buffer]);
    };
} else if (_URL) {
    asyncReadBlobToBuffer = function asyncReadBlobToBuffer(blob) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var size = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : blob.size;

        var blobUrl = _URL.createObjectURL(blob);
        var xmlHttp = new XMLHttpRequest();
        xmlHttp.open('GET', blobUrl, false);
        xmlHttp.responseType = 'arraybuffer';
        xmlHttp.send(null);
        var status = xmlHttp.status;
        if (status >= 200 && status < 300 || status === 304) {
            _URL.revokeObjectURL(blobUrl);
            blob = xmlHttp.response;
            if (blob.slice) {
                return blob.slice(offset, offset + size);
            }
            return new Uint8Array(blob, offset, size).buffer;
        }
        return null;
    };
    writeBufferToBlob = function writeBufferToBlob(buffer) {
        return new Blob([buffer]);
    };
} else {
    asyncReadBlobToBuffer = function asyncReadBlobToBuffer(buffer) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var size = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : buffer.byteLength;

        if (buffer.slice) {
            return buffer.slice(offset, size);
        }
        return new Uint8Array(buffer, offset, size).buffer;
    };
    writeBufferToBlob = function writeBufferToBlob(buffer) {
        return buffer;
    };
}

var BufferBlock = function () {
    function BufferBlock(size) {
        _classCallCheck(this, BufferBlock);

        this.size = size;
        this.blockSize = 8388608; // 1024 * 1024 * 8 = 8M
        this.blocks = [];
        this.loadingBlocks = [];
        this.blobCache = [];
        this.loadingCache = {};
    }

    BufferBlock.prototype.push = function push(offset, size) {
        var blocks = this.blocks;
        var min = Math.max(0, offset);
        var max = Math.min(offset + size, this.size);
        var intersection = [];
        for (var i = blocks.length; i--;) {
            var block = blocks[i];
            var start = block[0];
            var end = block[1];
            if (start <= max && end >= min) {
                // 有交集
                min = Math.min(min, start);
                max = Math.max(max, end);
                intersection.push(i);
            }
        }
        for (var _i = 0, j = intersection.length; _i < j; _i++) {
            blocks.splice(intersection[_i], 1);
        }
        blocks.push([min, max]);
    };

    BufferBlock.prototype.avail = function avail(offset, size) {
        var min = offset;
        var max = offset + size;
        var blocks = this.blocks;
        for (var i = blocks.length; i--;) {
            var block = blocks[i];
            var start = block[0];
            var end = block[1];
            if (start <= min && end >= max) {
                // 包含
                return true;
            }
        }
        return false;
    };

    BufferBlock.prototype.full = function full() {
        this.blocks.length === 1 && this.blocks[0][0] === 0 && this.blocks[0][1] === this.size;
    };

    BufferBlock.prototype.checkLoadBuffer = function checkLoadBuffer(offset, size) {
        var min = offset;
        var max = offset + size;
        var blocks = this.loadingBlocks;
        for (var i = blocks.length; i--;) {
            var block = blocks[i];
            var start = block[0];
            var end = block[1];
            if (start <= min && end >= max) {
                // 包含
                return true;
            }
        }
        return false;
    };

    BufferBlock.prototype.loadingBuffer = function loadingBuffer(offset, size) {
        var blocks = this.loadingBlocks;
        var min = Math.max(0, offset);
        var max = Math.min(offset + size, this.size);
        var intersection = [];
        for (var i = blocks.length; i--;) {
            var block = blocks[i];
            var start = block[0];
            var end = block[1];
            if (start <= max && end >= min) {
                // 有交集
                min = Math.min(min, start);
                max = Math.max(max, end);
                intersection.push(i);
            }
        }
        for (var _i2 = 0, j = intersection.length; _i2 < j; _i2++) {
            blocks.splice(intersection[_i2], 1);
        }
        blocks.push([min, max]);
    };

    BufferBlock.prototype.addBuffer = function addBuffer(offset, size, buffer) {
        var addUint8Array = new Uint8Array(buffer);
        var blockSize = this.blockSize;
        var blobCache = this.blobCache;
        var startBlock = Math.floor(offset / blockSize);
        var endBlock = Math.floor((offset + size) / blockSize);
        var srcStart = offset % blockSize;
        var addStart = 0;
        var addEnd = blockSize - srcStart;
        for (var i = startBlock, j = endBlock; i <= j; i++) {
            var blob = blobCache[i];
            var srcArrayBuffer = void 0;
            if (blob) {
                srcArrayBuffer = asyncReadBlobToBuffer(blob);
            }
            if (!srcArrayBuffer) {
                srcArrayBuffer = new ArrayBuffer(blockSize);
            }
            var srcUint8Array = new Uint8Array(srcArrayBuffer);
            srcUint8Array.set(addUint8Array.slice(addStart, addEnd), srcStart);
            blobCache[i] = writeBufferToBlob(srcUint8Array);
            srcStart = 0;
            addStart += blockSize;
            addEnd += blockSize;
        }
        this.push(offset, size);
    };

    BufferBlock.prototype.getBuffer = function getBuffer(offset, size) {
        if (offset + size > this.size) {
            size = this.size - offset;
        }
        var arrayBuffer = new ArrayBuffer(size);
        var blockSize = this.blockSize;
        var blobCache = this.blobCache;
        var startBlock = Math.floor(offset / blockSize);
        var endBlock = Math.floor((offset + size) / blockSize);
        var srcStart = offset % blockSize;
        var srcEnd = Math.min(size, blockSize - srcStart);
        var getStart = 0;
        var getEnd = srcEnd;
        for (var i = startBlock, j = endBlock; i <= j; i++) {
            var blob = blobCache[i];
            var srcArrayBuffer = void 0;
            if (blob) {
                srcArrayBuffer = asyncReadBlobToBuffer(blob, srcStart, srcEnd);
            }
            if (!srcArrayBuffer) {
                return null;
            }

            new Uint8Array(arrayBuffer, getStart, getEnd - getStart).set(new Uint8Array(srcArrayBuffer));

            srcStart = 0;
            size -= srcEnd;
            getStart += srcEnd;
            srcEnd = Math.min(size, blockSize - srcStart);
            getEnd += srcEnd;
        }
        return arrayBuffer;
    };

    BufferBlock.prototype._getBufferCacheKey = function _getBufferCacheKey(offset, size) {
        return [offset, size].join('-');
    };

    BufferBlock.prototype.destroy = function destroy() {
        for (var i = this.blobCache.length; i--;) {
            delete this.blobCache[i];
        }
    };

    return BufferBlock;
}();

exports.default = BufferBlock;

/***/ }),

/***/ "./src/pdf-jr/Form/Control.js":
/*!************************************!*\
  !*** ./src/pdf-jr/Form/Control.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PDFControl = function () {
    function PDFControl(engineControl, engine) {
        _classCallCheck(this, PDFControl);

        this.engineControl = engineControl;
        this.engine = engine;
    }

    PDFControl.prototype.toJson = function toJson() {
        /**
         * @type GSDK.Control
         */
        var engineControl = this.engineControl;

        var index = engineControl.GetIndex();
        var isChecked = engineControl.IsChecked();
        var isDefaultChecked = engineControl.IsDefaultChecked();
        var isEmpty = engineControl.IsEmpty();
        isEmpty = isEmpty || engineControl.GetWidget().IsEmpty();
        if (isEmpty) {
            return {};
        }

        var objectNum = engineControl.GetWidget().GetDict().GetObjNum();

        return Object.assign({}, {
            index: index,
            isChecked: isChecked,
            isDefaultChecked: isDefaultChecked,
            isEmpty: isEmpty,
            objectNum: objectNum
        });
    };

    return PDFControl;
}();

exports.default = PDFControl;

/***/ }),

/***/ "./src/pdf-jr/Form/Field.js":
/*!**********************************!*\
  !*** ./src/pdf-jr/Form/Field.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Control = __webpack_require__(/*! ./Control */ "./src/pdf-jr/Form/Control.js");

var _Control2 = _interopRequireDefault(_Control);

var _LoggerFactory = __webpack_require__(/*! ../../shared/logger/LoggerFactory */ "./src/shared/logger/LoggerFactory.js");

var _LoggerFactory2 = _interopRequireDefault(_LoggerFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var logger = _LoggerFactory2.default.getLogger('pdf-jr.Field');

var Field = function () {
  /**
  * @param engineForm {GSDK.Form};
  * @param engineField {GSDK.Field};
  * @param engine {GSDK};
  * @param JR
  */
  function Field(engineForm, engineField, engine, JR) {
    _classCallCheck(this, Field);

    this.engineForm = engineForm;
    this.engineField = engineField;
    this.engine = engine;
    this.JR = JR;
  }

  Field.prototype.update = function update(key, value) {
    var _this = this;

    var engineField = this.engineField;
    var optionArray = void 0;
    switch (key) {
      case 'align':
        engineField.SetAlignment({ value: value });
        break;
      case 'flag':
        engineField.SetFlags(value);
        break;
      case 'maxLength':
        engineField.SetMaxLength(value);
        break;
      case 'defaultValue':
        engineField.SetDefaultValue(new this.engine.WString(value));
        break;
      case 'clearItems':
        var opts = new this.engine.ChoiceOptionArray();
        engineField.SetOptions(opts);
        break;
      case 'deleteItems':
        optionArray = engineField.GetOptions();
        var options = new this.engine.ChoiceOptionArray();
        for (var i = 0, j = optionArray.GetSize(); i < j; i++) {
          var opt = optionArray.GetAt(i);
          if (i != value) {
            options.Add(opt);
          } else {
            var fieldValue = engineField.GetValue().toString();
            if (fieldValue == opt.option_value.toString()) {
              //engineField.SetValue(new this.engine.WString(''));
            }
          }
        }
        engineField.SetOptions(options);
        break;
      case 'insertItemAt':
        var newOpt = new this.engine.ChoiceOption();
        newOpt.option_value = new this.engine.WString(value.value);
        newOpt.option_label = new this.engine.WString(value.lable);
        newOpt.selected = value.selected;
        newOpt.default_selected = value.defaultSelected;
        optionArray = engineField.GetOptions();
        optionArray.InsertAt(value.index, newOpt);
        engineField.SetOptions(optionArray);
        break;
      case 'alternateName':
        engineField.SetAlternateName(new this.engine.WString(value));
        break;
      case 'textColor':
        var da = engineField.GetDefaultAppearance();
        da.text_color = +value;
        engineField.SetDefaultAppearance(da);
        break;
      case 'setItems':
        optionArray = new this.engine.ChoiceOptionArray();
        value.map(function (option) {
          var gsdkOption = new _this.engine.ChoiceOption();
          gsdkOption.option_value = new _this.engine.WString(option.value);
          gsdkOption.option_label = new _this.engine.WString(option.lable);
          gsdkOption.selected = option.selected;
          gsdkOption.default_selected = option.defaultSelected;
          optionArray.Add(gsdkOption);
          gsdkOption.delete();
        });
        engineField.SetOptions(optionArray);
        engineField.SetValue(new this.engine.WString(""));
        break;
    }

    var controlCount = engineField.GetControlCount();
    for (var index = 0; index < controlCount; index++) {
      var control = engineField.GetControl(index);
      var widget = control.GetWidget();
      widget.ResetAppearanceStream();
    }
  };

  Field.prototype.setValue = function setValue(value) {
    this.engineField.SetValue(new this.engine.WString(value + ''));
  };

  Field.prototype.getValue = function getValue(value) {
    return this.engineField.GetValue().toString();
  };

  Field.prototype.toJson = function toJson(index) {
    try {
      var engineField = this.engineField;
      var alignment = engineField.GetAlignment().value;
      var alternateName = engineField.GetAlternateName().toString();

      var controls = [];
      var controlCount = engineField.GetControlCount();
      for (var _index = 0; _index < controlCount; _index++) {
        var control = engineField.GetControl(_index);
        controls.push(new _Control2.default(control, this.engine).toJson());
      }

      var defaultAp = engineField.GetDefaultAppearance();

      var defaultValue = engineField.GetDefaultValue().toString();

      var flag = engineField.GetFlags();

      var mappingName = engineField.GetMappingName().toString();

      var maxLength = engineField.GetMaxLength();

      var name = engineField.GetName().toString();

      var optionArray = engineField.GetOptions();
      var options = [];

      for (var i = 0, j = optionArray.GetSize(); i < j; i++) {
        var option = optionArray.GetAt(i);
        options.push({
          lable: option.option_label.toString(),
          value: option.option_value.toString(),
          selected: option.selected,
          defaultSelected: option.default_selected
        });
      }

      var topVisibleIndex = engineField.GetTopVisibleIndex();

      var type = engineField.GetType().value;

      var value = engineField.GetValue().toString();

      var isEmpty = engineField.IsEmpty();

      var jsonAA = {};
      var fieldDict = engineField.GetDict();
      var AAObj = fieldDict.GetElement(new this.engine.String('AA'));

      if (AAObj) {
        try {
          if (AAObj.GetType().value == 9) {
            AAObj = AAObj.GetDirectObject();
          }
          var AADict = AAObj.GetDict();

          var AA = new this.engine.AdditionalAction(this.engineForm.GetDocument(), AADict);

          var triggers = [this.engine.TriggerEvent.e_TriggerFieldKeyStroke, this.engine.TriggerEvent.e_TriggerFieldWillFormat, this.engine.TriggerEvent.e_TriggerFieldValueChanged, this.engine.TriggerEvent.e_TriggerFieldRecalculateValue, this.engine.TriggerEvent.e_TriggerAnnotCursorEnter, this.engine.TriggerEvent.e_TriggerAnnotCursorExit, this.engine.TriggerEvent.e_TriggerAnnotMouseButtonPressed, this.engine.TriggerEvent.e_TriggerAnnotMouseButtonReleased, this.engine.TriggerEvent.e_TriggerAnnotReceiveInputFocus, this.engine.TriggerEvent.e_TriggerAnnotLoseInputFocus];
          for (var _i = 0; _i < triggers.length; _i++) {
            var A = AA.GetAction(triggers[_i]);
            if (!A.IsEmpty()) jsonAA[triggers[_i].value] = this.JR.actionManager.get(A, this).toJson();
          }
        } catch (e) {}
      }
      var fontName = '';
      try {
        if (!defaultAp.font.IsEmpty()) fontName = defaultAp.font.GetName().toString();
      } catch (err) {
        if (!isNaN(err)) {
          err = this.engine.getErrorCode(err);
        }
        console.warn(err);
      }
      return {
        alignment: alignment,
        alternateName: alternateName,
        controls: controls,
        DA: {
          flags: defaultAp.flags,
          fontName: fontName,
          textColor: defaultAp.text_color,
          textSize: defaultAp.text_size
        },
        defaultValue: defaultValue,
        flag: flag,
        mappingName: mappingName,
        maxLength: maxLength,
        name: name,
        options: options,
        topVisibleIndex: topVisibleIndex,
        type: type,
        value: value,
        isEmpty: isEmpty,
        AA: jsonAA
      };
    } catch (err) {
      if (!isNaN(err)) {
        err = this.engine.getErrorCode(err);
      }
      console.warn(err);
      return {};
    }
  };

  return Field;
}();

exports.default = Field;

/***/ }),

/***/ "./src/pdf-jr/Form/Form.js":
/*!*********************************!*\
  !*** ./src/pdf-jr/Form/Form.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Field = __webpack_require__(/*! ./Field */ "./src/pdf-jr/Form/Field.js");

var _Field2 = _interopRequireDefault(_Field);

var _DefaultAP = __webpack_require__(/*! ../share/DefaultAP */ "./src/pdf-jr/share/DefaultAP.js");

var _DefaultAP2 = _interopRequireDefault(_DefaultAP);

var _LoggerFactory = __webpack_require__(/*! ../../shared/logger/LoggerFactory */ "./src/shared/logger/LoggerFactory.js");

var _LoggerFactory2 = _interopRequireDefault(_LoggerFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var logger = _LoggerFactory2.default.getLogger('pdf-jr.Form');

var PDFForm = function () {
  /**
   * @param engineForm {GSDK.Form};
   * @param engine {GSDK};
   * @param JR
   */
  function PDFForm(engineForm, engine, JR) {
    _classCallCheck(this, PDFForm);

    this.engineForm = engineForm;
    this.engine = engine;
    this.JR = JR;

    var assistCallback = {
      FocusGotOnControl: function FocusGotOnControl(_) {},
      FocusLostFromControl: function FocusLostFromControl(_) {},
      GetVersion: function GetVersion(_) {},
      KillTimer: function KillTimer(_) {},
      Refresh: function Refresh(_) {},
      Release: function Release(_) {},
      SetTimerCallback: function SetTimerCallback(_) {}
      // this.filler = new engine.Filler(engineForm,engine.FillerAssistCallback.implement(assistCallback));
      // this.filler.HighlightFormFields(false)
    };
  }

  PDFForm.prototype.getField = function getField(title) {
    return this.fields[title];
  };

  PDFForm.prototype.fill = function fill(type, page, point) {
    var PDFPoint = new this.engine.PointF(point.x, point.y);

    switch (type) {
      case 'LButtonDown':
        // this.filler.OnLButtonDown(page.page,PDFPoint,0);
        break;
      case 'LButtonUp':
        // this.filler.OnLButtonUp(page.page,PDFPoint,0);
        break;
    }
    // this.filler.KillFocus();
  };

  PDFForm.prototype.getFieldsValue = function getFieldsValue() {
    var json = {};
    for (var title in this.fields) {
      json[title] = this.fields[title].getValue();
    }
    return json;
  };

  PDFForm.prototype.toJson = function toJson() {
    var engineForm = this.engineForm;
    var needConstructAppearances = engineForm.NeedConstructAppearances();

    var filter = new this.engine.WString('');
    var fieldCount = engineForm.GetFieldCount(filter);

    var fields = [];
    this.fields = this.fields || {};
    for (var index = 0; index < fieldCount; index++) {
      try {
        var field = engineForm.GetField(index, filter);
        var type = field.GetType();
        var jrField = new _Field2.default(engineForm, field, this.engine, this.JR);
        var json = jrField.toJson(index);
        this.fields[json.name || index] = jrField;
        fields.push(json);
      } catch (e) {
        fields.push({});
        this.fields[index] = {};
      }
    }

    var fieldArray = engineForm.GetFieldsInCalculationOrder();
    var calculationOrder = [];
    for (var _index = 0; _index < fieldArray.GetSize(); _index++) {
      var _field = fieldArray.GetAt(_index);
      calculationOrder.push(_field.GetName().toString());
    }

    var defaultAp = engineForm.GetDefaultAppearance();

    var alignment = engineForm.GetAlignment();

    var fontName = '';
    try {
      if (!defaultAp.font.IsEmpty()) fontName = defaultAp.font.GetName().toString();
    } catch (e) {
      logger.error('font name error');
    }

    return {
      needConstructAppearances: needConstructAppearances,
      fields: fields,
      DefaultAppearance: {
        flags: defaultAp.flags,
        fontName: fontName,
        textColor: defaultAp.text_color,
        textSize: defaultAp.text_Size
      },
      calculationOrder: calculationOrder,
      alignment: alignment
    };
  };

  return PDFForm;
}();

exports.default = PDFForm;

/***/ }),

/***/ "./src/pdf-jr/PDFBookmark.js":
/*!***********************************!*\
  !*** ./src/pdf-jr/PDFBookmark.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PDFBookmark = function () {
    function PDFBookmark(engine, id, c_bookmark, c_doc) {
        var deep = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;

        _classCallCheck(this, PDFBookmark);

        this.engine = engine;
        this.id = id;
        this.c_bookmark = c_bookmark;
        this.c_doc = c_doc;
        this.title = c_bookmark.GetTitle().toString();
        var color16 = this.c_bookmark.GetColor().toString(16);
        this.color = '#' + color16.substr(2);
        var style = this.c_bookmark.GetStyle();
        this.isItalic = style & 1;
        this.isBold = style & 2;
        this.c_destination = c_bookmark.GetDestination();
        this.deep = deep;
        var isEmpty = this.c_destination.IsEmpty();
        this.children = [];
        if (isEmpty) {
            this.pageIndex = 0;
            this.pageTop = 0;
            this.pageLeft = 0;
        } else {
            var pageIndex = this.c_destination.GetPageIndex(this.c_doc);
            var pageTop = this.c_destination.GetTop();
            var pageLeft = this.c_destination.GetLeft();
            this.pageIndex = pageIndex;
            this.pageTop = pageTop;
            this.pageLeft = pageLeft;
        }
    }

    PDFBookmark.prototype.insert = function insert(title, pageIndex, destination) {
        var ws_title = new this.engine.WString(title);
        var new_bookmark = this.c_bookmark.Insert(ws_title, this.engine.BookmarkPosition.e_PosLastChild);
        try {
            var page = this.c_doc.GetPage(pageIndex);
            destination.top = Math.max(0, page.GetHeight() - destination.top);
        } catch (e) {
            return false;
        }
        var c_destination = new this.engine.Destination.CreateXYZ(this.c_doc, pageIndex, destination.left, destination.top, 1);
        new_bookmark.SetDestination(c_destination);
        var id = void 0;
        var childrenCount = this.children.length;
        if (this.id === "") {
            id = childrenCount + "";
        } else {
            id = this.id + "-" + childrenCount;
        }
        var bookmark = new PDFBookmark(this.engine, id, new_bookmark, this.c_doc, this.deep + 1);
        return bookmark;
    };

    PDFBookmark.prototype.getBookmarkById = function getBookmarkById(id) {
        id = id.toString();
        if (id === "") return this;
        if (id.indexOf(this.id) !== 0) return null;

        if (this.id !== "") {
            id == id.substr(this.id.length + 1);
        }

        var ids = id.split("-");
        try {
            var bookmark = this;
            for (var i = 0; i < ids.length; i++) {
                bookmark = bookmark.children[ids[i]];
            }
            return bookmark;
        } catch (e) {
            return null;
        }
    };

    PDFBookmark.prototype.remove = function remove() {
        return this.c_doc.RemoveBookmark(this.c_bookmark);
    };

    PDFBookmark.prototype.setProperty = function setProperty(properties) {
        for (var property in properties) {
            if (property == "title") {
                var title = new this.engine.WString(properties[property]);
                this.c_bookmark.SetTitle(title);
                this.title = this.c_bookmark.GetTitle().toString();
            } else if (property == "style") {
                this.c_bookmark.SetStyle(properties[property]);
                var style = this.c_bookmark.GetStyle();
                this.isItalic = style & 1;
                this.isBold = style & 2;
            } else if (property == "color") {
                this.c_bookmark.SetColor(properties[property]);
                var color16 = this.c_bookmark.GetColor().toString(16);
                this.color = '#' + color16.substr(2);
            }
        }
    };

    PDFBookmark.prototype.toJson = function toJson() {
        if (this.c_bookmark.IsEmpty()) {
            return [];
        }
        var children = [];
        if (this.c_bookmark.HasChild()) {
            var first_child_bookmark = this.c_bookmark.GetFirstChild();
            var c_next = first_child_bookmark;
            var index = 0;
            while (!c_next.IsEmpty()) {
                var id = void 0;
                if (this.id === "") {
                    id = index + "";
                } else {
                    id = this.id + "-" + index;
                }
                var bookmark = new PDFBookmark(this.engine, id, c_next, this.c_doc, this.deep + 1);
                c_next = c_next.GetNextSibling();
                index++;
                children.push(bookmark.toJson());
                this.children.push(bookmark);
            }
        }
        // this.delete();
        return {
            id: this.id,
            // position: this.c_bookmark.position,
            // style: this.c_bookmark.style,
            deep: this.deep,
            title: this.title,
            color: this.color,
            isBold: this.isBold,
            isItalic: this.isItalic,
            children: children,
            page: this.pageIndex,
            top: this.pageTop,
            left: this.pageLeft
            // pageIndex: this.c_destination.GetPageIndex(this.c_doc),
            // top: this.c_destination.GetTop(),
        };
    };

    PDFBookmark.prototype.delete = function _delete() {
        this.c_destination.delete();
        this.c_bookmark.delete();
    };

    return PDFBookmark;
}();

exports.default = PDFBookmark;

/***/ }),

/***/ "./src/pdf-jr/PDFDoc.js":
/*!******************************!*\
  !*** ./src/pdf-jr/PDFDoc.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _getUniqueId = __webpack_require__(/*! ../shared/getUniqueId.js */ "./src/shared/getUniqueId.js");

var _getUniqueId2 = _interopRequireDefault(_getUniqueId);

var _createDeferred = __webpack_require__(/*! ../shared/createDeferred.js */ "./src/shared/createDeferred.js");

var _createDeferred2 = _interopRequireDefault(_createDeferred);

var _PDFPage = __webpack_require__(/*! ./PDFPage.js */ "./src/pdf-jr/PDFPage.js");

var _PDFPage2 = _interopRequireDefault(_PDFPage);

var _BufferBlock = __webpack_require__(/*! ./BufferBlock.js */ "./src/pdf-jr/BufferBlock.js");

var _BufferBlock2 = _interopRequireDefault(_BufferBlock);

var _PDFBookmark = __webpack_require__(/*! ./PDFBookmark.js */ "./src/pdf-jr/PDFBookmark.js");

var _PDFBookmark2 = _interopRequireDefault(_PDFBookmark);

var _PDFLayer = __webpack_require__(/*! ./PDFLayer.js */ "./src/pdf-jr/PDFLayer.js");

var _PDFLayer2 = _interopRequireDefault(_PDFLayer);

var _Form = __webpack_require__(/*! ../pdf-jr/Form/Form */ "./src/pdf-jr/Form/Form.js");

var _Form2 = _interopRequireDefault(_Form);

var _LoggerFactory = __webpack_require__(/*! ../shared/logger/LoggerFactory.js */ "./src/shared/logger/LoggerFactory.js");

var _LoggerFactory2 = _interopRequireDefault(_LoggerFactory);

var _cipherType = __webpack_require__(/*! ../shared/cipherType */ "./src/shared/cipherType.js");

var _cipherType2 = _interopRequireDefault(_cipherType);

var _PDFObject = __webpack_require__(/*! ./object/PDFObject */ "./src/pdf-jr/object/PDFObject.js");

var _PDFObject2 = _interopRequireDefault(_PDFObject);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } /**
                                                                                                                                                           * Created by linc on 2018/6/28.
                                                                                                                                                           */


var noop = function noop() {};
var isload = false;

var logger = _LoggerFactory2.default.getLogger('pdf-jr.PDFDoc');
/**
 * 文档对象
 * @class
 */

var PDFDoc = function () {
    function PDFDoc(JR, _ref) {
        var _this2 = this;

        var getBuffer = _ref.getBuffer,
            size = _ref.size,
            _ref$release = _ref.release,
            release = _ref$release === undefined ? noop : _ref$release,
            _ref$async = _ref.async,
            async = _ref$async === undefined ? false : _ref$async,
            _ref$isCreate = _ref.isCreate,
            isCreate = _ref$isCreate === undefined ? false : _ref$isCreate;

        _classCallCheck(this, PDFDoc);

        this.docDeferred = (0, _createDeferred2.default)();
        this.docPromise = this.docDeferred.promise;
        var docSize = size;
        this.id = (0, _getUniqueId2.default)('pdf_doc');
        this.JR = JR;
        /**
         * @type GSDK
         */
        var engine = this.engine = JR.engine;
        this.async = async;
        var readerCallback = void 0;
        this.readerBlockLoading = 0;
        this.pdfTree;

        if (isCreate) {
            this.doc = new engine.PDFDoc();
            this.docDeferred.resolve(this.doc);
        } else {
            if (async) {
                var asyncBlock = this.asyncBlock = new _BufferBlock2.default(size);
                readerCallback = engine.AsyncReaderCallback.implement({
                    Release: function Release() {
                        release();
                    },
                    GetSize: function GetSize() {
                        return docSize;
                    },
                    ReadBlock: function ReadBlock(buffer, offset, size) {
                        if (!asyncBlock.avail(offset, size)) {
                            if (!asyncBlock.checkLoadBuffer(offset, size)) {
                                asyncBlock.loadingBuffer(offset, size);
                                _this2.readerBlockLoading++;
                                getBuffer(offset, size).then(function (buffer) {
                                    asyncBlock.addBuffer(offset, size, buffer);
                                    _this2.readerBlockLoading--;
                                });
                            }
                            return false;
                        }
                        var asyncBuffer = asyncBlock.getBuffer(offset, size);
                        if (!asyncBuffer) {
                            if (!asyncBlock.checkLoadBuffer(offset, size)) {
                                asyncBlock.loadingBuffer(offset, size);
                                _this2.readerBlockLoading++;
                                getBuffer(offset, size).then(function (buffer) {
                                    asyncBlock.addBuffer(offset, size, buffer);
                                    _this2.readerBlockLoading--;
                                });
                            }
                            return false;
                        }
                        var src = new Uint8Array(asyncBuffer);
                        engine.HEAPU8.set(src, buffer);
                        return true;
                    },
                    IsDataAvail: function IsDataAvail(offset, size) {
                        var avail = asyncBlock.avail(offset, size);
                        return avail;
                    },
                    AddDownloadHint: function AddDownloadHint(offset, size) {
                        // 多预先下载2M数据 2097152
                        var more = 2097152;
                        var maxSize = offset + size + more;
                        if (maxSize >= docSize) {
                            maxSize = docSize - offset;
                        } else {
                            maxSize = size + more;
                        }
                        if (asyncBlock.checkLoadBuffer(offset, size)) {
                            return true;
                        }
                        if (asyncBlock.avail(offset, size)) {
                            return true;
                        }
                        asyncBlock.loadingBuffer(offset, maxSize);
                        _this2.readerBlockLoading++;
                        getBuffer(offset, maxSize).then(function (buffer) {
                            asyncBlock.addBuffer(offset, maxSize, buffer);
                            _this2.readerBlockLoading--;
                        });
                        return true;
                    }
                });
            } else {
                readerCallback = engine.ReaderCallback.implement({
                    Release: function Release() {
                        release();
                    },
                    GetSize: function GetSize() {
                        return docSize;
                    },
                    ReadBlock: function ReadBlock(buffer, offset, size) {
                        var src = new Uint8Array(getBuffer(offset, size));
                        engine.HEAPU8.set(src, buffer);
                        return true;
                    }
                });
            }
            /**
             * @type GSDK.PDFDoc
             */
            this.doc = engine.createPDFDocWithReaderCallback(readerCallback, async);
        }
        this.pageCache = {};
        this.pageIndexMap = {};
        this.pageIndexPromise = {};
        this.blockRanges = [];
        this.renderFlags = 0;
    }

    PDFDoc.prototype.parseByPassword = function parseByPassword() {
        var _this3 = this;

        var password = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
        var otherData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        var engine = this.engine;
        var deferred = (0, _createDeferred2.default)();
        var retry = function retry() {
            setTimeout(function () {
                _this3.parseByPassword(password, otherData).then(function (value) {
                    deferred.resolve(value);
                });
            }, 200);
        };
        if (this.readerBlockLoading) {
            retry();
            return deferred.promise;
        }

        var errorCode = void 0;
        this.otherData = otherData;
        if (password) {
            var pwd = new engine.String(password);
            errorCode = this.doc.Load(pwd);
            pwd.delete();
        } else if (otherData.encryptPassword) {
            var _pwd = new engine.String(otherData.encryptPassword);
            errorCode = this.doc.LoadByAsymmetricEncryption(_pwd);
            _pwd.delete();
        } else {
            var _pwd2 = new engine.String(password);
            errorCode = this.doc.Load(_pwd2);
            _pwd2.delete();
        }

        if (errorCode === engine.ErrorCode.e_ErrSuccess) {
            this.password = password;
            var action = this.doc.GetOpenAction();
            if (!action.IsEmpty()) {
                this.action = this.JR.actionManager.get(action, this.doc, this.JR);
            }
            // 导入初始的annotation
            if (otherData.fdf && otherData.fdf.file) {
                var file = otherData.fdf.file;
                var type = otherData.fdf.type;
                this.importFromFDF(file, type);
            }
            this.docDeferred.resolve(this.doc);
            deferred.resolve(errorCode.value);
        } else if (errorCode === engine.ErrorCode.e_ErrDataNotReady) {
            retry();
        } else if (errorCode === engine.ErrorCode.e_ErrSecurityHandler) {
            if (otherData.drm) {
                this.JR.registerDRMSecurityCallback();
                retry();
            } else {
                deferred.resolve(errorCode.value);
            }
        } else {
            deferred.resolve(errorCode.value);
        }
        return deferred.promise;
    };

    PDFDoc.prototype.updatePageCache = function updatePageCache(page) {
        var id = page.id;
        this.pageCache[id] = page;
    };

    PDFDoc.prototype.updatePageIndexMap = function updatePageIndexMap(index, page) {
        this.pageIndexMap[index] = page;
    };

    PDFDoc.prototype.getPageById = function getPageById(id) {
        return this.pageCache[id] || null;
    };

    PDFDoc.prototype.getAllLoadedPages = function getAllLoadedPages() {
        var pages = [];
        for (var key in this.pageCache) {
            pages.push(this.pageCache[key]);
        }
        return pages;
    };
    /**
     * 获取文档信息
     * @returns {PDFDocInfo} Promise
     */


    PDFDoc.prototype.getPDFDocInfo = function getPDFDocInfo() {
        var engine = this.engine;
        var _this = this;
        return this.docPromise.then(function (c_doc) {
            var deferred = (0, _createDeferred2.default)();
            var dict = c_doc.GetInfo();
            deferred.resolve(dict);
            return deferred.promise;
        });
    };
    /**
     * 获取文档总页数
     * @returns {number} Promise, 文档总页数获取失败时，reject，原因：异步加载文档等
     */


    PDFDoc.prototype.getPageCount = function getPageCount() {
        return this.docPromise.then(function (doc) {
            return doc.GetPageCount();
        });
    };

    PDFDoc.prototype.getIndirectObject = function getIndirectObject(objNum) {
        return this.docPromise.then(function (doc) {
            var object = doc.GetIndirectObject(objNum);
            return new _PDFObject2.default(doc, object);
        });
    };

    PDFDoc.prototype.getPagesWidthHeight = function getPagesWidthHeight() {
        return this.docPromise.then(function (doc) {
            return [doc.GetPageCount(), doc];
        }).then(function (_ref2) {
            var _ref3 = _slicedToArray(_ref2, 2),
                count = _ref3[0],
                doc = _ref3[1];

            var list = [];
            var now = Date.now();
            for (var i = count; i--;) {
                var page = doc.GetPage(i);
                list[i] = {
                    width: page.GetWidth(),
                    height: page.GetHeight()
                };
            }
            var after = Date.now() - now;
            return list;
        });
    };

    PDFDoc.prototype.getPageByIndex = function getPageByIndex(index) {
        var _this4 = this;

        var pdfPage = this.pageIndexMap[index];
        if (pdfPage) {
            return Promise.resolve(pdfPage);
        }
        if (this.pageIndexPromise[index]) {
            return this.pageIndexPromise[index];
        }
        var deferred = (0, _createDeferred2.default)();
        pdfPage = new _PDFPage2.default(index, this);
        this.pageIndexPromise[index] = pdfPage.c_pagePromise.then(function () {
            _this4.updatePageIndexMap(index, pdfPage);
            _this4.updatePageCache(pdfPage);
            delete _this4.pageIndexPromise[index];
            deferred.resolve(pdfPage);
        });
        return deferred.promise;
    };
    /**
     * 获取文档页面对象
     * @param {number} pageNumber 通过obj number 获取页面对象
     * @returns {PDFPage} Promise
     */


    PDFDoc.prototype.getPage = function getPage(pageNumber) {};
    /**
     * 获取文档页面对象
     * @param {number} pageIndex 通过物理页面index 获取页面对象
     */


    PDFDoc.prototype.getPDFPageByPageIndex = function getPDFPageByPageIndex(pageIndex) {};

    PDFDoc.prototype.getPermission = function getPermission() {
        if (this.stdCipherOptions) {
            return this.stdCipherOptions.permission;
        }
        return this.doc.GetUserPermissions();
    };

    PDFDoc.prototype.getMetadata = function getMetadata() {
        var engine = this.engine;
        var metadata = new engine.Metadata(this.doc);

        var baseInfo = {
            "Title": getMetadataValues(metadata, new engine.WString("Title")),
            "Author": getMetadataValues(metadata, new engine.WString("Author")),
            "Subject": getMetadataValues(metadata, new engine.WString("Subject")),
            "Keywords": getMetadataValues(metadata, new engine.WString("Keywords")),
            "Creator": getMetadataValues(metadata, new engine.WString("Creator")),
            "Producer": getMetadataValues(metadata, new engine.WString("Producer")),
            "Trapped": getMetadataValues(metadata, new engine.WString("Trapped")),
            "CreationDate": getMetadataValues(metadata, new engine.WString("CreationDate")),
            "ModDate": getMetadataValues(metadata, new engine.WString("ModDate")),
            "pdfaid": getMetadataValues(metadata, new engine.WString("pdfaid"))
        };

        var customizedKey = metadata.GetCustomerKeys();
        for (var i = 0, j = customizedKey.length; i < j; i++) {
            var key = customizedKey.GetAt(i);
            baseInfo[key.toString()] = metadata.GetValues(key);
        }
        metadata.delete();
        metadata = null;
        return baseInfo;
    };

    PDFDoc.prototype.setMetadataValue = function setMetadataValue(key, value) {
        var engine = this.engine;
        var metadata = new engine.Metadata(this.doc);

        var valueArray = metadata.GetValues(key);
        valueArray.RemoveAll();
        valueArray.Add(value);

        metadata.SetValues(key, valueArray);

        metadata.delete();
        metadata = null;
    };

    PDFDoc.prototype.movePageTo = function movePageTo(pageId, destIndex) {
        var _this = this;
        return this.docPromise.then(function (c_doc) {
            var page = _this.getPageById(pageId);
            return page.parsedPage().then(function (c_page) {
                var pageIndex = page.index;
                var result = c_doc.MovePageTo(c_page, destIndex);
                if (result) {
                    var minIndex = void 0,
                        maxIndex = void 0,
                        isUp = void 0;
                    if (pageIndex < destIndex) {
                        minIndex = pageIndex;
                        maxIndex = destIndex;
                        isUp = false;
                    } else {
                        minIndex = destIndex;
                        maxIndex = pageIndex;
                        isUp = true;
                    }
                    _this.updatePageIndex(minIndex, maxIndex, isUp, true);
                    // console.log("======= movePageTo jr");
                    // console.log(_this.pageIndexMap);
                    // console.log(_this.pageCache);
                }

                return result;
            });
        });
    };

    PDFDoc.prototype.insertPage = function insertPage(pageIndex, width, height) {
        var _this = this;
        return this.docPromise.then(function (c_doc) {
            var c_page = c_doc.InsertPage(pageIndex, width, height);
            if (!c_page) {
                return false;
            }
            var index = c_page.GetIndex();
            var newBlankPage = void 0;
            var pdfPage = newBlankPage = new _PDFPage2.default(index, _this);
            newBlankPage.page = c_page;
            var maxIndex = c_doc.GetPageCount() - 1;
            _this.updatePageIndex(index + 1, maxIndex, true, false);
            _this.updatePageIndexMap(index, pdfPage);
            _this.updatePageCache(newBlankPage);
            // console.log("======= insertPage jr");
            // console.log(_this.pageIndexMap);
            // console.log(_this.pageCache);

            return newBlankPage.toJson();
        });
    };

    PDFDoc.prototype.removePage = function removePage(pageIndex) {
        var _this = this;
        return this.docPromise.then(function (c_doc) {
            var result = c_doc.RemovePage(pageIndex);
            if (result) {
                if (_this.pageIndexMap[pageIndex]) {
                    var page = _this.pageIndexMap[pageIndex];
                    delete _this.pageIndexMap[pageIndex];
                    delete _this.pageCache[page.id];
                }
                var maxIndex = c_doc.GetPageCount() - 1;
                _this.updatePageIndex(pageIndex, maxIndex);

                // console.log("======= removePage jr");
                // console.log(_this.pageIndexMap);
            }
            return result;
        });
    };

    PDFDoc.prototype.updatePageIndex = function updatePageIndex(minIndex, maxIndex, isUp, isMove) {
        if (isMove) {
            if (isUp) {
                var tmp = this.pageIndexMap[maxIndex];
                this.updatePageIndex(minIndex + 1, maxIndex, isUp, false);
                if (tmp) {
                    this.pageIndexMap[minIndex] = tmp;
                    this.pageIndexMap[minIndex].index = minIndex;
                }
            } else {
                var _tmp = this.pageIndexMap[minIndex];
                this.updatePageIndex(minIndex, maxIndex - 1, isUp, false);
                if (_tmp) {
                    this.pageIndexMap[maxIndex] = _tmp;
                    this.pageIndexMap[maxIndex].index = maxIndex;
                }
            }
        } else {
            if (isUp) {
                for (var i = maxIndex; i >= minIndex; i--) {
                    if (!this.pageIndexMap[i - 1]) continue;
                    this.pageIndexMap[i] = this.pageIndexMap[i - 1];
                    this.pageIndexMap[i].index = i;
                }
            } else {
                for (var _i = minIndex; _i <= maxIndex; _i++) {
                    if (!this.pageIndexMap[_i + 1]) continue;
                    this.pageIndexMap[_i] = this.pageIndexMap[_i + 1];
                    this.pageIndexMap[_i].index = _i;
                }
            }
        }
    };

    PDFDoc.prototype.destroy = function destroy() {
        var pageCache = this.pageCache;
        for (var i in pageCache) {
            pageCache[i].destroy();
            delete pageCache[i];
        }
        this.asyncBlock && this.asyncBlock.destroy();
        this.doc && this.doc.delete();
        if (this.pdfTree) {
            this.pdfTree.delete();
            this.pdfTree = null;
        }
        this.password = null;
        this.stdCipherOptions = null;
        this.passwordType = null;
        /**
        * @type GSDK.PDFDoc
        **/
        this.doc = null;
    };

    PDFDoc.prototype.destroyPage = function destroyPage(id) {
        var page = this.getPageById(id);
        if (page) {
            page.destroy();
            delete this.pageCache[id];
        }
    };

    PDFDoc.prototype.toJson = function toJson() {
        var doc = this.doc;
        var engine = this.engine;
        var pageCount = doc.GetPageCount();
        var fileSize = doc.GetFileSize();
        var action = this.action && this.action.toJson();
        var fileID = [];
        var trailer = doc.GetTrailer();
        var IDObj = void 0;
        if (trailer) {
            var strID = new this.engine.String("ID");
            IDObj = trailer.GetElement(strID);
            strID.delete();
            strID = null;
        }
        if (IDObj) {
            var IDArray = IDObj.GetArray();

            // let id0 = IDArray.GetElement(0).toString();
            for (var i = 0, sz = 2; i < sz; i++) {
                var strBuffer = IDArray.GetElement(i).GetString().GetBuffer();

                var hexStrID = '';
                for (var j = 0, strLength = 16; j < strLength; j++) {
                    var code = this.engine.HEAP8[strBuffer + j] >>> 0 & 0x00ff;
                    code = code.toString(16);
                    if (code.length < 2) code = '0' + code;
                    hexStrID += code;
                }
                fileID.push(hexStrID);
            }
        }
        var isOwner = false;
        try {
            var securityHandler = doc.GetSecurityHandler();
            if (securityHandler.IsEmpty()) {
                isOwner = false;
            } else {
                var EncryptType = engine.EncryptType;
                switch (securityHandler.GetSecurityType()) {
                    case EncryptType.e_EncryptNone:
                        isOwner = false;
                        break;
                    case EncryptType.e_EncryptPassword:
                        if (this.otherData && this.otherData.encryptPassword) {
                            var pwd = engine.Library.DecryptPassword(new engine.String(this.otherData.encryptPassword));
                            isOwner = doc.CheckPassword(pwd) == engine.PasswordType.e_PwdOwner;
                        } else {
                            isOwner = doc.CheckPassword(new engine.String(this.password)) == engine.PasswordType.e_PwdOwner;
                        }
                        break;
                    case EncryptType.e_EncryptFoxitDRM:
                    case EncryptType.e_EncryptCDRM:
                        isOwner = doc.GetDRMEncryptData().is_owner;
                        break;
                    case EncryptType.e_EncryptCertificate:
                    //isOwner = doc.GetCertificateEncryptData().is_owner;
                    //break;
                    case EncryptType.e_EncryptCustom:
                    //isOwner = doc.GetCustomEncryptData().is_owner;
                    //break;
                    case EncryptType.e_EncryptRMS:
                    //isOwner = doc.GetDRMEncryptData().is_owner;
                    //break;
                    case EncryptType.e_EncryptUnknown:
                    default:
                        isOwner = false;
                        break;
                }
            }
        } catch (e) {
            isOwner = false;
        }

        var jsNameTree = {};

        var nameTree = new this.engine.PDFNameTree(doc, this.engine.PDFNameTreeType.e_JavaScript);
        for (var nameIndex = 0, _sz = nameTree.GetCount(); nameIndex < _sz; nameIndex++) {
            var name = nameTree.GetName(nameIndex);
            var obj = nameTree.GetObj(name);
            var _action = new this.engine.Action(doc, obj.GetDict());
            var javaScriptAction = new this.engine.JavaScriptAction(_action);

            var scripts = javaScriptAction.GetScript();
            jsNameTree[name.toString()] = scripts.toString();

            _action.delete();
            javaScriptAction.delete();
            _action = null;
            javaScriptAction = null;
        }
        nameTree.delete();
        nameTree = null;

        var icons = [];

        //todo 使用icon name tree
        var c = doc.GetCatalog();
        var n = c.GetElement(new this.engine.String('Names'));
        n = c.GetElement(new this.engine.String('Names')).GetDict();
        var iconsObj = n.GetElement(new this.engine.String('AP'));
        if (iconsObj) {
            var iconsDict = iconsObj.GetDirectObject().GetDict();
            var names = iconsDict.GetElement(new this.engine.String("Names")).GetArray();
            var size = names.GetElementCount();

            for (var _i2 = 0; _i2 < size; _i2 += 2) {
                var o = names.GetElement(_i2);
                var _name = void 0;
                var strName = o.GetString();
                try {
                    _name = strName.toString();
                } catch (e) {
                    var _hexStrID = '';
                    var _strBuffer = strName.GetBuffer();
                    for (var _j = 0, _strLength = strName.GetLength(); _j < _strLength; _j++) {
                        var _code = this.engine.HEAP8[_strBuffer + _j] >>> 0 & 0x00ff;
                        _hexStrID += String.fromCharCode(_code);
                    }
                    _name = this.JR.pdfNameDecoding(_hexStrID);
                }
                icons.push({
                    name: _name,
                    objNum: names.GetElement(_i2 + 1).GetDirectObject().GetObjNum()
                });
            }
        }

        //let pagesBasicInfo = [];
        //console.time('PDFDoc.toJson.pagesBasicInfo1');
        //for (let i = pageCount; i--;) {
        //    let page = doc.GetPageBasicInfo(i);
        //    pagesBasicInfo[i] = {
        //        width: page.width,
        //        height: page.height,
        //        //rotate: page.GetRotation().value,
        //    };
        //}
        //console.timeEnd('PDFDoc.toJson.pagesBasicInfo1');
        //console.time('PDFDoc.toJson.pagesBasicInfo');
        //for (let i = pageCount; i--;) {
        //    let page = doc.GetPage(i);
        //    pagesBasicInfo[i] = {
        //        width: page.GetWidth(),
        //        height: page.GetHeight(),
        //        rotate: page.GetRotation().value,
        //    };
        //}
        //console.timeEnd('PDFDoc.toJson.pagesBasicInfo');
        return {
            id: this.id,
            // size: this.doc.GetSize(),
            fileSize: fileSize,
            fileID: fileID,
            pageCount: pageCount,
            userPermissions: doc.GetUserPermissions(),
            action: action,
            jsNameTree: jsNameTree,
            hasForm: doc.HasForm(),
            isOwner: isOwner,
            icons: icons
            //pagesBasicInfo: pagesBasicInfo,
        };
    };

    PDFDoc.prototype.getStream = function getStream(_ref4) {
        var writeStream = _ref4.writeStream;

        var engine = this.engine;
        return this.docPromise.then(function (doc) {
            var writtenSize = 0;
            var deferred = (0, _createDeferred2.default)();
            engine.saveDoc(doc, engine.WriterCallback.implement({
                Release: function Release() {},
                Flush: function Flush() {
                    deferred.resolve(writtenSize);
                    return true;
                },
                GetSize: function GetSize() {
                    return writtenSize;
                },
                WriteBlock: function WriteBlock(cursor, offset, size) {
                    writtenSize += size;
                    var engineBuffer = engine.HEAPU8.buffer;
                    var arrayBuffer = void 0;
                    if (engineBuffer.slice) {
                        arrayBuffer = engineBuffer.slice(cursor, cursor + size);
                    } else {
                        arrayBuffer = new Uint8Array(engineBuffer, cursor, size).buffer;
                    }
                    writeStream(arrayBuffer, offset, size);
                    return true;
                }
            }), engine.SaveFlags.e_SaveFlagNormal.value);
            return deferred.promise;
        });
    };

    PDFDoc.prototype.importFromFDF = function importFromFDF(fdfdoc) {
        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;

        var range = new this.engine.Range(0, this.doc.GetPageCount(), this.engine.RangeFilter.e_All);
        try {
            var ret = this.doc.ImportFromFDF(fdfdoc, type, range);
            range.delete();
            range = null;
            return ret;
        } catch (err) {} finally {
            logger.info('ImportFromFDF', 'finally');
        }
    };

    PDFDoc.prototype.getBookmarks = function getBookmarks() {
        var _this = this;
        return this.docPromise.then(function (c_doc) {
            var deferred = (0, _createDeferred2.default)();
            var root_bookmark = c_doc.GetRootBookmark();
            var bookmarkTree = void 0;
            if (root_bookmark.IsEmpty()) {
                bookmarkTree = null;
            } else {
                var rootBookmark = new _PDFBookmark2.default(_this.engine, "", root_bookmark, c_doc);
                bookmarkTree = rootBookmark.toJson();
                _this.rootBookmark = rootBookmark;
            }
            deferred.resolve(bookmarkTree);
            return deferred.promise;
        });
    };

    PDFDoc.prototype.createRootBookmark = function createRootBookmark() {
        var _this = this;
        return this.docPromise.then(function (c_doc) {
            if (!_this.rootBookmark) {
                var root_bookmark = c_doc.CreateRootBookmark();
                var pdfBookmark = new _PDFBookmark2.default(_this.engine, "", root_bookmark, c_doc);
                _this.rootBookmark = pdfBookmark;
            }
            return _this.rootBookmark.toJson();
        });
    };

    PDFDoc.prototype.insertBookmark = function insertBookmark(id, title, pageIndex, top) {
        var left = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;

        var _this = this;
        var pdfBookmark = void 0;
        if (id === "" || id === null) {
            pdfBookmark = _this.rootBookmark;
        } else {
            pdfBookmark = _this.rootBookmark.getBookmarkById(id);
        }
        var newBookmark = pdfBookmark.insert(title, pageIndex, { top: top, left: left });
        var json = newBookmark.toJson();
        return json;
    };

    PDFDoc.prototype.setBookmarkProperty = function setBookmarkProperty(id, properties) {
        var pdfBookmark = this.rootBookmark.getBookmarkById(id);
        pdfBookmark.setProperty(properties);
        return pdfBookmark.toJson();
    };

    PDFDoc.prototype.removeBookmark = function removeBookmark(id) {
        var pdfBookmark = this.rootBookmark.getBookmarkById(id);
        return pdfBookmark.remove();
    };

    PDFDoc.prototype.getLayerNodes = function getLayerNodes() {
        var engine = this.engine;
        var _this = this;
        return this.docPromise.then(function (c_doc) {
            var deferred = (0, _createDeferred2.default)();
            var pdfLayer = new _PDFLayer2.default(c_doc, engine);
            _this.pdfLayer = pdfLayer;
            var layerJSON = pdfLayer.toJson();
            deferred.resolve(layerJSON);
            return deferred.promise;
        });
    };

    PDFDoc.prototype.getRedaction = function getRedaction() {
        var engine = this.engine;
        var _this = this;
        return this.docPromise.then(function (c_doc) {
            if (!_this.c_redaction) {
                try {
                    _this.c_redaction = new engine.Redaction(c_doc);
                } catch (err) {
                    if (!isNaN(err)) {
                        err = engine.getErrorCode(err);
                    }
                    console.warn(err);
                }
            }
            return _this.c_redaction;
        });
    };

    PDFDoc.prototype.applyRedaction = function applyRedaction() {
        var _this5 = this;

        var oldPagesAnnotObjs = {};
        var pagesMap = {};
        var promises = [];
        //先获取已存在的annots
        for (var index in this.pageCache) {
            var page = this.pageCache[index];
            pagesMap[page.index] = page;
            promises.push(page.getAnnots());
        }
        return Promise.all(promises).then(function (pagesAnnotObjs) {
            var i = 0;
            //把annots 按照pageIndex 和 annotId 关联起来.
            /**
             * {
             *  pageIndex:{
             *     id: annot,
             *     id2: annot2,
             *  },
             *  pageIndex2:{
             *     id: annot,
             *     id2: annot2,
             *  },
             * }
             */

            var _loop = function _loop(_index) {
                var page = _this5.pageCache[_index];
                if (!oldPagesAnnotObjs[page.index]) oldPagesAnnotObjs[page.index] = {};
                pagesAnnotObjs[i].forEach(function (annot) {
                    var id = annot.annot.GetUniqueID().toString();
                    if (id) {
                        oldPagesAnnotObjs[page.index][id] = annot;
                    }
                });
                i++;
            };

            for (var _index in _this5.pageCache) {
                _loop(_index);
            }
            // redaction apply, 然后更新page annots, 得到apply后, 每页现在的annotId
            /*
                [
                    {
                        index,
                        annotIds
                    },
                    {
                        index,
                        annotIds
                    }
                ]
             */
            return _this5.getRedaction().then(function (c_redaction) {
                var promises = [];
                var result = c_redaction.Apply();
                if (!result) {
                    return false;
                }
                for (var _index2 in _this5.pageCache) {
                    var _page = _this5.pageCache[_index2];
                    promises.push(_page.update());
                }
                return Promise.all(promises);
            }).then(function (pagesAnnots) {
                var deletedPageAnnots = [];
                for (var _i3 = 0; _i3 < pagesAnnots.length; _i3++) {
                    var pageAnnots = pagesAnnots[_i3];
                    var pageIndex = pageAnnots.index;
                    var oldAnnots = oldPagesAnnotObjs[pageIndex];
                    var deletedAnnots = [];
                    //循环apply的annots, 找出不存在的.
                    for (var id in oldAnnots) {
                        var annot = oldAnnots[id];
                        if (pageAnnots.annotIds.indexOf(id) === -1) {
                            deletedAnnots.push(id);
                        } else {
                            //处理遗留的Note annot.
                            var type = annot.getType();
                            if (type == "text") {
                                var markUp = annot.annot.GetReplyTo();
                                var rect = annot.annot.GetRect();
                                if (rect.left !== 0 || rect.top !== 0 || rect.right !== 0 || rect.bottom !== 0) {
                                    continue;
                                }
                                var annotId = annot.annot.GetUniqueID().toString();
                                if (markUp.isDeleted()) {
                                    deletedAnnots.push(annotId);
                                } else {
                                    try {
                                        var _id = markUp.GetUniqueID().toString();
                                        if (pageAnnots.annotIds.indexOf(_id) === -1) {
                                            var _annotId = annot.annot.GetUniqueID().toString();
                                            deletedAnnots.push(_annotId);
                                        }
                                    } catch (e) {
                                        if (!isNaN(e)) {
                                            e = _this5.engine.getErrorCode(e);
                                        }
                                        if (e.value && e.value == 4) {
                                            deletedAnnots.push(annotId);
                                            annot.remove().then(function (success) {
                                                // console.log("remove success: " + success);
                                            });
                                        }
                                        console.error(e);
                                    }
                                }
                            }
                        }
                    };
                    deletedPageAnnots.push({
                        pageIndex: pageIndex,
                        removedAnnotIds: deletedAnnots
                    });
                }
                return deletedPageAnnots;
            }).catch(function (e) {
                if (!isNaN(e)) {
                    e = _this5.engine.getErrorCode(e);
                }
                console.log("error: ");
                console.log(e);
                return false;
            });
        });
    };

    PDFDoc.prototype.exportToFDF = function exportToFDF(fileType, dataType) {
        var engine = this.engine;

        var fdfdoc = new engine.FDFDoc(fileType);
        var range = new engine.Range(0, this.doc.GetPageCount(), engine.RangeFilter.e_All);
        this.doc.ExportToFDF(fdfdoc, dataType, range);
        range.delete();
        range = null;

        var writtenSize = 0;
        var buffers = [];

        fdfdoc.SaveAs(engine.WriterCallback.implement({
            Release: function Release() {},
            Flush: function Flush() {
                return true;
            },
            GetSize: function GetSize() {
                return writtenSize;
            },
            WriteBlock: function WriteBlock(cursor, offset, size) {
                writtenSize += size;
                var engineBuffer = engine.HEAPU8.buffer;
                var arrayBuffer = void 0;
                if (engineBuffer.slice) {
                    arrayBuffer = engineBuffer.slice(cursor, cursor + size);
                } else {
                    arrayBuffer = new Uint8Array(engineBuffer, cursor, size).buffer;
                }
                buffers.push(arrayBuffer);
                //writeStream(arrayBuffer, offset, size);
                return true;
            }
        }));

        fdfdoc.delete();
        fdfdoc = null;
        return new Blob(buffers, { type: ['application/vnd.adobe.fdf', 'application/vnd.xfdf'][fileType] });
    };

    PDFDoc.prototype.loadForm = function loadForm() {
        if (this.form) {
            return this.form;
        }

        var engine = this.engine;
        var engineForm = new engine.Form(this.doc);
        this.form = new _Form2.default(engineForm, engine, this.JR);
        return this.form;
    };

    PDFDoc.prototype.setOpenAction = function setOpenAction(type) {
        var action = this.JR.actionManager.create(this.doc, type);
        this.doc.SetOpenAction(action);
        this.action = this.JR.actionManager.get(action, this.doc, this.JR);
        return this.action.toJson();
    };

    PDFDoc.prototype.setPasswordAndPermission = function setPasswordAndPermission(userPassword, adminPassword, permission, cipher, isEncryptMetaData) {
        var _this6 = this;

        var engine = this.engine;
        return this.docPromise.then(function (c_doc) {
            var c_cipher = void 0,
                keyLength = void 0;
            if (cipher == _cipherType2.default.None) {
                c_cipher = engine.CipherType.e_CipherNone;
                keyLength = 0;
            } else if (cipher == _cipherType2.default.RC4) {
                c_cipher = engine.CipherType.e_CipherRC4;
                keyLength = 16;
            } else if (cipher == _cipherType2.default.AES128) {
                c_cipher = engine.CipherType.e_CipherAES;
                keyLength = 16;
            } else if (cipher == _cipherType2.default.AES256) {
                c_cipher = engine.CipherType.e_CipherAES;
                keyLength = 32;
            } else {
                throw new Error("cipher error");
            }
            var securityHandler = c_doc.GetSecurityHandler();
            var securityType = securityHandler.GetSecurityType();
            var stdSecurityHandler = void 0,
                stdEncryptData = void 0;
            try {
                if (securityType.value == 1) {
                    stdEncryptData = c_doc.GetStdEncryptData();
                    stdEncryptData.cipher = c_cipher;
                    stdEncryptData.is_encrypt_metadata = isEncryptMetaData;
                    stdEncryptData.key_length = keyLength;
                    stdEncryptData.user_permissions = permission;
                    stdSecurityHandler = new engine.StdSecurityHandler(securityHandler);
                } else {
                    stdEncryptData = new engine.StdEncryptData(isEncryptMetaData, permission, c_cipher, keyLength);
                    stdSecurityHandler = new engine.StdSecurityHandler();
                }
            } catch (e) {
                stdEncryptData = new engine.StdEncryptData(isEncryptMetaData, permission, c_cipher, keyLength);
                stdSecurityHandler = new engine.StdSecurityHandler();
            }
            if (cipher == _cipherType2.default.AES256) {
                var strUserPwd = void 0;
                var strOwnerPwd = void 0;
                if (userPassword == -1) {
                    strUserPwd = new engine.WString("");
                    strOwnerPwd = new engine.WString(adminPassword);
                    stdSecurityHandler.SetAES256ModifyFlags(5);
                    stdSecurityHandler.InitializeW(stdEncryptData, strUserPwd, strOwnerPwd);
                } else {
                    strUserPwd = new engine.WString(userPassword);
                    strOwnerPwd = new engine.WString(adminPassword);
                    stdSecurityHandler.InitializeW(stdEncryptData, strUserPwd, strOwnerPwd);
                }

                strUserPwd.delete();
                strOwnerPwd.delete();
            } else {
                var _strUserPwd = void 0,
                    _strOwnerPwd = void 0;
                _strUserPwd = new engine.String(userPassword);
                _strOwnerPwd = new engine.String(adminPassword);
                stdSecurityHandler.Initialize(stdEncryptData, _strUserPwd, _strOwnerPwd);

                _strUserPwd.delete();
                _strOwnerPwd.delete();
            }

            var result = c_doc.SetSecurityHandler(stdSecurityHandler);
            if (result) {
                _this6.stdCipherOptions = {
                    isEncryptMetadata: isEncryptMetaData,
                    permission: permission,
                    cipherType: cipher
                };
            }
            stdEncryptData.delete();
            stdEncryptData = null;
            stdSecurityHandler.delete();
            stdSecurityHandler = null;
            return result;
        });
    };

    PDFDoc.prototype.removeSecurity = function removeSecurity() {
        var _this7 = this;

        return this.docPromise.then(function (c_doc) {
            _this7.registerDRMSecurityCallback = false;
            return c_doc.RemoveSecurity();
        });
    };

    PDFDoc.prototype.checkPassword = function checkPassword(password) {
        var engine = this.engine;
        return this.docPromise.then(function (c_doc) {
            var pwd = new engine.String(password);
            var type = c_doc.CheckPassword(pwd);
            pwd.delete();
            pwd = null;
            return type.value;
        });
    };

    PDFDoc.prototype.getStdCipherOptions = function getStdCipherOptions() {
        var _this8 = this;

        return this.docPromise.then(function (c_doc) {
            if (_this8.stdCipherOptions) return _this8.stdCipherOptions;
            var options = {};
            var securityHandler = c_doc.GetSecurityHandler();
            if (!securityHandler || securityHandler.IsEmpty()) return options;
            var securityType = securityHandler.GetSecurityType();
            if (securityType.value == 1) {
                var encrypeData = c_doc.GetStdEncryptData();
                options.isEncryptMetadata = encrypeData.is_encrypt_metadata;
                options.permission = encrypeData.user_permissions;
                if (encrypeData.cipher.value === 0) {
                    options.cipherType = _cipherType2.default.None;
                } else if (encrypeData.cipher.value === 1) {
                    options.cipherType = _cipherType2.default.RC4;
                } else if (encrypeData.cipher.value === 2) {
                    if (encrypeData.key_length === 16) {
                        options.cipherType = _cipherType2.default.AES128;
                    } else {
                        options.cipherType = _cipherType2.default.AES256;
                    }
                }
            }
            return options;
        });
    };

    PDFDoc.prototype.getUserPassword = function getUserPassword(password) {
        var engine = this.engine;
        return this.docPromise.then(function (c_doc) {
            var pwd = new engine.String(password);

            var ret = c_doc.GetUserPassword(pwd).toString();

            pwd.delete();
            pwd = null;

            return ret;
        });
    };

    PDFDoc.prototype.setPasswordType = function setPasswordType(type) {
        this.passwordType = type;
    };

    PDFDoc.prototype.getPasswordType = function getPasswordType() {
        var _this9 = this;

        return this.docPromise.then(function (c_doc) {
            if (_this9.passwordType) {
                return _this9.passwordType;
            }
            return c_doc.GetPasswordType().value;
        });
    };

    PDFDoc.prototype.setRenderFlag = function setRenderFlag(flags) {
        this.renderFlags = flags;
    };

    PDFDoc.prototype.getRenderFlags = function getRenderFlags() {
        return this.renderFlags;
    };

    PDFDoc.prototype.drmEncrypt = function drmEncrypt(options) {
        var engine = this.engine;
        return this.docPromise.then(function (c_doc) {
            var securityHandler = c_doc.GetSecurityHandler();
            if (securityHandler && !securityHandler.IsEmpty()) {
                var encryptType = securityHandler.GetSecurityType();
                if (encryptType !== engine.EncryptType.e_EncryptUnknown && encryptType !== engine.EncryptType.e_EncryptNone) {
                    // 说明有加密了，让用户先移除加密
                    return Promise.reject({ error: 1 });
                }
            }
            return c_doc;
        }).then(function (c_doc) {
            var drmEncryptData = new engine.DRMEncryptData(options.isEncryptMetadata, new engine.String(options.subFilter), engine.CipherType.values[options.cipher], options.keyLength, options.isOwner, options.userPermissions);
            var drmSecurityHandler = new engine.DRMSecurityHandler();
            if (options.values) {
                var values = options.values;
                for (var i in values) {
                    drmSecurityHandler.SetDRMValue(i, new engine.WString(values[i]));
                }
            }
            if (drmSecurityHandler.Initialize(drmEncryptData, new engine.String(options.fileId), new engine.String(options.initialKey))) {
                return [c_doc, drmSecurityHandler];
            } else {
                // 加密失败
                return Promise.reject({ error: 2 });
            }
        }).then(function (_ref5) {
            var _ref6 = _slicedToArray(_ref5, 2),
                c_doc = _ref6[0],
                drmSecurityHandler = _ref6[1];

            return c_doc.SetSecurityHandler(drmSecurityHandler);
        });
    };

    return PDFDoc;
}();

function getMetadataValues(metadata, key) {
    var valueArray = metadata.GetValues(key);
    var jsValueArray = '';
    for (var index = 0, sz = valueArray.GetSize(); index < sz; index++) {
        jsValueArray = valueArray.GetAt(index).toString();
    }
    return jsValueArray;
}

exports.default = PDFDoc;

/***/ }),

/***/ "./src/pdf-jr/PDFFontMgr.js":
/*!**********************************!*\
  !*** ./src/pdf-jr/PDFFontMgr.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var urlList = [];

function addFont(bufferString, engine) {
  var buffer = void 0;
  if (bufferString instanceof Uint8Array) {
    buffer = bufferString.buffer;
  } else {
    if (bufferString.GetLength() < 1) {
      return;
    }

    var start = bufferString.GetBuffer();
    var size = bufferString.GetLength();
    var end = start + size;
    if (engine.HEAPU8.buffer.slice) {
      buffer = engine.HEAPU8.buffer.slice(start, end);
    } else {
      buffer = new Uint8Array(engine.HEAPU8.buffer, start, size).buffer;
    }
  }
  return { buffer: buffer };
  var blob = new Blob([buffer], { type: 'application/x-font-woff' });
  //let blob = new Blob([buffer],{type:'application/x-font-truetype'});
  //let url = URL.createObjectURL(blob);
  //urlList.push(url);
  //return url
  return blob;
}
function revokeAllURL() {
  //for(let url of urlList){
  //  URL.revokeObjectURL(url);
  //}
}
function getWoffDataBuffer(woffData, engine) {
  if (woffData.GetLength() < 1) {
    return;
  }
  var start = bufferString.GetBuffer();
  var size = bufferString.GetLength();
  var end = start + size;
  if (engine.HEAPU8.buffer.slice) {
    buffer = engine.HEAPU8.buffer.slice(start, end);
  } else {
    buffer = new Uint8Array(engine.HEAPU8.buffer, start, size).buffer;
  }
  return { buffer: buffer };
}

exports.default = {
  addFont: addFont,
  revokeAllURL: revokeAllURL,
  getWoffDataBuffer: getWoffDataBuffer
};

/***/ }),

/***/ "./src/pdf-jr/PDFJR.js":
/*!*****************************!*\
  !*** ./src/pdf-jr/PDFJR.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

__webpack_require__(/*! ./polyfill.js */ "./src/pdf-jr/polyfill.js");

var _createDeferred = __webpack_require__(/*! ../shared/createDeferred */ "./src/shared/createDeferred.js");

var _createDeferred2 = _interopRequireDefault(_createDeferred);

var _PDFDoc = __webpack_require__(/*! ./PDFDoc */ "./src/pdf-jr/PDFDoc.js");

var _PDFDoc2 = _interopRequireDefault(_PDFDoc);

var _getThirdPartyFontBuffer = __webpack_require__(/*! ./getThirdPartyFontBuffer */ "./src/pdf-jr/getThirdPartyFontBuffer.js");

var _getThirdPartyFontBuffer2 = _interopRequireDefault(_getThirdPartyFontBuffer);

var _AnnotManager = __webpack_require__(/*! ./annot/AnnotManager */ "./src/pdf-jr/annot/AnnotManager.js");

var _AnnotManager2 = _interopRequireDefault(_AnnotManager);

var _ActionManager = __webpack_require__(/*! ./action/ActionManager */ "./src/pdf-jr/action/ActionManager.js");

var _ActionManager2 = _interopRequireDefault(_ActionManager);

var _GraphicsObjectManager = __webpack_require__(/*! ./graphics/GraphicsObjectManager.js */ "./src/pdf-jr/graphics/GraphicsObjectManager.js");

var _GraphicsObjectManager2 = _interopRequireDefault(_GraphicsObjectManager);

var _gsdk = __webpack_require__(/*! ../jr-engine/gsdk/gsdk.hash */ "./src/jr-engine/gsdk/gsdk.hash.js");

var _iconProvider = __webpack_require__(/*! ./iconProvider */ "./src/pdf-jr/iconProvider.js");

var _iconProvider2 = _interopRequireDefault(_iconProvider);

var _LoggerFactory = __webpack_require__(/*! ../shared/logger/LoggerFactory.js */ "./src/shared/logger/LoggerFactory.js");

var _LoggerFactory2 = _interopRequireDefault(_LoggerFactory);

var _brotliDecompress = __webpack_require__(/*! ./brotli-decompress */ "./src/pdf-jr/brotli-decompress.js");

var _brotliDecompress2 = _interopRequireDefault(_brotliDecompress);

var _customSecurityHandler = __webpack_require__(/*! ./customSecurityHandler */ "./src/pdf-jr/customSecurityHandler.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } /**
                                                                                                                                                           * Created by linc on 2018/6/28.
                                                                                                                                                           */


var logger = _LoggerFactory2.default.getLogger('PDFJR');
/**
 * PDF javascript render class.
 * @class
 **/

var PDFJR = function () {
    /**
     * Create PDFJR
     * @param PDFJrEngine PDF javascript Engine
     */
    function PDFJR(PDFJrEngine) {
        var _this = this;

        var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
            _ref$enginePath = _ref.enginePath,
            enginePath = _ref$enginePath === undefined ? '.' : _ref$enginePath,
            _ref$fontPath = _ref.fontPath,
            fontPath = _ref$fontPath === undefined ? 'http://webpdf.foxitsoftware.com/webfonts' : _ref$fontPath;

        _classCallCheck(this, PDFJR);

        var jrEngineDeferred = (0, _createDeferred2.default)();
        var jrEnginePromise = jrEngineDeferred.promise;
        this.jrEnginePromise = jrEnginePromise;
        this.fontPath = fontPath;
        /**
         * @type GSDK
         */
        var engine = this.engine = PDFJrEngine({
            onRuntimeInitialized: function onRuntimeInitialized() {
                jrEngineDeferred.resolve();
            },
            locateFile: function locateFile(filename) {
                if (filename === 'gsdk.wasm') {
                    if (navigator.userAgent.indexOf("Edge") !== -1) {
                        return [enginePath, filename].join('/') + '?h=' + _gsdk.wasmHash;
                    }
                    return 'data:application/octet-stream;base64,' + [enginePath, filename + '.brotli'].join('/') + '?h=' + _gsdk.wasmHash;
                } else if (filename === 'gsdk.asm.js.mem') {
                    return [enginePath, filename + '.brotli'].join('/') + '?h=' + _gsdk.asmMemHash;
                }
                return [enginePath, filename].join('/') + '?h=' + _gsdk.wasmHash;
            },
            readBinary: function readBinary(wasmBinaryFile) {
                var pre = 'data:application/octet-stream;base64,';
                if (wasmBinaryFile.indexOf(pre) === 0) {
                    wasmBinaryFile = wasmBinaryFile.replace(pre, '');
                }
                return new Promise(function (resolve, reject) {
                    readBrotliAsync(wasmBinaryFile, resolve, reject);
                });
            },
            readAsync: function readAsync(memoryInitializer, onload, onerror) {
                //readAsync(memoryInitializer, onload, onerror)
                readBrotliAsync(memoryInitializer, onload, onerror);
            }
        });
        this.annotManager = new _AnnotManager2.default(engine);
        this.actionManager = new _ActionManager2.default(engine);
        this.graphicsObjectManager = new _GraphicsObjectManager2.default(engine, this);
        this.pdfDocCache = {};

        this.fontInfoMap = {};
        jrEnginePromise.then(function () {
            var engine = _this.engine;
            engine.setThirdPartyFontHandler(engine.ThirdPartyFontHandler.implement({
                GetThirdPartyFont: function GetThirdPartyFont(fontName, charset, italic, weight, fontFlag) {
                    try {
                        var key = [fontName, charset, italic, weight, fontFlag].join('-');
                        if (_this.fontInfoMap[key]) {
                            return _this.fontInfoMap[key];
                        }
                        // debugger;   
                        var buffer = _getThirdPartyFontBuffer2.default.getThirdPartyFontBuffer(fontPath, fontName, charset, italic, weight, fontFlag);
                        if (!buffer) {
                            return null;
                        }
                        var fontInfo = engine.ThirdPartyFontInfo.implement({
                            GetFaceIndex: function GetFaceIndex() {
                                return 0;
                            },
                            GetFontFileData: function GetFontFileData() {
                                var data = engine._malloc(buffer.byteLength);
                                engine.HEAPU8.set(new Uint8Array(buffer), data);
                                return data;
                                // let data = gsdk._malloc(20)
                                // for (let i = 0; i < 20; i ++) {
                                //     gsdk.HEAPU8[data + i] = i + 65
                                // }
                                // return data
                                return buffer;
                            },
                            GetFontFileSize: function GetFontFileSize() {
                                return buffer.byteLength;
                            }
                        });
                        return _this.fontInfoMap[key] = fontInfo;
                    } catch (err) {
                        if (!isNaN(err)) {
                            err = _this.engine.getErrorCode(err);
                        }
                        console.warn(err);
                    }
                },
                GetWebFontFileStream: function GetWebFontFileStream(pos) {
                    return null;
                    /**
                     * @type Uint8Array
                     */
                    var buffer = _getThirdPartyFontBuffer2.default.getWebFontFileBuffer(fontPath, pos);
                    if (!buffer) {
                        return null;
                    }
                    var streamCallback = null;
                    try {
                        streamCallback = engine.StreamCallback.implement({
                            Release: function Release() {},
                            Flush: function Flush() {
                                return true;
                            },
                            GetSize: function GetSize() {
                                return buffer.byteLength;
                            },
                            WriteBlock: function WriteBlock(cursor, offset, size) {
                                console.warn('readonly mode, write function shouldn\'t be called');
                                return true;
                            },
                            ReadBlock: function ReadBlock(bufPtr, offset, size) {
                                var src = buffer.slice(offset, offset + size);
                                engine.HEAPU8.set(src, bufPtr);
                                return true;
                            }
                        });
                    } catch (err) {
                        if (!isNaN(err)) {
                            err = this.engine.getErrorCode(err);
                        }
                        console.warn(err);
                    }

                    return streamCallback;
                },
                GetFontFilesPos: function GetFontFilesPos(pos) {
                    return _getThirdPartyFontBuffer2.default.getFontFilesPos(pos);
                }
            }));
            // iconProvider.initIconProvider(this,engine);
        });
        this.userName = 'Foxit Web';
    }

    PDFJR.prototype.getFontBuffer = function getFontBuffer(fontName, fontFlag) {
        var italic = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var charset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
        var weight = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 400;
        var realName = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;

        return _getThirdPartyFontBuffer2.default.getThirdPartyFontBuffer(this.fontPath, fontName, charset, italic, weight, fontFlag, realName);
    };

    PDFJR.prototype.updatePdfDocCache = function updatePdfDocCache(pdfDoc) {
        var id = pdfDoc.id;
        this.pdfDocCache[id] = pdfDoc;
    };

    PDFJR.prototype.getPDFDocById = function getPDFDocById(id) {
        return this.pdfDocCache[id] || null;
    };

    PDFJR.prototype.destroyDoc = function destroyDoc(id) {
        //let pdfDoc = this.pdfDocCache[id];
        //if (pdfDoc) {
        //    pdfDoc.destroy();
        //}
        delete this.pdfDocCache[id];
        //pdfDoc = null;
    };

    PDFJR.prototype.checkLicense = function checkLicense() {
        var _this2 = this;

        var sn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
        var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

        var deferred = (0, _createDeferred2.default)();

        this.jrEnginePromise.then(function () {
            return _this2.engine.initialize(sn, key) === _this2.engine.ErrorCode.e_ErrSuccess;
        }).then(function (flag) {
            if (flag) {
                _this2.engine.Library.EnableJavaScript(false);
                (0, _iconProvider2.default)().initIconProvider(_this2, _this2.engine);
                //this.registerDRMSecurityCallback();
                //let [filter,callback] = getCustomSecurityCallback(this.engine);
                //this.engine.Library.RegisterSecurityCallback(filter,callback);
            }
            return deferred.resolve(flag);
        });
        return deferred.promise;
    };

    //getPDFDocByFile (file) {
    //    let deferred = createDeferred();
    //    let fileReader = new FileReader();
    //    let engine = this.engine;
    //    fileReader.onerror = () => {
    //        deferred.reject();
    //    }
    //    fileReader.onload = () => {
    //        let dataView = new Uint8Array(fileReader.result);
    //        let bufferSize = dataView.length * dataView.BYTES_PER_ELEMENT;
    //        let mallocIndex = engine._malloc(bufferSize);
    //        engine.HEAPU8.set(dataView, mallocIndex);
    //        dataView = null;
    //        let pdfDoc = new PDFDoc(engine);
    //        this.updatePdfDocCache(pdfDoc);
    //        pdfDoc.pushChunk(mallocIndex, bufferSize);
    //        deferred.resolve(pdfDoc);
    //    }
    //    fileReader.readAsArrayBuffer(file);
    //    return deferred.promise;
    //}


    PDFJR.prototype.createNewDoc = function createNewDoc(title, author, pageSize) {
        var _this3 = this;

        var pdfDoc = new _PDFDoc2.default(this, {
            isCreate: true
        });
        this.setMetaData(pdfDoc, title, author);
        var width = void 0,
            height = void 0;
        if (pageSize) {
            if (pageSize.width) {
                width = pageSize.width;
            }
            if (pageSize.height) {
                height = pageSize.height;
            }
        }
        return pdfDoc.insertPage(0, width, height).then(function (_) {
            _this3.updatePdfDocCache(pdfDoc, title, author);
            return pdfDoc;
        });
    };

    PDFJR.prototype.setMetaData = function setMetaData(pdfDoc, title, author) {
        var titleKey = new this.engine.WString("Title");
        var authorKey = new this.engine.WString("Author");
        var producerKey = new this.engine.WString("Producer");
        var titleVal = void 0;
        if (title) {
            titleVal = new this.engine.WString(title);
        } else {
            titleVal = new this.engine.WString("Untitled.pdf");
        }
        var authorVal = void 0;
        if (author) {
            authorVal = new this.engine.WString(author);
        } else {
            authorVal = new this.engine.WString("Unknown");
        }

        var producerVal = new this.engine.WString("Foxit PDFWebSDK7.0");

        pdfDoc.setMetadataValue(titleKey, titleVal);
        pdfDoc.setMetadataValue(authorKey, authorVal);
        pdfDoc.setMetadataValue(producerKey, producerVal);
        var now = new Date();
        var y = now.getUTCFullYear();
        var m = now.getUTCMonth() + 1;
        var d = now.getUTCDate();
        var h = now.getUTCHours();
        var min = now.getUTCMinutes();
        var s = now.getUTCSeconds();
        if (m < 10) m = "0" + m;
        if (d < 10) d = "0" + d;
        if (h < 10) h = "0" + h;
        if (min < 10) min = "0" + min;
        if (s < 10) s = "0" + s;
        //D:20100917062505+10'00'
        var date = "D:" + y + m + d + h + min + s + "+00'00'";
        var creationDate = new this.engine.WString("CreationDate");
        var modDate = new this.engine.WString("ModDate");
        date = new this.engine.WString(date);

        pdfDoc.setMetadataValue(creationDate, date);
        pdfDoc.setMetadataValue(modDate, date);
        titleKey.delete();
        authorKey.delete();
        producerKey.delete();
        titleVal.delete();
        authorVal.delete();
        producerVal.delete();
        creationDate.delete();
        modDate.delete();
        date.delete();
    };

    PDFJR.prototype.getPDFDoc = function getPDFDoc(_ref2) {
        var size = _ref2.size,
            getBuffer = _ref2.getBuffer,
            release = _ref2.release;

        var pdfDoc = new _PDFDoc2.default(this, {
            getBuffer: getBuffer,
            size: size,
            release: release,
            async: false
        });
        this.updatePdfDocCache(pdfDoc);
        return pdfDoc;
    };

    PDFJR.prototype.getFDFDoc = function getFDFDoc(_ref3) {
        var _this4 = this;

        var size = _ref3.size,
            getBuffer = _ref3.getBuffer,
            release = _ref3.release;

        var readerCallback = this.engine.ReaderCallback.implement({
            Release: function Release() {},
            GetSize: function GetSize() {
                return size;
            },
            ReadBlock: function ReadBlock(buffer, offset, size) {
                var src = new Uint8Array(getBuffer(offset, size));
                _this4.engine.HEAPU8.set(src, buffer);
                return true;
            }
        });

        return new this.engine.FDFDoc(readerCallback);
    };

    PDFJR.prototype.getFDFFromURL = function getFDFFromURL(url) {
        var _this5 = this;

        var xhr = this.requestData('GET', false, url, 1, 1, true);
        var fileSize = +xhr.getResponseHeader('Content-Range').match('bytes[^]+?/([^]+)')[1];

        var readerCallback = this.engine.ReaderCallback.implement({
            Release: function Release() {},
            GetSize: function GetSize() {
                return fileSize;
            },
            ReadBlock: function ReadBlock(buffer, offset, size) {
                var src = new Uint8Array(_this5.requestData("GET", false, url, offset, size));
                _this5.engine.HEAPU8.set(src, buffer);
                return true;
            }
        });
        return Promise.resolve(new this.engine.FDFDoc(readerCallback));
    };

    PDFJR.prototype.getPDFDocAsync = function getPDFDocAsync(_ref4) {
        var size = _ref4.size,
            getBuffer = _ref4.getBuffer,
            release = _ref4.release;

        var pdfDoc = new _PDFDoc2.default(this, {
            getBuffer: getBuffer,
            size: size,
            release: release,
            async: true
        });
        this.updatePdfDocCache(pdfDoc);
        return pdfDoc;
    };

    PDFJR.prototype.getPDFDocByReaderCalback = function getPDFDocByReaderCalback(readerCallbackParams) {
        var pdfDoc = new _PDFDoc2.default(this.engine, { readerCallbackParams: readerCallbackParams });
        this.updatePdfDocCache(pdfDoc);
        return pdfDoc;
    };

    PDFJR.prototype.getPDFDocByAsyncReaderCallback = function getPDFDocByAsyncReaderCallback(readerCallbackParams) {
        var pdfDoc = new _PDFDoc2.default(this.engine, { readerCallbackParams: readerCallbackParams, async: true });
        this.updatePdfDocCache(pdfDoc);
        return pdfDoc;
    };

    PDFJR.prototype.createPDFDoc = function createPDFDoc() {};

    PDFJR.prototype.requestData = function requestData(type, async, url, offset, size, entity) {
        var xmlHttp = new XMLHttpRequest();
        xmlHttp.open(type, url, async);
        if (typeof offset != 'undefined') {
            var range = "bytes=" + offset + "-" + (offset + size - 1);
            xmlHttp.setRequestHeader("Range", range);
            xmlHttp.responseType = "arraybuffer";
        }
        xmlHttp.send(null);
        var status = xmlHttp.status;

        if (status >= 200 && status < 300 || status === 304) {
            if (entity) {
                return xmlHttp;
            }
            return xmlHttp.response;
        }
    };
    //saveBitmapToFile(bitmap){
    //    let engine = this.engine;
    //    let image = new this.engine.Image();
    //    image.AddFrame(bitmap);
    //    let buffer = []
    //    let streamCallback = this.engine.StreamCallback.implement({
    //        Release: () => {},
    //        Flush: () => {
    //            return true;
    //        },
    //        GetSize:()=>{
    //            return 0;
    //        },
    //        WriteBlock:(cursor, offset, size)=>{
    //            let engineBuffer = engine.HEAPU8.buffer;
    //            let arrayBuffer;
    //            if (engineBuffer.slice) {
    //                arrayBuffer = engineBuffer.slice(cursor, cursor + size);
    //            } else {
    //                arrayBuffer = new Uint8Array(engineBuffer, cursor, size).buffer;
    //            }
    //            buffer = buffer.concat(arrayBuffer);
    //            return true;
    //        }
    //    })
    //    image.SaveAs(streamCallback,new this.engine.WString(".bmp"));
    //
    //    let blob = new Blob(buffer,{type:"image/bmp"});
    //    let fileUrl = URL.createObjectURL(blob);
    //    console.log(fileUrl);
    //}


    PDFJR.prototype.registerSecurityCallback = function registerSecurityCallback(type, options) {
        this.unRegisterSecurityCallback(type);
        switch (type) {
            case 'FoxitDRM':
                return this.registerDRMSecurityCallback(options);
            default:
                return false;
        }
    };

    PDFJR.prototype.registerDRMSecurityCallback = function registerDRMSecurityCallback() {
        var _this6 = this;

        if (this.registeredDRMSecurityCallback) {
            return true;
        }
        try {
            var engine = this.engine;
            var securityCallback = engine.DRMSecurityCallback.implement({
                Release: function Release() {},
                GetSecurityType: function GetSecurityType() {
                    return engine.EncryptType.e_EncryptFoxitDRM;
                },
                IsOwner: function IsOwner(c_doc, subFilter) {
                    var pdfDoc = _this6.getPDFDocFromCDoc(c_doc);
                    if (pdfDoc) {
                        return pdfDoc.otherData.drm.isOwner;
                    } else {
                        return false;
                    }
                },
                GetUserPermissions: function GetUserPermissions(c_doc, subFilter) {
                    var pdfDoc = _this6.getPDFDocFromCDoc(c_doc);
                    if (pdfDoc) {
                        return pdfDoc.otherData.drm.userPermissions;
                    } else {
                        return 0;
                    }
                },
                GetCipherType: function GetCipherType(c_doc, subFilter) {
                    var pdfDoc = _this6.getPDFDocFromCDoc(c_doc);
                    if (pdfDoc) {
                        return engine.CipherType.values[pdfDoc.otherData.drm.cipher];
                    } else {
                        return engine.CipherType.e_CipherNone;
                    }
                },
                GetKeyLength: function GetKeyLength(c_doc, subFilter) {
                    var pdfDoc = _this6.getPDFDocFromCDoc(c_doc);
                    if (pdfDoc) {
                        return pdfDoc.otherData.drm.keyLength;
                    } else {
                        return 16;
                    }
                },
                GetFileID: function GetFileID(c_doc, subFilter) {
                    var pdfDoc = _this6.getPDFDocFromCDoc(c_doc);
                    if (pdfDoc) {
                        return new engine.String(pdfDoc.otherData.drm.fileId);
                    } else {
                        return new engine.String('');
                    }
                },
                GetInitialKey: function GetInitialKey(c_doc, subFilter) {
                    var pdfDoc = _this6.getPDFDocFromCDoc(c_doc);
                    if (pdfDoc) {
                        return new engine.String(pdfDoc.otherData.drm.initialKey);
                    } else {
                        return new engine.String('');
                    }
                }
            });
            var result = engine.Library.RegisterSecurityCallback(new engine.String("FoxitDRM"), securityCallback);
            if (result) {
                this.registeredDRMSecurityCallback = true;
            }
            //console.log(result);
            return result;
        } catch (ex) {
            return false;
        }
    };

    PDFJR.prototype.unRegisterSecurityCallback = function unRegisterSecurityCallback(type) {
        var engine = this.engine;
        try {
            this.engine.Library.UnregisterSecurityCallback(new engine.String(type));
        } catch (ex) {}
    };

    PDFJR.prototype.setUserName = function setUserName(name) {
        this.userName = name;
    };

    PDFJR.prototype.getUserName = function getUserName() {
        return this.userName;
    };
    /**
     * 
     * @param {GSDK.Annot} annot 
     */


    PDFJR.prototype.getRotatedAnnotRect = function getRotatedAnnotRect(annot) {
        var pdfRect = annot.GetRect();
        var ret = {
            left: pdfRect.left,
            top: pdfRect.top,
            right: pdfRect.right,
            bottom: pdfRect.bottom,
            rotate: 0
        };
        pdfRect.delete();
        return ret;
    };

    PDFJR.prototype.getHexString = function getHexString(GSDKStr) {
        var hexStrID = '';
        var strLength = GSDKStr.GetLength();
        var strBuffer = GSDKStr.GetBuffer();
        for (var j = 0; j < strLength; j++) {
            var code = this.engine.HEAP8[strBuffer + j] >>> 0 & 0x00ff;
            hexStrID += String.fromCharCode(code);
        }
        return hexStrID;
    };

    PDFJR.prototype.getPDFDocFromCDoc = function getPDFDocFromCDoc(c_doc) {
        var pdfDocCache = this.pdfDocCache;
        for (var i in pdfDocCache) {
            var pdfDoc = pdfDocCache[i];
            if (c_doc.Equals(pdfDoc.doc)) {
                return pdfDoc;
            }
        }
    };

    PDFJR.prototype.pdfNameDecoding = function pdfNameDecoding(string) {
        if (string.charCodeAt(0) == 0xfe && string.charCodeAt(1) == 0xff) {
            var temp = "";
            for (var i = 2; i < string.length; i += 2) {
                temp += String.fromCharCode((string.charCodeAt(i) << 8) + string.charCodeAt(i + 1));
            }
            return temp;
        }
        return string;
    };

    return PDFJR;
}();

exports.default = PDFJR;


function readBrotliAsync(url, onload, onerror) {
    readAsync(url, function (data) {
        var buffer = (0, _brotliDecompress2.default)(new Uint8Array(data)).buffer;
        onload(buffer);
    }, onerror);
};
function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
        if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
            // file URLs can return 0
            onload(xhr.response);
            return;
        }
        onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
};

/***/ }),

/***/ "./src/pdf-jr/PDFLayer.js":
/*!********************************!*\
  !*** ./src/pdf-jr/PDFLayer.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PDFLayer = function () {
    function PDFLayer(c_doc, c_engine) {
        _classCallCheck(this, PDFLayer);

        this.c_engine = c_engine;
        this.layer_tree = new c_engine.LayerTree(c_doc);
        this.layer_context = new c_engine.LayerContext(c_doc, 0x0000);
        if (!this.layer_tree.IsEmpty()) {
            var root_node = this.layer_tree.GetRootNode();
            this.rootLayerNode = new PDFLayerNode("", root_node, this.layer_context, -1);
        }
    }

    PDFLayer.prototype.setLayerNodeVisiable = function setLayerNodeVisiable(id, visiable) {
        var layerNode = this.getLayerNodeById(id);
        return this.layer_context.SetVisible(layerNode.layer_node, visiable);
    };

    PDFLayer.prototype.getLayerNodeById = function getLayerNodeById(id) {
        id = id.toString();
        var ids = id.split("-");
        try {
            var layerNode = this.rootLayerNode;
            for (var i = 0; i < ids.length; i++) {
                layerNode = layerNode.children[ids[i]];
            }
            return layerNode;
        } catch (e) {
            return null;
        }
    };

    PDFLayer.prototype.toJson = function toJson() {
        if (this.layer_tree.IsEmpty()) {
            return [];
        }
        return this.rootLayerNode.toJson();
    };

    PDFLayer.prototype.delete = function _delete() {
        this.layer_tree.delete();
        this.layer_context.delete();
    };

    return PDFLayer;
}();

var PDFLayerNode = function () {
    function PDFLayerNode(id, layer_node, layer_context, deep) {
        _classCallCheck(this, PDFLayerNode);

        this.id = id;
        this.layer_node = layer_node;
        this.name = layer_node.GetName().toString();
        this.hasLayer = layer_node.HasLayer();
        this.deep = deep;
        this.layer_context = layer_context;
        this.visible = layer_context.IsVisible(layer_node);
        this.isLocked = layer_node.IsLocked();
        this.children = this.getChildren();
    }

    PDFLayerNode.prototype.getChildren = function getChildren() {
        var children = [];
        var childCount = this.layer_node.GetChildrenCount();
        for (var i = 0; i < childCount; i++) {
            try {
                var layer_node = this.layer_node.GetChild(i);
                var id = void 0;
                if (this.id !== "") {
                    id = this.id + "-" + i;
                } else {
                    id = i;
                }
                var layerNode = new PDFLayerNode(id, layer_node, this.layer_context, this.deep + 1);
                children.push(layerNode);
            } catch (e) {
                console.warn(e);
            }
        }
        return children;
    };

    PDFLayerNode.prototype.toJson = function toJson() {
        if (this.layer_node.IsEmpty()) {
            return [];
        }
        var children = [];
        var childCount = this.children.length;
        for (var i = 0; i < childCount; i++) {
            var layerNode = this.children[i];
            children.push(layerNode.toJson());
        }
        return {
            id: this.id,
            name: this.name,
            deep: this.deep,
            hasLayer: this.hasLayer,
            isLocked: this.isLocked,
            children: children,
            visible: this.visible
        };
    };

    return PDFLayerNode;
}();

exports.default = PDFLayer;

/***/ }),

/***/ "./src/pdf-jr/PDFPage.js":
/*!*******************************!*\
  !*** ./src/pdf-jr/PDFPage.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createDeferred = __webpack_require__(/*! ../shared/createDeferred.js */ "./src/shared/createDeferred.js");

var _createDeferred2 = _interopRequireDefault(_createDeferred);

var _getUniqueId = __webpack_require__(/*! ../shared/getUniqueId.js */ "./src/shared/getUniqueId.js");

var _getUniqueId2 = _interopRequireDefault(_getUniqueId);

var _progressiveCountine = __webpack_require__(/*! ./progressiveCountine.js */ "./src/pdf-jr/progressiveCountine.js");

var _progressiveCountine2 = _interopRequireDefault(_progressiveCountine);

var _annotType = __webpack_require__(/*! ./annot/annotType */ "./src/pdf-jr/annot/annotType.js");

var _rect = __webpack_require__(/*! ./share/rect */ "./src/pdf-jr/share/rect.js");

var _guid = __webpack_require__(/*! ../shared/guid.js */ "./src/shared/guid.js");

var _guid2 = _interopRequireDefault(_guid);

var _LoggerFactory = __webpack_require__(/*! ../shared/logger/LoggerFactory.js */ "./src/shared/logger/LoggerFactory.js");

var _LoggerFactory2 = _interopRequireDefault(_LoggerFactory);

var _Image = __webpack_require__(/*! ./base/Image */ "./src/pdf-jr/base/Image.js");

var _Image2 = _interopRequireDefault(_Image);

var _Watermark = __webpack_require__(/*! ./base/Watermark/Watermark */ "./src/pdf-jr/base/Watermark/Watermark.js");

var _Watermark2 = _interopRequireDefault(_Watermark);

var _WatermarkSettings = __webpack_require__(/*! ./base/Watermark/WatermarkSettings */ "./src/pdf-jr/base/Watermark/WatermarkSettings.js");

var _WatermarkSettings2 = _interopRequireDefault(_WatermarkSettings);

var _WatermarkTextProperties = __webpack_require__(/*! ./base/Watermark/WatermarkTextProperties */ "./src/pdf-jr/base/Watermark/WatermarkTextProperties.js");

var _WatermarkTextProperties2 = _interopRequireDefault(_WatermarkTextProperties);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CREATE_BITMAP_FAIL = 'create bitmap fail';
var CREATE_BITMAP_RENDER_FAIL = 'create bitmap render fail';
var BITMAP_RENDER_FAIL = 'bitmap render fail';

var logger = _LoggerFactory2.default.getLogger('pdf-jr.PDFPage');

function checkIE10() {
    var userAgent = navigator.userAgent.toLowerCase();
    var match = void 0;
    if ('ActiveXObject' in self && (match = userAgent.match(/msie ([\d\.]+)/))) {
        return parseInt(match[1]) === 10;
    }
    return false;
}
var isIE10 = checkIE10();
var getBitmapBuffer = void 0;
var createBitmapRender = void 0;
if (isIE10) {
    createBitmapRender = function createBitmapRender(engine, bitmap) {
        var renderer = new engine.Renderer(bitmap, false);
        if (renderer.IsEmpty()) {
            renderer.delete();
            bitmap.delete();
            throw CREATE_BITMAP_RENDER_FAIL;
        }
        return renderer;
    };
    getBitmapBuffer = function getBitmapBuffer(engine, bitmap, renderer) {
        var bitmapWidth = bitmap.GetWidth();
        var bitmapHeight = bitmap.GetHeight();
        var image = new engine.Image();
        image.AddFrame(bitmap);
        var buffers = [];
        var streamCallback = engine.StreamCallback.implement({
            Release: function Release() {
                renderer.delete();
                bitmap.delete();
                streamCallback.delete();
                image.delete();
            },
            Flush: function Flush() {
                return true;
            },
            GetSize: function GetSize() {
                return 0;
            },
            WriteBlock: function WriteBlock(cursor, offset, size) {
                var engineBuffer = engine.HEAPU8.buffer;
                var arrayBuffer = void 0;
                if (engineBuffer.slice) {
                    arrayBuffer = new Uint8Array(engineBuffer.slice(cursor, cursor + size));
                } else {
                    arrayBuffer = new Uint8Array(engineBuffer, cursor, size);
                }
                buffers.push(arrayBuffer);
                return true;
            }
        });
        image.SaveAs(streamCallback, new engine.WString(".png"));
        var type = "image/png";
        return {
            type: type,
            image: new Blob(buffers, { type: type }),
            width: bitmapWidth,
            height: bitmapHeight
        };
    };
} else {

    createBitmapRender = function createBitmapRender(engine, bitmap) {
        var renderer = new engine.Renderer(bitmap, true);
        if (renderer.IsEmpty()) {
            renderer.delete();
            bitmap.delete();
            throw CREATE_BITMAP_RENDER_FAIL;
        }
        return renderer;
    };

    getBitmapBuffer =
    /**
     * 
     * @param {*} engine 
     * @param {GSDK.Bitmap} bitmap 
     * @param {*} renderer 
     */
    function getBitmapBuffer(engine, bitmap, renderer) {
        if (bitmap.GetFormat() != engine.DIBFormat.e_DIBArgb) bitmap.ConvertFormat(engine.DIBFormat.e_DIBArgb);

        var start = bitmap.GetBuffer();
        var bitmapWidth = bitmap.GetWidth();
        var bitmapHeight = bitmap.GetHeight();
        var size = bitmapHeight * bitmap.GetPitch();
        var end = start + size;
        var imageDataBuffer = void 0;
        if (engine.HEAPU8.buffer.slice) {
            imageDataBuffer = engine.HEAPU8.buffer.slice(start, end);
        } else {
            imageDataBuffer = new Uint8Array(engine.HEAPU8.buffer, start, size).buffer;
        }

        renderer.delete();
        bitmap.delete();

        return {
            buffer: imageDataBuffer,
            width: bitmapWidth,
            height: bitmapHeight
        };
    };
}

/**
 * 文档页面
 * @class
 */

var PDFPage = function () {
    function PDFPage(index, pdfDoc) {
        var _this2 = this;

        _classCallCheck(this, PDFPage);

        this.id = (0, _getUniqueId2.default)('pdf_page');
        this.index = index;
        this.pdfDoc = pdfDoc;
        this.doc = pdfDoc.doc;
        var JR = this.JR = pdfDoc.JR;
        this.annotManager = JR.annotManager;
        /**
         * @type GSDK
         */
        var engine = this.engine = pdfDoc.engine;
        this.progressiveContinueState = engine.ProgressiveState.e_ToBeContinued;
        this.progressiveFinishState = engine.ProgressiveState.e_Finished;
        var pageDeferred = this.pageDeferred = (0, _createDeferred2.default)();
        this.c_pagePromise = pageDeferred.promise;
        this._getPage(index).then(function (page) {
            _this2.page = page;
            _this2.annotationIDArray = _this2._prepareAnnotations(page);
            pageDeferred.resolve(page);
        }, function (err) {
            pageDeferred.reject(err);
        });
    }

    PDFPage.prototype._getPage = function _getPage(index) {
        var _this3 = this;

        var deferred = (0, _createDeferred2.default)();
        var page = void 0;
        var errorCode = void 0;
        var dataNotReady = this.engine.ErrorCode.e_ErrDataNotReady;

        try {
            page = this.doc.GetPage(index);
        } catch (ex) {
            errorCode = this.engine.getErrorCode(ex);
            if (errorCode !== dataNotReady) {
                deferred.reject(errorCode.value);
                return deferred.promise;
            }
        }
        if (this.pdfDoc.readerBlockLoading || errorCode === dataNotReady) {
            page && page.delete();
            setTimeout(function () {
                _this3._getPage(index).then(function (page) {
                    deferred.resolve(page);
                }, function (err) {
                    deferred.reject(err);
                });
            }, 300);
            return deferred.promise;
        }
        if (page.IsEmpty()) {
            page.delete();
            deferred.reject(-1);
        } else {
            deferred.resolve(page);
        }
        return deferred.promise;
    };

    PDFPage.prototype._prepareAnnotations = function _prepareAnnotations(page) {
        var _this4 = this;

        var annotationIdArray = this._getAnnotationIdArray(page);
        // 避免非新增annotation ID和新增的annotation ID重复被替换导致的更新问题，所以必须从最后一个开始检查
        return annotationIdArray.reduce(function (prev, id, index, array) {
            if (id === null) {
                prev.push(null);
                return prev;
            }
            var otherRepeatIndex = prev.indexOf(id);
            if (otherRepeatIndex > -1 || id.length == 0) {
                var newId = id;
                do {
                    newId = (0, _guid2.default)();
                } while (array.indexOf(newId) !== -1);
                logger.debug('Duplicated annotation id found at page ' + _this4.index + ' of this document: ' + id + ', and that will be replaced to ' + newId);
                var annot = page.GetAnnot(index);
                try {
                    annot.SetUniqueID(new _this4.engine.WString(newId));
                    id = newId;
                } catch (e) {
                    logger.warn('annotation SetUniqueID error. page: ' + _this4.index + ', Old Annotid: ' + id + ', The error new id is: ' + newId);
                    //todo SetUniqueID exception.
                }
            }
            prev.push(id);
            return prev;
        }, []);
    };

    PDFPage.prototype._getAnnotIndexById = function _getAnnotIndexById(annotId) {
        return this.annotationIDArray.indexOf(annotId);
    };

    PDFPage.prototype._setAnnotIdAt = function _setAnnotIdAt(annotId, index) {
        if (index >= this.annotationIDArray.length) {
            var idx = this.annotationIDArray.indexOf(annotId);
            if (idx > -1) {
                throw new Error('Duplicated annotation id: ' + annotId);
            }
        }
        this.annotationIDArray[index] = annotId;
    };
    /**
     * @returns {Promise<GSDK.PDFPage>}
     */


    PDFPage.prototype.parsedPage = function parsedPage() {
        var _this5 = this;

        if (this.parsedPagePromise) {
            return this.parsedPagePromise;
        }
        return this.parsedPagePromise = this.c_pagePromise.then(function (page) {
            if (page.IsParsed()) {
                return page;
            }
            var parseSuccess = (0, _progressiveCountine2.default)(page.StartParse(0, null, false), _this5.progressiveContinueState, _this5.progressiveFinishState);
            if (!parseSuccess) {
                page.delete();
                throw 'parse page fail';
            }
            return page;
        });
    };

    PDFPage.prototype.reParsePage = function reParsePage() {
        var _this6 = this;

        return this.parsedPagePromise = this.c_pagePromise.then(function (page) {
            var parseSuccess = (0, _progressiveCountine2.default)(page.StartParse(0, null, true), _this6.progressiveContinueState, _this6.progressiveFinishState);
            if (!parseSuccess) {
                page.delete();
                throw 'parse page fail';
            }
            return page;
        });
    };
    /**
     * 获取物理的第几页
     * @returns {number}
     */


    PDFPage.prototype.getIndex = function getIndex() {};
    /**
     * 获取pdf中的第几页
     * @returns {number} 
     */


    PDFPage.prototype.getObjNumber = function getObjNumber() {};
    /**
     * 获取pdf页面宽度，单位点，pdf单位
     * @returns {number}
     */


    PDFPage.prototype.getWidth = function getWidth() {
        return this.c_pagePromise.then(function (page) {
            return page.GetWidth();
        });
    };
    /**
     * 获取pdf页面高度，单位点，pdf单位
     * @returns {number}
     */


    PDFPage.prototype.getHeight = function getHeight() {
        return this.c_pagePromise.then(function (page) {
            return page.GetHeight();
        });
    };

    PDFPage.prototype.getAnnotsImageDataByTile = function getAnnotsImageDataByTile() {
        var annotIndexs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var x = arguments[1];
        var y = arguments[2];
        var width = arguments[3];
        var height = arguments[4];
        var scale = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;
        var rotate = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
    };
    /**
     * 获取页面的annotation，包含WidgetAnnot
     * @param {string[]} [idList]
     * @returns {Annotation[]}
     */


    PDFPage.prototype.getAnnots = function getAnnots(idList) {
        var _this7 = this;

        return this.parsedPage().then(function (page) {
            if (!idList) {
                idList = _this7.annotationIDArray;
            }
            return idList.map(function (id) {
                var index = _this7._getAnnotIndexById(id);
                if (index === -1) {
                    return null;
                } else {
                    return _this7._getAnnotByIndex(page, index);
                }
            });
        });
    };

    PDFPage.prototype.getAnnotIDList = function getAnnotIDList() {
        return this.annotationIDArray;
    };

    PDFPage.prototype._getAnnotByIndex = function _getAnnotByIndex(page, index) {
        var annot = page.GetAnnot(index);
        if (annot.IsEmpty()) {
            return null;
        }
        return this.annotManager.get(annot, this);
    };

    PDFPage.prototype.getAnnotById = function getAnnotById(id) {
        var _this8 = this;

        return this.getNativeAnnotById(id).then(function (annot) {
            return annot.IsEmpty() ? null : _this8.annotManager.get(annot, _this8);
        });
    };

    PDFPage.prototype.getThumb = function getThumb() {
        var _this9 = this;

        return this.c_pagePromise.then(function (c_page) {
            var thumb = c_page.GetThumb();
            var width = c_page.GetWidth();
            var height = c_page.GetWidth();
            var scaleWidth = 200;
            var scale = scaleWidth / width;
            if (false) { var isEmpty, bitmap, scaleHeight; } else {
                width = c_page.GetWidth();
                return _this9.getImageData(scale);
            }
        });
    };

    PDFPage.prototype.getNativeAnnotById = function getNativeAnnotById(id) {
        var index = this._getAnnotIndexById(id);
        if (index == -1) {
            throw new Error('Annotation not found: ' + id);
        }
        return this.parsedPage().then(function (page) {
            return page.GetAnnot(index);
        });
    };

    PDFPage.prototype.getImageDataByTile = function getImageDataByTile(x, y, width, height) {
        var scale = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;

        var _this10 = this;

        var rotate = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
        var renderFlags = arguments[6];

        var engine = this.engine;
        var renderWidth = void 0;
        var renderHeight = void 0;
        var progressiveContinueState = this.progressiveContinueState;
        var progressiveFinishState = this.progressiveFinishState;
        var _this = this;
        return Promise.all([this.getWidth(), this.getHeight()]).then(function (_ref) {
            var _ref2 = _slicedToArray(_ref, 2),
                pageWidth = _ref2[0],
                pageHeight = _ref2[1];

            renderWidth = pageWidth * scale;
            renderHeight = pageHeight * scale;
        }).then(function () {
            return _this10.parsedPage();
        }).then(function (page) {
            var bitmap = createBitmap(engine, width, height, page.HasTransparency());
            return [bitmap, page, engine];
        }).then(function (_ref3) {
            var _ref4 = _slicedToArray(_ref3, 3),
                bitmap = _ref4[0],
                page = _ref4[1],
                engine = _ref4[2];

            var renderer = createBitmapRender(engine, bitmap);
            if (_this.pdfDoc.pdfLayer && _this.pdfDoc.pdfLayer.layer_context) {
                renderer.SetLayerContext(_this.pdfDoc.pdfLayer.layer_context);
            }
            return [renderer, bitmap, page, engine];
        }).then(function (_ref5) {
            var _ref6 = _slicedToArray(_ref5, 4),
                renderer = _ref6[0],
                bitmap = _ref6[1],
                page = _ref6[2],
                engine = _ref6[3];

            startBitmapRender({
                x: -x, y: -y,
                width: renderWidth,
                height: renderHeight,
                rotate: rotate
            }, engine, page, bitmap, renderer, renderFlags, progressiveContinueState, progressiveFinishState, 0);
            return [renderer, bitmap, engine];
        }).then(function (_ref7) {
            var _ref8 = _slicedToArray(_ref7, 3),
                renderer = _ref8[0],
                bitmap = _ref8[1],
                engine = _ref8[2];

            return getBitmapBuffer(engine, bitmap, renderer);
        });
    };

    PDFPage.prototype.getImageData = function getImageData() {
        var scale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

        var engine = this.engine;
        var progressiveContinueState = this.progressiveContinueState;
        var progressiveFinishState = this.progressiveFinishState;
        return Promise.all([this.parsedPage(), this.getWidth(), this.getHeight()]).then(function (_ref9) {
            var _ref10 = _slicedToArray(_ref9, 3),
                page = _ref10[0],
                width = _ref10[1],
                height = _ref10[2];

            var bitmapWidth = width * scale;
            var bitmapHeight = height * scale;

            var bitmap = new engine.Bitmap(bitmapWidth, bitmapHeight, engine.DIBFormat.e_DIBArgb, 0, 0);
            if (bitmap.IsEmpty()) {
                bitmap.delete();
                page.delete();
                throw 'create bitmap fail';
            }
            return [bitmap, page, engine];
        }).then(function (_ref11) {
            var _ref12 = _slicedToArray(_ref11, 3),
                bitmap = _ref12[0],
                page = _ref12[1],
                engine = _ref12[2];

            var renderer = new engine.Renderer(bitmap, true);
            if (renderer.IsEmpty()) {
                renderer.delete();
                bitmap.delete();
                page.delete();
                throw 'render bitmap fail';
            }
            return [renderer, bitmap, page, engine];
        }).then(function (_ref13) {
            var _ref14 = _slicedToArray(_ref13, 4),
                renderer = _ref14[0],
                bitmap = _ref14[1],
                page = _ref14[2],
                engine = _ref14[3];

            var matrix = page.GetDisplayMatrix(0, 0, bitmap.GetWidth(), bitmap.GetHeight(), engine.Rotation.e_Rotation0);

            var isRenderSuccess = (0, _progressiveCountine2.default)(renderer.StartRender(page, matrix, null), progressiveContinueState, progressiveFinishState);
            if (!isRenderSuccess) {
                renderer.delete();
                bitmap.delete();
                page.delete();
                throw 'render page image fail';
            }
            return [renderer, bitmap, page, engine];
        }).then(function (_ref15) {
            var _ref16 = _slicedToArray(_ref15, 4),
                renderer = _ref16[0],
                bitmap = _ref16[1],
                page = _ref16[2],
                engine = _ref16[3];

            var start = bitmap.GetBuffer();
            var bitmapWidth = bitmap.GetWidth();
            var bitmapHeight = bitmap.GetHeight();
            var size = bitmapHeight * bitmap.GetPitch();
            var end = start + size;
            var imageDataBuffer = void 0;
            if (engine.HEAPU8.buffer.slice) {
                imageDataBuffer = engine.HEAPU8.buffer.slice(start, end);
            } else {
                imageDataBuffer = new Uint8Array(engine.HEAPU8.buffer, start, size).buffer;
            }

            renderer.delete();
            bitmap.delete();

            return {
                buffer: imageDataBuffer,
                width: bitmapWidth,
                height: bitmapHeight
            };
        });
    };
    /**
     * 获取页面旋转的角度
     * @returns {number} 0, 90, 180, 270
     */


    PDFPage.prototype.getRotation = function getRotation() {
        return this.c_pagePromise.then(function (page) {
            return page.GetRotation().value;
        });
    };

    PDFPage.prototype.setRotation = function setRotation(rotation) {
        var _this11 = this;

        return this.c_pagePromise.then(function (page) {
            return Promise.all([page.SetRotation(_this11.engine.Rotation[['e_Rotation0', 'e_Rotation90', 'e_Rotation180', 'e_Rotation270'][rotation] || 'e_Rotation0']), page]);
        }).then(function (_ref17) {
            var _ref18 = _slicedToArray(_ref17, 2),
                flag = _ref18[0],
                page = _ref18[1];

            //if (flag) {
            return page.GetRotation().value;
            //}
            return Promise.reject();
        });
    };
    /**
     * 获取PDF页面渲染成图片
     * @param {number} [scale = 1]
     * @returns {PageImage}
     */


    PDFPage.prototype.getPageImage = function getPageImage() {
        var scale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    };
    /**
     * 获取可视范围
     * @returns {PDFRect}
     */


    PDFPage.prototype.getVisibleContentBox = function getVisibleContentBox() {};
    /**
     * 获取页面范围
     * @returns {PDFRect}
     */


    PDFPage.prototype.getMediaBox = function getMediaBox() {};
    /**
     * 获取文本信息
     * @returns {PDFText[]}
     */


    PDFPage.prototype.getTexts = function getTexts() {};
    /**
     * 获取页面中内联的图片
     * @returns {PDFImage[]}
     */


    PDFPage.prototype.getImages = function getImages() {};
    /**
     * 获取页面中的形状
     * @returns {PDFShape[]}
     */


    PDFPage.prototype.getShapes = function getShapes() {};
    /** 
     * 获取页面中的渐变
     * @returns {PDFShading[]}
     */


    PDFPage.prototype.getShadings = function getShadings() {};

    PDFPage.prototype.destroy = function destroy() {
        return this.c_pagePromise.then(function (page) {
            return page.delete();
        });
    };

    PDFPage.prototype.toJson = function toJson() {
        var page = this.page;
        var engine = this.engine;
        var RectF = this.engine.CFX_FloatRect;
        var mediaBox = page.GetBox(engine.BoxType.e_MediaBox);
        mediaBox.Normalize();
        if (mediaBox.IsEmpty()) {
            // Mediabox is not present, Adobe treats it as Letter (8.5'x11')
            mediaBox = new RectF(0, 0, 612, 792);
        }
        var box = void 0;
        var cropBox = page.GetBox(engine.BoxType.e_CropBox);
        cropBox.Normalize();
        if (cropBox.IsEmpty()) {
            box = mediaBox;
        } else {
            box = cropBox;
            // Some PDF comes with crop box bigger than media box, which doesn't make sense,
            // but we need to handle it by clipping the crop box with media box
            box.Intersect(mediaBox);
        }
        var Rotation = engine.Rotation;
        var pdfMatrix = void 0;
        switch (page.GetRotation()) {
            case Rotation.e_Rotation0:
                pdfMatrix = new engine.Matrix(1, 0, 0, 1, -box.left, -box.bottom);
                break;
            case Rotation.e_Rotation90:
                pdfMatrix = new engine.Matrix(0, -1, 1, 0, -box.bottom, box.right);
                break;
            case Rotation.e_Rotation180:
                pdfMatrix = new engine.Matrix(-1, 0, 0, -1, box.right, box.top);
                break;
            case Rotation.e_Rotation270:
                pdfMatrix = new engine.Matrix(0, 1, -1, 0, box.top, -box.left);
                break;
            default:
                pdfMatrix = new engine.Matrix();
        }
        this.pdfPageMatrix = pdfMatrix;

        return {
            id: this.id,
            index: page.GetIndex(),
            width: page.GetWidth(),
            height: page.GetHeight(),
            rotation: page.GetRotation().value,
            annotCount: page.GetAnnotCount(),
            matrix: [pdfMatrix.GetA(), pdfMatrix.GetB(), pdfMatrix.GetC(), pdfMatrix.GetD(), pdfMatrix.GetE(), pdfMatrix.GetF()]
        };
    };

    PDFPage.prototype.getPageMatrix = function getPageMatrix() {
        var page = this.page;
        var engine = this.engine;
        var RectF = this.engine.CFX_FloatRect;
        var mediaBox = page.GetBox(engine.BoxType.e_MediaBox);
        mediaBox.Normalize();
        if (mediaBox.IsEmpty()) {
            // Mediabox is not present, Adobe treats it as Letter (8.5'x11')
            mediaBox = new RectF(0, 0, 612, 792);
        }
        var box = void 0;
        var cropBox = page.GetBox(engine.BoxType.e_CropBox);
        cropBox.Normalize();
        if (cropBox.IsEmpty()) {
            box = mediaBox;
        } else {
            box = cropBox;
            // Some PDF comes with crop box bigger than media box, which doesn't make sense,
            // but we need to handle it by clipping the crop box with media box
            box.Intersect(mediaBox);
        }
        var Rotation = engine.Rotation;
        var pdfPageMatrix = void 0;
        switch (page.GetRotation()) {
            case Rotation.e_Rotation0:
                pdfPageMatrix = new engine.Matrix(1, 0, 0, 1, -box.left, -box.bottom);
                break;
            case Rotation.e_Rotation90:
                pdfPageMatrix = new engine.Matrix(0, -1, 1, 0, -box.bottom, box.right);
                break;
            case Rotation.e_Rotation180:
                pdfPageMatrix = new engine.Matrix(-1, 0, 0, -1, box.right, box.top);
                break;
            case Rotation.e_Rotation270:
                pdfPageMatrix = new engine.Matrix(0, 1, -1, 0, box.top, -box.left);
                break;
            default:
                pdfPageMatrix = new engine.Matrix();
        }
        return pdfPageMatrix;
    };

    PDFPage.prototype.getBitmap = function getBitmap() {
        var scale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var rotate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

        var _this12 = this;

        var rect = arguments[2];
        var flags = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ['page'];

        var renderFlags = 0;
        var engine = this.engine;
        var flagMap = {
            page: engine.ContentFlag.e_RenderPage.value,
            annot: engine.ContentFlag.e_RenderAnnot.value
        };
        for (var i = 0, j = flags.length; i < j; i++) {
            renderFlags |= flagMap[flags[i]];
        }
        var x = rect ? rect.x : 0;
        var y = rect ? rect.y : 0;
        var bitmapWidth = void 0;
        var bitmapHeight = void 0;
        var renderWidth = void 0;
        var renderHeight = void 0;
        var progressiveContinueState = this.progressiveContinueState;
        var progressiveFinishState = this.progressiveFinishState;
        var page = void 0;
        var _this = this;
        return this.parsedPage().then(function (_page) {
            page = _page;
            return Promise.all([_this12.getWidth(), _this12.getHeight()]);
        }).then(function (_ref19) {
            var _ref20 = _slicedToArray(_ref19, 2),
                pageWidth = _ref20[0],
                pageHeight = _ref20[1];

            renderWidth = pageWidth * scale;
            renderHeight = pageHeight * scale;
            bitmapWidth = rect ? rect.width : renderWidth;
            bitmapHeight = rect ? rect.height : renderHeight;
        }).then(function () {
            var bitmap = createBitmap(engine, bitmapWidth, bitmapHeight);
            return [bitmap, page, engine];
        }).then(function (_ref21) {
            var _ref22 = _slicedToArray(_ref21, 3),
                bitmap = _ref22[0],
                page = _ref22[1],
                engine = _ref22[2];

            var renderer = createBitmapRender(engine, bitmap);
            if (_this.pdfDoc.pdfLayer && _this.pdfDoc.pdfLayer.layer_context) {
                renderer.SetLayerContext(_this.pdfDoc.pdfLayer.layer_context);
            }
            return [renderer, bitmap, page, engine];
        }).then(function (_ref23) {
            var _ref24 = _slicedToArray(_ref23, 4),
                renderer = _ref24[0],
                bitmap = _ref24[1],
                page = _ref24[2],
                engine = _ref24[3];

            startBitmapRender({
                x: -x, y: -y, width: renderWidth, height: renderHeight, rotate: rotate
            }, engine, page, bitmap, renderer, renderFlags, progressiveContinueState, progressiveFinishState, 0);
            return [renderer, bitmap, engine];
        }).then(function (_ref25) {
            var _ref26 = _slicedToArray(_ref25, 3),
                renderer = _ref26[0],
                bitmap = _ref26[1],
                engine = _ref26[2];

            return getBitmapBuffer(engine, bitmap, renderer);
        });
    };

    PDFPage.prototype.getBitmapByMatrix = function getBitmapByMatrix(matrix, rect, flags) {};

    PDFPage.prototype.getPageAndHighlightBitmap = function getPageAndHighlightBitmap() {
        var scale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

        var _this13 = this;

        var rotate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var rect = arguments[2];

        var engine = this.engine;
        var x = rect ? rect.x : 0;
        var y = rect ? rect.y : 0;
        var bitmapWidth = void 0;
        var bitmapHeight = void 0;
        var renderWidth = void 0;
        var renderHeight = void 0;
        var progressiveContinueState = this.progressiveContinueState;
        var progressiveFinishState = this.progressiveFinishState;
        var page = void 0;
        var _this = this;
        return this.parsedPage().then(function (_page) {
            page = _page;
            return Promise.all([_this13.getWidth(), _this13.getHeight()]);
        }).then(function (_ref27) {
            var _ref28 = _slicedToArray(_ref27, 2),
                pageWidth = _ref28[0],
                pageHeight = _ref28[1];

            renderWidth = pageWidth * scale;
            renderHeight = pageHeight * scale;
            bitmapWidth = rect ? rect.width : renderWidth;
            bitmapHeight = rect ? rect.height : renderHeight;
        }).then(function () {
            var bitmap = createBitmap(engine, bitmapWidth, bitmapHeight);
            return [bitmap, page, engine];
        }).then(function (_ref29) {
            var _ref30 = _slicedToArray(_ref29, 3),
                bitmap = _ref30[0],
                page = _ref30[1],
                engine = _ref30[2];

            var renderer = createBitmapRender(engine, bitmap);
            if (_this.pdfDoc.pdfLayer && _this.pdfDoc.pdfLayer.layer_context) {
                renderer.SetLayerContext(_this.pdfDoc.pdfLayer.layer_context);
            }
            return [renderer, bitmap, page, engine];
        }).then(function (_ref31) {
            var _ref32 = _slicedToArray(_ref31, 4),
                renderer = _ref32[0],
                bitmap = _ref32[1],
                page = _ref32[2],
                engine = _ref32[3];

            startBitmapRenderWithPageHighlight({
                x: -x, y: -y, width: renderWidth, height: renderHeight, rotate: rotate
            }, engine, page, bitmap, renderer, progressiveContinueState, progressiveFinishState, 0);
            return [renderer, bitmap, engine];
        }).then(function (_ref33) {
            var _ref34 = _slicedToArray(_ref33, 3),
                renderer = _ref34[0],
                bitmap = _ref34[1],
                engine = _ref34[2];

            return getBitmapBuffer(engine, bitmap, renderer);
        });
    };

    PDFPage.prototype.getAnnotBitmap = function getAnnotBitmap(annotId, scale, rotate, rect) {
        var _this14 = this;

        /**
         * @type GSDK
         */
        var engine = this.engine;
        var x = rect ? rect.x : 0;
        var y = rect ? rect.y : 0;
        var page = void 0;
        var bitmapWidth = void 0;
        var bitmapHeight = void 0;
        var renderWidth = void 0;
        var renderHeight = void 0;

        return this.parsedPage().then(function (_page) {
            page = _page;
            return Promise.all([_this14.getWidth(), _this14.getHeight(), _this14.getNativeAnnotById(annotId)]);
        }).then(function (_ref35) {
            var _ref36 = _slicedToArray(_ref35, 3),
                pageWidth = _ref36[0],
                pageHeight = _ref36[1],
                annot = _ref36[2];

            renderWidth = pageWidth * scale;
            renderHeight = pageHeight * scale;
            return annot;
            // }).then(() => {
            // return page.GetAnnot(index);
        }).then(function (annot) {
            if (annot.IsEmpty()) {
                throw 'annot is empty';
            }
            var annotRect = annot.GetRect();
            // renderWidth = (annotRect.right - annotRect.left) * scale;
            // renderHeight = (annotRect.top - annotRect.bottom) * scale;
            var extendSize = +scale;
            bitmapWidth = Math.max(rect ? rect.width + extendSize : (annotRect.right - annotRect.left) * scale, 1);
            bitmapHeight = Math.max(rect ? rect.height + extendSize : (annotRect.top - annotRect.bottom) * scale, 1);
            // bitmapWidth = 300;
            // bitmapHeight = 300;
            return [bitmapWidth, bitmapHeight, annot];
        }).then(function (_ref37) {
            var _ref38 = _slicedToArray(_ref37, 3),
                width = _ref38[0],
                height = _ref38[1],
                annot = _ref38[2];

            var bitmap = createBitmap(engine, width, height, true);
            return [bitmap, annot];
        }).then(function (_ref39) {
            var _ref40 = _slicedToArray(_ref39, 2),
                bitmap = _ref40[0],
                annot = _ref40[1];

            var renderer = createBitmapRender(engine, bitmap);
            return [renderer, bitmap, annot];
        }).then(function (_ref41) {
            var _ref42 = _slicedToArray(_ref41, 3),
                renderer = _ref42[0],
                bitmap = _ref42[1],
                annot = _ref42[2];

            //let matrix = new engine.Matrix();
            //let displayMatrix = new engine.Matrix(scale, 0, 0, -scale, 0, page.GetHeight()*scale);
            //displayMatrix.e -= x;
            //displayMatrix.f -= y;

            //let displayMatrix = page.GetDisplayMatrix(0, 0, renderWidth, renderHeight, engine.Rotation.e_Rotation0);
            //displayMatrix = annot.GetDisplayMatrix(displayMatrix);
            //let rect2 = annot.GetDeviceRect(displayMatrix);
            //displayMatrix.e-=rect2.left;
            //displayMatrix.f-=rect2.top;
            var displayMatrix = page.GetDisplayMatrix(-x, -y, renderWidth, renderHeight, engine.Rotation.e_Rotation0);
            var rendered = renderer.RenderAnnot(annot, displayMatrix);
            if (!rendered) {
                renderer.delete();
                return {
                    buffer: new ArrayBuffer(0),
                    width: 0,
                    height: 0
                };
            }
            //  this.JR.saveBitmapToFile(bitmap);
            return getBitmapBuffer(engine, bitmap, renderer);
        });
    };

    PDFPage.prototype.getAnnotBitmapByRange = function getAnnotBitmapByRange(range, scale, rotate, rect) {
        var _this15 = this;

        var engine = this.engine;
        var x = rect ? rect.x : 0;
        var y = rect ? rect.y : 0;
        var page = void 0;
        var bitmapWidth = void 0;
        var bitmapHeight = void 0;
        var renderWidth = void 0;
        var renderHeight = void 0;

        return this.parsedPage().then(function (_page) {
            page = _page;
            return Promise.all([_this15.getWidth(), _this15.getHeight()]);
        }).then(function (_ref43) {
            var _ref44 = _slicedToArray(_ref43, 2),
                pageWidth = _ref44[0],
                pageHeight = _ref44[1];

            renderWidth = pageWidth * scale;
            renderHeight = pageHeight * scale;
            bitmapWidth = rect ? rect.width : renderWidth;
            bitmapHeight = rect ? rect.height : renderHeight;
            return [bitmapWidth, bitmapHeight, renderWidth, renderHeight];
        }).then(function (_ref45) {
            var _ref46 = _slicedToArray(_ref45, 4),
                width = _ref46[0],
                height = _ref46[1],
                renderWidth = _ref46[2],
                renderHeight = _ref46[3];

            var bitmap = createBitmap(engine, width, height);
            return [bitmap, renderWidth, renderHeight];
        }).then(function (_ref47) {
            var _ref48 = _slicedToArray(_ref47, 3),
                bitmap = _ref48[0],
                renderWidth = _ref48[1],
                renderHeight = _ref48[2];

            var renderer = createBitmapRender(engine, bitmap);
            return [renderer, bitmap, renderWidth, renderHeight];
        }).then(function (_ref49) {
            var _ref50 = _slicedToArray(_ref49, 4),
                renderer = _ref50[0],
                bitmap = _ref50[1],
                renderWidth = _ref50[2],
                renderHeight = _ref50[3];

            var matrix = page.GetDisplayMatrix(-x, -y, renderWidth, renderHeight, engine.Rotation.e_Rotation0);
            var annots = [];
            for (var i = 0, j = range.length; i < j; i++) {
                var items = range[i];
                if (items instanceof Array) {
                    for (var m = items[0], n = items[1]; m <= n; m++) {
                        annots.push(page.GetAnnot(m));
                    }
                } else {
                    annots.push(page.GetAnnot(items));
                }
            }
            for (var _i = 0, _j = annots.length; _i < _j; _i++) {
                var annot = annots[_i];
                renderer.RenderAnnot(annot, matrix);
            }
            return getBitmapBuffer(engine, bitmap, renderer);
        });
    };

    PDFPage.prototype.getAnnotIdAtPoint = function getAnnotIdAtPoint(x, y) {
        var _this16 = this;

        var tolerance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

        return this.parsedPage().then(function (page) {
            // let PointF = this.engine.PointF;
            var annot = page.GetAnnotAtPoint(new _this16.engine.PointF(x, y), tolerance);
            if (annot.IsEmpty()) {
                return -1;
            }
            return annot.GetUniqueID().toString();
        });
    };

    PDFPage.prototype.getAnnotIdAtDevicePoint = function getAnnotIdAtDevicePoint(x, y) {
        var _this17 = this;

        var tolerance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var matrix = arguments[3];

        return this.parsedPage().then(function (page) {
            //let width = page.GetWidth() * scale;
            //let height = page.GetHeight() * scale;
            //let engineRotate = getEngineRotate(engine, rotate);
            //let annot = page.GetAnnotAtDevicePoint(new engine.PointF(x, y), tolerance, page.GetDisplayMatrix(0, 0, width, height, engineRotate));
            //let pdfMatrix = this.getPDFMatrix();
            //pdfMatrix.Scale(scale, -scale);
            var engine = _this17.engine;
            var pdfMatrix = new engine.Matrix();
            if (matrix) {
                pdfMatrix.Set(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);
            }
            var annot = page.GetAnnotAtDevicePoint(new engine.PointF(x, y), tolerance, pdfMatrix);
            if (annot.IsEmpty()) {
                return -1;
            }
            return annot.GetUniqueID().toString();
        });
    };
    //getCharIndexAtPoint (x, y, tolerance = 0) {
    //    return this.getNormalTextPage().then((textPage) => {
    //        let charIndex = textPage.GetIndexAtPos(x, y, tolerance /* tolerance */)
    //        console.log(charIndex);
    //        return charIndex;
    //    })
    //}


    PDFPage.prototype.getCharInfoAtPoint = function getCharInfoAtPoint(x, y) {
        var tolerance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

        return this.getNormalTextPage().then(function (textPage) {
            var charIndex = textPage.GetIndexAtPos(x, y, tolerance /* tolerance */);
            if (charIndex === -1) {
                return null;
            }
            var textRectCount = textPage.GetTextRectCount(charIndex, 1);
            if (!textRectCount) {
                return null;
            }
            var rect = textPage.GetTextRect(0);
            var rotation = textPage.GetBaselineRotation(0);
            return {
                charIndex: charIndex,
                left: rect.left,
                right: rect.right,
                top: rect.top,
                bottom: rect.bottom,
                rotation: rotation.value
            };
        });
    };

    PDFPage.prototype.getNormalTextPage = function getNormalTextPage() {
        var _this18 = this;

        return this.parsedPage().then(function (page) {
            var engine = _this18.engine;
            return new engine.TextPage(page, engine.TextParseFlags.e_ParseTextNormal.value);
        });
        //return;
        //let textPage = this.NormalTextPage;
        //if (textPage) {
        //    return Promise.resolve(textPage);
        //}
        //let getNormalTextPagePromise = this.getNormalTextPagePromise;
        //if (getNormalTextPagePromise) {
        //    return getNormalTextPagePromise;
        //}
        //return this.getNormalTextPagePromise = this.parsedPage().then((page) => {
        //    let engine = this.engine;
        //    return this.NormalTextPage = new engine.TextPage(page, engine.TextParseFlags.e_ParseTextNormal.value);
        //});
    };

    PDFPage.prototype.getNormalTextPageSync = function getNormalTextPageSync() {
        var engine = this.engine;
        var textPage = new engine.TextPage(this.page, engine.TextParseFlags.e_ParseTextNormal.value);
        return textPage;
    };

    PDFPage.prototype.removeAnnotById = function removeAnnotById(annotId) {
        var _this19 = this;

        return this.getNativeAnnotById(annotId).then(function (annot) {
            if (annot) {
                return _this19.parsedPage().then(function (page) {
                    if (page.RemoveAnnot(annot)) {
                        return _this19.update().then(function (_) {
                            return true;
                        });
                    }
                    return false;
                });
            }
        });
    };

    PDFPage.prototype.removeAllAnnot = function removeAllAnnot() {
        var _this20 = this;

        return this.parsedPage().then(function (page) {
            for (var i = page.GetAnnotCount(); i--;) {
                page.RemoveAnnot(page.GetAnnot(i));
            }
            _this20.annotationIDArray = [];
        });
    };

    PDFPage.prototype._getAnnotationIdArray = function _getAnnotationIdArray(page) {
        var count = page.GetAnnotCount();
        return Array(count).fill(undefined).map(function (_, index) {
            var annot = page.GetAnnot(index);
            try {
                if (annot.IsEmpty()) {
                    return null;
                } else {
                    return annot.GetUniqueID().toString();
                }
            } finally {
                annot.delete();
            }
        });
    };

    PDFPage.prototype.addImage = function addImage(imageBuffer, point, width, height) {
        var engine = this.engine;
        /**
         * @type GSDK.Image
         */
        var image = _Image2.default.createImage(engine, imageBuffer);
        var PDFPoint = new engine.PointF(point.x, point.y);
        return this.parsedPage().then(function (c_page) {

            // switch(c_page.GetRotation().value){
            //     case 1:
            //     case 3:
            //         let temp = height;
            //         height = width;
            //         width = temp;
            //         break;
            // }
            var ret = c_page.AddImage(image, 0, PDFPoint, width, height, true);
            // c_page.StartParse(0,null,true);

            // let pos = c_page.GetLastGraphicsObjectPosition(engine.GraphicsObjectType.e_TypeImage);
            // let addedImage = c_page.GetGraphicsObject(pos);

            // let radian=c_page.GetRotation().value*90*Math.PI/180;

            // /**
            //  * @type GSDK.CFX_FloatRect
            //  */
            // let oriRect = addedImage.GetRect();
            // let center={
            //     x:(oriRect.right+oriRect.left)/2,
            //     y:(oriRect.top+oriRect.bottom)/2
            // };
            // let m = addedImage.GetMatrix();
            // m.RotateAt(radian,-center.x,-center.y,0)
            // // m.Translate(-center.x,-center.y,0);
            // // m.Rotate(-radian,0);
            // // m.Translate(center.x,center.y,0);
            // addedImage.SetMatrix(m);
            // c_page.GenerateContent();
            // c_page.StartParse(0,null,true);
            // m.delete();

            return ret;
        });
    };

    PDFPage.prototype.addAnnot = function addAnnot(annot) {
        var _this21 = this;

        //return this.createAnnot(annot);
        return this.parsedPage().then(function (c_page) {
            var engine = _this21.engine;
            var c_AnnotType = (0, _annotType.getEngineAnnotType)(engine, annot.type);
            var c_rectf = (0, _rect.getEngineRectF)(engine, annot.rect);
            var c_annot = c_page.AddAnnot(c_AnnotType, c_rectf);
            var createdAnnot = _this21.annotManager.get(c_annot, _this21);
            return createdAnnot.create(annot);
        }).then(function (annots) {
            annots.forEach(function (annot) {
                _this21._setAnnotIdAt(annot.getId(), annot.getIndex());
            });
            return annots;
        });
    };

    PDFPage.prototype.markRedactAnnot = function markRedactAnnot(rectFArray) {
        var _this22 = this;

        var engine = this.engine;
        return this.pdfDoc.getRedaction().then(function (c_redaction) {
            return _this22.c_pagePromise.then(function (c_page) {
                return [c_redaction, c_page];
            }).then(function (result) {
                var c_redaction = result[0];
                var c_page = result[1];
                var redactAnnot = void 0;
                try {
                    var c_rect_f_array = new engine.RectFArray();
                    for (var i = 0, j = rectFArray.length; i < j; i++) {
                        var rect = rectFArray[i];
                        var c_rectf = new engine.CFX_FloatRect(rect.left, rect.bottom, rect.right, rect.top);
                        c_rect_f_array.Add(c_rectf);
                    }
                    redactAnnot = c_redaction.MarkRedactAnnot(c_page, c_rect_f_array);
                } catch (err) {
                    if (!isNaN(err)) {
                        err = _this22.engine.getErrorCode(err);
                    }
                    console.log(err);
                }
                var createdAnnot = _this22.annotManager.get(redactAnnot, _this22);
                return createdAnnot.create(createdAnnot);
            }).then(function (annots) {
                annots.forEach(function (annot) {
                    _this22._setAnnotIdAt(annot.getId(), annot.getIndex());
                });
                return annots;
            });
        });
    };

    PDFPage.prototype.addAnnotGroup = function addAnnotGroup(annots, headerIndex) {
        var _this23 = this;

        return this.parsedPage().then(function (c_page) {
            var engine = _this23.engine;
            var group = new engine.MarkupArray();
            var result = [];
            annots.forEach(function (annot, index) {
                if (index !== headerIndex) {
                    annot.noPopup = true;
                }
                var c_AnnotType = (0, _annotType.getEngineAnnotType)(engine, annot.type);
                var c_rectf = (0, _rect.getEngineRectF)(engine, annot.rect);
                var c_annot = c_page.AddAnnot(c_AnnotType, c_rectf);
                group.Add(new engine.Markup(c_annot));
                var createdAnnot = _this23.annotManager.get(c_annot, _this23);
                result = result.concat(createdAnnot.create(annot));
            });
            c_page.SetAnnotGroup(group, headerIndex);
            return result;
        }).then(function (annots) {
            annots.forEach(function (annot) {
                _this23._setAnnotIdAt(annot.getId(), annot.getIndex());
            });
            return annots;
        });
    };

    PDFPage.prototype.createAnnot = function createAnnot(annot) {
        var _this24 = this;

        return this.parsedPage().then(function (c_page) {
            var engine = _this24.engine;
            //try {

            //let c_AnnotType = getEngineAnnotType(engine, annot.type);
            //let c_rectf = getEngineRectF(engine, annot.rect);
            //let c_annot = c_page.AddAnnot(c_AnnotType, c_rectf);
            //let createdAnnot = this.annotManager.get(c_annot, this);
            //return createdAnnot.create(annot);
            var highlight = new engine.Highlight();
            var quadPointsArray = new engine.QuadPointsArray();
            var QuadPoints = engine.QuadPoints;
            var PointF = engine.PointF;
            quadPointsArray.Add(new QuadPoints(new PointF(100, 400), new PointF(200, 400), new PointF(100, 300), new PointF(200, 300)));
            highlight.SetQuadPoints(quadPointsArray);
            var bitmap = new engine.Bitmap(100, 100, engine.DIBFormat.e_DIBArgb, 0, 0);
            var renderer = new engine.Renderer(bitmap, true);
            if (renderer.IsEmpty()) {
                renderer.delete();
                return false;
            }
            var matrix = _this24.getPageMatrix();
            matrix.Translate(100, 300);
            var isOK = renderer.RenderAnnot(annot, matrix);
            return getBitmapBuffer(engine, bitmap, renderer);

            //} catch (err) {
            // js directly throws error code, while c++ throws exception
            //    var errorCode = (err instanceof engine.ErrorCode) ? err : engine.getErrorCode(err)
            //    console.log(errorCode)
            //}
        });
    };

    PDFPage.prototype.getTextRectsAtRect = function getTextRectsAtRect(rect) {
        var _this25 = this;

        return this.parsedPage().then(function (c_page) {
            try {
                var engine = _this25.engine;
                var RectF = engine.CFX_FloatRect;
                /**
                 * @type GSDK.TextPage
                 */
                var c_textPage = _this25.getNormalTextPageSync();
                var c_rectArray = c_textPage.GetTextRectArrayByRect(new RectF(rect.left, rect.bottom, rect.right, rect.top));
                var result = [];
                for (var i = c_rectArray.GetSize(); i--;) {
                    var c_rect = c_rectArray.GetAt(i);

                    var index = c_textPage.GetIndexAtPos((c_rect.right + c_rect.left) / 2, (c_rect.bottom + c_rect.top) / 2 + 2, 2);
                    var count = c_textPage.GetTextRectCount(index, 2);
                    var rotation = 0;
                    if (count > 0) {
                        rotation = c_textPage.GetBaselineRotation(0).value;
                    }

                    result[i] = {
                        left: c_rect.left,
                        right: c_rect.right,
                        top: c_rect.top,
                        bottom: c_rect.bottom,
                        rotation: rotation
                    };
                }
                return result;
            } catch (err) {
                if (!isNaN(err)) {
                    err = _this25.engine.getErrorCode(err);
                }
                console.warn(err);
            }
        });
    };

    PDFPage.prototype.getTextContinuousRectsAtRect = function getTextContinuousRectsAtRect(rect) {
        var _this26 = this;

        if (rect.right - rect.left < 0.5 || rect.top - rect.bottom < 0.5) {
            return Promise.resolve([]);
        }
        return this.getTextRectsAtRect(rect).then(function (rectArray) {
            try {
                var count = rectArray.length;
                if (count < 2) {
                    return rectArray;
                }
                var firstRect = rectArray[0];
                var lastRect = rectArray[count - 1];
                var engine = _this26.engine;
                var textPage = _this26.getNormalTextPageSync();
                var tolerance = 3;
                var startTolerance = Math.min((firstRect.top - firstRect.bottom) / 2, tolerance);
                var startPoint = new engine.PointF(firstRect.left + startTolerance, firstRect.top - startTolerance);
                var startCharIndex = textPage.GetIndexAtPos(startPoint.x, startPoint.y, startTolerance);
                if (startCharIndex < 0) {
                    return rectArray;
                }
                var endTolerance = Math.min((lastRect.top - lastRect.bottom) / 2, tolerance);
                var endPoint = new engine.PointF(lastRect.right - endTolerance, lastRect.bottom + endTolerance);
                var endCharIndex = textPage.GetIndexAtPos(endPoint.x, endPoint.y, endTolerance);
                if (endCharIndex < 0) {
                    return rectArray;
                }
                var tempCharIndex = void 0;
                if (endCharIndex < startCharIndex) {
                    tempCharIndex = startCharIndex;
                    startCharIndex = endCharIndex;
                    endCharIndex = tempCharIndex;
                }
                var resultArray = [];
                for (var i = 0, j = textPage.GetTextRectCount(startCharIndex, endCharIndex - startCharIndex); i < j; i++) {
                    var textRect = textPage.GetTextRect(i);
                    resultArray[i] = {
                        left: textRect.left,
                        top: textRect.top,
                        right: textRect.right,
                        bottom: textRect.bottom,
                        rotation: textPage.GetBaselineRotation(i).value
                    };
                }
                return resultArray;
            } catch (err) {
                if (!isNaN(err)) {
                    err = _this26.engine.getErrorCode(err);
                }
                console.warn(err);
            }
        });
    };

    PDFPage.prototype.getTextContinuousCharsAtRect = function getTextContinuousCharsAtRect(rect) {
        var _this27 = this;

        return this.getTextRectsAtRect(rect).then(function (rectArray) {
            var count = rectArray.length;
            if (!count) {
                return '';
            }
            var firstRect = rectArray[0];
            var lastRect = rectArray[count - 1];
            var engine = _this27.engine;
            var textPage = _this27.getNormalTextPageSync();
            var tolerance = 3;
            var startTolerance = Math.min((firstRect.top - firstRect.bottom) / 2, tolerance);
            var startPoint = new engine.PointF(firstRect.left + startTolerance, firstRect.top - startTolerance);
            var startCharIndex = textPage.GetIndexAtPos(startPoint.x, startPoint.y, startTolerance);
            if (startCharIndex < 0) {
                return '';
            }
            var endTolerance = Math.min((lastRect.top - lastRect.bottom) / 2, tolerance);
            var endPoint = new engine.PointF(lastRect.right - endTolerance, lastRect.bottom + endTolerance);
            var endCharIndex = textPage.GetIndexAtPos(endPoint.x, endPoint.y, endTolerance);
            if (endCharIndex < 0) {
                return '';
            }
            var tempCharIndex = void 0;
            if (endCharIndex < startCharIndex) {
                tempCharIndex = startCharIndex;
                startCharIndex = endCharIndex;
                endCharIndex = tempCharIndex;
            }
            return textPage.GetChars(startCharIndex, endCharIndex - startCharIndex + 1).toString();
        });
    };

    PDFPage.prototype.getTextSearch = function getTextSearch(pattern, flags) {
        var _this28 = this;

        return this.parsedPage().then(function (page) {

            try {
                var engine = _this28.engine;
                flags = flags || engine.SearchFlags.e_SearchNormal.value;
                var c_textSearch = new engine.TextSearch(_this28.getNormalTextPageSync());
                c_textSearch.SetPattern(new engine.WString(pattern));
                c_textSearch.SetSearchFlags(flags);
                return c_textSearch;
            } catch (err) {
                // js directly throws error code, while c++ throws exception
                var errorCode = err instanceof _this28.engine.ErrorCode ? err : _this28.engine.getErrorCode(err);
                logger.error(errorCode);
            }
        });
    };

    PDFPage.prototype.update = function update() {
        var _this29 = this;

        return this.c_pagePromise.then(function (page) {
            _this29.annotationIDArray = _this29._prepareAnnotations(page);
            return { index: _this29.index, annotIds: _this29.annotationIDArray };
        });
    };

    PDFPage.prototype.flatten = function flatten(option) {
        return this.c_pagePromise.then(function (c_page) {
            return c_page.Flatten(true, option);
        });
    };

    PDFPage.prototype.getGraphicsObjectAtPoint_s = function getGraphicsObjectAtPoint_s(_ref51, tolerance, type) {
        var _ref52 = _slicedToArray(_ref51, 2),
            x = _ref52[0],
            y = _ref52[1];

        var _this30 = this;

        return this.parsedPage().then(function (page) {
            var engine = _this30.engine;
            var types = engine.GraphicsObjectType;
            var point = new engine.PointF(x, y);

            var result = Promise.all([page.GetGraphicsObjectAtPoint(point, tolerance, types.values[type]), page]);

            point.delete();

            return result;
        }).then(function (_ref53) {
            var _ref54 = _slicedToArray(_ref53, 2),
                object = _ref54[0],
                page = _ref54[1];

            if (object) {
                var jrObject = _this30.JR.graphicsObjectManager.get(object, page, _this30);
                if (object.GetType().value === 5) {
                    return jrObject.getGraphicsObjectAtPoint(x, y, type, _this30.JR.graphicsObjectManager);
                }
                if (type === 0) {
                    if (object.GetType().value === 2) {
                        if (jrObject.isPointInLine(x, y, tolerance)) return jrObject;
                    } else return jrObject;
                }
            }
        });
    };

    PDFPage.prototype.getGraphicsObjectAtPoint = function getGraphicsObjectAtPoint(_ref55, tolerance, type) {
        var _ref56 = _slicedToArray(_ref55, 2),
            x = _ref56[0],
            y = _ref56[1];

        var _this31 = this;

        return this.parsedPage().then(function (page) {
            var engine = _this31.engine;
            var types = engine.GraphicsObjectType;
            var point = new engine.PointF(x, y);

            var result = Promise.all([page.GetGraphicsObjectsAtPoint(point, tolerance, types.values[type]), page]);

            point.delete();

            return result;
        }).then(function (info) {
            return _this31.checkPathObjects(info, x, y, type, tolerance);
        });
    };

    PDFPage.prototype.checkPathObjects = function checkPathObjects(_ref57, x, y, type, tolerance) {
        var _ref58 = _slicedToArray(_ref57, 2),
            objects = _ref58[0],
            page = _ref58[1];

        var _this32 = this;

        if (objects) {
            var number = void 0;
            var getObject = void 0;
            if (objects instanceof Array) {
                number = objects.length;
                getObject = function getObject(index) {
                    return objects[index];
                };
            } else {
                number = objects.GetSize();
                getObject = function getObject(index) {
                    return _this32.JR.graphicsObjectManager.get(objects.GetAt(index), page, _this32);
                };
            }
            for (var index = 0; index < number; index++) {
                var jrObject = getObject(index);

                if (jrObject.getType() === 5) {
                    var obj = this.checkPathObjects([jrObject.getGraphicsObjectsAtPoint(x, y, type, tolerance, this.JR.graphicsObjectManager), page], x, y, tolerance);
                    if (obj) return obj;
                } else if (jrObject.getType() === 2) {
                    if (jrObject.isPointInLine(x, y, tolerance)) return jrObject;
                } else return jrObject;
            }
        }
    };

    PDFPage.prototype.addWatermark = function addWatermark() {
        var _this33 = this;

        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        /**
         * @type GSDK.Watermark
         */
        var watermark = void 0,
            engine = this.engine,
            doc = this.doc,
            type = data.type;
        /**
         * @type GSDK.WatermarkTextProperties
         */
        var textProperties = void 0;
        var watermarkSettings = data.watermarkSettings;
        watermarkSettings = Object.assign({
            position: "Center",
            offsetX: 0,
            offsetY: 0,
            flags: 0,
            scaleX: 1,
            scaleY: 1,
            rotation: 45,
            opacity: 100
        }, watermarkSettings);
        var settings = watermarkSettings && _WatermarkSettings2.default.createWatermarkSettings(engine, watermarkSettings.position, watermarkSettings.offsetX, watermarkSettings.offsetY, watermarkSettings.flags, watermarkSettings.scaleX, watermarkSettings.scaleY, watermarkSettings.rotation, watermarkSettings.opacity);
        if (type.toLocaleLowerCase() === "bitmap") {
            watermark = _Watermark2.default.createBitmapWatermark(engine, doc, data.bitmap, settings);
        } else if (type.toLocaleLowerCase() === "text") {
            var watermarkTextProperties = data.watermarkTextProperties;
            watermarkTextProperties = Object.assign({
                font: 0,
                fontSize: 20,
                color: 0x000000,
                fontStyle: "normal",
                lineSpace: 10,
                alignment: "center"
            }, watermarkTextProperties);
            textProperties = watermarkTextProperties && _WatermarkTextProperties2.default.createWatermarkTextProperties(engine, watermarkTextProperties.font, watermarkTextProperties.fontSize, watermarkTextProperties.color, watermarkTextProperties.fontStyle, watermarkTextProperties.lineSpace, watermarkTextProperties.alignment);
            watermark = _Watermark2.default.createTextWatermark(engine, doc, data.text, textProperties, settings);
        }
        return this.parsedPage().then(function (c_page) {
            try {
                watermark && watermark.InsertToPage(c_page);
                c_page.GenerateContent();
                var annot = void 0;
                if (watermarkSettings.flags === 1) {
                    _this33.annotationIDArray = _this33._getAnnotationIdArray(c_page);
                    annot = _this33.annotManager.get(c_page.GetAnnot(0), _this33);
                }

                return watermarkSettings.flags === 1 ? annot.toJson() : watermark;
            } catch (err) {
                if (!isNaN(err)) {
                    err = engine.getErrorCode(err);
                }
                console.warn(err);
            }
        });
    };

    return PDFPage;
}();

exports.default = PDFPage;
/**
 * 
 * @param {GSDK} engine 
 * @param {*} width 
 * @param {*} height 
 */

function createBitmap(engine, width, height, hasTransparency) {
    var bitmap = new engine.Bitmap(width, height, hasTransparency ? engine.DIBFormat.e_DIBArgb : engine.DIBFormat.e_DIBRgb, 0, 0);
    if (bitmap.IsEmpty()) {
        bitmap.delete();
        throw CREATE_BITMAP_FAIL;
    }
    var rect = new engine.FX_RECT();
    rect.left = 0;
    rect.top = 0;
    rect.right = width;
    rect.top = height;
    bitmap.FillRect(hasTransparency ? 0x00ffffff : 0xffffffff, rect);
    rect.delete();

    return bitmap;
}
//function createBitmapRender (engine, bitmap) {
//    let renderer = new engine.Renderer(bitmap, true);
//    if (renderer.IsEmpty()) {
//        renderer.delete();
//        bitmap.delete();
//        throw CREATE_BITMAP_RENDER_FAIL;
//    }
//    return renderer;
//}
/**
 * 
 * @param {*} engine 
 * @param {*} renderer 
 * @param {GSDK.PDFPage} page 
 * @param {*} jrRenderFlags 
 */
function renderGraphicObject(engine, renderer, matrix, page) {
    var jrRenderFlags = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;

    var pos = page.GetFirstGraphicsObjectPosition(engine.GraphicsObjectType.e_TypeAll);
    while (pos) {
        try {
            var object = page.GetGraphicsObject(pos);
            pos = page.GetNextGraphicsObjectPosition(pos, engine.GraphicsObjectType.e_TypeAll);

            var type = object.GetType();
            if (jrRenderFlags & 0x1 && type && type.value == engine.GraphicsObjectType.e_TypePath.value) {
                continue;
            }
            if (jrRenderFlags & 0x2 && type && type.value == engine.GraphicsObjectType.e_TypeImage.value) {
                continue;
            }
            renderer.RenderGraphicsObject(object, page, matrix);
        } catch (err) {
            if (!isNaN(err)) {
                err = this.engine.getErrorCode(err);
            }
            console.warn(err);
        }
    }
}
/**
 * 
 * @param {*} param0 
 * @param {GSDK} engine 
 * @param {GSDK.PDFPage} page 
 * @param {*} bitmap 
 * @param {GSDK.Renderer} renderer 
 * @param {*} renderFlags 
 * @param {*} progressiveContinueState 
 * @param {*} progressiveFinishState 
 */
function startBitmapRender(_ref59, engine, page, bitmap, renderer, renderFlags, progressiveContinueState, progressiveFinishState, jrRenderFlags) {
    var x = _ref59.x,
        y = _ref59.y,
        width = _ref59.width,
        height = _ref59.height,
        rotate = _ref59.rotate;

    var matrix = page.GetDisplayMatrix(x, y, width, height, engine.Rotation.e_Rotation0);

    if (renderFlags) {
        renderer.SetRenderContentFlags(renderFlags);
    }
    if (jrRenderFlags === 0) {
        var isRenderSuccess = (0, _progressiveCountine2.default)(renderer.StartRender(page, matrix, null), progressiveContinueState, progressiveFinishState);
        if (!isRenderSuccess) {
            renderer.delete();
            bitmap.delete();
            throw BITMAP_RENDER_FAIL;
        }
    } else {
        renderGraphicObject(engine, renderer, matrix, page, jrRenderFlags);
    }
}
//function startBitmapRenderWithPageHighlight ({x, y, width, height, rotate},
//    engine, page, bitmap, renderer, progressiveContinueState, progressiveFinishState) {
//    let matrix = page.GetDisplayMatrix(x, y, width, height, engine.Rotation.e_Rotation0);
//
//    //renderer.SetRenderContentFlags(engine.ContentFlag.e_RenderPage.value);
//    renderer.SetRenderContentFlags(0);
//    //renderer.FillRect(0xffffff00, null)
//
//    let isRenderSuccess = progressiveContinue(
//        renderer.StartRender(page, matrix, null),
//        progressiveContinueState,
//        progressiveFinishState
//    );
//    if (!isRenderSuccess) {
//        renderer.delete();
//        bitmap.delete();
//        throw BITMAP_RENDER_FAIL;
//    } else {
//        let position = page.GetFirstGraphicsObjectPosition(engine.GraphicsObjectType.e_TypeAll);
//        let i = 0;
//        while (position) {
//            let obj = page.GetGraphicsObject(position);
//            console.log('page.GetGraphicsObject(position)',obj)
//            if (obj.GetType() === engine.GraphicsObjectType.e_TypeFormXObject) {
//                let objs = obj.GetFormXObject().GetGraphicsObjects();
//                console.log('obj.GetFormXObject().GetGraphicsObjects();',objs)
//                let position = objs.GetFirstGraphicsObjectPosition(engine.GraphicsObjectType.e_TypeAll);
//                while (position) {
//                    let obj = objs.GetGraphicsObject(position);
//                    console.log('objs.GetGraphicsObject(position)',obj)
//                    if (obj.GetType() === engine.GraphicsObjectType.e_TypeText) {
//                        renderer.RenderGraphicsObject(obj, page, matrix);
//                    }
//                    position = objs.GetNextGraphicsObjectPosition(position, engine.GraphicsObjectType.e_TypeAll);
//                }
//            }
//
//            position = page.GetNextGraphicsObjectPosition(position, engine.GraphicsObjectType.e_TypeAll);
//        }
//        let highlightType = engine.AnnotType.e_Highlight;
//        for (var i = 0, j = page.GetAnnotCount(); i < j; i++) {
//            let annot = page.GetAnnot(i);
//            if (annot.GetType() === highlightType) {
//                renderer.RenderAnnot(annot, matrix)
//            }
//        }
//    }
//}
function startBitmapRenderWithPageHighlight(_ref60, engine, page, bitmap, renderer, progressiveContinueState, progressiveFinishState, jrRenderFlags) {
    var x = _ref60.x,
        y = _ref60.y,
        width = _ref60.width,
        height = _ref60.height,
        rotate = _ref60.rotate;

    var matrix = page.GetDisplayMatrix(x, y, width, height, engine.Rotation.e_Rotation0);

    renderer.SetRenderContentFlags(engine.ContentFlag.e_RenderPage.value);

    var isRenderSuccess = 1;
    if (jrRenderFlags === 0) {
        isRenderSuccess = (0, _progressiveCountine2.default)(renderer.StartRender(page, matrix, null), progressiveContinueState, progressiveFinishState);
    } else {
        renderGraphicObject(engine, renderer, matrix, page, jrRenderFlags);
    }

    if (!isRenderSuccess) {
        renderer.delete();
        bitmap.delete();
        throw BITMAP_RENDER_FAIL;
    } else {
        var highlightType = engine.AnnotType.e_Highlight;
        for (var i = 0, j = page.GetAnnotCount(); i < j; i++) {
            var annot = page.GetAnnot(i);
            if (annot.GetType() === highlightType) {
                renderer.RenderAnnot(annot, matrix);
            }
        }
    }
}

//function getBitmapBuffer (engine, bitmap, renderer) {
//    let start = bitmap.GetBuffer();
//    let bitmapWidth = bitmap.GetWidth();
//    let bitmapHeight = bitmap.GetHeight();
//    let size = bitmapHeight * bitmap.GetPitch();
//    let end = start + size;
//    let imageDataBuffer;
//    if (engine.HEAPU8.buffer.slice) {
//        imageDataBuffer = engine.HEAPU8.buffer.slice(start, end);
//    } else {
//        imageDataBuffer = new Uint8Array(engine.HEAPU8.buffer, start, size).buffer;
//    }
//
//    renderer.delete();
//    bitmap.delete();
//
//    return {
//        buffer: imageDataBuffer,
//        width: bitmapWidth,
//        height: bitmapHeight,
//    };
//}
function getEngineRotate(engine, rotate) {
    var Rotate = engine.Rotation;
    var rotate0 = Rotate.e_Rotation0;
    return [rotate0, Rotate.e_Rotation90, Rotate.e_Rotation180, Rotate.e_Rotation270][rotate] || rotate0;
}

/***/ }),

/***/ "./src/pdf-jr/action/Action.js":
/*!*************************************!*\
  !*** ./src/pdf-jr/action/Action.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Action = function () {
    Action.create = function create(engine, pdfDoc, type) {
        return engine.Action.Create(pdfDoc, type);
    };

    function Action(action, doc, engine, JR) {
        _classCallCheck(this, Action);

        this.engine = engine;
        this.doc = doc;
        this.JR = JR;
        this.action = action;
        this.initSubActions();
    }

    Action.prototype.toJson = function toJson() {
        var typeInEngine = this.getType();
        var type = typeInEngine.replace(/^ActionType_e_/, '');
        var subAction = [];
        var dict = this.action.GetDict();
        var objNumber = dict.GetObjNum();
        var subActionCount = this.action.GetSubActionCount();
        this.subAction.forEach(function (action) {
            subAction.push(action.toJson());
        });
        return {
            objNumber: objNumber,
            type: type,
            subAction: subAction,
            subActionCount: subActionCount
        };
    };

    Action.prototype.setActionDataByIndex = function setActionDataByIndex(data) {
        var actionIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

        var action = this;
        for (var i = 1; i <= actionIndex; i++) {
            action = action.subAction[0];
        }
        action.setActionData(data);
        return this;
    };

    Action.prototype.setSubAction = function setSubAction(index, type) {
        var action = this.JR.actionManager.create(this.doc, type);
        this.action.SetSubAction(index, action);
        this.initSubActions();
    };

    Action.prototype.insertSubAction = function insertSubAction(index, type) {
        var action = this.JR.actionManager.create(this.doc, type);
        this.action.InsertSubAction(index, action);
        this.initSubActions();
    };

    Action.prototype.removeAllSubActions = function removeAllSubActions() {
        this.action.RemoveAllSubActions();
        this.initSubActions();
    };

    Action.prototype.removeSubAction = function removeSubAction(index) {
        this.action.RemoveSubAction(index);
        this.initSubActions();
    };

    Action.prototype.isEmpty = function isEmpty() {
        return this.action.IsEmpty();
    };

    Action.prototype.getType = function getType() {
        return this.action.GetType().constructor.name;
    };

    Action.prototype.setActionData = function setActionData(data) {
        return false;
    };

    Action.prototype.initSubActions = function initSubActions() {
        var subActionCount = this.action.GetSubActionCount();
        this.subAction = [];
        if (subActionCount > 0) {
            for (var i = 0; i < subActionCount; i++) {
                this.subAction.push(this.JR.actionManager.get(this.action.GetSubAction(i), this.doc, this.JR));
            }
        }
    };

    return Action;
}();

exports.default = Action;

/***/ }),

/***/ "./src/pdf-jr/action/ActionManager.js":
/*!********************************************!*\
  !*** ./src/pdf-jr/action/ActionManager.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Action = __webpack_require__(/*! ./Action */ "./src/pdf-jr/action/Action.js");

var _Action2 = _interopRequireDefault(_Action);

var _URIAction = __webpack_require__(/*! ./URIAction */ "./src/pdf-jr/action/URIAction.js");

var _URIAction2 = _interopRequireDefault(_URIAction);

var _GotoAction = __webpack_require__(/*! ./GotoAction */ "./src/pdf-jr/action/GotoAction.js");

var _GotoAction2 = _interopRequireDefault(_GotoAction);

var _LaunchAction = __webpack_require__(/*! ./LaunchAction */ "./src/pdf-jr/action/LaunchAction.js");

var _LaunchAction2 = _interopRequireDefault(_LaunchAction);

var _NamedAction = __webpack_require__(/*! ./NamedAction */ "./src/pdf-jr/action/NamedAction.js");

var _NamedAction2 = _interopRequireDefault(_NamedAction);

var _JavaScriptAction = __webpack_require__(/*! ./JavaScriptAction */ "./src/pdf-jr/action/JavaScriptAction.js");

var _JavaScriptAction2 = _interopRequireDefault(_JavaScriptAction);

var _SubmitFormAction = __webpack_require__(/*! ./SubmitFormAction */ "./src/pdf-jr/action/SubmitFormAction.js");

var _SubmitFormAction2 = _interopRequireDefault(_SubmitFormAction);

var _ResetFormAction = __webpack_require__(/*! ./ResetFormAction */ "./src/pdf-jr/action/ResetFormAction.js");

var _ResetFormAction2 = _interopRequireDefault(_ResetFormAction);

var _ImportDataAction = __webpack_require__(/*! ./ImportDataAction */ "./src/pdf-jr/action/ImportDataAction.js");

var _ImportDataAction2 = _interopRequireDefault(_ImportDataAction);

var _RenditionAction = __webpack_require__(/*! ./RenditionAction */ "./src/pdf-jr/action/RenditionAction.js");

var _RenditionAction2 = _interopRequireDefault(_RenditionAction);

var _HideAction = __webpack_require__(/*! ./HideAction */ "./src/pdf-jr/action/HideAction.js");

var _HideAction2 = _interopRequireDefault(_HideAction);

var _RemoteGotoAction = __webpack_require__(/*! ./RemoteGotoAction */ "./src/pdf-jr/action/RemoteGotoAction.js");

var _RemoteGotoAction2 = _interopRequireDefault(_RemoteGotoAction);

var _EmbeddedGotoAction = __webpack_require__(/*! ./EmbeddedGotoAction */ "./src/pdf-jr/action/EmbeddedGotoAction.js");

var _EmbeddedGotoAction2 = _interopRequireDefault(_EmbeddedGotoAction);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ActionManager = function () {
    function ActionManager(engine) {
        _classCallCheck(this, ActionManager);

        this.engine = engine;
    }

    ActionManager.prototype.get = function get(action, doc, JR) {
        var engine = this.engine;
        var ActionType = engine.ActionType;
        var actionType = action && action.GetType() || null;
        switch (actionType) {
            case ActionType.e_TypeURI:
                return new _URIAction2.default(action, doc, engine, JR);
            case ActionType.e_TypeLaunch:
                return new _LaunchAction2.default(action, doc, engine, JR);
            case ActionType.e_TypeNamed:
                return new _NamedAction2.default(action, doc, engine, JR);
            case ActionType.e_TypeJavaScript:
                return new _JavaScriptAction2.default(action, doc, engine, JR);
            case ActionType.e_TypeResetForm:
                return new _ResetFormAction2.default(action, doc, engine, JR);
            case ActionType.e_TypeSubmitForm:
                return new _SubmitFormAction2.default(action, doc, engine, JR);
            case ActionType.e_TypeImportData:
                return new _ImportDataAction2.default(action, doc, engine, JR);
            case ActionType.e_TypeGoto:
                return new _GotoAction2.default(action, doc, engine, JR);
            case ActionType.e_TypeRendition:
                return new _RenditionAction2.default(action, doc, engine, JR);
            case ActionType.e_TypeHide:
                return new _HideAction2.default(action, doc, engine, JR);
            case ActionType.e_TypeGoToR:
                return new _RemoteGotoAction2.default(action, doc, engine, JR);
            case ActionType.e_TypeGoToE:
                return new _EmbeddedGotoAction2.default(action, doc, engine, JR);
            case ActionType.e_TypeUnknown:
            case ActionType.e_TypeSound:
            case ActionType.e_TypeMovie:
            case ActionType.e_TypeSetOCGState:
            case ActionType.e_TypeTrans:
            case ActionType.e_TypeGoTo3DView:
            default:
                return new _Action2.default(action, doc, engine, JR);
        }
    };

    ActionManager.prototype.create = function create(pdfDoc, type) {
        var engine = this.engine;
        var ActionType = engine.ActionType;
        return _Action2.default.create(this.engine, pdfDoc, ActionType["e_" + type]);
    };

    ActionManager.prototype.getActionByDict = function getActionByDict(pdfDoc, dict) {
        var engine = this.engine;
        return new engine.Action(pdfDoc, dict);
    };

    return ActionManager;
}();

exports.default = ActionManager;

/***/ }),

/***/ "./src/pdf-jr/action/EmbeddedGotoAction.js":
/*!*************************************************!*\
  !*** ./src/pdf-jr/action/EmbeddedGotoAction.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Action2 = __webpack_require__(/*! ./Action */ "./src/pdf-jr/action/Action.js");

var _Action3 = _interopRequireDefault(_Action2);

var _Destination = __webpack_require__(/*! ../base/Destination */ "./src/pdf-jr/base/Destination.js");

var _Destination2 = _interopRequireDefault(_Destination);

var _FileSpec = __webpack_require__(/*! ../base/FileSpec */ "./src/pdf-jr/base/FileSpec.js");

var _FileSpec2 = _interopRequireDefault(_FileSpec);

var _EmbeddedGotoTarget = __webpack_require__(/*! ./EmbeddedGotoTarget */ "./src/pdf-jr/action/EmbeddedGotoTarget.js");

var _EmbeddedGotoTarget2 = _interopRequireDefault(_EmbeddedGotoTarget);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var EmbeddedGotoAction = function (_Action) {
    _inherits(EmbeddedGotoAction, _Action);

    function EmbeddedGotoAction(action, doc, engine, JR) {
        _classCallCheck(this, EmbeddedGotoAction);

        var _this = _possibleConstructorReturn(this, _Action.call(this, action, doc, engine, JR));

        _this.action = new _this.engine.EmbeddedGotoAction(action);
        return _this;
    }

    EmbeddedGotoAction.prototype.toJson = function toJson() {
        var json = _Action.prototype.toJson.call(this);
        json.destinationName = this.getDestinationName();
        var destination = this.getDestination();
        json.destination = destination.toJson();
        var rootFile = this.getRootFile();
        json.rootFile = rootFile.toJson();
        json.newWindowFlag = this.getNewWindowFlag();
        if (!this.action.GetTarget().IsEmpty()) {
            json.target = this.getTarget().toJson();
        }
        return json;
    };

    EmbeddedGotoAction.prototype.getDestinationName = function getDestinationName() {
        return this.action.GetDestinationName().toString();
    };

    EmbeddedGotoAction.prototype.getDestination = function getDestination() {
        return new _Destination2.default(this.action.GetDestination(), this.doc, this.engine);
    };

    EmbeddedGotoAction.prototype.getRootFile = function getRootFile() {
        return this.fileSpec = new _FileSpec2.default(this.action.GetRootFile(), this);
    };

    EmbeddedGotoAction.prototype.getNewWindowFlag = function getNewWindowFlag() {
        return this.action.GetNewWindowFlag().value;
    };

    EmbeddedGotoAction.prototype.getTarget = function getTarget() {
        return new _EmbeddedGotoTarget2.default(this.action.GetTarget(), this.engine, this.doc);
    };

    EmbeddedGotoAction.prototype.setActionData = function setActionData(data) {
        this.setDestination(data);
        data.destinationName && this.setDestinationName(data.destinationName);
        data.buffer && this.setRootFile(data.buffer, data.fileName);
        data.newWindowFlag && this.setNewWindowFlag(data.newWindowFlag);
        this.setTarget(data.target);
    };

    EmbeddedGotoAction.prototype.setDestination = function setDestination(data) {
        var pdfDoc = this.doc;
        var destFn = null;
        switch (data.type) {
            case "ZoomXYZ":
                destFn = _Destination2.default.createXYZ;
                break;
            case "ZoomFitPage":
                destFn = _Destination2.default.createFitPage;
                break;
            case "ZoomFitHorz":
                destFn = _Destination2.default.createFitHorz;
                break;
            case "ZoomFitVert":
                destFn = _Destination2.default.createFitVert;
                break;
            case "ZoomFitRect":
                destFn = _Destination2.default.createFitRect;
                break;
            case "ZoomFitBBox":
                destFn = _Destination2.default.createFitBBox;
                break;
            case "ZoomFitBHorz":
                destFn = _Destination2.default.createFitBHorz;
                break;
            default:
                destFn = _Destination2.default.createFitBVert;
                break;
        }
        var destination = destFn(this.engine, pdfDoc, data);
        this.action.SetDestination(destination);
        return true;
    };

    EmbeddedGotoAction.prototype.setDestinationName = function setDestinationName(name) {
        this.action.SetDestinationName(name);
        return true;
    };

    EmbeddedGotoAction.prototype.setRootFile = function setRootFile(buffer, fileName) {
        var file = _FileSpec2.default.createFile(this.engine, this.doc, buffer);
        var fileSpec = new _FileSpec2.default(file, this);
        fileSpec.setFileName(fileName);
        //this.action.SetRootFile(file);
        try {
            this.action.SetRootFile(file);
        } catch (err) {
            if (!isNaN(err)) {
                err = this.engine.getErrorCode(err);
            }
            console.warn(err);
        }
    };

    EmbeddedGotoAction.prototype.setNewWindowFlag = function setNewWindowFlag(flag) {
        var flagType = [this.engine.NewWindowFlag.e_NewWindowFlagFalse, this.engine.NewWindowFlag.e_NewWindowFlagTrue, this.engine.NewWindowFlag.e_NewWindowFlagNone];
        this.action.SetNewWindowFlag(flagType[flag]);
    };

    EmbeddedGotoAction.prototype.setTarget = function setTarget(data) {
        var attachedFileName = data.attachedFileName,
            fileAttachmentAnnotIndex = data.fileAttachmentAnnotIndex,
            pageIndex = data.pageIndex,
            relationship = data.relationship,
            target = data.target;

        var embededGotoTarget = _EmbeddedGotoTarget2.default.create(this.engine, this.doc);
        var embededTarget = new _EmbeddedGotoTarget2.default(embededGotoTarget, this.engine, this.doc);
        attachedFileName && embededTarget.setAttachedFileName(attachedFileName);
        fileAttachmentAnnotIndex >= 0 && embededTarget.setFileAttachmentAnnotIndex(fileAttachmentAnnotIndex);
        pageIndex >= 0 && embededTarget.setPageIndex(pageIndex);
        relationship && embededTarget.setRelationship(relationship);
        target && embededTarget.setTarget(target);
        this.action.SetTarget(embededGotoTarget);
    };

    return EmbeddedGotoAction;
}(_Action3.default);

exports.default = EmbeddedGotoAction;

/***/ }),

/***/ "./src/pdf-jr/action/EmbeddedGotoTarget.js":
/*!*************************************************!*\
  !*** ./src/pdf-jr/action/EmbeddedGotoTarget.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var EmbeddedGotoTarget = function () {
    EmbeddedGotoTarget.create = function create(engine, doc) {
        return new engine.EmbeddedGotoTarget(doc);
    };

    function EmbeddedGotoTarget(embeddedGotoTarget, engine, doc) {
        _classCallCheck(this, EmbeddedGotoTarget);

        this.engine = engine;
        this.doc = doc;
        this.embeddedGotoTarget = embeddedGotoTarget;
    }

    EmbeddedGotoTarget.prototype.toJson = function toJson() {
        var attachedFileName = this.getAttachedFileName(),
            fileAttachmentAnnotIndex = this.getFileAttachmentAnnotIndex(),
            pageIndex = this.getPageIndex(),
            relationship = this.getRelationship();
        var target = void 0;
        if (!this.embeddedGotoTarget.GetTarget().IsEmpty()) {
            target = this.getTarget().toJson();
        }
        return {
            attachedFileName: attachedFileName,
            fileAttachmentAnnotIndex: fileAttachmentAnnotIndex,
            pageIndex: pageIndex,
            relationship: relationship,
            target: target
        };
    };

    EmbeddedGotoTarget.prototype.getAttachedFileName = function getAttachedFileName() {
        return this.embeddedGotoTarget.GetAttachedFileName().toString();
    };

    EmbeddedGotoTarget.prototype.getFileAttachmentAnnotIndex = function getFileAttachmentAnnotIndex() {
        return this.embeddedGotoTarget.GetFileAttachmentAnnotIndex();
    };

    EmbeddedGotoTarget.prototype.getPageIndex = function getPageIndex() {
        return this.embeddedGotoTarget.GetPageIndex();
    };

    EmbeddedGotoTarget.prototype.getRelationship = function getRelationship() {
        return this.embeddedGotoTarget.GetRelationship().toString();
    };

    EmbeddedGotoTarget.prototype.getTarget = function getTarget() {
        return new this.constructor(this.embeddedGotoTarget.GetTarget());
    };

    EmbeddedGotoTarget.prototype.setAttachedFileName = function setAttachedFileName(fileName) {
        this.embeddedGotoTarget.SetAttachedFileName(new this.engine.WString(fileName));
    };

    EmbeddedGotoTarget.prototype.setFileAttachmentAnnotIndex = function setFileAttachmentAnnotIndex(annotIndex) {
        this.embeddedGotoTarget.SetFileAttachmentAnnotIndex(annotIndex);
    };

    EmbeddedGotoTarget.prototype.setPageIndex = function setPageIndex(pageIndex) {
        this.embeddedGotoTarget.SetPageIndex(pageIndex);
    };

    EmbeddedGotoTarget.prototype.setRelationship = function setRelationship(relationship) {
        this.embeddedGotoTarget.SetRelationship(new this.engine.String(relationship));
    };

    EmbeddedGotoTarget.prototype.setTarget = function setTarget(data) {
        var attachedFileName = data.attachedFileName,
            fileAttachmentAnnotIndex = data.fileAttachmentAnnotIndex,
            pageIndex = data.pageIndex,
            relationship = data.relationship,
            target = data.target;

        var embededGotoTarget = this.constructor.create(this.engine, this.doc);
        var embededTarget = new this.constructor(embededGotoTarget, this.engine, this.doc);
        attachedFileName && embededTarget.setAttachedFileName(attachedFileName);
        fileAttachmentAnnotIndex >= 0 && embededTarget.setFileAttachmentAnnotIndex(fileAttachmentAnnotIndex);
        pageIndex >= 0 && embededTarget.setPageIndex(pageIndex);
        relationship && embededTarget.setRelationship(relationship);
        target && embededTarget.setTarget(target);
        this.embeddedGotoTarget.SetTarget(embededGotoTarget);
    };

    return EmbeddedGotoTarget;
}();

exports.default = EmbeddedGotoTarget;

/***/ }),

/***/ "./src/pdf-jr/action/GotoAction.js":
/*!*****************************************!*\
  !*** ./src/pdf-jr/action/GotoAction.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Action2 = __webpack_require__(/*! ./Action */ "./src/pdf-jr/action/Action.js");

var _Action3 = _interopRequireDefault(_Action2);

var _Destination = __webpack_require__(/*! ../base/Destination */ "./src/pdf-jr/base/Destination.js");

var _Destination2 = _interopRequireDefault(_Destination);

var _PDFDoc = __webpack_require__(/*! ../PDFDoc */ "./src/pdf-jr/PDFDoc.js");

var _PDFDoc2 = _interopRequireDefault(_PDFDoc);

var _Annot = __webpack_require__(/*! ../annot/Annot */ "./src/pdf-jr/annot/Annot.js");

var _Annot2 = _interopRequireDefault(_Annot);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var GotoAction = function (_Action) {
    _inherits(GotoAction, _Action);

    function GotoAction(action, doc, engine, JR) {
        _classCallCheck(this, GotoAction);

        var _this = _possibleConstructorReturn(this, _Action.call(this, action, doc, engine, JR));

        _this.action = new _this.engine.GotoAction(action);
        return _this;
    }

    GotoAction.prototype.toJson = function toJson() {
        var json = _Action.prototype.toJson.call(this);
        var destination = this.getDestination();
        json.destination = destination.toJson();
        return json;
    };

    GotoAction.prototype.getDestination = function getDestination() {
        return new _Destination2.default(this.action.GetDestination(), this.doc, this.engine);
    };

    GotoAction.prototype.setActionData = function setActionData(data) {
        return this.setDestination(data);
    };

    GotoAction.prototype.setDestination = function setDestination(data) {
        var pdfDoc = this.doc;
        var destFn = null;
        switch (data.type) {
            case "ZoomXYZ":
                destFn = _Destination2.default.createXYZ;
                break;
            case "ZoomFitPage":
                destFn = _Destination2.default.createFitPage;
                break;
            case "ZoomFitHorz":
                destFn = _Destination2.default.createFitHorz;
                break;
            case "ZoomFitVert":
                destFn = _Destination2.default.createFitVert;
                break;
            case "ZoomFitRect":
                destFn = _Destination2.default.createFitRect;
                break;
            case "ZoomFitBBox":
                destFn = _Destination2.default.createFitBBox;
                break;
            case "ZoomFitBHorz":
                destFn = _Destination2.default.createFitBHorz;
                break;
            default:
                destFn = _Destination2.default.createFitBVert;
                break;
        }
        var destination = destFn(this.engine, pdfDoc, data);
        this.action.SetDestination(destination);
        return true;
    };

    return GotoAction;
}(_Action3.default);

exports.default = GotoAction;

/***/ }),

/***/ "./src/pdf-jr/action/HideAction.js":
/*!*****************************************!*\
  !*** ./src/pdf-jr/action/HideAction.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Action2 = __webpack_require__(/*! ./Action */ "./src/pdf-jr/action/Action.js");

var _Action3 = _interopRequireDefault(_Action2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var HideAction = function (_Action) {
    _inherits(HideAction, _Action);

    function HideAction(action, doc, engine, JR) {
        _classCallCheck(this, HideAction);

        var _this = _possibleConstructorReturn(this, _Action.call(this, action, doc, engine, JR));

        _this.action = new _this.engine.HideAction(action);
        return _this;
    }

    HideAction.prototype.toJson = function toJson() {
        var json = _Action.prototype.toJson.call(this);
        json.fieldNames = this.getFieldNames();
        json.hideState = this.getHideState();
        return json;
    };

    HideAction.prototype.getFieldNames = function getFieldNames() {
        var wStringArray = this.action.GetFieldNames();
        var fieldNames = [];
        for (var i = 0; i < wStringArray.GetSize(); i++) {
            fieldNames.push(wStringArray.GetAt(i).toString());
        }
        return fieldNames;
    };

    HideAction.prototype.getHideState = function getHideState() {
        return this.action.GetHideState();
    };

    HideAction.prototype.setActionData = function setActionData(data) {
        try {
            this.setFieldNames(data.fieldNames);
            this.setHideState(data.hideState);
        } catch (e) {
            return false;
        }
        return true;
    };

    HideAction.prototype.setFieldNames = function setFieldNames(fieldNames) {
        var _this2 = this;

        var fieldWStringArray = new this.engine.WStringArray();
        fieldNames.forEach(function (fieldName) {
            fieldWStringArray.Add(new _this2.engine.WString(fieldName));
        });
        return this.action.SetFieldNames(fieldWStringArray);
    };

    HideAction.prototype.setHideState = function setHideState(hideState) {
        return this.action.SetHideState(hideState);
    };

    return HideAction;
}(_Action3.default);

exports.default = HideAction;

/***/ }),

/***/ "./src/pdf-jr/action/ImportDataAction.js":
/*!***********************************************!*\
  !*** ./src/pdf-jr/action/ImportDataAction.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Action2 = __webpack_require__(/*! ./Action */ "./src/pdf-jr/action/Action.js");

var _Action3 = _interopRequireDefault(_Action2);

var _FileSpec = __webpack_require__(/*! ../base/FileSpec */ "./src/pdf-jr/base/FileSpec.js");

var _FileSpec2 = _interopRequireDefault(_FileSpec);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var ImportDataAction = function (_Action) {
    _inherits(ImportDataAction, _Action);

    function ImportDataAction(action, doc, engine, JR) {
        _classCallCheck(this, ImportDataAction);

        var _this = _possibleConstructorReturn(this, _Action.call(this, action, doc, engine, JR));

        _this.action = new _this.engine.ImportDataAction(action);
        return _this;
    }

    ImportDataAction.prototype.toJson = function toJson() {
        var json = _Action.prototype.toJson.call(this);
        var fileSpec = this.getFDFFileSpec();
        json.fileSpec = fileSpec.toJson();
        return json;
    };

    ImportDataAction.prototype.setActionData = function setActionData(data) {
        try {
            data.buffer && this.setFDFFileSpec(data);
        } catch (e) {
            return false;
        }
        return true;
    };

    ImportDataAction.prototype.getFDFFileSpec = function getFDFFileSpec() {
        return this.fileSpec = new _FileSpec2.default(this.action.GetFDFFileSpec(), this);
    };

    ImportDataAction.prototype.setFDFFileSpec = function setFDFFileSpec(data) {
        var file = _FileSpec2.default.createFile(this.engine, this.host.doc, data.buffer);
        var fileSpec = new _FileSpec2.default(file, this);
        fileSpec.setFileName(data.fileName);
        this.action.SetFDFFileSpec(file);
    };

    return ImportDataAction;
}(_Action3.default);

exports.default = ImportDataAction;

/***/ }),

/***/ "./src/pdf-jr/action/JavaScriptAction.js":
/*!***********************************************!*\
  !*** ./src/pdf-jr/action/JavaScriptAction.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Action2 = __webpack_require__(/*! ./Action */ "./src/pdf-jr/action/Action.js");

var _Action3 = _interopRequireDefault(_Action2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var JavaScriptAction = function (_Action) {
    _inherits(JavaScriptAction, _Action);

    function JavaScriptAction(action, doc, engine, JR) {
        _classCallCheck(this, JavaScriptAction);

        var _this = _possibleConstructorReturn(this, _Action.call(this, action, doc, engine, JR));

        _this.action = new _this.engine.JavaScriptAction(action);
        return _this;
    }

    JavaScriptAction.prototype.toJson = function toJson() {
        var json = _Action.prototype.toJson.call(this);
        json.javascript = this.getScript();
        return json;
    };

    JavaScriptAction.prototype.setActionData = function setActionData(data) {
        try {
            this.setScript(data.script);
        } catch (e) {
            return false;
        }
        return true;
    };

    JavaScriptAction.prototype.getScript = function getScript() {
        return this.action.GetScript().toString();
    };

    JavaScriptAction.prototype.setScript = function setScript(script) {
        this.action.SetScript(new this.engine.WString(script));
    };

    return JavaScriptAction;
}(_Action3.default);

exports.default = JavaScriptAction;

/***/ }),

/***/ "./src/pdf-jr/action/LaunchAction.js":
/*!*******************************************!*\
  !*** ./src/pdf-jr/action/LaunchAction.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Action2 = __webpack_require__(/*! ./Action */ "./src/pdf-jr/action/Action.js");

var _Action3 = _interopRequireDefault(_Action2);

var _FileSpec = __webpack_require__(/*! ../base/FileSpec */ "./src/pdf-jr/base/FileSpec.js");

var _FileSpec2 = _interopRequireDefault(_FileSpec);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var LaunchAction = function (_Action) {
    _inherits(LaunchAction, _Action);

    function LaunchAction(action, doc, engine, JR) {
        _classCallCheck(this, LaunchAction);

        var _this = _possibleConstructorReturn(this, _Action.call(this, action, doc, engine, JR));

        _this.action = new _this.engine.LaunchAction(action);
        return _this;
    }

    LaunchAction.prototype.toJson = function toJson() {
        var json = _Action.prototype.toJson.call(this);
        var fileSpec = this.getFileSpec();
        json.fileSpec = fileSpec.toJson();
        return json;
    };

    LaunchAction.prototype.getFileSpec = function getFileSpec() {
        return this.fileSpec = new _FileSpec2.default(this.action.GetFileSpec(), this);
    };

    LaunchAction.prototype.setActionData = function setActionData(data) {
        try {
            data.buffer && this.setFileSpec(data);
        } catch (e) {
            return false;
        }
        return true;
    };

    LaunchAction.prototype.setFileSpec = function setFileSpec(data) {
        var file = _FileSpec2.default.createFile(this.engine, this.host.doc, data.buffer);
        var fileSpec = new _FileSpec2.default(file, this);
        fileSpec.setFileName(data.fileName);
        this.action.SetFileSpec(file);
    };

    return LaunchAction;
}(_Action3.default);

exports.default = LaunchAction;

/***/ }),

/***/ "./src/pdf-jr/action/NamedAction.js":
/*!******************************************!*\
  !*** ./src/pdf-jr/action/NamedAction.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Action2 = __webpack_require__(/*! ./Action */ "./src/pdf-jr/action/Action.js");

var _Action3 = _interopRequireDefault(_Action2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var NamedAction = function (_Action) {
    _inherits(NamedAction, _Action);

    function NamedAction(action, doc, engine, JR) {
        _classCallCheck(this, NamedAction);

        var _this = _possibleConstructorReturn(this, _Action.call(this, action, doc, engine, JR));

        _this.action = new _this.engine.NamedAction(action);
        return _this;
    }

    NamedAction.prototype.toJson = function toJson() {
        var json = _Action.prototype.toJson.call(this);
        json.name = this.getName();
        return json;
    };

    NamedAction.prototype.setActionData = function setActionData(data) {
        try {
            this.setName(data.name);
        } catch (e) {
            return false;
        }
        return true;
    };

    NamedAction.prototype.getName = function getName() {
        return this.action.GetName().toString();
    };

    NamedAction.prototype.setName = function setName(name) {
        this.action.SetName(new this.engine.String(name));
    };

    return NamedAction;
}(_Action3.default);

exports.default = NamedAction;

/***/ }),

/***/ "./src/pdf-jr/action/RemoteGotoAction.js":
/*!***********************************************!*\
  !*** ./src/pdf-jr/action/RemoteGotoAction.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Action2 = __webpack_require__(/*! ./Action */ "./src/pdf-jr/action/Action.js");

var _Action3 = _interopRequireDefault(_Action2);

var _Destination = __webpack_require__(/*! ../base/Destination */ "./src/pdf-jr/base/Destination.js");

var _Destination2 = _interopRequireDefault(_Destination);

var _FileSpec = __webpack_require__(/*! ../base/FileSpec */ "./src/pdf-jr/base/FileSpec.js");

var _FileSpec2 = _interopRequireDefault(_FileSpec);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var RemoteGotoAction = function (_Action) {
    _inherits(RemoteGotoAction, _Action);

    function RemoteGotoAction(action, doc, engine, JR) {
        _classCallCheck(this, RemoteGotoAction);

        var _this = _possibleConstructorReturn(this, _Action.call(this, action, doc, engine, JR));

        _this.action = new _this.engine.RemoteGotoAction(action);
        return _this;
    }

    RemoteGotoAction.prototype.toJson = function toJson() {
        var json = _Action.prototype.toJson.call(this);
        json.destinationName = this.getDestinationName();
        var destination = this.getDestination();
        json.destination = destination.toJson();
        var fileSpec = this.getFileSpec();
        json.fileSpec = fileSpec.toJson();
        json.newWindowFlag = this.getNewWindowFlag();
        return json;
    };

    RemoteGotoAction.prototype.getDestinationName = function getDestinationName() {
        return this.action.GetDestinationName().toString();
    };

    RemoteGotoAction.prototype.getDestination = function getDestination() {
        return new _Destination2.default(this.action.GetDestination(), this.doc, this.engine);
    };

    RemoteGotoAction.prototype.getFileSpec = function getFileSpec() {
        return this.fileSpec = new _FileSpec2.default(this.action.GetFileSpec(), this);
    };

    RemoteGotoAction.prototype.getNewWindowFlag = function getNewWindowFlag() {
        return this.action.GetNewWindowFlag().value;
    };

    RemoteGotoAction.prototype.setActionData = function setActionData(data) {
        this.setDestination(data);
        data.destinationName && this.setDestinationName(data.destinationName);
        this.setFileSpec(data.buffer, data.fileName);
        data.newWindowFlag && this.setNewWindowFlag(data.newWindowFlag);
    };

    RemoteGotoAction.prototype.setDestination = function setDestination(data) {
        var pdfDoc = this.doc;
        var destFn = null;
        switch (data.type) {
            case "ZoomXYZ":
                destFn = _Destination2.default.createXYZ;
                break;
            case "ZoomFitPage":
                destFn = _Destination2.default.createFitPage;
                break;
            case "ZoomFitHorz":
                destFn = _Destination2.default.createFitHorz;
                break;
            case "ZoomFitVert":
                destFn = _Destination2.default.createFitVert;
                break;
            case "ZoomFitRect":
                destFn = _Destination2.default.createFitRect;
                break;
            case "ZoomFitBBox":
                destFn = _Destination2.default.createFitBBox;
                break;
            case "ZoomFitBHorz":
                destFn = _Destination2.default.createFitBHorz;
                break;
            default:
                destFn = _Destination2.default.createFitBVert;
                break;
        }
        var destination = destFn(this.engine, pdfDoc, data);
        this.action.SetDestination(destination);
        return true;
    };

    RemoteGotoAction.prototype.setDestinationName = function setDestinationName(name) {
        this.action.SetDestinationName(name);
        return true;
    };

    RemoteGotoAction.prototype.setFileSpec = function setFileSpec(buffer, fileName) {
        var file = _FileSpec2.default.createFile(this.engine, this.doc, buffer);
        var fileSpec = new _FileSpec2.default(file, this);
        fileSpec.setFileName(fileName);
        this.action.SetFileSpec(file);
    };

    RemoteGotoAction.prototype.setNewWindowFlag = function setNewWindowFlag(flag) {
        var flagType = [this.engine.NewWindowFlag.e_NewWindowFlagFalse, this.engine.NewWindowFlag.e_NewWindowFlagTrue, this.engine.NewWindowFlag.e_NewWindowFlagNone];
        this.action.SetNewWindowFlag(flagType[flag]);
    };

    return RemoteGotoAction;
}(_Action3.default);

exports.default = RemoteGotoAction;

/***/ }),

/***/ "./src/pdf-jr/action/RenditionAction.js":
/*!**********************************************!*\
  !*** ./src/pdf-jr/action/RenditionAction.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Action2 = __webpack_require__(/*! ./Action */ "./src/pdf-jr/action/Action.js");

var _Action3 = _interopRequireDefault(_Action2);

var _FileSpec = __webpack_require__(/*! ../base/FileSpec */ "./src/pdf-jr/base/FileSpec.js");

var _FileSpec2 = _interopRequireDefault(_FileSpec);

var _Destination = __webpack_require__(/*! ../base/Destination */ "./src/pdf-jr/base/Destination.js");

var _Destination2 = _interopRequireDefault(_Destination);

var _PDFDoc = __webpack_require__(/*! ../PDFDoc */ "./src/pdf-jr/PDFDoc.js");

var _PDFDoc2 = _interopRequireDefault(_PDFDoc);

var _Annot = __webpack_require__(/*! ../annot/Annot */ "./src/pdf-jr/annot/Annot.js");

var _Annot2 = _interopRequireDefault(_Annot);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var RenditionAction = function (_Action) {
    _inherits(RenditionAction, _Action);

    function RenditionAction(action, doc, engine, JR) {
        _classCallCheck(this, RenditionAction);

        var _this = _possibleConstructorReturn(this, _Action.call(this, action, doc, engine, JR));

        _this.action = new _this.engine.RenditionAction(action);
        return _this;
    }

    RenditionAction.prototype.toJson = function toJson() {
        var _this2 = this;

        var json = _Action.prototype.toJson.call(this);
        var renditionCount = this.action.GetRenditionCount();
        var renditions = [];

        var _loop = function _loop(i) {
            var c_rendition = _this2.action.GetRendition(i);
            var contentTypeStr = c_rendition.GetMediaClipContentType();

            var contentType = void 0;
            try {
                contentType = contentTypeStr.toString();
            } catch (err) {
                var hexStrID = '';
                var strLength = contentTypeStr.GetLength();
                var strBuffer = contentTypeStr.GetBuffer();
                for (var j = 0; j < strLength; j++) {
                    var code = _this2.engine.HEAP8[strBuffer + j] >>> 0 & 0x00ff;
                    hexStrID += String.fromCharCode(code);
                }
                contentType = hexStrID;
            }

            var c_fileSpec = c_rendition.GetMediaClipFile();
            var fileName = c_fileSpec.GetFileName().toString();
            var fileSpec = new _FileSpec2.default(c_fileSpec, _this2);
            var fileSize = fileSpec.getFileSize();
            var fileBuffer = new Uint8Array(fileSize);
            fileSpec.getStream(function (buffer, offset, size) {
                var u8 = new Uint8Array(buffer);
                fileBuffer.set(u8, offset);
            });
            renditions.push({
                fileSize: fileSize,
                fileName: fileName,
                contentType: contentType,
                buffer: fileBuffer
            });
        };

        for (var i = 0; i < renditionCount; i++) {
            _loop(i);
        }
        json.renditions = renditions;
        return json;
    };

    return RenditionAction;
}(_Action3.default);

exports.default = RenditionAction;

/***/ }),

/***/ "./src/pdf-jr/action/ResetFormAction.js":
/*!**********************************************!*\
  !*** ./src/pdf-jr/action/ResetFormAction.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Action2 = __webpack_require__(/*! ./Action */ "./src/pdf-jr/action/Action.js");

var _Action3 = _interopRequireDefault(_Action2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var ResetFormAction = function (_Action) {
    _inherits(ResetFormAction, _Action);

    function ResetFormAction(action, doc, engine, JR) {
        _classCallCheck(this, ResetFormAction);

        var _this = _possibleConstructorReturn(this, _Action.call(this, action, doc, engine, JR));

        _this.action = new _this.engine.ResetFormAction(action);
        return _this;
    }

    ResetFormAction.prototype.toJson = function toJson() {
        var json = _Action.prototype.toJson.call(this);
        json.flags = this.getFlags();
        json.fieldNames = this.getFieldNames();
        return json;
    };

    ResetFormAction.prototype.setActionData = function setActionData(data) {
        try {
            data.flags && this.setFlags(data.flags);
            data.fieldNames && this.setFieldNames(data.fieldNames);
        } catch (e) {
            return false;
        }
        return true;
    };

    ResetFormAction.prototype.getFieldNames = function getFieldNames() {
        var fieldNames = this.action.GetFieldNames(),
            fieldNamesArr = [],
            size = fieldNames.GetSize();
        for (var i = 0; i < size; i++) {
            fieldNamesArr.push(fieldNames.GetAt(i).toString());
        }
        return fieldNamesArr;
    };

    ResetFormAction.prototype.getFlags = function getFlags() {
        return this.action.GetFlags();
    };

    ResetFormAction.prototype.setFieldNames = function setFieldNames(fieldNames) {
        var _this2 = this;

        var fieldWStringArray = new this.engine.WStringArray();
        fieldNames.forEach(function (fieldName) {
            fieldWStringArray.Add(new _this2.engine.WString(fieldName));
        });
        return this.action.SetFieldNames(fieldWStringArray);
    };

    ResetFormAction.prototype.setFlags = function setFlags(flags) {
        return this.action.SetFlags(Number(flags));
    };

    return ResetFormAction;
}(_Action3.default);

exports.default = ResetFormAction;

/***/ }),

/***/ "./src/pdf-jr/action/SubmitFormAction.js":
/*!***********************************************!*\
  !*** ./src/pdf-jr/action/SubmitFormAction.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Action2 = __webpack_require__(/*! ./Action */ "./src/pdf-jr/action/Action.js");

var _Action3 = _interopRequireDefault(_Action2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var SubmitFormAction = function (_Action) {
    _inherits(SubmitFormAction, _Action);

    function SubmitFormAction(action, doc, engine, JR) {
        _classCallCheck(this, SubmitFormAction);

        var _this = _possibleConstructorReturn(this, _Action.call(this, action, doc, engine, JR));

        _this.action = new _this.engine.SubmitFormAction(action);
        return _this;
    }

    SubmitFormAction.prototype.toJson = function toJson() {

        var json = _Action.prototype.toJson.call(this);
        json.flags = this.getFlags();
        json.url = this.getURL();
        json.fieldNames = this.getFieldNames();
        return json;
    };

    SubmitFormAction.prototype.setActionData = function setActionData(data) {
        try {
            data.flags && this.setFlags(data.flags);
            data.url && this.setURL(data.url);
            data.fieldNames && this.setFieldNames(data.fieldNames);
        } catch (e) {
            return false;
        }
        return true;
    };

    SubmitFormAction.prototype.getFieldNames = function getFieldNames() {
        var fieldNames = this.action.GetFieldNames(),
            fieldNamesArr = [],
            size = fieldNames.GetSize();
        for (var i = 0; i < size; i++) {
            fieldNamesArr.push(fieldNames.GetAt(i).toString());
        }
        return fieldNamesArr;
    };

    SubmitFormAction.prototype.getFlags = function getFlags() {
        return this.action.GetFlags();
    };

    SubmitFormAction.prototype.getURL = function getURL() {
        var url = this.action.GetURL();
        if (url.GetLength() === 0) {
            return null;
        }
        return url.toString();
    };

    SubmitFormAction.prototype.setFieldNames = function setFieldNames(fieldNames) {
        var _this2 = this;

        var fieldWStringArray = new this.engine.WStringArray();
        fieldNames.forEach(function (fieldName) {
            fieldWStringArray.Add(new _this2.engine.WString(fieldName));
        });
        return this.action.SetFieldNames(fieldWStringArray);
    };

    SubmitFormAction.prototype.setFlags = function setFlags(flags) {
        return this.action.SetFlags(Number(flags));
    };

    SubmitFormAction.prototype.setURL = function setURL(url) {
        return this.action.SetURL(new this.engine.String(url));
    };

    return SubmitFormAction;
}(_Action3.default);

exports.default = SubmitFormAction;

/***/ }),

/***/ "./src/pdf-jr/action/URIAction.js":
/*!****************************************!*\
  !*** ./src/pdf-jr/action/URIAction.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Action2 = __webpack_require__(/*! ./Action */ "./src/pdf-jr/action/Action.js");

var _Action3 = _interopRequireDefault(_Action2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var URIAction = function (_Action) {
    _inherits(URIAction, _Action);

    function URIAction(action, doc, engine, JR) {
        _classCallCheck(this, URIAction);

        var _this = _possibleConstructorReturn(this, _Action.call(this, action, doc, engine, JR));

        _this.action = new _this.engine.URIAction(action);
        return _this;
    }

    URIAction.prototype.toJson = function toJson() {
        var json = _Action.prototype.toJson.call(this);
        json.uri = this.getURI();
        return json;
    };

    URIAction.prototype.setActionData = function setActionData(data) {
        this.setURI(data.uri);
        return true;
    };

    URIAction.prototype.getURI = function getURI() {
        var uriObj = this.action.GetURI();
        var uri = void 0;
        try {
            uri = uriObj.toString();
        } catch (err) {
            if (!isNaN(err)) {
                err = this.engine.getErrorCode(err);
            }
            console.warn(err);

            var hexStrID = '';
            var strLength = uriObj.GetLength();
            var strBuffer = uriObj.GetBuffer();
            for (var j = 0; j < strLength; j++) {
                var code = this.engine.HEAP8[strBuffer + j] >>> 0 & 0x00ff;
                hexStrID += String.fromCharCode(code);
            }
            uri = hexStrID;
        }
        return uri;
    };

    URIAction.prototype.setURI = function setURI(uri) {
        this.action.SetURI(new this.engine.String(uri));
    };

    return URIAction;
}(_Action3.default);

exports.default = URIAction;

/***/ }),

/***/ "./src/pdf-jr/annot/Annot.js":
/*!***********************************!*\
  !*** ./src/pdf-jr/annot/Annot.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _RectOperator = __webpack_require__(/*! ../share/RectOperator */ "./src/pdf-jr/share/RectOperator.js");

var _RectOperator2 = _interopRequireDefault(_RectOperator);

var _consts = __webpack_require__(/*! ../../shared/consts */ "./src/shared/consts.js");

var _guid = __webpack_require__(/*! ../../shared/guid */ "./src/shared/guid.js");

var _guid2 = _interopRequireDefault(_guid);

var _LoggerFactory = __webpack_require__(/*! ../../shared/logger/LoggerFactory */ "./src/shared/logger/LoggerFactory.js");

var _LoggerFactory2 = _interopRequireDefault(_LoggerFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var logger = _LoggerFactory2.default.getLogger('pdf-jr.Annot');

var Annot = function () {
    function Annot(annot, pdfPage) {
        _classCallCheck(this, Annot);

        this.annot = annot;
        this.pdfPage = pdfPage;
        this.JR = pdfPage.JR;
        /**
         * @type GSDK
         */
        this.engine = pdfPage.engine;
        this.doc = pdfPage.doc;
    }

    Annot.prototype.toJson = function toJson() {
        var annot = this.annot;

        var flag = annot.GetFlags();

        var rectInfo = this.JR.getRotatedAnnotRect(annot);
        var rectLeft = rectInfo.left;
        var rectRight = rectInfo.right;
        var rectTop = rectInfo.top;
        var rectBottom = rectInfo.bottom;
        var rotate = rectInfo.rotate;

        var typeInEngine = annot.GetType().constructor.name;
        var type = this.getType();

        var borderInfo = annot.GetBorderInfo();
        var dashes = [];
        for (var index = 0; index < borderInfo.dashes.GetSize(); index++) {
            dashes.push(borderInfo.dashes.GetAt(index));
        }

        var id = annot.GetUniqueID().toString();
        //if (!id && type!="Watermark") {
        //    id = guid();
        //    this.setUniqueId(id);
        //}
        var borderWidth = borderInfo.width;

        var borderColor = annot.GetBorderColor();
        if (borderColor === 0) {
            borderColor = -1;
        } else {
            borderColor = borderColor & 0xFFFFFF;
        }

        var modifiedDateTime = void 0;
        var modifiedTimestamp = -1;
        if (type != "popup") {
            try {
                modifiedDateTime = annot.GetModifiedDateTime();
                if (modifiedDateTime && modifiedDateTime.IsValid()) {
                    modifiedDateTime = modifiedDateTime.ToUTCTime();
                    modifiedTimestamp = Date.UTC(modifiedDateTime.year, modifiedDateTime.month - 1, modifiedDateTime.day, modifiedDateTime.hour, modifiedDateTime.minute, modifiedDateTime.second, modifiedDateTime.milliseconds);
                }
            } catch (err) {
                if (!isNaN(err)) {
                    err = this.engine.getErrorCode(err);
                }
                console.warn(err);
            }
        }

        var dict = annot.GetDict();
        var objNumber = dict.GetObjNum();

        return {
            // property: {
            //     modifiedDate: annot.Property.e_PropertyModifiedDate,
            //     creationDate: annot.Property.e_PropertyCreationDate,
            //     borderColor: annot.Property.e_PropertyBorderColor,
            //     fillColor: annot.Property.e_PropertyFillColor,
            // },
            objNumber: objNumber,
            id: id,
            typeInEngine: typeInEngine,
            type: type,
            typeAlias: type,
            rect: {
                top: rectTop,
                right: rectRight,
                bottom: rectBottom,
                left: rectLeft
            },
            rectIsEmpty: rectTop === rectRight && rectRight === rectBottom && rectBottom === rectLeft,
            isMarkup: annot.IsMarkup(),
            isDeleted: annot.isDeleted(),
            index: annot.GetIndex(),
            content: annot.GetContent().toString(),
            borderColor: borderColor,
            borderInfo: {
                cloudIntensity: borderInfo.cloud_intensity,
                dashPhase: borderInfo.dash_phase,
                dashes: dashes,
                style: borderInfo.style.value,
                width: borderWidth
            },
            flag: flag,
            modifiedTimestamp: modifiedTimestamp
        };
    };

    Annot.prototype.getId = function getId() {
        return this.annot.GetUniqueID().toString();
    };

    Annot.prototype.getIndex = function getIndex() {
        return this.annot.GetIndex();
    };

    Annot.prototype.getSummary = function getSummary() {
        var annot = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.annot;
        var ignoreID = arguments[1];

        var id = annot.GetUniqueID().toString();
        if (!id && !ignoreID) {
            id = (0, _guid2.default)();
            this.setUniqueId(id);
        }
        return {
            id: id,
            index: annot.GetIndex()
        };
    };

    Annot.prototype.getType = function getType() {
        var typeInEngine = this.annot.GetType().constructor.name;
        var type = typeInEngine.replace(/^AnnotType_e_/, '').toLowerCase();
        if (type === 'note') {
            type = 'text';
        }
        return type;
    };

    Annot.prototype.setContent = function setContent(content) {
        var annot = this.annot;
        annot.SetContent(new this.engine.WString(content));
        return annot.GetUniqueID().toString();
    };
    /**
     * 
     * @param {number} color number type color value in RRGGBB format
     * @memberof Annot
     */


    Annot.prototype.setBorderColor = function setBorderColor(color) {
        var annot = this.annot;
        if (color < 0) {
            color = 0;
        }
        if (annot.IsGrouped && annot.IsGrouped()) {
            var groupElements = annot.GetGroupElements();
            for (var i = groupElements.GetSize(); i--;) {
                var markup = groupElements.GetAt(i);
                markup.SetBorderColor(color);
                markup.ResetAppearanceStream();
            }
        } else {
            annot.SetBorderColor(color);
            annot.ResetAppearanceStream();
        }
    };

    Annot.prototype.remove = function remove() {
        var id = this.getId();
        return this.pdfPage.removeAnnotById(id).then(function (isSuccess) {
            if (isSuccess) {
                return [id];
            }
        });
    };

    Annot.prototype.setRect = function setRect(rect) {
        var destination = new this.engine.CFX_FloatRect(rect.left, rect.bottom, rect.right, rect.top);
        return this.annot.Move(destination) && this.annot.ResetAppearanceStream();
    };

    Annot.prototype.move = function move(offsetLeft, offsetTop) {
        /**
         * @type {GSDKCircleAnnot}
         */
        var annot = this.annot;

        var destination = _RectOperator2.default.on(annot.GetRect()) //
        .move(offsetLeft, offsetTop) //
        .extract();
        return this.annot.Move(destination) && this.annot.ResetAppearanceStream();
    };

    Annot.prototype.moveTo = function moveTo(left, top) {
        var rect = this.JR.getRotatedAnnotRect(this.annot);
        this.move(left - rect.left, top - rect.top);
        return [this.getId()];
    };

    Annot.prototype.setBorderStyle = function setBorderStyle(style, styleParam) {
        var borderInfo = this.annot.GetBorderInfo();
        var BorderInfoStyle = this.engine.BorderInfoStyle;
        switch (style) {
            case _consts.BORDER_STYLE.DASHED:
                borderInfo.style = BorderInfoStyle.values[BorderInfoStyle.e_Dashed.value];
                var dashs = new this.engine.FloatArray();
                dashs.SetSize(styleParam.length, -1);
                for (var eleIndex = 0; eleIndex < styleParam.length; eleIndex++) {
                    dashs.SetAt(eleIndex, styleParam[eleIndex]);
                }
                borderInfo.dashes = dashs;
                borderInfo.dash_phase = 0;
                break;
            case _consts.BORDER_STYLE.BEVELED:
                borderInfo.style = BorderInfoStyle.values[BorderInfoStyle.e_Beveled.value];
                break;
            case _consts.BORDER_STYLE.SOLID:
                borderInfo.style = BorderInfoStyle.values[BorderInfoStyle.e_Solid.value];
                break;
            case _consts.BORDER_STYLE.CLOUDY:
                borderInfo.style = BorderInfoStyle.values[BorderInfoStyle.e_Cloudy.value];
                borderInfo.cloud_intensity = styleParam;
                break;
        }
        this.annot.SetBorderInfo(borderInfo);
        this.annot.ResetAppearanceStream();
        return true;
    };

    Annot.prototype.setBorderWidth = function setBorderWidth(width) {
        try {
            var borderInfo = this.annot.GetBorderInfo();
            borderInfo.width = parseInt(width);
            this.annot.SetBorderInfo(borderInfo);
            this.annot.ResetAppearanceStream();
        } catch (err) {
            if (!isNaN(err)) {
                // js directly throws error code, while c++ throws exception
                err = gsdk.getErrorCode(err);
            }
            logger.warn(err);
        }

        return true;
    };

    Annot.prototype.setModifiedDateTime = function setModifiedDateTime(date) {
        var dateTime = this.ToDateTime(date);
        this.annot.SetModifiedDateTime(dateTime);
        return true;
    };

    Annot.prototype.ToDateTime = function ToDateTime(d) {
        var date = new Date(d);
        var year = date.getFullYear();
        var month = date.getMonth() + 1;
        var day = date.getDate();
        var hour = date.getHours();
        var minute = date.getMinutes();
        var second = date.getSeconds();
        var milli = date.getMilliseconds();
        var hourTimeZoneOffset = -date.getTimezoneOffset() / 60;
        var minuteTimeZoneOffset = 0;
        var dateTime = new this.engine.DateTime(year, month, day, hour, minute, second, milli, hourTimeZoneOffset, minuteTimeZoneOffset);
        return dateTime;
    };

    Annot.prototype.setFlags = function setFlags(flag) {
        this.annot.SetFlags(flag);
    };

    Annot.prototype.setUniqueId = function setUniqueId(name) {
        this.annot.SetUniqueID(new this.engine.WString(name));
    };

    Annot.prototype.create = function create(json) {
        var color = void 0;
        if (color = json.color) {
            color = parseInt(color, 16);
            this.setBorderColor(color);
        }
        var style = void 0;
        if (style = json.style) {
            this.setBorderStyle(style, json.intensity);
        }
        var contents = void 0;
        if (contents = json.contents) {
            this.setContent(contents);
        }
        var date = void 0;
        if (date = json.date) {
            this.setModifiedDateTime(date);
        }
        var name = void 0;
        if (name = json.name) {
            this.setUniqueId(name);
        } else {
            this.setUniqueId((0, _guid2.default)());
        }
        if (json.dicts) {
            var dicts = json.dicts;
            /**
             * @type GSDK.PDFDictionary
             */
            var dict = this.annot.GetDict();
            for (var i in dicts) {
                dict.SetAtString(new this.engine.String(i), new this.engine.String(dicts[i]));
            }
        }
        return [this];
    };

    return Annot;
}();

exports.default = Annot;

/***/ }),

/***/ "./src/pdf-jr/annot/AnnotManager.js":
/*!******************************************!*\
  !*** ./src/pdf-jr/annot/AnnotManager.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Annot = __webpack_require__(/*! ./Annot */ "./src/pdf-jr/annot/Annot.js");

var _Annot2 = _interopRequireDefault(_Annot);

var _MarkupAnnot = __webpack_require__(/*! ./MarkupAnnot */ "./src/pdf-jr/annot/MarkupAnnot.js");

var _MarkupAnnot2 = _interopRequireDefault(_MarkupAnnot);

var _TextMarkupAnnot = __webpack_require__(/*! ./TextMarkupAnnot */ "./src/pdf-jr/annot/TextMarkupAnnot.js");

var _TextMarkupAnnot2 = _interopRequireDefault(_TextMarkupAnnot);

var _Highlight = __webpack_require__(/*! ./Highlight */ "./src/pdf-jr/annot/Highlight.js");

var _Highlight2 = _interopRequireDefault(_Highlight);

var _StrikeOut = __webpack_require__(/*! ./StrikeOut */ "./src/pdf-jr/annot/StrikeOut.js");

var _StrikeOut2 = _interopRequireDefault(_StrikeOut);

var _Underline = __webpack_require__(/*! ./Underline */ "./src/pdf-jr/annot/Underline.js");

var _Underline2 = _interopRequireDefault(_Underline);

var _Line = __webpack_require__(/*! ./Line */ "./src/pdf-jr/annot/Line.js");

var _Line2 = _interopRequireDefault(_Line);

var _PolyLine = __webpack_require__(/*! ./PolyLine */ "./src/pdf-jr/annot/PolyLine.js");

var _PolyLine2 = _interopRequireDefault(_PolyLine);

var _Polygon = __webpack_require__(/*! ./Polygon */ "./src/pdf-jr/annot/Polygon.js");

var _Polygon2 = _interopRequireDefault(_Polygon);

var _Squiggly = __webpack_require__(/*! ./Squiggly */ "./src/pdf-jr/annot/Squiggly.js");

var _Squiggly2 = _interopRequireDefault(_Squiggly);

var _Note = __webpack_require__(/*! ./Note */ "./src/pdf-jr/annot/Note.js");

var _Note2 = _interopRequireDefault(_Note);

var _Circle = __webpack_require__(/*! ./Circle */ "./src/pdf-jr/annot/Circle.js");

var _Circle2 = _interopRequireDefault(_Circle);

var _FileAttachment = __webpack_require__(/*! ./FileAttachment */ "./src/pdf-jr/annot/FileAttachment.js");

var _FileAttachment2 = _interopRequireDefault(_FileAttachment);

var _Caret = __webpack_require__(/*! ./Caret */ "./src/pdf-jr/annot/Caret.js");

var _Caret2 = _interopRequireDefault(_Caret);

var _Square = __webpack_require__(/*! ./Square */ "./src/pdf-jr/annot/Square.js");

var _Square2 = _interopRequireDefault(_Square);

var _FreeText = __webpack_require__(/*! ./FreeText */ "./src/pdf-jr/annot/FreeText.js");

var _FreeText2 = _interopRequireDefault(_FreeText);

var _Stamp = __webpack_require__(/*! ./Stamp */ "./src/pdf-jr/annot/Stamp.js");

var _Stamp2 = _interopRequireDefault(_Stamp);

var _Link = __webpack_require__(/*! ./Link */ "./src/pdf-jr/annot/Link.js");

var _Link2 = _interopRequireDefault(_Link);

var _Ink = __webpack_require__(/*! ./Ink */ "./src/pdf-jr/annot/Ink.js");

var _Ink2 = _interopRequireDefault(_Ink);

var _Widget = __webpack_require__(/*! ./Widget */ "./src/pdf-jr/annot/Widget.js");

var _Widget2 = _interopRequireDefault(_Widget);

var _Screen = __webpack_require__(/*! ./Screen */ "./src/pdf-jr/annot/Screen.js");

var _Screen2 = _interopRequireDefault(_Screen);

var _Popup = __webpack_require__(/*! ./Popup */ "./src/pdf-jr/annot/Popup.js");

var _Popup2 = _interopRequireDefault(_Popup);

var _Redact = __webpack_require__(/*! ./Redact */ "./src/pdf-jr/annot/Redact.js");

var _Redact2 = _interopRequireDefault(_Redact);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 e_UnknownType 		Annotation type: unknown.
 e_Note 	    	Annotation type: note annotation, which is just "Text" annotation - one of standard annotation in <PDF reference 1.7>.
 e_Link 	    	Annotation type: link annotation. One of standard annotation in <PDF reference 1.7>.
 e_FreeText 		Annotation type: free text annotation. One of standard annotation in <PDF reference 1.7>.
 e_Line 	    	Annotation type: line annotation. One of standard annotation in <PDF reference 1.7>.
 e_Square 	    	Annotation type: square annotation. One of standard annotation in <PDF reference 1.7>.
 e_Circle 	    	Annotation type: circle annotation. One of standard annotation in <PDF reference 1.7>.
 e_Polygon 	    	Annotation type: polygon annotation. One of standard annotation in <PDF reference 1.7>.
 e_PolyLine 		Annotation type: polyline annotation. One of standard annotation in <PDF reference 1.7>.
 e_Highlight 		Annotation type: highlight annotation. One of standard annotation in <PDF reference 1.7>.
 e_Underline 		Annotation type: underline annotation. One of standard annotation in <PDF reference 1.7>.
 e_Squiggly 		Annotation type: squiggly annotation. One of standard annotation in <PDF reference 1.7>.
 e_StrikeOut 		Annotation type: strikeout annotation. One of standard annotation in <PDF reference 1.7>.
 e_Stamp 	    	Annotation type: stamp annotation. One of standard annotation in <PDF reference 1.7>.
 e_Caret 	    	Annotation type: caret annotation. One of standard annotation in <PDF reference 1.7>.
 e_Ink 	        	Annotation type: ink annotation. One of standard annotation in <PDF reference 1.7>.
 e_PSInk 	    	Annotation type: pressure sensitive ink annotation.
 e_FileAttachment 	Annotation type: file attachment annotation. One of standard annotation in <PDF reference 1.7>.
 e_Sound 	    	Annotation type: sound annotation. One of standard annotation in <PDF reference 1.7>.
 e_Movie 	    	Annotation type: movie annotation. One of standard annotation in <PDF reference 1.7>.
 e_Widget 	    	Annotation type: widget annotation. One of standard annotation in <PDF reference 1.7>.
     Note
     Foxit PDF SDK treats widget annotation as form control.
 e_Screen 	    	Annotation type: screen annotation. One of standard annotation in <PDF reference 1.7>.
 e_PrinterMark 		Annotation type: printer's mark annotation. One of standard annotation in <PDF reference 1.7>.
 e_TrapNet 	    	Annotation type: trap network annotation. One of standard annotation in <PDF reference 1.7>.
 e_Watermark 		Annotation type: watermark annotation. One of standard annotation in <PDF reference 1.7>.
 e_3D 	        	Annotation type: 3D annotation. One of standard annotation in <PDF reference 1.7>.
 e_Popup 	    	Annotation type: pop-up annotation. One of standard annotation in <PDF reference 1.7>.
 e_Redact 	    	Annotation type: redact annotation.
 */
var AnnotManager = function () {
    function AnnotManager(engine) {
        _classCallCheck(this, AnnotManager);

        this.engine = engine;
    }

    AnnotManager.prototype.get = function get(annot, pdfPage) {
        var engine = this.engine;
        var AnnotType = engine.AnnotType;
        switch (annot.GetType()) {
            case AnnotType.e_Highlight:
                return new _Highlight2.default(annot, pdfPage);
            case AnnotType.e_Squiggly:
                return new _Squiggly2.default(annot, pdfPage);
            case AnnotType.e_StrikeOut:
                return new _StrikeOut2.default(annot, pdfPage);
            case AnnotType.e_Underline:
                return new _Underline2.default(annot, pdfPage);
            case AnnotType.e_Line:
                return new _Line2.default(annot, pdfPage);
            case AnnotType.e_PolyLine:
                return new _PolyLine2.default(annot, pdfPage);
            case AnnotType.e_FileAttachment:
                return new _FileAttachment2.default(annot, pdfPage);
            case AnnotType.e_Note:
                return new _Note2.default(annot, pdfPage);
            case AnnotType.e_Circle:
                return new _Circle2.default(annot, pdfPage);
            case AnnotType.e_Caret:
                return new _Caret2.default(annot, pdfPage);
            case AnnotType.e_Polygon:
                return new _Polygon2.default(annot, pdfPage);
            case AnnotType.e_FreeText:
                return new _FreeText2.default(annot, pdfPage);
            case AnnotType.e_Square:
                return new _Square2.default(annot, pdfPage);
            case AnnotType.e_Ink:
                return new _Ink2.default(annot, pdfPage);
            case AnnotType.e_Stamp:
                return new _Stamp2.default(annot, pdfPage);
            case AnnotType.e_Link:
                return new _Link2.default(annot, pdfPage);
            case AnnotType.e_Screen:
                return new _Screen2.default(annot, pdfPage);
            case AnnotType.e_Widget:
                return new _Widget2.default(annot, pdfPage);
            case AnnotType.e_Popup:
                return new _Popup2.default(annot, pdfPage);
            case AnnotType.e_Redact:
                return new _Redact2.default(annot, pdfPage);
            default:
                return new _Annot2.default(annot, pdfPage);
        }
    };

    return AnnotManager;
}();

exports.default = AnnotManager;

/***/ }),

/***/ "./src/pdf-jr/annot/Caret.js":
/*!***********************************!*\
  !*** ./src/pdf-jr/annot/Caret.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _MarkupAnnot2 = __webpack_require__(/*! ./MarkupAnnot */ "./src/pdf-jr/annot/MarkupAnnot.js");

var _MarkupAnnot3 = _interopRequireDefault(_MarkupAnnot2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var Caret = function (_MarkupAnnot) {
    _inherits(Caret, _MarkupAnnot);

    function Caret(annot, pdfPage) {
        _classCallCheck(this, Caret);

        var _this = _possibleConstructorReturn(this, _MarkupAnnot.call(this, annot, pdfPage));

        _this.annot = new _this.engine.Caret(_this.annot);
        return _this;
    }

    Caret.prototype.moveRectByCharIndex = function moveRectByCharIndex(charIndex) {
        var annot = this.annot;
        var textPage = this.pdfPage.getNormalTextPageSync();
        var textRectCount = textPage.GetTextRectCount(charIndex, 1);
        var textRect = textPage.GetTextRect(0);
        var annotRect = annot.GetRect(),
            newAnnotRect = new this.engine.CFX_FloatRect();
        var annotWidth = annotRect.right - annotRect.left,
            annotHeight = annotRect.top - annotRect.bottom;
        newAnnotRect.left = textRect.right - annotWidth / 2;
        newAnnotRect.right = textRect.right + annotWidth / 2;
        newAnnotRect.top = textRect.bottom + annotHeight / 5;
        newAnnotRect.bottom = textRect.bottom - annotHeight * 4 / 5;
        annot.Move(newAnnotRect);
        annot.ResetAppearanceStream();
    };

    Caret.prototype.toJson = function toJson() {
        var baseJson = _MarkupAnnot.prototype.toJson.call(this);
        var innerRect = this.annot.GetInnerRect();
        baseJson.innerRect = {
            top: innerRect.top,
            right: innerRect.right,
            bottom: innerRect.bottom,
            left: innerRect.left
        };
        if (this.isReplace() && baseJson.intent == '') {
            baseJson.intent = 'Replace';
        }
        return baseJson;
    };

    Caret.prototype.create = function create(json) {
        var result = _MarkupAnnot.prototype.create.call(this, json);
        if (json.subject && json.subject.toLocaleLowerCase() === "replace") {
            this.setBorderColor(json.color || 0x0000ff);
        } else {
            this.setBorderColor(json.color || 0x993399);
        }

        /**
         * @type GSDK.Caret
         */
        // let annot=this.annot;
        // let page = annot.GetPage();
        // annot.GetDict().SetAtInteger(new this.engine.String("Rotate"), 0);
        // annot.ResetAppearanceStream();

        if (json._rotate) {
            /**
             * @type GSDK
             */
            var engine = this.engine;
            var matrix = new engine.Matrix();
            matrix.Rotate(-json._rotate, false);
            /**
            * @type GSDK.Caret
            */
            var annot = this.annot;
            var ap = annot.GetDict().GetElement(new engine.String('AP')).GetDict();
            var n = ap.GetElement(new engine.String('N')).GetDict();
            n.SetAtMatrix(new engine.String('Matrix'), matrix);
        }

        return result;
    };

    Caret.prototype.isReplace = function isReplace() {
        // 判断是否是Replace
        var annot = this.annot;
        var groupElements = void 0;
        var groupElementsCount = void 0;
        if (annot.IsGrouped() && (groupElements = annot.GetGroupElements()) && (groupElementsCount = groupElements.GetSize()) === 2) {
            var replaceTypes = ['AnnotType_e_StrikeOut', 'AnnotType_e_Caret'];
            var isReplace = true;
            for (var i = groupElementsCount; i--;) {
                var markup = groupElements.GetAt(i);
                var indexOf = replaceTypes.indexOf(markup.GetType().constructor.name);
                if (indexOf === -1) {
                    return false;
                } else {}
            }
            return true;
        }
        return false;
    };

    return Caret;
}(_MarkupAnnot3.default);

exports.default = Caret;

/***/ }),

/***/ "./src/pdf-jr/annot/Circle.js":
/*!************************************!*\
  !*** ./src/pdf-jr/annot/Circle.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _MarkupAnnot2 = __webpack_require__(/*! ./MarkupAnnot */ "./src/pdf-jr/annot/MarkupAnnot.js");

var _MarkupAnnot3 = _interopRequireDefault(_MarkupAnnot2);

var _color = __webpack_require__(/*! ../../shared/color */ "./src/shared/color.js");

var _RectOperator = __webpack_require__(/*! ../share/RectOperator */ "./src/pdf-jr/share/RectOperator.js");

var _RectOperator2 = _interopRequireDefault(_RectOperator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

/**
 * @ignore
 * @typedef GSDKCircleAnnot
 * @property {function} GetFillColor
 * @property {function} SetFillColor
 * @property {function} GetInnerRect
 * @property {function} SetInnerRect
 * @property {function} GetPopup
 * @property {function} SetPopup
 * @property {function} GetTitle
 * @property {function} SetTitle
 * @property {function} GetSubject
 * @property {function} SetSubject
 * @property {function} GetOpacity
 * @property {function} SetOpacity
 * @property {function} GetIntent
 * @property {function} SetIntent
 * @property {function} GetCreationDateTime
 * @property {function} SetCreationDateTime
 * @property {function} GetReplyCount
 * @property {function} GetReply
 * @property {function} AddReply
 * @property {function} RemoveReply
 * @property {function} RemoveAllReplies
 * @property {function} IsGrouped
 * @property {function} GetGroupHeader
 * @property {function} GetGroupElements
 * @property {function} Ungroup
 * @property {function} GetStateAnnotCount
 * @property {function} GetStateAnnot
 * @property {function} AddStateAnnot
 * @property {function} RemoveAllStateAnnots
 * @property {function} IsEmpty
 * @property {function} GetPage
 * @property {function} IsMarkup
 * @property {function} GetType
 * @property {function} GetIndex
 * @property {function} GetContent
 * @property {function} SetContent
 * @property {function} GetModifiedDateTime
 * @property {function} SetModifiedDateTime
 * @property {function} GetFlags
 * @property {function} SetFlags
 * @property {function} GetUniqueID
 * @property {function} SetUniqueID
 * @property {function} GetRect
 * @property {function} Move
 * @property {function} GetBorderInfo
 * @property {function} SetBorderInfo
 * @property {function} GetBorderColor
 * @property {function} SetBorderColor
 * @property {function} ResetAppearanceStream
 * @property {function} GetDeviceRect
 * @property {function} GetDict
 * @property {function} RemoveProperty
 * @property {function} GetOptionalContent
 * @property {function} GetAppearanceStream
 * @property {function} isAliasOf
 * @property {function} clone
 * @property {function} delete
 * @property {function} isDeleted
 * @property {function} deleteLater
 */

var Circle = function (_MarkupAnnot) {
    _inherits(Circle, _MarkupAnnot);

    /**
     * Creates an instance of Circle.
     * @param {GSDKCircleAnnot} annot
     * @param {object} pdfPage
     * @memberof Circle
     */
    function Circle(annot, pdfPage) {
        _classCallCheck(this, Circle);

        var _this = _possibleConstructorReturn(this, _MarkupAnnot.call(this, annot, pdfPage));

        _this.annot = new _this.engine.Circle(annot);
        return _this;
    }

    Circle.prototype._calculateRectDiffer = function _calculateRectDiffer() {
        var rect = this.annot.GetRect();
        var innerRect = this.annot.GetInnerRect();
        return _RectOperator2.default.subtract(rect, innerRect);
    };

    Circle.prototype.move = function move(offsetLeft, offsetTop) {
        /**
         * @type {GSDKCircleAnnot}
         */
        var annot = this.annot;

        var destination = _RectOperator2.default.on(annot.GetRect()) //
        .move(offsetLeft, offsetTop) //
        .extract();
        return this.annot.Move(destination);
    };

    Circle.prototype.setRect = function setRect(rect) {
        var destination = new this.engine.CFX_FloatRect(rect.left, rect.bottom, rect.right, rect.top);
        return this.annot.Move(destination);
    };

    Circle.prototype.setInnerRect = function setInnerRect(rect) {
        var destination = new this.engine.CFX_FloatRect(rect.left, rect.bottom, rect.right, rect.top);
        this.annot.SetInnerRect(destination);
        this.annot.ResetAppearanceStream();
        return true;
    };

    Circle.prototype.getInnerRect = function getInnerRect() {
        return _RectOperator2.default.on(this.annot.GetInnerRect()).toPlainObject();
    };

    Circle.prototype.toJson = function toJson() {
        var json = _MarkupAnnot.prototype.toJson.call(this);
        /**
         * @type {GSDKCircleAnnot}
         */
        var annot = this.annot;

        var fillColor = annot.GetFillColor();

        json.fillColor = fillColor;

        json.innerRect = _RectOperator2.default.on(annot.GetInnerRect()).toPlainObject();
        return json;
    };

    Circle.prototype.setFillColor = function setFillColor(color) {
        return _MarkupAnnot.prototype._setFillColor.call(this, color);
    };

    return Circle;
}(_MarkupAnnot3.default);

exports.default = Circle;

/***/ }),

/***/ "./src/pdf-jr/annot/FileAttachment.js":
/*!********************************************!*\
  !*** ./src/pdf-jr/annot/FileAttachment.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _MarkupAnnot2 = __webpack_require__(/*! ./MarkupAnnot */ "./src/pdf-jr/annot/MarkupAnnot.js");

var _MarkupAnnot3 = _interopRequireDefault(_MarkupAnnot2);

var _FileSpec = __webpack_require__(/*! ../base/FileSpec */ "./src/pdf-jr/base/FileSpec.js");

var _FileSpec2 = _interopRequireDefault(_FileSpec);

var _LoggerFactory = __webpack_require__(/*! ../../shared/logger/LoggerFactory */ "./src/shared/logger/LoggerFactory.js");

var _LoggerFactory2 = _interopRequireDefault(_LoggerFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var logger = _LoggerFactory2.default.getLogger('pdf-jr.FileAttrchment');

var FileAttachment = function (_MarkupAnnot) {
    _inherits(FileAttachment, _MarkupAnnot);

    function FileAttachment(annot, pdfPage) {
        _classCallCheck(this, FileAttachment);

        var _this = _possibleConstructorReturn(this, _MarkupAnnot.call(this, annot, pdfPage));

        _this.annot = new _this.engine.FileAttachment(_this.annot);
        return _this;
    }

    FileAttachment.prototype.toJson = function toJson() {
        var json = _MarkupAnnot.prototype.toJson.call(this);
        var fileSpec = new _FileSpec2.default(this.getFileSpec(), this);
        json.fileSpec = fileSpec.toJson();
        return json;
    };

    FileAttachment.prototype.setIconName = function setIconName(iconName) {
        var annot = this.annot;
        annot.SetIconName(new this.engine.String(iconName));
        annot.ResetAppearanceStream();
        return true;
    };

    FileAttachment.prototype.getFileSpec = function getFileSpec() {
        return this.annot.GetFileSpec();
    };

    FileAttachment.prototype.create = function create(json) {
        this.setFlags(20);
        var result = _MarkupAnnot.prototype.create.call(this, json);
        this.setFile(json);
        return result;
    };

    FileAttachment.prototype.setFile = function setFile(data) {
        try {
            var file = _FileSpec2.default.createFile(this.engine, this.annot.GetPage().GetDocument(), data.buffer);
            var fileSpec = new _FileSpec2.default(file, this);
            fileSpec.setFileName(data.fileName);
            this.annot.SetFileSpec(file);
        } catch (e) {
            var engine = this.engine;
            var errorCode = e instanceof engine.ErrorCode ? e : engine.getErrorCode(e);
            logger.warn(errorCode);
        }
        return true;
    };

    FileAttachment.prototype.getStream = function getStream(_ref) {
        var writeStream = _ref.writeStream;

        var fileSpec = new _FileSpec2.default(this.getFileSpec(), this);
        return fileSpec.getStream(writeStream);
    };

    return FileAttachment;
}(_MarkupAnnot3.default);

exports.default = FileAttachment;

/***/ }),

/***/ "./src/pdf-jr/annot/FreeText.js":
/*!**************************************!*\
  !*** ./src/pdf-jr/annot/FreeText.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _MarkupAnnot2 = __webpack_require__(/*! ./MarkupAnnot */ "./src/pdf-jr/annot/MarkupAnnot.js");

var _MarkupAnnot3 = _interopRequireDefault(_MarkupAnnot2);

var _consts = __webpack_require__(/*! ../../shared/consts */ "./src/shared/consts.js");

var _PDFFontMgr = __webpack_require__(/*! ../PDFFontMgr */ "./src/pdf-jr/PDFFontMgr.js");

var _PDFFontMgr2 = _interopRequireDefault(_PDFFontMgr);

var _getThirdPartyFontBuffer = __webpack_require__(/*! ../getThirdPartyFontBuffer */ "./src/pdf-jr/getThirdPartyFontBuffer.js");

var _getThirdPartyFontBuffer2 = _interopRequireDefault(_getThirdPartyFontBuffer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by linc on 2018/12/12.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var FreeText = function (_MarkupAnnot) {
    _inherits(FreeText, _MarkupAnnot);

    function FreeText(annot, pdfPage) {
        _classCallCheck(this, FreeText);

        /**
         * @type GSDK.FreeText
         */
        var _this = _possibleConstructorReturn(this, _MarkupAnnot.call(this, annot, pdfPage));

        _this.annot = new _this.engine.FreeText(_this.annot);
        return _this;
    }

    FreeText.prototype.toJson = function toJson() {
        var json = _MarkupAnnot.prototype.toJson.call(this);
        var annot = this.annot;
        if (json.intent === _consts.Intents.FREETEXT_CALLOUT) {
            var calloutLineEndingStyle = annot.GetCalloutLineEndingStyle().value;
            var calloutLinePoints = annot.GetCalloutLinePoints();
            var points = [];
            for (var i = calloutLinePoints.GetSize(); i--;) {
                var point = calloutLinePoints.GetAt(i);
                points[i] = {
                    x: point.x,
                    y: point.y
                };
            }
            json.calloutLineEndingStyle = calloutLineEndingStyle;
            json.calloutLinePoints = points;
        }
        var justification = annot.GetAlignment().value;
        json.justification = justification;

        /**
         * @type GSDK.DefaultAppearance
         */
        var defaultAppearance = annot.GetDefaultAppearance();

        json.defaultAppearance = {
            flags: defaultAppearance.flags,
            textColor: defaultAppearance.text_color,
            textSize: defaultAppearance.text_size
        };

        //if(!defaultAppearance.font.IsEmpty()){
        //    /**
        //     * @type GSDK.FreeText
        //     */
        //    //let annot = this.annot;
        //    //let String = this.engine.String;
        //    //
        //    let da = annot.GetDict().GetElement(new this.engine.String('DA')).GetString().toString()+' ';
        //    //
        //    let name='';
        //    //let url='';
        //    let match = da.match(/\/([^\s]*) /);
        //    if(match&&match.length>1){
        //        name = match[1].replace(/#20/g," ");
        //        //let buffer = this.JR.getFontBuffer(name.toString(),524322);
        //        //if(buffer){
        //        //    let blob = new Blob([buffer],{type:"application/woff"});
        //        //    url=URL.createObjectURL(blob);
        //        //}
        //    }
        //
        //    let font = defaultAppearance.font;
        //
        //    json.defaultAppearance.font={
        //        //url,
        //        fontName:name,
        //        isItalic:font.IsItalic(),
        //        isBlod:font.IsBold(),
        //        descent:font.GetDescent(),
        //        ascent:font.GetAscent()
        //    }
        //}

        var fontJson = {};
        var engine = this.engine;
        var c_doc = this.pdfPage.doc;
        var font = defaultAppearance.font;
        if (!font.IsEmpty()) {
            fontJson.name = font.GetName().toString();
            var familyName = font.GetFamilyName().toString();
            fontJson.familyName = familyName;
            var baseName = fontJson.baseName = font.GetBaseFontName(c_doc).toString();
            //console.log('familyName', familyName)
            fontJson.ascent = font.GetAscent();
            fontJson.descent = font.GetDescent();
            fontJson.isItalic = font.IsItalic();
            var isBold = fontJson.isBold = font.IsBold();
            var weight = isBold ? 700 : 400;
            var nameKey = void 0;

            var styles = fontJson.styles = font.GetStyles(c_doc);
            var charset = engine.Charset.e_CharsetDefault.value;
            if (font.GetFontType(c_doc) == engine.FontTypes.e_FontTypeCIDFont) {
                charset = font.GetFontType(c_doc).value;
            }
            fontJson.charset = charset;
            if (font.IsEmbedded(c_doc)) {
                fontJson.isEmbedded = true;
                fontJson.nameKey = 'fv_' + this.id;
            } else if (font.IsStandardFont(c_doc)) {
                fontJson.isStandard = true;
                fontJson.standardId = font.GetStandard14Font(c_doc).value;
                if (nameKey = _getThirdPartyFontBuffer2.default.getFontMatch(baseName, charset, 0, weight, styles)) {
                    nameKey = 'fv_' + nameKey.replace(/\./g, '_');
                    fontJson.nameKey = nameKey;
                }
            } else if (nameKey = _getThirdPartyFontBuffer2.default.getFontMatch(baseName, charset, 0, weight, styles)) {
                nameKey = 'fv_' + nameKey.replace(/\./g, '_');
                fontJson.nameKey = nameKey;
            }
        }

        var fillColor = annot.GetFillColor();

        json.styleFillColor = fillColor;

        var innerRect = annot.GetInnerRect();
        json.innerRect = {
            top: innerRect.top,
            right: innerRect.right,
            bottom: innerRect.bottom,
            left: innerRect.left
        };
        return json;
    };

    FreeText.prototype.setCalloutLineEndingStyle = function setCalloutLineEndingStyle(endingStyle) {
        this.annot.SetCalloutLineEndingStyle({ "value": endingStyle });
        this.annot.ResetAppearanceStream();
    };

    FreeText.prototype.setInnerRect = function setInnerRect(rect) {
        var destination = new this.engine.CFX_FloatRect(rect.left, rect.bottom, rect.right, rect.top);
        this.annot.SetInnerRect(destination);
        this.annot.ResetAppearanceStream();
        return true;
    };

    FreeText.prototype.setCalloutLinePoints = function setCalloutLinePoints(calloutLinePoints) {
        var pointFArray = new this.engine.PointFArray();
        var PointF = this.engine.PointF;
        var length = calloutLinePoints.length;
        for (var i = 0; i < length; i++) {
            var point = new PointF(calloutLinePoints[i].x, calloutLinePoints[i].y);
            pointFArray.Add(point);
        }
        this.annot.SetCalloutLinePoints(pointFArray);
        this.annot.ResetAppearanceStream();
        return true;
    };

    FreeText.prototype.setDefaultAp = function setDefaultAp(defaultAppearance) {
        var flags = defaultAppearance.flags,
            textColor = defaultAppearance.textColor,
            textSize = defaultAppearance.textSize;

        var defaultFont = new this.engine.Font(1);
        var newDefaultAp = new this.engine.DefaultAppearance(flags, defaultFont, textColor, textSize);
        this.annot.SetDefaultAppearance(newDefaultAp);
        this.annot.ResetAppearanceStream();
        return true;
    };

    FreeText.prototype.setFillColor = function setFillColor(color) {
        return _MarkupAnnot.prototype._setFillColor.call(this, color);
    };

    FreeText.prototype.create = function create(json) {
        _MarkupAnnot.prototype.create.call(this, json);
        if (json.rotate) {
            this.annot.SetRotation(this.engine.Rotation.values[(4 - json.rotate) % 4]);
        }

        var fillColor = void 0;
        if (fillColor = json['interior-color']) {
            this.setFillColor(fillColor);
        }
        this.setRect(json.rect);
        var calloutLinePoints = void 0;
        if (calloutLinePoints = json.calloutLinePoints) {
            this.setCalloutLinePoints(calloutLinePoints);
        }

        var innerRect = void 0;
        if (innerRect = json.innerRect) {
            this.setInnerRect(innerRect);
        }
        this.setRect(json.rect);
        if (calloutLinePoints = json.calloutLinePoints) {
            this.setCalloutLinePoints(calloutLinePoints);
        }

        if (innerRect = json.innerRect) {
            this.setInnerRect(innerRect);
        }
        if (json.intent == "FreeTextCallout") {
            this.setCalloutLineEndingStyle(4);
        }

        return [this];
    };

    FreeText.prototype.setContent = function setContent(content) {
        var annot = this.annot;
        annot.SetContent(new this.engine.WString(content));
        annot.ResetAppearanceStream();
        return annot.GetUniqueID().toString();
    };

    FreeText.prototype.getWoffBlob = function getWoffBlob() {
        var annot = this.annot;
        var defaultAppearance = annot.GetDefaultAppearance();

        if (!defaultAppearance.font.IsEmpty()) {

            var da = annot.GetDict().GetElement(new this.engine.String('DA')).GetString().toString() + ' ';

            var name = '';
            var match = da.match(/\/([^\s]*) /);
            if (match && match.length > 1) {
                name = match[1].replace(/#20/g, " ");
                var buffer = this.JR.getFontBuffer(name.toString(), 524322);
                if (buffer) {
                    return new Blob([buffer], { type: "application/woff" });
                }
            }

            return null;
        }
    };

    FreeText.prototype.getWoff = function getWoff() {
        var engine = this.engine;
        var annot = this.annot;
        var defaultAppearance = annot.GetDefaultAppearance();
        var c_doc = this.pdfPage.doc;
        var font = defaultAppearance.font;
        if (font.IsEmpty()) {
            return null;
        } else if (font.IsEmbedded(c_doc)) {
            return _PDFFontMgr2.default.getWoffDataBuffer(font.GetWoffData(c_doc), this.engine);
        } else {
            var charset = engine.Charset.e_CharsetDefault.value;
            if (font.GetFontType(c_doc) == engine.FontTypes.e_FontTypeCIDFont) {
                charset = font.GetFontType(c_doc).value;
            }
            var buffer = this.jr.getFontBuffer(font.GetBaseFontName(c_doc).toString(), font.GetStyles(c_doc), 0, charset, font.IsBold() ? 700 : 400, true);
            if (buffer) {
                return { buffer: buffer };
            }
            return null;
        }
    };

    return FreeText;
}(_MarkupAnnot3.default);

exports.default = FreeText;

/***/ }),

/***/ "./src/pdf-jr/annot/Highlight.js":
/*!***************************************!*\
  !*** ./src/pdf-jr/annot/Highlight.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _TextMarkupAnnot2 = __webpack_require__(/*! ./TextMarkupAnnot */ "./src/pdf-jr/annot/TextMarkupAnnot.js");

var _TextMarkupAnnot3 = _interopRequireDefault(_TextMarkupAnnot2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by linc on 2018/11/7.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var Highlight = function (_TextMarkupAnnot) {
    _inherits(Highlight, _TextMarkupAnnot);

    function Highlight(annot, pdfPage) {
        _classCallCheck(this, Highlight);

        var _this = _possibleConstructorReturn(this, _TextMarkupAnnot.call(this, annot, pdfPage));

        _this.annot = new _this.engine.Highlight(_this.annot);
        return _this;
    }

    Highlight.prototype.toJson = function toJson() {
        var json = _TextMarkupAnnot.prototype.toJson.call(this);
        var annot = this.annot;
        var engine = this.engine;
        if (annot.GetDict().HasKey(new engine.String('AreaHi'))) {
            json.isArea = true;
        }
        return json;
    };

    Highlight.prototype.setRect = function setRect(rect) {
        var engine = this.engine;
        var quadPointsArray = new engine.QuadPointsArray();
        var QuadPoints = engine.QuadPoints;
        var PointF = engine.PointF;
        quadPointsArray.Add(new QuadPoints(new PointF(rect.left, rect.top), new PointF(rect.right, rect.top), new PointF(rect.left, rect.bottom), new PointF(rect.right, rect.bottom)));
        this.annot.SetQuadPoints(quadPointsArray);
        this.annot.ResetAppearanceStream();
        return _TextMarkupAnnot.prototype.setRect.call(this, rect);
    };

    Highlight.prototype.move = function move(offsetLeft, offsetTop) {
        var rect = this.annot.GetRect();
        var left = rect.left + offsetLeft;
        var right = rect.right + offsetLeft;
        var top = rect.top + offsetTop;
        var bottom = rect.bottom + offsetTop;
        var engine = this.engine;
        var quadPointsArray = new engine.QuadPointsArray();
        var QuadPoints = engine.QuadPoints;
        var PointF = engine.PointF;
        quadPointsArray.Add(new QuadPoints(new PointF(left, top), new PointF(right, top), new PointF(left, bottom), new PointF(right, bottom)));
        this.annot.SetQuadPoints(quadPointsArray);
        this.annot.ResetAppearanceStream();
        var destination = new this.engine.CFX_FloatRect(left, bottom, right, top);
        return this.annot.Move(destination);
    };

    Highlight.prototype.create = function create(json) {
        var result = _TextMarkupAnnot.prototype.create.call(this, json);
        this.setBorderColor(+json.color || 0xffff00);
        return result;
    };

    return Highlight;
}(_TextMarkupAnnot3.default);

exports.default = Highlight;

/***/ }),

/***/ "./src/pdf-jr/annot/Ink.js":
/*!*********************************!*\
  !*** ./src/pdf-jr/annot/Ink.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _MarkupAnnot2 = __webpack_require__(/*! ./MarkupAnnot */ "./src/pdf-jr/annot/MarkupAnnot.js");

var _MarkupAnnot3 = _interopRequireDefault(_MarkupAnnot2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var Ink = function (_MarkupAnnot) {
    _inherits(Ink, _MarkupAnnot);

    function Ink(annot, pdfPage) {
        _classCallCheck(this, Ink);

        var _this = _possibleConstructorReturn(this, _MarkupAnnot.call(this, annot, pdfPage));

        _this.annot = new _this.engine.Ink(_this.annot);
        return _this;
    }

    Ink.prototype.toJson = function toJson() {
        var json = _MarkupAnnot.prototype.toJson.call(this);
        var inkListPath = this.annot.GetInkList();
        var inkList = [];
        if (!inkListPath.IsEmpty()) {
            var count = inkListPath.GetPointCount();
            for (var i = 0; i < count; i++) {
                var point = inkListPath.GetPoint(i);
                var type = inkListPath.GetPointType(i);
                inkList.push({ x: point.x, y: point.y, type: type.value });
            }
        }
        json.inkList = inkList;
        return json;
    };

    Ink.prototype.setInkList = function setInkList(inkList) {
        var _this2 = this;

        var path = new this.engine.Path();
        inkList.forEach(function (inkPoint) {
            var point = new _this2.engine.PointF(inkPoint.x, inkPoint.y);
            if (inkPoint.type === 1) {
                path.MoveTo(point);
            } else {
                path.LineTo(point);
            }
            point.delete();
        });
        this.annot.SetInkList(path);
        path.delete();
        this.annot.ResetAppearanceStream();
        return true;
    };

    Ink.prototype.create = function create(json) {
        var result = _MarkupAnnot.prototype.create.call(this, json);
        var inkList = json.inkList;
        this.setInkList(inkList);
        return result;
    };

    return Ink;
}(_MarkupAnnot3.default);

exports.default = Ink;

/***/ }),

/***/ "./src/pdf-jr/annot/Line.js":
/*!**********************************!*\
  !*** ./src/pdf-jr/annot/Line.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _MarkupAnnot2 = __webpack_require__(/*! ./MarkupAnnot */ "./src/pdf-jr/annot/MarkupAnnot.js");

var _MarkupAnnot3 = _interopRequireDefault(_MarkupAnnot2);

var _consts = __webpack_require__(/*! ../../shared/consts */ "./src/shared/consts.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var Line = function (_MarkupAnnot) {
    _inherits(Line, _MarkupAnnot);

    function Line(annot, pdfPage) {
        _classCallCheck(this, Line);

        /**
         * @type GSDK.Line
         */
        var _this = _possibleConstructorReturn(this, _MarkupAnnot.call(this, annot, pdfPage));

        _this.annot = new _this.engine.Line(_this.annot);
        return _this;
    }

    Line.prototype.calculateLenth = function calculateLenth() {
        var measureRatio = this.annot.GetMeasureRatio().toString();
        var measureUnit = this.annot.GetMeasureUnit(0).toString();
        if (measureRatio.length == 0) {
            return;
        }

        var endPoint = this.annot.GetEndPoint(); //pointf
        var startPoint = this.annot.GetStartPoint(); //pointf

        var deltaX = endPoint.x - startPoint.x;
        var deltaY = endPoint.y - startPoint.y;
        var length = Math.sqrt(deltaX * deltaX + deltaY * deltaY);

        var transUnit = measureRatio.match(/(\d+) (\w+) = (\d+) (\w+)/);
        transUnit[1] = parseInt(transUnit[1]);
        transUnit[3] = parseInt(transUnit[3]);

        var leftLengthInPt = void 0;
        switch (transUnit[2]) {
            case 'pt':
                leftLengthInPt = transUnit[1];
                break;
            case 'inch':
                leftLengthInPt = transUnit[1] * 72;
                break;
            case 'cm':
                leftLengthInPt = transUnit[1] * 72 / 2.54;
                break;
            case 'p':
                leftLengthInPt = transUnit[1] * 12;
                break;
            case 'mm':
                leftLengthInPt = transUnit[1] * 72 / 25.4;
                break;
        }

        switch (transUnit[4]) {
            case 'inch':
                length = length * transUnit[3] / leftLengthInPt;
                break;
            case 'pt':
                length = length * transUnit[3] / leftLengthInPt;
                break;
            case 'cm':
                length = length * transUnit[3] / leftLengthInPt;
                break;
            case 'p':
                length = length * transUnit[3] / leftLengthInPt;
                break;
            case 'mm':
                length = length * transUnit[3] / leftLengthInPt;
                break;
            case 'ft':
                length = length * transUnit[3] / leftLengthInPt;
                break;
            case 'yd':
                length = length * transUnit[3] / leftLengthInPt;
                break;
            case 'm':
                length = length * transUnit[3] / leftLengthInPt;
                break;
        }

        this.annot.SetContent(new this.engine.WString(length.toFixed(2) + ' ' + measureUnit));
    };

    Line.prototype.enableCaption = function enableCaption(enable) {
        this.annot.EnableCaption(enable);
        this.annot.ResetAppearanceStream();
        return true;
    };

    Line.prototype.setFillColor = function setFillColor(color) {
        if (typeof color !== 'number') {
            throw new Error('Incorrect color value: ' + color);
        }
        if (color === 0) {
            this.annot.RemoveProperty({ value: 3 });
            this.annot.ResetAppearanceStream();
        } else {
            this.annot.SetStyleFillColor(color);
            this.annot.ResetAppearanceStream();
        }
        return [this];
    };

    Line.prototype.setCaptionOffset = function setCaptionOffset(x, y) {};

    Line.prototype.setCaptionPositionType = function setCaptionPositionType(cap_position) {};

    Line.prototype.setEndPoint = function setEndPoint(x, y) {
        var point = new this.engine.PointF(x, y);
        this.annot.SetEndPoint(point);
        this.calculateLenth();
        this.annot.ResetAppearanceStream();
    };

    Line.prototype.setLeaderLineExtensionLength = function setLeaderLineExtensionLength(extension_length) {};

    Line.prototype.setLeaderLineLength = function setLeaderLineLength(length) {
        this.annot.SetLeaderLineLength(length);
        this.annot.ResetAppearanceStream();
    };

    Line.prototype.setLeaderLineOffset = function setLeaderLineOffset(offset) {};

    Line.prototype.setLineEndStyle = function setLineEndStyle(ending_style) {
        var enumType = this.engine.EndingStyle.values[ending_style];
        this.annot.SetLineEndStyle(enumType);
        this.annot.ResetAppearanceStream();
    };

    Line.prototype.setLineStartStyle = function setLineStartStyle(ending_style) {
        var enumType = this.engine.EndingStyle.values[ending_style];
        this.annot.SetLineStartStyle(enumType);
        this.annot.ResetAppearanceStream();
    };

    Line.prototype.setMeasureConversionFactor = function setMeasureConversionFactor(measure_type, factor) {};

    Line.prototype.setMeasureRatio = function setMeasureRatio(ratio) {};

    Line.prototype.setMeasureUnit = function setMeasureUnit(measure_type, unit) {};

    Line.prototype.setStartPoint = function setStartPoint(x, y) {
        var point = new this.engine.PointF(x, y);
        this.annot.SetStartPoint(point);
        this.calculateLenth();
        this.annot.ResetAppearanceStream();
    };

    Line.prototype.create = function create(json) {
        var startStyle = json.startStyle,
            endStyle = json.endStyle,
            rect = json.rect,
            enableCaption = json.enableCaption;

        if (_consts.LineEndingName[startStyle] !== undefined) {
            this.setLineStartStyle(startStyle);
        }
        if (_consts.LineEndingName[endStyle]) {
            this.setLineEndStyle(endStyle);
        }
        if (typeof enableCaption === 'boolean') {
            this.annot.EnableCaption(enableCaption);
        }

        this.setStartPoint(rect.left, rect.bottom);
        this.setEndPoint(rect.right, rect.top);

        if (json.measure) {
            this.annot.SetMeasureConversionFactor(0, 1);
            this.annot.SetMeasureUnit(0, new this.engine.String(json.measure.unit));
            this.annot.SetMeasureRatio(new this.engine.String(json.measure.ratio));
        }
        this.calculateLenth();
        return _MarkupAnnot.prototype.create.call(this, json);
    };

    Line.prototype.toJson = function toJson() {

        var markupAnnotJson = _MarkupAnnot.prototype.toJson.call(this);

        if (markupAnnotJson.borderInfo.width == 0) {
            markupAnnotJson.borderInfo.width = 1;
            var borderInfo = this.annot.GetBorderInfo();
            borderInfo.width = 1;
            this.annot.SetBorderInfo(borderInfo);
        }

        var offset = this.annot.GetCaptionOffset();
        var capPos = this.annot.GetCaptionPositionType(); //enum

        var endPoint = this.annot.GetEndPoint(); //pointf
        var leaderLineExtensionLength = this.annot.GetLeaderLineExtensionLength(); //float
        var leaderLineLength = this.annot.GetLeaderLineLength(); //float
        var leaderLineOffset = this.annot.GetLeaderLineOffset(); //float
        var endingStyle = this.annot.GetLineEndStyle(); //enum
        var startStyle = this.annot.GetLineStartStyle(); //enum
        var measureConversionFactor = this.annot.GetMeasureConversionFactor(0); //float
        var measureRatio = void 0;
        var measureUnit = void 0;

        try {
            measureRatio = this.annot.GetMeasureRatio().toString(); //string
            measureUnit = this.annot.GetMeasureUnit(0).toString(); //string
        } catch (err) {
            measureRatio = this.JR.getHexString(this.annot.GetMeasureRatio());
            measureUnit = this.JR.getHexString(this.annot.GetMeasureUnit(0));
        }
        var startPoint = this.annot.GetStartPoint(); //pointf
        var styleFillColor = this.annot.GetStyleFillColor(); //enum
        var hasCaption = this.annot.HasCaption();

        var lineJson = {
            captionOffset: {
                x: offset.x,
                y: offset.y
            },
            capPos: capPos,
            endPoint: {
                x: endPoint.x,
                y: endPoint.y
            },
            leaderLineExtensionLength: leaderLineExtensionLength,
            leaderLineLength: leaderLineLength,
            leaderLineOffset: leaderLineOffset,
            endingStyle: endingStyle.value,
            startStyle: startStyle.value,
            measureConversionFactor: measureConversionFactor,
            measureRatio: measureRatio,
            measureUnit: measureUnit,
            startPoint: {
                x: startPoint.x,
                y: startPoint.y
            },
            styleFillColor: styleFillColor,
            hasCaption: hasCaption
        };
        return Object.assign(lineJson, markupAnnotJson);
    };

    return Line;
}(_MarkupAnnot3.default);

exports.default = Line;

/***/ }),

/***/ "./src/pdf-jr/annot/Link.js":
/*!**********************************!*\
  !*** ./src/pdf-jr/annot/Link.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Annot2 = __webpack_require__(/*! ./Annot */ "./src/pdf-jr/annot/Annot.js");

var _Annot3 = _interopRequireDefault(_Annot2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var Link = function (_Annot) {
    _inherits(Link, _Annot);

    function Link(annot, pdfPage) {
        _classCallCheck(this, Link);

        var _this = _possibleConstructorReturn(this, _Annot.call(this, annot, pdfPage));

        _this.annot = new _this.engine.Link(_this.annot);
        var action = _this.annot.GetAction();
        if (!action.IsEmpty()) {
            _this.action = _this.JR.actionManager.get(action, _this.doc, _this.JR);
        }
        var str = new _this.engine.String('AP');
        var ap = _this.annot.GetDict().GetElement(str);
        str.delete();

        str = new _this.engine.String('N');
        if (!ap || !ap.GetDict().HasKey(str)) _this.annot.ResetAppearanceStream();
        str.delete();
        return _this;
    }

    Link.prototype.toJson = function toJson() {
        var json = _Annot.prototype.toJson.call(this);
        var highlightingMode = this.annot.GetHighlightingMode() || { value: 0 };
        json.highlightingMode = highlightingMode.value;
        json.action = this.action && this.action.toJson();
        return json;
    };

    Link.prototype.setHighlightingMode = function setHighlightingMode(highlightingMode) {
        var HighlightingMode = this.engine.HighlightingMode;
        var modeArr = [HighlightingMode.e_HighlightingNone, HighlightingMode.e_HighlightingInvert, HighlightingMode.e_HighlightingOutline, HighlightingMode.e_HighlightingPush, HighlightingMode.e_HighlightingToggle];
        this.annot.SetHighlightingMode(modeArr[highlightingMode]);
        this.annot.ResetAppearanceStream();
        return [this.getId()];
    };

    Link.prototype.setAction = function setAction(type) {
        var pdfDoc = this.annot.GetPage().GetDocument();
        var action = this.JR.actionManager.create(pdfDoc, type);
        this.annot.SetAction(action);
        return this.JR.actionManager.get(this.annot.GetAction(), this.doc, this.JR);
    };

    Link.prototype.create = function create(json) {
        var result = _Annot.prototype.create.call(this, json);
        this.annot.ResetAppearanceStream();
        return result;
    };

    Link.prototype.setBorderStyle = function setBorderStyle(style, styleParam) {
        _Annot.prototype.setBorderStyle.call(this, style, styleParam);
        return [this.getId()];
    };

    return Link;
}(_Annot3.default);

exports.default = Link;

/***/ }),

/***/ "./src/pdf-jr/annot/MarkupAnnot.js":
/*!*****************************************!*\
  !*** ./src/pdf-jr/annot/MarkupAnnot.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Annot2 = __webpack_require__(/*! ./Annot */ "./src/pdf-jr/annot/Annot.js");

var _Annot3 = _interopRequireDefault(_Annot2);

var _RectOperator = __webpack_require__(/*! ../share/RectOperator */ "./src/pdf-jr/share/RectOperator.js");

var _RectOperator2 = _interopRequireDefault(_RectOperator);

var _guid = __webpack_require__(/*! ../../shared/guid */ "./src/shared/guid.js");

var _guid2 = _interopRequireDefault(_guid);

var _consts = __webpack_require__(/*! ../../shared/consts */ "./src/shared/consts.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var MarkupAnnot = function (_Annot) {
    _inherits(MarkupAnnot, _Annot);

    function MarkupAnnot(annot, pdfPage) {
        _classCallCheck(this, MarkupAnnot);

        /**
         * @type GSDK.Markup
         */
        var _this = _possibleConstructorReturn(this, _Annot.call(this, annot, pdfPage));

        _this.annot = new _this.engine.Markup(_this.annot);
        return _this;
    }

    MarkupAnnot.prototype.toJson = function toJson() {
        var json = _Annot.prototype.toJson.call(this);
        var annot = this.annot;
        var engine = this.engine;
        var getSummary = this.getSummary.bind(this);

        var intent = annot.GetIntent().toString();

        var popupSummary = void 0;
        var popup = annot.GetPopup();
        if (!popup.IsEmpty()) {
            popupSummary = getSummary(popup, true);
        }

        var groupElementsSummary = [];
        var groupHeaderSummary = void 0;
        var isGrouped = annot.IsGrouped();
        var isGroupHeader = false;
        var groupElements = annot.GetGroupElements();
        if (isGrouped && groupElements.GetSize() > 0) {
            for (var i = groupElements.GetSize(); i--;) {
                var markup = groupElements.GetAt(i);
                groupElementsSummary[i] = getSummary(markup);
            }

            var groupHeader = annot.GetGroupHeader();
            groupHeaderSummary = getSummary(groupHeader);
            isGroupHeader = groupHeaderSummary.id === json.id;
        }

        var repliesSummary = [];
        var replyCount = annot.GetReplyCount();
        for (var _i = replyCount; _i--;) {
            var replyNote = annot.GetReply(_i);
            var summary = getSummary(replyNote);
            summary.content = replyNote.GetContent();
            repliesSummary[_i] = summary;
        }

        var markedStatesSummary = [];
        var reviewStatesSummary = [];
        var StateModel = engine.StateModel;
        var e_StateModelMarked = StateModel.e_StateModelMarked;
        var e_StateModelReview = StateModel.e_StateModelReview;
        var markedStateCount = annot.GetStateAnnotCount(e_StateModelMarked);
        for (var _i2 = markedStateCount; _i2--;) {
            var markedStateNote = annot.GetStateAnnot(e_StateModelMarked, _i2);
            markedStatesSummary[_i2] = getSummary(markedStateNote);
        }
        var reviewStateCount = annot.GetStateAnnotCount(e_StateModelReview);
        for (var _i3 = reviewStateCount; _i3--;) {
            var reviewStateNote = annot.GetStateAnnot(e_StateModelReview, _i3);
            reviewStatesSummary[_i3] = getSummary(reviewStateNote);
        }

        var createDateTime = annot.GetCreationDateTime();
        var creationTimestamp = 0;
        if (createDateTime.IsValid()) {
            createDateTime = createDateTime.ToUTCTime();
            creationTimestamp = Date.UTC(createDateTime.year, createDateTime.month - 1, createDateTime.day, createDateTime.hour, createDateTime.minute, createDateTime.second, createDateTime.milliseconds);
        }

        var dict = annot.GetDict();

        var RTObj = dict.GetElement(new engine.String("RT"));
        var RT = void 0;
        var IRT = void 0;
        if (RTObj) {
            RT = RTObj.GetName().toString();
            if (RTObj.GetName().toString() == "Group") IRT = groupHeaderSummary.id;
        }

        var more = {
            creationTimestamp: creationTimestamp,
            opacity: annot.GetOpacity(),
            subject: annot.GetSubject().toString(),
            title: annot.GetTitle().toString(),
            isGrouped: isGrouped,
            isGroupHeader: isGroupHeader,
            groupElementsSummary: groupElementsSummary,
            groupHeaderSummary: groupHeaderSummary,
            repliesSummary: repliesSummary,
            markedStatesSummary: markedStatesSummary,
            reviewStatesSummary: reviewStatesSummary,
            popupSummary: popupSummary,
            intent: intent,
            RT: RT,
            IRT: IRT
        };
        return Object.assign(json, more);
    };

    MarkupAnnot.prototype.setOpacity = function setOpacity(opacity) {
        var annots = this.getShouldModifyAnnots(this);
        opacity = +opacity;
        for (var i = annots.length; i--;) {
            var annot = annots[i].annot;
            annot.SetOpacity(opacity);
            annot.ResetAppearanceStream();
        }
        return getJrAnnotArrayIds(annots);
    };

    MarkupAnnot.prototype.setSubject = function setSubject(subject) {
        var annots = this.getShouldModifyAnnots(this);
        subject = new this.engine.WString(subject);
        for (var i = annots.length; i--;) {
            var annot = annots[i].annot;
            annot.SetSubject(subject);
        }
        return getJrAnnotArrayIds(annots);
    };

    MarkupAnnot.prototype.setTitle = function setTitle(title) {
        var annots = this.getShouldModifyAnnots(this);
        title = new this.engine.WString(title);
        for (var i = annots.length; i--;) {
            var annot = annots[i].annot;
            annot.SetTitle(title);
        }
        return getJrAnnotArrayIds(annots);
    };

    MarkupAnnot.prototype.setCreateDateTime = function setCreateDateTime(date) {
        var annots = this.getShouldModifyAnnots(this);
        var dateTime = this.ToDateTime(date);
        for (var i = annots.length; i--;) {
            annots[i].annot.SetCreationDateTime(dateTime);
        }
        return getJrAnnotArrayIds(annots);
    };

    MarkupAnnot.prototype.addReply = function addReply(content) {
        var annot = this.annot;
        if (annot.IsGrouped()) {
            annot = annot.GetGroupHeader();
        }
        var replyAnnot = annot.AddReply();
        replyAnnot.SetUniqueID(new this.engine.WString((0, _guid2.default)()));
        replyAnnot.SetContent(new this.engine.WString(content));
        var now = this.ToDateTime(new Date());
        replyAnnot.SetCreationDateTime(now);
        replyAnnot.SetModifiedDateTime(now);
        var currentUserName = this.JR.getUserName() || 'Guest';
        replyAnnot.SetTitle(new this.engine.WString(currentUserName));
        return this.JR.annotManager.get(replyAnnot, this.pdfPage);
    };

    MarkupAnnot.prototype.addReviewState = function addReviewState(name) {
        switch (name) {
            case _consts.MARKUP_ANNOTATION_STATE.ACCEPTED:
            case _consts.MARKUP_ANNOTATION_STATE.CANCELLED:
            case _consts.MARKUP_ANNOTATION_STATE.COMPLETED:
            case _consts.MARKUP_ANNOTATION_STATE.NONE:
            case _consts.MARKUP_ANNOTATION_STATE.REJECTED:
                break;
            default:
                throw new Error('Illegal argument: unexpected review state name: ' + name);
        }
        return this._addState(this.engine.StateModel.e_StateModelReview, name);
    };

    MarkupAnnot.prototype.addMarkedState = function addMarkedState(name) {
        switch (name) {
            case _consts.MARKUP_ANNOTATION_STATE.MARKED:
            case _consts.MARKUP_ANNOTATION_STATE.UNMARKED:
                break;
            default:
                throw new Error('Illegal Argument: unexpected marked state name : ' + name + ', it should be \'marked\' or \'unmarked\'');
        }
        return this._addState(this.engine.StateModel.e_StateModelMarked, name);
    };

    MarkupAnnot.prototype._addState = function _addState(stateModel, name) {
        var annot = this.annot;
        if (annot.IsGrouped()) {
            annot = annot.GetGroupHeader();
        }
        var stateAnnot = annot.AddStateAnnot(stateModel, this.convertToEngineStateValue(name));
        stateAnnot.SetUniqueID(new this.engine.WString((0, _guid2.default)()));
        var now = this.ToDateTime(new Date());
        stateAnnot.SetCreationDateTime(now);
        stateAnnot.SetModifiedDateTime(now);
        var currentUserName = this.JR.getUserName() || 'Guest';
        stateAnnot.SetTitle(new this.engine.WString(currentUserName));
        return this.JR.annotManager.get(stateAnnot, this.pdfPage);
    };
    /**
     * @return {boolean}
     */


    MarkupAnnot.prototype.removeAllStateAnnots = function removeAllStateAnnots() {
        var annot = this.annot;
        if (annot.IsGrouped()) {
            annot = annot.GetGroupHeader();
        }
        return annot.RemoveAllStateAnnots();
    };

    MarkupAnnot.prototype.convertToEngineStateValue = function convertToEngineStateValue(stateName) {
        switch (stateName) {
            case _consts.MARKUP_ANNOTATION_STATE.ACCEPTED:
                return this.engine.MarkupState.e_StateAccepted;
            case _consts.MARKUP_ANNOTATION_STATE.CANCELLED:
                return this.engine.MarkupState.e_StateCancelled;
            case _consts.MARKUP_ANNOTATION_STATE.COMPLETED:
                return this.engine.MarkupState.e_StateCompleted;
            case _consts.MARKUP_ANNOTATION_STATE.NONE:
                return this.engine.MarkupState.e_StateNone;
            case _consts.MARKUP_ANNOTATION_STATE.REJECTED:
                return this.engine.MarkupState.e_StateRejected;
            case _consts.MARKUP_ANNOTATION_STATE.UNMARKED:
                return this.engine.MarkupState.e_StateUnmarked;
            case _consts.MARKUP_ANNOTATION_STATE.MARKED:
                return this.engine.MarkupState.e_StateMarked;
            default:
                throw new Error('unsupported state: ' + stateName);
        }
    };

    MarkupAnnot.prototype.remove = function remove() {
        var annot = this.annot;
        var page = annot.GetPage();
        var groupHeader = void 0;
        if ((groupHeader = annot.GetGroupHeader()) && !groupHeader.IsEmpty()) {
            annot = groupHeader;
        }
        var removedIds = this.removeRelatives();

        if (annot.IsGrouped()) {
            var groupElements = annot.GetGroupElements();
            for (var i = groupElements.GetSize(); i--;) {
                var markup = groupElements.GetAt(i);
                var markupId = markup.GetUniqueID().toString();
                var jrAnnot = this.pdfPage.annotManager.get(markup, this.pdfPage);
                /*if (page.RemoveAnnot(markup)) {
                    removedIds.push(markupId);
                    if(markupId !== this.getId() && jrAnnot instanceof MarkupAnnot) {
                        try {//组删除时，重复删除关联GSDK报错，先捕获处理
                            const gRemovedIds = jrAnnot.removeRelatives();
                            removedIds.push.apply(removedIds, gRemovedIds);
                        }catch (e) {
                         }
                    }
                }*/
                if (markupId !== this.getId() && jrAnnot instanceof MarkupAnnot) {
                    var gRemovedIds = jrAnnot.removeRelatives();
                    removedIds.push.apply(removedIds, gRemovedIds);
                }
                if (page.RemoveAnnot(markup)) {
                    removedIds.push(markupId);
                }
            }
        } else {
            var removedId = annot.GetUniqueID().toString();
            if (page.RemoveAnnot(annot)) {
                removedIds.push(removedId);
            }
        }
        return this.pdfPage.update().then(function () {
            return removedIds;
        });
    };

    MarkupAnnot.prototype.removeRelatives = function removeRelatives() {
        var engine = this.engine;
        var annot = this.annot;
        var removedIds = [];
        var page = annot.GetPage();
        // 先移除关联的annotation
        var popup = void 0;
        if ((popup = annot.GetPopup()) && !popup.IsEmpty()) {
            var popupId = popup.GetUniqueID().toString();
            if (page.RemoveAnnot(popup)) {
                removedIds.push(popupId);
            }
        }
        var replyIds = [];
        for (var i = annot.GetReplyCount(); i--;) {
            replyIds[i] = annot.GetReply(i).GetUniqueID().toString();
        }
        if (annot.RemoveAllReplies()) {
            removedIds.push.apply(removedIds, replyIds);
        }
        var markedStatesIds = [];
        var reviewStatesIds = [];
        var StateModel = engine.StateModel;
        var e_StateModelMarked = StateModel.e_StateModelMarked;
        var e_StateModelReview = StateModel.e_StateModelReview;
        var markedStateCount = annot.GetStateAnnotCount(e_StateModelMarked);
        for (var _i4 = markedStateCount; _i4--;) {
            var markedStateNote = annot.GetStateAnnot(e_StateModelMarked, _i4);
            markedStatesIds[_i4] = markedStateNote.GetUniqueID().toString();
        }
        var reviewStateCount = annot.GetStateAnnotCount(e_StateModelReview);
        for (var _i5 = reviewStateCount; _i5--;) {
            var reviewStateNote = annot.GetStateAnnot(e_StateModelReview, _i5);
            reviewStatesIds[_i5] = reviewStateNote.GetUniqueID().toString();
        }
        if (annot.RemoveAllStateAnnots()) {
            removedIds.push.apply(removedIds, markedStatesIds);
            removedIds.push.apply(removedIds, reviewStatesIds);
        }
        return removedIds;
    };

    MarkupAnnot.prototype.moveTo = function moveTo(left, top) {
        var annot = this.annot;
        var isGrouped = annot.IsGrouped();
        if (isGrouped) {
            var rect = this.annot.GetRect();
            var offsetLeft = left - rect.left,
                offsetTop = top - rect.top;
            var annots = this.getShouldModifyAnnots(this);
            for (var i = annots.length; i--;) {
                var markup = annots[i].annot;
                var destination = _RectOperator2.default.on(markup.GetRect()).move(offsetLeft, offsetTop).extract();
                markup.Move(destination);
                markup.ResetAppearanceStream();
            }
            return getJrAnnotArrayIds(annots);
        } else {
            return _Annot.prototype.moveTo.call(this, left, top);
        }
    };

    MarkupAnnot.prototype.setIntent = function setIntent(intent) {
        var annot = this.annot;
        annot.SetIntent(new this.engine.String(intent));
        if (this.annot.GetType().value != 3) {
            annot.ResetAppearanceStream();
        }
        return [this.getId()];
    };

    MarkupAnnot.prototype.create = function create(json) {
        var intent = void 0;
        if (intent = json.intent) {
            this.setIntent(intent);
        }

        _Annot.prototype.create.call(this, json);
        var creationTimestamp = json.creationTimestamp;
        var creationDate = void 0;
        if (creationTimestamp > 0) {
            creationDate = new Date(creationTimestamp);
        } else {
            creationDate = new Date();
        }
        this.setCreateDateTime(creationDate);
        this.setModifiedDateTime(creationDate);

        if (typeof json.opacity !== 'undefined') {
            var opacity = +json.opacity;
            this.setOpacity(opacity);
        }
        var subject = void 0;
        if (subject = json.subject) {
            this.setSubject(subject);
        }
        var title = void 0;
        if (title = typeof json.title === 'undefined' ? this.JR.getUserName() : json.title) {
            this.setTitle(title);
        }
        if (json.noPopup) {
            return [this];
        }
        if (json.type != 'freetext') {
            var annot = this.annot;
            var page = annot.GetPage();
            var engine = this.engine;
            var popup = page.AddAnnot(engine.AnnotType.e_Popup, annot.GetRect());
            annot.SetPopup(new engine.Popup(popup));
            popup = this.JR.annotManager.get(popup, this.pdfPage);
            //popup.create(json);
            json.name = undefined;
            return [this, popup.create(json)[0]];
        }
        return [this];
    };

    MarkupAnnot.prototype._setFillColor = function _setFillColor(color) {
        if (typeof color !== 'number') {
            throw new Error('Incorrect color value: ' + color);
        }
        if (color < 0) {
            color = 0;
        }
        var annot = this.annot;
        var setValue = void 0;
        if (color === 0) {
            setValue = function setValue(annot) {
                annot.RemoveProperty({ value: 3 });
                annot.ResetAppearanceStream();
            };
        } else {
            setValue = function setValue(annot) {
                annot.SetFillColor && annot.SetFillColor(color);
                annot.ResetAppearanceStream();
            };
        }
        var engine = this.engine;
        var AnnotType = engine.AnnotType;
        var filterType = [AnnotType.e_Square, AnnotType.e_Circle, AnnotType.e_FreeText, AnnotType.e_Polygon, AnnotType.e_Redact];
        var annots = this.getShouldModifyAnnots(this, function (jrAnnot) {
            var annot = jrAnnot.annot;
            return filterType.indexOf[annot.GetType()] !== -1;
        });
        for (var i = annots.length; i--;) {
            setValue(annots[i].annot);
        }
        return annots;
    };

    MarkupAnnot.prototype.getShouldModifyAnnots = function getShouldModifyAnnots(jrAnnot) {
        var filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (annot) {
            return true;
        };

        var annot = jrAnnot.annot;
        if (!annot.IsGrouped()) {
            return [jrAnnot];
        }
        //let groupHeader = annot.GetGroupHeader();
        //if (groupHeader.GetUniqueID().toString() !== annot.GetUniqueID().toString()) {
        //    return [jrAnnot];
        //}
        // groupHeader设置了值，groupElements也一起设置
        var annots = [];
        var groupElements = annot.GetGroupElements();
        var annotManager = this.JR.annotManager;
        var pdfPage = jrAnnot.pdfPage;
        for (var i = groupElements.GetSize(); i--;) {
            annots[i] = annotManager.get(groupElements.GetAt(i), pdfPage);
        }
        return annots.filter(filter);
    };

    MarkupAnnot.prototype.setContent = function setContent(content) {
        var annot = this.annot;
        if (annot.IsGrouped()) {
            annot = annot.GetGroupHeader();
        }
        annot.SetContent(new this.engine.WString(content));
        switch (annot.GetType()) {
            case this.engine.AnnotType.e_FreeText:
            case this.engine.AnnotType.e_Line:
                annot.ResetAppearanceStream();
                break;
        }
        return annot.GetUniqueID().toString();
    };

    MarkupAnnot.prototype.setBorderStyle = function setBorderStyle(style, styleParam) {
        var annots = this.getShouldModifyAnnots(this);
        for (var i = annots.length; i--;) {
            annots[i]._setBorderStyle(style, styleParam);
        }
        return getJrAnnotArrayIds(annots);
    };

    MarkupAnnot.prototype._setBorderStyle = function _setBorderStyle(style, styleParam) {
        return _Annot.prototype.setBorderStyle.call(this, style, styleParam);
    };

    return MarkupAnnot;
}(_Annot3.default);

exports.default = MarkupAnnot;


function getJrAnnotArrayIds(annots) {
    var ids = [];
    for (var i = annots.length; i--;) {
        ids[i] = annots[i].getId();
    }
    return ids;
}

/***/ }),

/***/ "./src/pdf-jr/annot/Note.js":
/*!**********************************!*\
  !*** ./src/pdf-jr/annot/Note.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _MarkupAnnot2 = __webpack_require__(/*! ./MarkupAnnot */ "./src/pdf-jr/annot/MarkupAnnot.js");

var _MarkupAnnot3 = _interopRequireDefault(_MarkupAnnot2);

var _consts = __webpack_require__(/*! ../../shared/consts */ "./src/shared/consts.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var Note = function (_MarkupAnnot) {
    _inherits(Note, _MarkupAnnot);

    function Note(annot, pdfPage) {
        _classCallCheck(this, Note);

        var _this = _possibleConstructorReturn(this, _MarkupAnnot.call(this, annot, pdfPage));

        _this.annot = new _this.engine.Note(_this.annot);
        return _this;
    }

    Note.prototype.setIconName = function setIconName(iconName) {
        var annot = this.annot;
        annot.SetIconName(new this.engine.String(iconName));
        annot.ResetAppearanceStream();
        return true;
    };

    Note.prototype.setOpenStatus = function setOpenStatus(isOpen) {
        this.annot.SetOpenStatus(isOpen);
        annot.ResetAppearanceStream();
        return true;
    };

    Note.prototype.setStateName = function setStateName(name) {
        var annot = this.annot;
        if (!annot.IsStateAnnot()) {
            return false;
        }
        var newStateName = void 0;
        switch (annot.GetStateModel()) {
            case this.engine.StateModel.e_StateModelMarked:
                switch (name) {
                    case _consts.MARKUP_ANNOTATION_STATE.UNMARKED:
                        newStateName = this.engine.MarkupState.e_StateUnmarked;
                        break;
                    case _consts.MARKUP_ANNOTATION_STATE.MARKED:
                        newStateName = this.engine.MarkupState.e_StateMarked;
                        break;
                    default:
                        throw new Error('Illegal argument: incorrect state name in marked state model: ' + name);
                }
                break;
            case this.engine.StateModel.e_StateModelReview:
                switch (name) {
                    case _consts.MARKUP_ANNOTATION_STATE.ACCEPTED:
                        newStateName = this.engine.MarkupState.e_StateAccepted;
                        break;
                    case _consts.MARKUP_ANNOTATION_STATE.CANCELLED:
                        newStateName = this.engine.MarkupState.e_StateCancelled;
                        break;
                    case _consts.MARKUP_ANNOTATION_STATE.COMPLETED:
                        newStateName = this.engine.MarkupState.e_StateCompleted;
                        break;
                    case _consts.MARKUP_ANNOTATION_STATE.NONE:
                        newStateName = this.engine.MarkupState.e_StateNone;
                        break;
                    case _consts.MARKUP_ANNOTATION_STATE.REJECTED:
                        newStateName = this.engine.MarkupState.e_StateRejected;
                        break;
                    default:
                        throw new Error('Illegal argument: incorrect state name in review state model: ' + name);
                }
                break;
        }
        annot.SetState(newStateName);
        return true;
    };

    Note.prototype.toJson = function toJson() {
        var basicInfo = _MarkupAnnot.prototype.toJson.call(this);
        basicInfo.flag |= 24;
        basicInfo.iconName = this.annot.GetIconName().toString();
        if (this.annot.IsStateAnnot()) {
            basicInfo.isStateAnnot = true;
            switch (this.annot.GetState()) {
                case this.engine.MarkupState.e_StateAccepted:
                    basicInfo.state = _consts.MARKUP_ANNOTATION_STATE.ACCEPTED;
                    break;
                case this.engine.MarkupState.e_StateCancelled:
                    basicInfo.state = _consts.MARKUP_ANNOTATION_STATE.CANCELLED;
                    break;
                case this.engine.MarkupState.e_StateCompleted:
                    basicInfo.state = _consts.MARKUP_ANNOTATION_STATE.COMPLETED;
                    break;
                case this.engine.MarkupState.e_StateNone:
                    basicInfo.state = _consts.MARKUP_ANNOTATION_STATE.NONE;
                    break;
                case this.engine.MarkupState.e_StateRejected:
                    basicInfo.state = _consts.MARKUP_ANNOTATION_STATE.REJECTED;
                    break;
                case this.engine.MarkupState.e_StateUnmarked:
                    basicInfo.state = _consts.MARKUP_ANNOTATION_STATE.UNMARKED;
                    break;
                case this.engine.MarkupState.e_StateMarked:
                    basicInfo.state = _consts.MARKUP_ANNOTATION_STATE.MARKED;
                    break;
            }
        } else {
            basicInfo.isStateAnnot = false;
        }
        basicInfo.isOpen = this.annot.GetOpenStatus();
        return basicInfo;
    };

    Note.prototype.create = function create(json) {
        this.setFlags(24);
        var result = _MarkupAnnot.prototype.create.call(this, json);
        return result;
    };

    return Note;
}(_MarkupAnnot3.default);

exports.default = Note;

/***/ }),

/***/ "./src/pdf-jr/annot/PolyLine.js":
/*!**************************************!*\
  !*** ./src/pdf-jr/annot/PolyLine.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _MarkupAnnot2 = __webpack_require__(/*! ./MarkupAnnot */ "./src/pdf-jr/annot/MarkupAnnot.js");

var _MarkupAnnot3 = _interopRequireDefault(_MarkupAnnot2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var PolyLine = function (_MarkupAnnot) {
    _inherits(PolyLine, _MarkupAnnot);

    function PolyLine(annot, pdfPage) {
        _classCallCheck(this, PolyLine);

        var _this = _possibleConstructorReturn(this, _MarkupAnnot.call(this, annot, pdfPage));

        _this.annot = new _this.engine.PolyLine(_this.annot);
        return _this;
    }

    PolyLine.prototype.setLineEndStyle = function setLineEndStyle(ending_style) {
        var enumType = this.engine.EndingStyle.values[ending_style];
        this.annot.SetLineEndStyle(enumType);
        this.annot.ResetAppearanceStream();
    };

    PolyLine.prototype.setLineStartStyle = function setLineStartStyle(ending_style) {
        var enumType = this.engine.EndingStyle.values[ending_style];
        this.annot.SetLineStartStyle(enumType);
        this.annot.ResetAppearanceStream();
    };

    PolyLine.prototype.setFillColor = function setFillColor(color) {
        if (typeof color !== 'number') {
            throw new Error('Incorrect color value: ' + color);
        }
        this.annot.SetStyleFillColor(color);
        this.annot.ResetAppearanceStream();
        return [this];
    };

    PolyLine.prototype.updateVertexes = function updateVertexes(index, x, y) {
        var vertexes = this.annot.GetVertexes();
        var point = new this.engine.PointF(x, y);
        vertexes.SetAt(parseInt(index), point);

        this.annot.SetVertexes(vertexes);
        this.annot.ResetAppearanceStream();
    };

    PolyLine.prototype.setVertexes = function setVertexes(vertexes) {
        var _this2 = this;

        var engineVertexes = vertexes.reduce(function (array, _ref) {
            var x = _ref.x,
                y = _ref.y;

            array.Add(new _this2.engine.PointF(x, y));
            return array;
        }, new this.engine.PointFArray());
        this.annot.SetVertexes(engineVertexes);
        this.annot.ResetAppearanceStream();
    };

    PolyLine.prototype.create = function create(json) {
        var _this3 = this;

        if (json.vertexes) {
            var engineVertexes = json.vertexes.reduce(function (array, _ref2) {
                var x = _ref2.x,
                    y = _ref2.y;

                array.Add(new _this3.engine.PointF(x, y));
                return array;
            }, new this.engine.PointFArray());
            this.annot.SetVertexes(engineVertexes);
        }
        return _MarkupAnnot.prototype.create.call(this, json);
    };

    PolyLine.prototype.toJson = function toJson() {
        var markupAnnotJson = _MarkupAnnot.prototype.toJson.call(this);

        var endingStyle = this.annot.GetLineEndStyle(); //enum
        var startStyle = this.annot.GetLineStartStyle(); //enum

        var vertexes = this.annot.GetVertexes();
        var fillColor = this.annot.GetStyleFillColor();

        var jsonVertexes = [];
        for (var index = 0; index < vertexes.GetSize(); index++) {
            var point = vertexes.GetAt(index);
            jsonVertexes.push({
                x: point.x,
                y: point.y
            });
        }

        var polyLineJson = {
            endingStyle: endingStyle.value,
            startStyle: startStyle.value,
            fillColor: fillColor,
            vertexes: jsonVertexes
        };
        return Object.assign(polyLineJson, markupAnnotJson);
    };

    return PolyLine;
}(_MarkupAnnot3.default);

exports.default = PolyLine;

/***/ }),

/***/ "./src/pdf-jr/annot/Polygon.js":
/*!*************************************!*\
  !*** ./src/pdf-jr/annot/Polygon.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _MarkupAnnot2 = __webpack_require__(/*! ./MarkupAnnot */ "./src/pdf-jr/annot/MarkupAnnot.js");

var _MarkupAnnot3 = _interopRequireDefault(_MarkupAnnot2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var Polygon = function (_MarkupAnnot) {
    _inherits(Polygon, _MarkupAnnot);

    function Polygon(annot, pdfPage) {
        _classCallCheck(this, Polygon);

        var _this = _possibleConstructorReturn(this, _MarkupAnnot.call(this, annot, pdfPage));

        _this.annot = new _this.engine.Polygon(_this.annot);
        return _this;
    }

    Polygon.prototype.updateVertexes = function updateVertexes(index, x, y) {
        var vertexes = this.annot.GetVertexes();
        var point = new this.engine.PointF(x, y);
        vertexes.SetAt(parseInt(index), point);

        this.annot.SetVertexes(vertexes);
        this.annot.ResetAppearanceStream();
    };

    Polygon.prototype.setVertexes = function setVertexes(vertexes) {
        var _this2 = this;

        var engineVertexes = vertexes.reduce(function (array, _ref) {
            var x = _ref.x,
                y = _ref.y;

            array.Add(new _this2.engine.PointF(x, y));
            return array;
        }, new this.engine.PointFArray());
        this.annot.SetVertexes(engineVertexes);
        this.annot.ResetAppearanceStream();
    };

    Polygon.prototype.create = function create(json) {
        var _this3 = this;

        if (json.vertexes) {
            var engineVertexes = json.vertexes.reduce(function (array, _ref2) {
                var x = _ref2.x,
                    y = _ref2.y;

                array.Add(new _this3.engine.PointF(x, y));
                return array;
            }, new this.engine.PointFArray());
            this.annot.SetVertexes(engineVertexes);
        }
        if (json.borderStyle) {
            this.setBorderStyle(json.borderStyle, json.borderStyleParam);
        }
        return _MarkupAnnot.prototype.create.call(this, json);
    };

    Polygon.prototype.toJson = function toJson() {
        var markupAnnotJson = _MarkupAnnot.prototype.toJson.call(this);

        var fillColor = this.annot.GetFillColor();

        var vertexes = this.annot.GetVertexes();
        var jsonVertexes = [];
        for (var index = 0; index < vertexes.GetSize(); index++) {
            var point = vertexes.GetAt(index);
            jsonVertexes.push({
                x: point.x,
                y: point.y
            });
        }
        var polyLineJson = {
            fillColor: fillColor,
            vertexes: jsonVertexes
        };
        return Object.assign(polyLineJson, markupAnnotJson);
    };

    Polygon.prototype.setFillColor = function setFillColor(color) {
        return _MarkupAnnot.prototype._setFillColor.call(this, color);
    };

    return Polygon;
}(_MarkupAnnot3.default);

exports.default = Polygon;

/***/ }),

/***/ "./src/pdf-jr/annot/Popup.js":
/*!***********************************!*\
  !*** ./src/pdf-jr/annot/Popup.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Annot2 = __webpack_require__(/*! ./Annot */ "./src/pdf-jr/annot/Annot.js");

var _Annot3 = _interopRequireDefault(_Annot2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by linc on 2019/2/28.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var Popup = function (_Annot) {
    _inherits(Popup, _Annot);

    function Popup(annot, pdfPage) {
        _classCallCheck(this, Popup);

        var _this = _possibleConstructorReturn(this, _Annot.call(this, annot, pdfPage));

        _this.annot = new _this.engine.Popup(_this.annot);
        return _this;
    }

    Popup.prototype.toJson = function toJson() {
        var json = _Annot.prototype.toJson.call(this);
        var annot = this.annot;
        json.openStatus = annot.GetOpenStatus();

        return json;
    };

    Popup.prototype.create = function create(json) {
        _Annot.prototype.create.call(this, json);
        var open = (json.open || 'no').toString();
        if (open === 'yes' || open === 'true') {
            this.setOpenStatus(true);
        } else {
            this.setOpenStatus(false);
        }
        return [this];
    };

    Popup.prototype.setOpenStatus = function setOpenStatus(status) {
        var annot = this.annot;
        annot.SetOpenStatus(status);
        return status;
    };

    return Popup;
}(_Annot3.default);

exports.default = Popup;

/***/ }),

/***/ "./src/pdf-jr/annot/Redact.js":
/*!************************************!*\
  !*** ./src/pdf-jr/annot/Redact.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _MarkupAnnot2 = __webpack_require__(/*! ./MarkupAnnot */ "./src/pdf-jr/annot/MarkupAnnot.js");

var _MarkupAnnot3 = _interopRequireDefault(_MarkupAnnot2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by linc on 2018/11/7.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var Redact = function (_MarkupAnnot) {
    _inherits(Redact, _MarkupAnnot);

    function Redact(annot, pdfPage) {
        _classCallCheck(this, Redact);

        var _this = _possibleConstructorReturn(this, _MarkupAnnot.call(this, annot, pdfPage));

        _this.annot = new _this.engine.Redact(_this.annot);
        return _this;
    }

    Redact.prototype.apply = function apply() {
        var _this2 = this;

        var oldAnnots = {};
        var deletedAnnots = [];
        return this.pdfPage.getAnnots().then(function (annots) {
            annots.forEach(function (annot) {
                var id = annot.annot.GetUniqueID().toString();
                if (id) {
                    oldAnnots[id] = annot;
                }
            });
            var result = _this2.annot.Apply();
            if (!result) return new Error();
            return _this2.pdfPage.update();
        }).then(function (pageAnnots) {
            for (var id in oldAnnots) {
                var annot = oldAnnots[id];
                if (pageAnnots.annotIds.indexOf(id) === -1) {
                    deletedAnnots.push(id);
                } else {
                    //处理遗留的Note annot.
                    var type = annot.getType();
                    if (type == "text") {
                        var markUp = annot.annot.GetReplyTo();
                        var rect = annot.annot.GetRect();
                        if (rect.left !== 0 || rect.top !== 0 || rect.right !== 0 || rect.bottom !== 0) {
                            continue;
                        }
                        var annotId = annot.annot.GetUniqueID().toString();
                        if (markUp.isDeleted()) {
                            deletedAnnots.push(annotId);
                        } else {
                            try {
                                var _id = markUp.GetUniqueID().toString();
                                if (pageAnnots.annotIds.indexOf(_id) === -1) {
                                    var _annotId = annot.annot.GetUniqueID().toString();
                                    deletedAnnots.push(_annotId);
                                }
                            } catch (e) {
                                if (!isNaN(e)) {
                                    e = _this2.engine.getErrorCode(e);
                                }
                                if (e.value && e.value == 4) {
                                    deletedAnnots.push(annotId);
                                    annot.remove().then(function (success) {
                                        // console.log("remove success: " + success);
                                    });
                                }
                                console.error(e);
                            }
                        }
                    }
                }
            }
            return deletedAnnots;
        });
    };

    Redact.prototype.setRedactApplyFillColor = function setRedactApplyFillColor(color) {
        this.annot.SetApplyFillColor(color);
        return true;
    };

    Redact.prototype.toJson = function toJson() {
        var engine = this.engine;
        var json = _MarkupAnnot.prototype.toJson.call(this);
        json.quadPoints = this.getQuadPointsArray();
        if (json.quadPoints.length === 0) {
            json.isArea = true;
        } else {
            json.isArea = false;
        }
        json.applyFillColor = this.annot.GetApplyFillColor();

        return json;
        json.quadPoints = this.getQuadPointsArray();
        if (json.quadPoints.length === 0) return json;
        try {

            var quadPoints = json.quadPoints;
            var quadPointCount = quadPoints.length;
            // let quadPointArr = [];
            var isArea = false;
            var textArr = [];
            var textPage = this.pdfPage.getNormalTextPageSync();
            for (var i = quadPointCount; i--;) {
                var quadPoint = quadPoints[i];
                // The first point is the point in left-top corner of the quadrilateral.
                // The second point is the point in right-top corner of the quadrilateral.
                // The third point is the point in left-bottom corner of the quadrilateral.
                // The fourth point is the point in right-bottom corner of the quadrilateral.
                // quadPointArr[i] = [{
                //     x: quadPoint[0].x,
                //     y: quadPoint[0].y,
                // }, {
                //     x: quadPoint[1].x,
                //     y: quadPoint[1].y,
                // }, {
                //     x: quadPoint[2].x,
                //     y: quadPoint[2].y,
                // }, {
                //     x: quadPoint[3].x,
                //     y: quadPoint[3].y,
                // }];
                var rect = new this.engine.CFX_FloatRect(quadPoint[0].x, quadPoint[3].y, quadPoint[3].x, quadPoint[0].y);
                rect.Normalize();
                var rectText = textPage.GetTextInRect(rect).toString();
                if (!rectText || /\n/.test(rectText)) {
                    isArea = true;
                }
                textArr[i] = rectText;
            }
            json.text = textArr.join('\r\n');
            if (isArea || !quadPointCount) {
                // 不在文字上的textmarkup，或区块的textmarkup
                json.startCharIndex = -1;
                json.endCharIndex = -1;
            } else {
                var startQuadPoint = quadPoints[0];
                var startRadian = Math.atan2(startQuadPoint[0].y - startQuadPoint[1].y, startQuadPoint[1].x - startQuadPoint[0].x);
                var startMatrix = new engine.Matrix();
                startMatrix.Rotate(-startRadian, false);
                startMatrix.Rotate(-Math.PI / 2, false);
                startMatrix.Translate((startQuadPoint[0].x + startQuadPoint[2].x) / 2, (startQuadPoint[0].y + startQuadPoint[2].y) / 2, false);
                var height = Math.min(3, Math.sqrt(Math.pow(startQuadPoint[2].y - startQuadPoint[0].y, 2) + Math.pow(startQuadPoint[2].x - startQuadPoint[0].x, 2)));
                var x = 0,
                    y = height;
                var fx = startMatrix.a * x + startMatrix.c * y + startMatrix.e;
                var fy = startMatrix.b * x + startMatrix.d * y + startMatrix.f;
                var startCharIndex = json.startCharIndex = textPage.GetIndexAtPos(fx, fy, 0);
                if (startCharIndex !== -1) {
                    var textRectCount = textPage.GetTextRectCount(startCharIndex, 1);
                    var _rect = textPage.GetTextRect(0);
                    var rotation = textPage.GetBaselineRotation(0);

                    json.startCharInfo = {
                        charIndex: startCharIndex,
                        left: _rect.left,
                        right: _rect.right,
                        top: _rect.top,
                        bottom: _rect.bottom,
                        rotation: rotation.value
                    };
                }

                var endQuadPoint = quadPoints[quadPointCount - 1];
                var endRadian = Math.atan2(endQuadPoint[0].y - endQuadPoint[1].y, endQuadPoint[1].x - endQuadPoint[0].x);
                var endMatrix = new engine.Matrix();
                endMatrix.Rotate(-endRadian, false);
                endMatrix.Rotate(-Math.PI / 2, false);
                endMatrix.Translate((endQuadPoint[1].x + endQuadPoint[3].x) / 2, (endQuadPoint[1].y + endQuadPoint[3].y) / 2, false);
                height = Math.min(3, Math.sqrt(Math.pow(endQuadPoint[3].y - endQuadPoint[1].y, 2) + Math.pow(endQuadPoint[3].x - endQuadPoint[1].x, 2)));
                x = 0, y = -height;
                fx = endMatrix.a * x + endMatrix.c * y + endMatrix.e;
                fy = endMatrix.b * x + endMatrix.d * y + endMatrix.f;
                var endCharIndex = json.endCharIndex = textPage.GetIndexAtPos(fx, fy, 0);

                if (endCharIndex !== -1) {
                    var _textRectCount = textPage.GetTextRectCount(endCharIndex, 1);
                    var _rect2 = textPage.GetTextRect(0);
                    var _rotation = textPage.GetBaselineRotation(0);

                    json.endCharInfo = {
                        charIndex: endCharIndex,
                        left: _rect2.left,
                        right: _rect2.right,
                        top: _rect2.top,
                        bottom: _rect2.bottom,
                        rotation: _rotation.value
                    };
                }
            }
            // json.quadPoints = quadPointArr;
            if (json.startCharIndex > json.endCharIndex) {
                var temp = json.startCharIndex;
                json.startCharIndex = json.endCharIndex;
                json.endCharIndex = temp;

                temp = json.startCharInfo;
                json.startCharInfo = json.endCharInfo;
                json.endCharInfo = temp;
            }
            if (json.startCharIndex === -1 || json.endCharIndex === -1) {
                isArea = true;
            } else {
                json.continuousText = textPage.GetChars(json.startCharIndex, json.endCharIndex - json.startCharIndex + 1);
            }
            json.continuousText = json.continuousText || json.text;
            json.isArea = isArea;
            return json;
        } catch (e) {
            if (!isNaN(e)) {
                e = this.engine.getErrorCode(e);
            }
        }
    };

    Redact.prototype.getQuadPointsArray = function getQuadPointsArray() {
        var quadPoints = [];
        var c_dict = this.annot.GetDict();
        if (c_dict.HasKey(new this.engine.String("QuadPoints"))) {
            var c_quad_points = c_dict.GetElement(new this.engine.String("QuadPoints"));
            var c_array = c_quad_points.GetArray();
            var count = c_array.GetElementCount();
            var quadPointsCount = count / 8;
            for (var i = 0; i < quadPointsCount; i++) {
                var point = [];
                point.push({
                    x: c_array.GetElement(i * 8).GetFloat(),
                    y: c_array.GetElement(i * 8 + 1).GetFloat()
                }, {
                    x: c_array.GetElement(i * 8 + 2).GetFloat(),
                    y: c_array.GetElement(i * 8 + 3).GetFloat()
                }, {
                    x: c_array.GetElement(i * 8 + 4).GetFloat(),
                    y: c_array.GetElement(i * 8 + 5).GetFloat()
                }, {
                    x: c_array.GetElement(i * 8 + 6).GetFloat(),
                    y: c_array.GetElement(i * 8 + 7).GetFloat()
                });
                quadPoints.push(point);
            }
        }
        return quadPoints;
    };

    Redact.prototype.updateQuadPointsByCharIndex = function updateQuadPointsByCharIndex(startCharIndex, endCharIndex) {
        try {
            if (startCharIndex === -1 || endCharIndex === -1) {
                return false;
            }
            if (startCharIndex > endCharIndex) {
                var temp = startCharIndex;
                startCharIndex = endCharIndex;
                endCharIndex = temp;
            }
            var textPage = this.pdfPage.getNormalTextPageSync();
            var textRectCount = textPage.GetTextRectCount(startCharIndex, endCharIndex - startCharIndex + 1);
            if (textRectCount < 1) {
                return false;
            }
            var engine = this.engine;
            var quadPointsArray = new engine.QuadPointsArray();
            var QuadPoints = engine.QuadPoints;
            var PointF = engine.PointF;
            var c_pdf_array = engine.PDFArray.Create();

            for (var i = 0, j = textRectCount; i < j; i++) {
                var textRect = textPage.GetTextRect(i);
                var rotation = textPage.GetBaselineRotation(i);
                var matrix = new engine.Matrix();
                var top = textRect.top;
                var right = textRect.right;
                var bottom = textRect.bottom;
                var left = textRect.left;
                //matrix.translate(left, top);
                //matrix.rotate(rotation / Math.PI * 180);
                //let rightTop = [matrix.a * right + matrix.c * top + matrix.e, matrix.b * right + matrix.d * top + matrix.f]
                //let leftBottom = [matrix.a * left + matrix.c * bottom + matrix.e, matrix.b * left + matrix.d * bottom + matrix.f]
                //let rightBottom = [matrix.a * right + matrix.c * bottom + matrix.e, matrix.b * right + matrix.d * bottom + matrix.f]
                var quadPointArray = [];

                var leftTop = new PointF(left, top);
                var rightTop = new PointF(right, top);
                var leftBottom = new PointF(left, bottom);
                var rightBottom = new PointF(right, bottom);

                var firstQuad = void 0;
                var secondQuad = void 0;
                var thirdQuad = void 0;
                var fourthQuad = void 0;
                switch (rotation.value % 4) {
                    case 0:
                        firstQuad = leftTop;
                        secondQuad = rightTop;
                        thirdQuad = leftBottom;
                        fourthQuad = rightBottom;
                        break;
                    case 1:
                        firstQuad = leftTop;
                        secondQuad = leftBottom;
                        thirdQuad = rightTop;
                        fourthQuad = rightBottom;
                        break;
                    case 2:
                        firstQuad = rightBottom;
                        secondQuad = leftBottom;
                        thirdQuad = rightTop;
                        fourthQuad = leftTop;
                        break;
                    case 3:
                        firstQuad = rightBottom;
                        secondQuad = rightTop;
                        thirdQuad = leftBottom;
                        fourthQuad = leftTop;
                        break;
                }
                c_pdf_array.AddFloat(firstQuad.x);
                c_pdf_array.AddFloat(firstQuad.y);
                c_pdf_array.AddFloat(secondQuad.x);
                c_pdf_array.AddFloat(secondQuad.y);
                c_pdf_array.AddFloat(thirdQuad.x);
                c_pdf_array.AddFloat(thirdQuad.y);
                c_pdf_array.AddFloat(fourthQuad.x);
                c_pdf_array.AddFloat(fourthQuad.y);
                // quadPointsArray.Add(new QuadPoints(firstQuad, secondQuad, thirdQuad, fourthQuad));
            }
            var annot = this.annot;
            var dict = annot.GetDict();
            dict.SetAt(new engine.String("QuadPoints"), c_pdf_array);
            // annot.SetQuadPoints(quadPointsArray);
            annot.ResetAppearanceStream();
            return true;
        } catch (e) {
            if (!isNaN(e)) {
                e = this.engine.getErrorCode(e);
            }
        }
    };

    Redact.prototype.create = function create(json) {
        var result = _MarkupAnnot.prototype.create.call(this, json);
        // this.annot.SetFillColor(0x000000);
        return result;
    };

    return Redact;
}(_MarkupAnnot3.default);

exports.default = Redact;

/***/ }),

/***/ "./src/pdf-jr/annot/Screen.js":
/*!************************************!*\
  !*** ./src/pdf-jr/annot/Screen.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Annot2 = __webpack_require__(/*! ./Annot */ "./src/pdf-jr/annot/Annot.js");

var _Annot3 = _interopRequireDefault(_Annot2);

var _Image = __webpack_require__(/*! ../base/Image */ "./src/pdf-jr/base/Image.js");

var _Image2 = _interopRequireDefault(_Image);

var _LoggerFactory = __webpack_require__(/*! ../../shared/logger/LoggerFactory */ "./src/shared/logger/LoggerFactory.js");

var _LoggerFactory2 = _interopRequireDefault(_LoggerFactory);

var _FileSpec = __webpack_require__(/*! ../base/FileSpec */ "./src/pdf-jr/base/FileSpec.js");

var _FileSpec2 = _interopRequireDefault(_FileSpec);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var logger = _LoggerFactory2.default.getLogger('pdf-jr.Screen');

var Screen = function (_Annot) {
    _inherits(Screen, _Annot);

    function Screen(annot, pdfPage) {
        _classCallCheck(this, Screen);

        /**
         * @type GSDK.Screen
         */
        var _this = _possibleConstructorReturn(this, _Annot.call(this, annot, pdfPage));

        _this.annot = new _this.engine.Screen(_this.annot);
        var action = _this.annot.GetAction();
        if (!action.IsEmpty()) {
            _this.action = _this.JR.actionManager.get(action, _this.doc, _this.JR);
        }
        return _this;
    }

    Screen.prototype.toJson = function toJson() {
        var json = _Annot.prototype.toJson.call(this);
        json.action = this.action && this.action.toJson();
        json.opacity = this.getOpacity();
        json.rotation = this.getRotation();
        json.title = this.getTitle();
        return json;
    };

    Screen.prototype.setBorderColor = function setBorderColor(color) {
        var annot = this.annot;
        if (color == 0) {
            annot.RemoveProperty({ value: 2 });
        } else {
            annot.SetBorderColor(color);
        }
        annot.ResetAppearanceStream();
    };

    Screen.prototype.setAction = function setAction(type) {
        var pdfDoc = this.annot.GetPage().GetDocument();
        var action = this.JR.actionManager.create(pdfDoc, type);
        this.annot.SetAction(action);
        return this.JR.actionManager.get(this.annot.GetAction(), this.doc, this.JR);
    };

    Screen.prototype.getOpacity = function getOpacity() {
        return this.annot.GetOpacity();
    };

    Screen.prototype.getRotation = function getRotation() {
        return this.annot.GetRotation().value;
    };

    Screen.prototype.getTitle = function getTitle() {
        return this.annot.GetTitle();
    };

    Screen.prototype.create = function create(json) {
        if (json.rotate) {
            this.annot.SetRotation(this.engine.Rotation.values[json.rotate]);
        }
        var result = _Annot.prototype.create.call(this, json);
        if (json.multiBuffer) {
            this.setMultiMedia(json.multiBuffer, json.fileName, json.contentType);
        }
        if (json.buffer) {
            this.setImage(json.buffer);
        }
        return result;
    };

    Screen.prototype.setMultiMedia = function setMultiMedia(buffer, fileName, contentType) {
        var c_doc = this.annot.GetPage().GetDocument();
        var c_action = this.engine.Action.Create(c_doc, this.engine.ActionType.e_TypeRendition);
        var c_rendition_action = new this.engine.RenditionAction(c_action);
        c_rendition_action.SetOperationType(this.engine.OperationType.e_OpTypeAssociate);
        c_rendition_action.SetScreenAnnot(this.annot);

        var c_rendition = new this.engine.Rendition(c_doc, null);
        c_rendition.SetRenditionName(new this.engine.WString(fileName));
        c_rendition.SetMediaClipName(new this.engine.WString(fileName));
        // c_rendition.SetPermission(this.engine.Rendition.e_MediaPermTempAccess);

        var c_file_spec = _FileSpec2.default.createFile(this.engine, c_doc, buffer);
        c_file_spec.SetFileName(new this.engine.WString(fileName));

        c_rendition.SetMediaClipFile(c_file_spec);
        c_rendition.SetMediaClipContentType(new this.engine.String(contentType));
        c_rendition_action.InsertRendition(c_rendition, -1);
        this.annot.SetAction(c_rendition_action);
        this.annot.ResetAppearanceStream();
        this.action = this.JR.actionManager.get(c_action, this.doc, this.JR);
    };

    Screen.prototype.setImage = function setImage(buffer) {
        try {
            var image = _Image2.default.createImage(this.engine, buffer);
            this.annot.SetImage(image, 0, 0);
            this.annot.ResetAppearanceStream();
        } catch (e) {
            var engine = this.engine;
            var errorCode = e instanceof engine.ErrorCode ? e : engine.getErrorCode(e);
            logger.warn(errorCode);
        }
        return true;
    };

    Screen.prototype.setOpacity = function setOpacity(opacity) {
        var annot = this.annot;
        opacity = +opacity;
        annot.SetOpacity(opacity);
        annot.ResetAppearanceStream();
        return [this.getId()];
    };

    Screen.prototype.setRotation = function setRotation(rotation) {
        var annot = this.annot;
        var Rotation = this.engine.Rotation;
        var rotationType = { "0": Rotation.e_Rotation0, "90": Rotation.e_Rotation90, "180": Rotation.e_Rotation180, "270": Rotation.e_Rotation270 };
        annot.SetRotation(rotationType[rotation]);
        annot.ResetAppearanceStream();
        return [this.getId()];
    };

    Screen.prototype.setBorderStyle = function setBorderStyle(style, styleParam) {
        _Annot.prototype.setBorderStyle.call(this, style, styleParam);
        return [this.getId()];
    };

    return Screen;
}(_Annot3.default);

exports.default = Screen;

/***/ }),

/***/ "./src/pdf-jr/annot/Square.js":
/*!************************************!*\
  !*** ./src/pdf-jr/annot/Square.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _MarkupAnnot2 = __webpack_require__(/*! ./MarkupAnnot */ "./src/pdf-jr/annot/MarkupAnnot.js");

var _MarkupAnnot3 = _interopRequireDefault(_MarkupAnnot2);

var _color = __webpack_require__(/*! ../../shared/color */ "./src/shared/color.js");

var _RectOperator = __webpack_require__(/*! ../share/RectOperator */ "./src/pdf-jr/share/RectOperator.js");

var _RectOperator2 = _interopRequireDefault(_RectOperator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

/**
 * @typedef GSDKSquareAnnot
 * @property {function} GetFillColor
 * @property {function} SetFillColor
 * @property {function} GetInnerRect
 * @property {function} SetInnerRect
 * @property {function} GetPopup
 * @property {function} SetPopup
 * @property {function} GetTitle
 * @property {function} SetTitle
 * @property {function} GetSubject
 * @property {function} SetSubject
 * @property {function} GetOpacity
 * @property {function} SetOpacity
 * @property {function} GetIntent
 * @property {function} SetIntent
 * @property {function} GetCreationDateTime
 * @property {function} SetCreationDateTime
 * @property {function} GetReplyCount
 * @property {function} GetReply
 * @property {function} AddReply
 * @property {function} RemoveReply
 * @property {function} RemoveAllReplies
 * @property {function} IsGrouped
 * @property {function} GetGroupHeader
 * @property {function} GetGroupElements
 * @property {function} Ungroup
 * @property {function} GetStateAnnotCount
 * @property {function} GetStateAnnot
 * @property {function} AddStateAnnot
 * @property {function} RemoveAllStateAnnots
 * @property {function} IsEmpty
 * @property {function} GetPage
 * @property {function} IsMarkup
 * @property {function} GetType
 * @property {function} GetIndex
 * @property {function} GetContent
 * @property {function} SetContent
 * @property {function} GetModifiedDateTime
 * @property {function} SetModifiedDateTime
 * @property {function} GetFlags
 * @property {function} SetFlags
 * @property {function} GetUniqueID
 * @property {function} SetUniqueID
 * @property {function} GetRect
 * @property {function} Move
 * @property {function} GetBorderInfo
 * @property {function} SetBorderInfo
 * @property {function} GetBorderColor
 * @property {function} SetBorderColor
 * @property {function} ResetAppearanceStream
 * @property {function} GetDeviceRect
 * @property {function} GetDict
 * @property {function} RemoveProperty
 * @property {function} GetOptionalContent
 * @property {function} GetAppearanceStream
 * @property {function} isAliasOf
 * @property {function} clone
 * @property {function} delete
 * @property {function} isDeleted
 * @property {function} deleteLater
 */

var Square = function (_MarkupAnnot) {
    _inherits(Square, _MarkupAnnot);

    /**
     * Creates an instance of Square.
     * @param {GSDKSquareAnnot} annot
     * @param {object} pdfPage
     * @memberof Square
     */
    function Square(annot, pdfPage) {
        _classCallCheck(this, Square);

        var _this = _possibleConstructorReturn(this, _MarkupAnnot.call(this, annot, pdfPage));

        _this.annot = new _this.engine.Square(annot);
        return _this;
    }

    Square.prototype._calculateRectDiffer = function _calculateRectDiffer() {
        var rect = this.annot.GetRect();
        var innerRect = this.annot.GetInnerRect();
        return _RectOperator2.default.subtract(rect, innerRect);
    };

    Square.prototype.move = function move(offsetLeft, offsetTop) {
        /**
         * @type {GSDKCircleAnnot}
         */
        var annot = this.annot;

        var destination = _RectOperator2.default.on(annot.GetRect()) //
        .move(offsetLeft, offsetTop) //
        .extract();
        return this.annot.Move(destination);
    };

    Square.prototype.setRect = function setRect(rect) {
        var destination = new this.engine.CFX_FloatRect(rect.left, rect.bottom, rect.right, rect.top);
        return this.annot.Move(destination);
    };

    Square.prototype.setInnerRect = function setInnerRect(rect) {
        var destination = new this.engine.CFX_FloatRect(rect.left, rect.bottom, rect.right, rect.top);
        this.annot.SetInnerRect(destination);
        this.annot.ResetAppearanceStream();
        return true;
    };

    Square.prototype.getInnerRect = function getInnerRect() {
        return _RectOperator2.default.on(this.annot.GetInnerRect()).toPlainObject();
    };

    Square.prototype.toJson = function toJson() {
        var json = _MarkupAnnot.prototype.toJson.call(this);
        /**
         * @type {GSDKSquareAnnot}
         */
        var annot = this.annot;

        var fillColor = annot.GetFillColor();
        json.fillColor = fillColor;

        json.innerRect = _RectOperator2.default.on(annot.GetInnerRect()).toPlainObject();
        return json;
    };

    Square.prototype.setFillColor = function setFillColor(color) {
        return _MarkupAnnot.prototype._setFillColor.call(this, color);
    };

    return Square;
}(_MarkupAnnot3.default);

exports.default = Square;

/***/ }),

/***/ "./src/pdf-jr/annot/Squiggly.js":
/*!**************************************!*\
  !*** ./src/pdf-jr/annot/Squiggly.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _TextMarkupAnnot2 = __webpack_require__(/*! ./TextMarkupAnnot */ "./src/pdf-jr/annot/TextMarkupAnnot.js");

var _TextMarkupAnnot3 = _interopRequireDefault(_TextMarkupAnnot2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by zj on 2018/12/5.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var Squiggly = function (_TextMarkupAnnot) {
    _inherits(Squiggly, _TextMarkupAnnot);

    function Squiggly(annot, pdfPage) {
        _classCallCheck(this, Squiggly);

        var _this = _possibleConstructorReturn(this, _TextMarkupAnnot.call(this, annot, pdfPage));

        _this.annot = new _this.engine.Squiggly(_this.annot);
        return _this;
    }

    Squiggly.prototype.create = function create(json) {
        var result = _TextMarkupAnnot.prototype.create.call(this, json);
        this.setBorderColor(json.color || 0xff6633);
        return result;
    };

    return Squiggly;
}(_TextMarkupAnnot3.default);

exports.default = Squiggly;

/***/ }),

/***/ "./src/pdf-jr/annot/Stamp.js":
/*!***********************************!*\
  !*** ./src/pdf-jr/annot/Stamp.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _MarkupAnnot2 = __webpack_require__(/*! ./MarkupAnnot */ "./src/pdf-jr/annot/MarkupAnnot.js");

var _MarkupAnnot3 = _interopRequireDefault(_MarkupAnnot2);

var _iconProvider = __webpack_require__(/*! ../iconProvider */ "./src/pdf-jr/iconProvider.js");

var _iconProvider2 = _interopRequireDefault(_iconProvider);

var _LoggerFactory = __webpack_require__(/*! ../../shared/logger/LoggerFactory */ "./src/shared/logger/LoggerFactory.js");

var _LoggerFactory2 = _interopRequireDefault(_LoggerFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var logger = _LoggerFactory2.default.getLogger('pdf-jr.Stamp');

var Stamp = function (_MarkupAnnot) {
    _inherits(Stamp, _MarkupAnnot);

    function Stamp(annot, pdfPage) {
        _classCallCheck(this, Stamp);

        var _this = _possibleConstructorReturn(this, _MarkupAnnot.call(this, annot, pdfPage));

        _this.annot = new _this.engine.Stamp(_this.annot);
        return _this;
    }

    Stamp.prototype.setIconName = function setIconName(iconName) {
        /*let annot = this.annot;
        annot.SetIconName(iconName);
        annot.ResetAppearanceStream();*/
    };

    Stamp.prototype.create = function create(json) {
        var annots = _MarkupAnnot.prototype.create.call(this, json);
        try {
            var iconProvider = (0, _iconProvider2.default)();
            iconProvider.setIconCatalog(json.iconCatagory);
            iconProvider.enable(true);
            this.annot.SetIconName(new this.engine.String(json.icon));

            json.rotate && this.setRotation(json.rotate);
            this.annot.ResetAppearanceStream();
            iconProvider.enable(false);
        } catch (err) {
            console.log(err);
            if (!isNaN(err)) {
                err = this.engine.getErrorCode(err);
            }
            console.warn(err);
        }
        return annots;
    };

    Stamp.prototype.setAnnotAPBitmap = function setAnnotAPBitmap(url, size) {
        var _this2 = this;

        var readerCallback = this.engine.ReaderCallback.implement({
            Release: function Release() {},
            GetSize: function GetSize() {
                return size;
            },
            ReadBlock: function ReadBlock(buffer, offset, size) {
                var src = new Uint8Array(_this2.JR.requestData("GET", false, url, offset, size));
                _this2.engine.HEAPU8.set(src, buffer);
                return true;
            }
        });

        var image = new this.engine.Image(readerCallback);

        this.annot.SetImage(image, 0, 0);
        this.annot.ResetAppearanceStream();
    };

    Stamp.prototype.setRotation = function setRotation(rotate) {
        var oriRotate = this.annot.GetRotation();
        this.annot.Rotate((360 - oriRotate) % 360);
        this.annot.Rotate(rotate);
        this.annot.ResetAppearanceStream();
        return [this.getId()];
    };

    Stamp.prototype.toJson = function toJson() {
        var baseInfo = _MarkupAnnot.prototype.toJson.call(this);
        baseInfo.rotation = this.annot.GetRotation();
        return baseInfo;
    };

    return Stamp;
}(_MarkupAnnot3.default);

exports.default = Stamp;

/***/ }),

/***/ "./src/pdf-jr/annot/StrikeOut.js":
/*!***************************************!*\
  !*** ./src/pdf-jr/annot/StrikeOut.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _TextMarkupAnnot2 = __webpack_require__(/*! ./TextMarkupAnnot */ "./src/pdf-jr/annot/TextMarkupAnnot.js");

var _TextMarkupAnnot3 = _interopRequireDefault(_TextMarkupAnnot2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by zj on 2018/12/5.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var StrikeOut = function (_TextMarkupAnnot) {
    _inherits(StrikeOut, _TextMarkupAnnot);

    function StrikeOut(annot, pdfPage) {
        _classCallCheck(this, StrikeOut);

        var _this = _possibleConstructorReturn(this, _TextMarkupAnnot.call(this, annot, pdfPage));

        _this.annot = new _this.engine.StrikeOut(_this.annot);
        return _this;
    }

    StrikeOut.prototype.toJson = function toJson() {
        var json = _TextMarkupAnnot.prototype.toJson.call(this);

        if (json.IRT && json.RT == 'Group' && json.intent == "") {
            json.intent = 'StrikeOutTextEdit';
        }

        var annot = this.annot;
        var groupElements = void 0;
        var groupElementsCount = void 0;
        // 判断是否是Replace
        if (this.isReplace()) {
            json.typeAlias = 'Replace';
        }

        return json;
    };

    StrikeOut.prototype.updateQuadPointsByCharIndex = function updateQuadPointsByCharIndex(startCharIndex, endCharIndex) {
        return _TextMarkupAnnot.prototype.updateQuadPointsByCharIndex.call(this, startCharIndex, endCharIndex);
    };

    StrikeOut.prototype.isReplace = function isReplace() {
        // 判断是否是Replace
        var annot = this.annot;
        var groupElements = void 0;
        var groupElementsCount = void 0;
        if (annot.IsGrouped() && (groupElements = annot.GetGroupElements()) && (groupElementsCount = groupElements.GetSize()) === 2) {
            var replaceTypes = ['AnnotType_e_StrikeOut', 'AnnotType_e_Caret'];
            var isReplace = true;
            for (var i = groupElementsCount; i--;) {
                var markup = groupElements.GetAt(i);
                var indexOf = replaceTypes.indexOf(markup.GetType().constructor.name);
                if (indexOf === -1) {
                    return false;
                } else {}
            }
            return true;
        }
        return false;
    };

    StrikeOut.prototype.create = function create(json) {
        var result = _TextMarkupAnnot.prototype.create.call(this, json);
        if (json.subject && json.subject.toLocaleLowerCase() === "replace") {
            this.setBorderColor(json.color || 0x0000ff);
        } else {
            this.setBorderColor(json.color || 0xff0000);
        }
        return result;
    };

    return StrikeOut;
}(_TextMarkupAnnot3.default);

exports.default = StrikeOut;

/***/ }),

/***/ "./src/pdf-jr/annot/TextMarkupAnnot.js":
/*!*********************************************!*\
  !*** ./src/pdf-jr/annot/TextMarkupAnnot.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _MarkupAnnot2 = __webpack_require__(/*! ./MarkupAnnot */ "./src/pdf-jr/annot/MarkupAnnot.js");

var _MarkupAnnot3 = _interopRequireDefault(_MarkupAnnot2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var TextMarkupAnnot = function (_MarkupAnnot) {
    _inherits(TextMarkupAnnot, _MarkupAnnot);

    function TextMarkupAnnot(annot, pdfPage) {
        _classCallCheck(this, TextMarkupAnnot);

        var _this = _possibleConstructorReturn(this, _MarkupAnnot.call(this, annot, pdfPage));

        _this.annot = new _this.engine.TextMarkup(_this.annot);
        return _this;
    }

    TextMarkupAnnot.prototype.toJson = function toJson() {
        var json = _MarkupAnnot.prototype.toJson.call(this);
        var annot = this.annot;
        var engine = this.engine;

        var quadPoints = annot.GetQuadPoints();
        var quadPointCount = quadPoints.GetSize();
        var quadPointArr = [];
        var isArea = false;
        var textArr = [];
        var textPage = this.pdfPage.getNormalTextPageSync();
        for (var i = quadPointCount; i--;) {
            var quadPoint = quadPoints.GetAt(i);
            // The first point is the point in left-top corner of the quadrilateral.
            // The second point is the point in right-top corner of the quadrilateral.
            // The third point is the point in left-bottom corner of the quadrilateral.
            // The fourth point is the point in right-bottom corner of the quadrilateral.
            quadPointArr[i] = [{
                x: quadPoint.first.x,
                y: quadPoint.first.y
            }, {
                x: quadPoint.second.x,
                y: quadPoint.second.y
            }, {
                x: quadPoint.third.x,
                y: quadPoint.third.y
            }, {
                x: quadPoint.fourth.x,
                y: quadPoint.fourth.y
            }];
            var rect = new this.engine.CFX_FloatRect(quadPoint.first.x, quadPoint.fourth.y, quadPoint.fourth.x, quadPoint.first.y);
            rect.Normalize();
            if (rect.Width() > 1 && rect.Height() > 1) {
                var rectText = textPage.GetTextInRect(rect).toString();
                if (!rectText || /\n/.test(rectText)) {
                    isArea = true;
                }
                textArr[i] = rectText;
            }
        }
        json.text = textArr.join('\r\n');
        if (isArea || !quadPointCount) {
            // 不在文字上的textmarkup，或区块的textmarkup
            json.startCharIndex = -1;
            json.endCharIndex = -1;
        } else {
            var startQuadPoint = quadPoints.GetAt(0);
            var startRadian = Math.atan2(startQuadPoint.first.y - startQuadPoint.second.y, startQuadPoint.second.x - startQuadPoint.first.x);
            var startMatrix = new engine.Matrix();
            startMatrix.Rotate(-startRadian, false);
            startMatrix.Rotate(-Math.PI / 2, false);
            startMatrix.Translate((startQuadPoint.first.x + startQuadPoint.third.x) / 2, (startQuadPoint.first.y + startQuadPoint.third.y) / 2, false);
            var height = Math.min(3, Math.sqrt(Math.pow(startQuadPoint.third.y - startQuadPoint.first.y, 2) + Math.pow(startQuadPoint.third.x - startQuadPoint.first.x, 2)));
            var x = 0,
                y = height;
            var fx = startMatrix.a * x + startMatrix.c * y + startMatrix.e;
            var fy = startMatrix.b * x + startMatrix.d * y + startMatrix.f;
            var startCharIndex = json.startCharIndex = textPage.GetIndexAtPos(fx, fy, 2);
            if (startCharIndex !== -1) {
                var textRectCount = textPage.GetTextRectCount(startCharIndex, 1);
                var _rect = textPage.GetTextRect(0);
                var rotation = textPage.GetBaselineRotation(0);

                json.startCharInfo = {
                    charIndex: startCharIndex,
                    left: _rect.left,
                    right: _rect.right,
                    top: _rect.top,
                    bottom: _rect.bottom,
                    rotation: rotation.value
                };
            }

            var endQuadPoint = quadPoints.GetAt(quadPointCount - 1);
            var endRadian = Math.atan2(endQuadPoint.first.y - endQuadPoint.second.y, endQuadPoint.second.x - endQuadPoint.first.x);
            var endMatrix = new engine.Matrix();
            endMatrix.Rotate(-endRadian, false);
            endMatrix.Rotate(-Math.PI / 2, false);
            endMatrix.Translate((endQuadPoint.second.x + endQuadPoint.fourth.x) / 2, (endQuadPoint.second.y + endQuadPoint.fourth.y) / 2, false);
            height = Math.min(3, Math.sqrt(Math.pow(endQuadPoint.fourth.y - endQuadPoint.second.y, 2) + Math.pow(endQuadPoint.fourth.x - endQuadPoint.second.x, 2)));
            x = 0, y = -height;
            fx = endMatrix.a * x + endMatrix.c * y + endMatrix.e;
            fy = endMatrix.b * x + endMatrix.d * y + endMatrix.f;
            var endCharIndex = json.endCharIndex = textPage.GetIndexAtPos(fx, fy, 2);

            if (endCharIndex !== -1) {
                var _textRectCount = textPage.GetTextRectCount(endCharIndex, 1);
                var _rect2 = textPage.GetTextRect(0);
                var _rotation = textPage.GetBaselineRotation(0);

                json.endCharInfo = {
                    charIndex: endCharIndex,
                    left: _rect2.left,
                    right: _rect2.right,
                    top: _rect2.top,
                    bottom: _rect2.bottom,
                    rotation: _rotation.value
                };
            }
        }
        json.quadPoints = quadPointArr;
        if (json.startCharIndex > json.endCharIndex) {
            var temp = json.startCharIndex;
            json.startCharIndex = json.endCharIndex;
            json.endCharIndex = temp;

            temp = json.startCharInfo;
            json.startCharInfo = json.endCharInfo;
            json.endCharInfo = temp;
        }
        if (json.startCharIndex === -1 || json.endCharIndex === -1) {
            isArea = true;
        } else {
            json.continuousText = textPage.GetChars(json.startCharIndex, json.endCharIndex - json.startCharIndex + 1);
        }
        json.continuousText = json.continuousText || json.text;
        json.isArea = isArea;
        return json;
        //let matrix = annot.GetDict().GetMatrix();
        //json.matrix = [matrix.a, matrix.b, matrix.c, matrix.d, matrix.e, matrix.f];

        //if (!quadPointCount) {
        //    json.startCharIndex = -1;
        //    json.endCharIndex = -1;
        //
        //    return json;
        //}
        //
        //for (let i = 0; i < quadPointCount; i++) {
        //
        //}
        //let tolerance = 3;
        //for(let i = 0; i<quadPointCount;i++){
        //    let quadPoinst =  quadPoints.GetAt(i);
        //
        //    let firstQuad = quadPoinst;
        //    try{
        //        let rect = new this.engine.CFX_FloatRect(firstQuad.first.x,
        //            firstQuad.fourth.y,firstQuad.fourth.x,firstQuad.first.y)
        //        rect.Normalize()
        //        console.log('textPage.GetTextInRect', textPage.GetTextInRect(rect).toString())
        //    } catch (e){
        //        console.error('textPage.GetTextInRect', e)
        //    }
        //    let lastQuad = quadPoinst;
        //
        //    let leftTopPoints = quadPoinst.first;
        //    let rightBottomPoints = quadPoinst.fourth;
        //
        //    let leftTopPointF = new engine.PointF(leftTopPoints.x + 2, (leftTopPoints.y + firstQuad.third.y) / 2);
        //    let rightBottomPointF = new engine.PointF(rightBottomPoints.x - 2, (rightBottomPoints.y + lastQuad.second.y) / 2);
        //    let leftTopCharIndex = textPage.GetIndexAtPos(leftTopPointF.x, leftTopPointF.y, tolerance /* tolerance */)
        //    let rightBottomCharIndex = textPage.GetIndexAtPos(rightBottomPointF.x, rightBottomPointF.y, tolerance /* tolerance */)
        //
        //    json.startCharIndex = json.startCharIndex||leftTopCharIndex;
        //    if(!json.endCharIndex || rightBottomCharIndex != -1){
        //        json.endCharIndex = rightBottomCharIndex;
        //    }
        //
        //    if (leftTopCharIndex !== -1 && rightBottomCharIndex !== -1) {
        //        let annotQuadRect = new this.engine.CFX_FloatRect(firstQuad.first.x,
        //            firstQuad.fourth.y,firstQuad.fourth.x,firstQuad.first.y);
        //
        //        let textRectCount = textPage.GetTextRectCount(leftTopCharIndex, rightBottomCharIndex - leftTopCharIndex + 1);
        //
        //        let outRect = new this.engine.CFX_FloatRect(10000,10000,0,0);
        //        for (let i = 0, j = textRectCount; i < j; i++) {
        //            let textRect = textPage.GetTextRect(i);
        //            console.log(textRect.left, textRect.top, textRect.right, textRect.bottom)
        //
        //            if(textRect.left<outRect.left){
        //                outRect.left = textRect.left;
        //            }
        //            if(textRect.right>outRect.right){
        //                outRect.right = textRect.right;
        //            }
        //            if(textRect.top>outRect.top){
        //                outRect.top = textRect.top;
        //            }
        //            if(textRect.bottom<outRect.bottom){
        //                outRect.bottom = textRect.bottom;
        //            }
        //        }
        //
        //        if(!((outRect.left - annotQuadRect.left)<tolerance)
        //        || !((outRect.right - annotQuadRect.right)<tolerance)
        //        || !((outRect.top - annotQuadRect.top)<tolerance)
        //        || !((outRect.bottom - annotQuadRect.bottom)<tolerance)
        //        ){
        //            continue;
        //        }
        //
        //        json.text = json.text || '';
        //        let char = textPage.GetChars(leftTopCharIndex, rightBottomCharIndex - leftTopCharIndex + 1).toString();
        //        json.text += char;
        //        console.log(char)
        //    }
        //}
        //
        //if(!json.text){
        //    json.isArea = true;
        //    json.startCharIndex = -1;
        //    json.endCharIndex = -1;
        //}else if(json.endCharIndex - json.startCharIndex + 1 > json.text.length){
        //    json.text = textPage.GetChars(json.startCharIndex,
        //        json.endCharIndex - json.startCharIndex + 1).toString();
        //}
        //
        //return json;
    };

    TextMarkupAnnot.prototype.updateQuadPointsByCharIndex = function updateQuadPointsByCharIndex(startCharIndex, endCharIndex) {
        if (startCharIndex === -1 || endCharIndex === -1) {
            return false;
        }
        if (startCharIndex > endCharIndex) {
            var temp = startCharIndex;
            startCharIndex = endCharIndex;
            endCharIndex = temp;
        }
        var textPage = this.pdfPage.getNormalTextPageSync();
        var textRectCount = textPage.GetTextRectCount(startCharIndex, endCharIndex - startCharIndex + 1);
        if (textRectCount < 1) {
            return false;
        }
        var engine = this.engine;
        var quadPointsArray = new engine.QuadPointsArray();
        var QuadPoints = engine.QuadPoints;
        var PointF = engine.PointF;
        for (var i = 0, j = textRectCount; i < j; i++) {
            var textRect = textPage.GetTextRect(i);
            var rotation = textPage.GetBaselineRotation(i);
            var matrix = new engine.Matrix();
            var top = textRect.top;
            var right = textRect.right;
            var bottom = textRect.bottom;
            var left = textRect.left;
            //matrix.translate(left, top);
            //matrix.rotate(rotation / Math.PI * 180);
            //let rightTop = [matrix.a * right + matrix.c * top + matrix.e, matrix.b * right + matrix.d * top + matrix.f]
            //let leftBottom = [matrix.a * left + matrix.c * bottom + matrix.e, matrix.b * left + matrix.d * bottom + matrix.f]
            //let rightBottom = [matrix.a * right + matrix.c * bottom + matrix.e, matrix.b * right + matrix.d * bottom + matrix.f]
            var quadPointArray = [];

            var leftTop = new PointF(left, top);
            var rightTop = new PointF(right, top);
            var leftBottom = new PointF(left, bottom);
            var rightBottom = new PointF(right, bottom);

            var firstQuad = void 0;
            var secondQuad = void 0;
            var thirdQuad = void 0;
            var fourthQuad = void 0;
            switch (rotation.value % 4) {
                case 0:
                    firstQuad = leftTop;
                    secondQuad = rightTop;
                    thirdQuad = leftBottom;
                    fourthQuad = rightBottom;
                    break;
                case 1:
                    firstQuad = leftTop;
                    secondQuad = leftBottom;
                    thirdQuad = rightTop;
                    fourthQuad = rightBottom;
                    break;
                case 2:
                    firstQuad = rightBottom;
                    secondQuad = leftBottom;
                    thirdQuad = rightTop;
                    fourthQuad = leftTop;
                    break;
                case 3:
                    firstQuad = rightBottom;
                    secondQuad = rightTop;
                    thirdQuad = leftBottom;
                    fourthQuad = leftTop;
                    break;
            }
            quadPointsArray.Add(new QuadPoints(firstQuad, secondQuad, thirdQuad, fourthQuad));
        }
        var annot = this.annot;
        annot.SetQuadPoints(quadPointsArray);
        annot.ResetAppearanceStream();
        return true;
    };

    TextMarkupAnnot.prototype.create = function create(json) {
        var result = _MarkupAnnot.prototype.create.call(this, json);
        if (typeof json.startCharIndex !== 'undefined' && typeof json.endCharIndex !== 'undefined') {
            this.updateQuadPointsByCharIndex(json.startCharIndex, json.endCharIndex);
        } else if (json.coords) {
            var coords = json.coords;
            var engine = this.engine;
            var quadPointsArray = new engine.QuadPointsArray();
            var QuadPoints = engine.QuadPoints;
            var PointF = engine.PointF;

            /**
             * @type GSDK.TextPage
             */
            var c_textPage = this.pdfPage.getNormalTextPageSync();

            for (var i = 0, j = coords.length; i < j; i++) {
                var textRect = coords[i];
                var top = textRect.top;
                var right = textRect.right;
                var bottom = textRect.bottom;
                var left = textRect.left;

                var index = c_textPage.GetIndexAtPos((left + right) / 2, (bottom + top) / 2, 2);
                var rotation = 0;
                var count = c_textPage.GetTextRectCount(index, 3);
                if (count > 0) {
                    rotation = c_textPage.GetBaselineRotation(0).value;
                }
                switch (rotation) {
                    case 0:
                        quadPointsArray.Add(new QuadPoints(new PointF(left, top), new PointF(right, top), new PointF(left, bottom), new PointF(right, bottom)));
                        break;
                    case 1:
                        quadPointsArray.Add(new QuadPoints(new PointF(left, bottom), new PointF(left, top), new PointF(right, bottom), new PointF(right, top)));

                        break;
                    case 2:
                        quadPointsArray.Add(new QuadPoints(new PointF(right, bottom), new PointF(left, bottom), new PointF(right, top), new PointF(left, top)));
                        break;
                    case 3:
                        quadPointsArray.Add(new QuadPoints(new PointF(right, top), new PointF(right, bottom), new PointF(left, top), new PointF(left, bottom)));
                        break;
                }
            }
            var annot = this.annot;
            annot.SetQuadPoints(quadPointsArray);
            annot.ResetAppearanceStream();
        }
        return result;
    };

    return TextMarkupAnnot;
}(_MarkupAnnot3.default);

exports.default = TextMarkupAnnot;

/***/ }),

/***/ "./src/pdf-jr/annot/Underline.js":
/*!***************************************!*\
  !*** ./src/pdf-jr/annot/Underline.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _TextMarkupAnnot2 = __webpack_require__(/*! ./TextMarkupAnnot */ "./src/pdf-jr/annot/TextMarkupAnnot.js");

var _TextMarkupAnnot3 = _interopRequireDefault(_TextMarkupAnnot2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var Underline = function (_TextMarkupAnnot) {
    _inherits(Underline, _TextMarkupAnnot);

    function Underline(annot, pdfPage) {
        _classCallCheck(this, Underline);

        var _this = _possibleConstructorReturn(this, _TextMarkupAnnot.call(this, annot, pdfPage));

        _this.annot = new _this.engine.Underline(_this.annot);
        return _this;
    }

    Underline.prototype.create = function create(json) {
        var result = _TextMarkupAnnot.prototype.create.call(this, json);
        this.setBorderColor(json.color || 0x66cc33);
        return result;
    };

    return Underline;
}(_TextMarkupAnnot3.default);

exports.default = Underline;

/***/ }),

/***/ "./src/pdf-jr/annot/Widget.js":
/*!************************************!*\
  !*** ./src/pdf-jr/annot/Widget.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Annot2 = __webpack_require__(/*! ./Annot */ "./src/pdf-jr/annot/Annot.js");

var _Annot3 = _interopRequireDefault(_Annot2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var Widget = function (_Annot) {
  _inherits(Widget, _Annot);

  function Widget(engineWidget, page) {
    _classCallCheck(this, Widget);

    /**
    * @type GSDK.Widget
    **/
    var _this = _possibleConstructorReturn(this, _Annot.call(this, engineWidget, page));

    _this.engineWidget = engineWidget;

    _this.engineWidget = new _this.engine.Widget(engineWidget);
    return _this;
  }

  Widget.prototype.updateMKProperty = function updateMKProperty(key, value) {
    var dict = this.engineWidget.GetDict();

    /**
    * @type GSDK.PDFDoc
    **/
    var doc = this.pdfPage.doc;
    var strMK = new this.engine.String("MK");
    var mk = dict.GetElement(strMK).GetDict();
    if (!mk) {
      mk = this.engine.PDFDictionary.Create();
      dict.SetAtReference(strMK, doc, mk);
    }
    switch (key) {
      case 'borderColor':
        this.engineWidget.SetMKBorderColor(value);
        break;
      case 'fillColor':
        this.engineWidget.SetMKBackgroundColor(value);
        break;
      case 'normalCaption':
        this.engineWidget.SetMKNormalCaption(new this.engine.WString(value));
        break;
      case 'downCaption':
        this.engineWidget.SetMKDownCaption(new this.engine.WString(value));
        break;
      case 'rolloverCaption':
        this.engineWidget.SetMKRolloverCaption(new this.engine.WString(value));
        break;
      case 'normalIcon':
        mk.SetAtReference(new this.engine.String("I"), doc, doc.GetIndirectObject(value));
        break;
      case 'downIcon':
        mk.SetAtReference(new this.engine.String("IX"), doc, doc.GetIndirectObject(value));
        break;
      case 'rolloverIcon':
        mk.SetAtReference(new this.engine.String("RI"), doc, doc.GetIndirectObject(value));
        break;
    }
    return this.engineWidget.ResetAppearanceStream();
  };

  Widget.prototype.setAS = function setAS(AS) {
    var engineWidget = this.engineWidget;
    /**
     * @type GSDK.PDFDictionary
     */
    var widgetDictionary = engineWidget.GetDict();

    var asStr = new this.engine.String("AS");
    widgetDictionary.SetAt(asStr, this.engine.PDFObject.CreateFromName(new this.engine.String(AS)));
  };

  Widget.prototype.toJson = function toJson() {
    // common::Bitmap  GetMKDownIconBitmap ()
    // common::Bitmap  GetMKNormalIconBitmap ()
    // common::Bitmap  GetMKRolloverIconBitmap ()
    var annotJson = _Annot.prototype.toJson.call(this);
    /**
     * @type GSDK.Widget
     */
    var engineWidget = this.engineWidget;

    var field = engineWidget.GetField();
    var control = engineWidget.GetControl();

    var engineAction = engineWidget.GetAction();
    var action = '';
    if (!engineAction.IsEmpty()) {
      action = this.JR.actionManager.get(engineAction, this.doc, this.JR).toJson();
    }

    var ApStates = [];
    var ApState = void 0;
    var jsonAA = {};
    var normalIcon = void 0;
    var rolloverIcon = void 0;
    var downIcon = void 0;
    if (!engineWidget.IsEmpty()) {
      var widgetDictionary = engineWidget.GetDict();

      var AAObj = widgetDictionary.GetElement(new this.engine.String('AA'));
      if (AAObj) {
        var AADict = AAObj.GetDict();
        var AA = new this.engine.AdditionalAction(this.pdfPage.doc, AADict);
        var triggers = [this.engine.TriggerEvent.e_TriggerFieldKeyStroke, this.engine.TriggerEvent.e_TriggerFieldWillFormat, this.engine.TriggerEvent.e_TriggerFieldValueChanged, this.engine.TriggerEvent.e_TriggerFieldRecalculateValue, this.engine.TriggerEvent.e_TriggerAnnotCursorEnter, this.engine.TriggerEvent.e_TriggerAnnotCursorExit, this.engine.TriggerEvent.e_TriggerAnnotMouseButtonPressed, this.engine.TriggerEvent.e_TriggerAnnotMouseButtonReleased, this.engine.TriggerEvent.e_TriggerAnnotReceiveInputFocus, this.engine.TriggerEvent.e_TriggerAnnotLoseInputFocus];
        for (var i = 0; i < triggers.length; i++) {
          var A = AA.GetAction(triggers[i]);
          if (!A.IsEmpty()) jsonAA[triggers[i].value] = this.JR.actionManager.get(A, this, this.JR).toJson();
        }
      }

      var asStr = new this.engine.String("AS");
      if (widgetDictionary.HasKey(asStr)) {
        var AS = widgetDictionary.GetElement(asStr);
        if (AS) {
          ApState = AS.GetString().toString();
        }

        var ap = widgetDictionary.GetElement(new this.engine.String('AP'));
        ap = ap.GetDict();

        var NRef = ap.GetElement(new this.engine.String('N'));
        var NStream = NRef.GetDirectObject();
        var type = NStream.GetType();
        if (type.value == 6) {
          var NDict = NStream.GetDict();
          var pos = NDict.MoveNext(0);
          var key = void 0;
          while (pos) {
            key = NDict.GetKey(pos);
            pos = NDict.MoveNext(pos);
            ApStates.push(key.toString());
          }
        }
      }
      var mk = widgetDictionary.GetElement(new this.engine.String("MK"));
      if (mk) {
        normalIcon = mk.GetDict().GetElement(new this.engine.String("I"));
        if (normalIcon) normalIcon = normalIcon.GetDirectObject().GetObjNum();
        rolloverIcon = mk.GetDict().GetElement(new this.engine.String("RI"));
        if (rolloverIcon) rolloverIcon = rolloverIcon.GetDirectObject().GetObjNum();
        downIcon = mk.GetDict().GetElement(new this.engine.String("IX"));
        if (downIcon) downIcon = downIcon.GetDirectObject().GetObjNum();
      }
    }

    var highlightingMode = engineWidget.GetHighlightingMode();
    if (highlightingMode) {
      highlightingMode = highlightingMode.value;
    }
    var fillColor = 0;
    if (engineWidget.HasMKEntry(this.engine.MKEntry.e_MKEntryBackgroundColor)) {
      fillColor = engineWidget.GetMKBackgroundColor();
    }

    var borderColor = engineWidget.GetMKBorderColor();
    if (engineWidget.HasMKEntry(this.engine.MKEntry.e_MKEntryBorderColor) && borderColor === 0) {
      borderColor = (borderColor | 0xff000000) >>> 0;
    }
    var downCaption = engineWidget.GetMKDownCaption().toString();
    var captionRelation = engineWidget.GetMKIconCaptionRelation().value;
    var iconFit = engineWidget.GetMKIconFit();
    var normalCaption = engineWidget.GetMKNormalCaption().toString();
    var rolloverCaption = engineWidget.GetMKRolloverCaption().toString();
    var rotation = engineWidget.GetMKRotation().value;
    //let hasMK =  this.engineWidget.HasMKEntry (MKEntry mk_entry);

    var fieldName = "";
    var fieldType = 0;
    var controlIndex = void 0;
    if (!field.IsEmpty()) {
      fieldName = field.GetName().toString();
      fieldType = field.GetType().value;
      controlIndex = control.GetIndex();
    }
    return Object.assign(annotJson, {
      highlightingMode: highlightingMode,
      fillColor: fillColor,
      iconFit: {
        fitBounds: iconFit.fit_bounds,
        horizontalFraction: iconFit.horizontal_fraction,
        isProportionalScaling: iconFit.is_proportional_scaling,
        scaleWayType: iconFit.scale_way_type,
        verticalFraction: iconFit.vertical_fraction
      },
      MKBorderColor: borderColor,
      downCaption: downCaption,
      normalCaption: normalCaption,
      rolloverCaption: rolloverCaption,
      captionRelation: captionRelation,
      rotation: rotation,
      field: fieldName,
      control: controlIndex,
      fieldType: fieldType,
      action: action,
      AA: jsonAA,
      ApStates: ApStates,
      ApState: ApState,
      normalIcon: normalIcon,
      rolloverIcon: rolloverIcon,
      downIcon: downIcon
    });
  };

  return Widget;
}(_Annot3.default);

exports.default = Widget;

/***/ }),

/***/ "./src/pdf-jr/annot/annotType.js":
/*!***************************************!*\
  !*** ./src/pdf-jr/annot/annotType.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * Created by linc on 2019/1/28.
 */
function getEngineAnnotType(engine, type) {
    var AnnotType = engine.AnnotType;
    var map = {
        text: AnnotType.e_Note,
        caret: AnnotType.e_Caret,
        freetext: AnnotType.e_FreeText,
        fileattachment: AnnotType.e_FileAttachment,
        highlight: AnnotType.e_Highlight,
        ink: AnnotType.e_Ink,
        line: AnnotType.e_Line,
        link: AnnotType.e_Link,
        circle: AnnotType.e_Circle,
        square: AnnotType.e_Square,
        polygon: AnnotType.e_Polygon,
        polyline: AnnotType.e_PolyLine,
        sound: AnnotType.e_Sound,
        squiggly: AnnotType.e_Squiggly,
        stamp: AnnotType.e_Stamp,
        strikeout: AnnotType.e_StrikeOut,
        underline: AnnotType.e_Underline,
        redact: AnnotType.e_Redact,
        popup: AnnotType.e_Popup,
        psink: AnnotType.e_PSInk,
        movie: AnnotType.e_Movie,
        widget: AnnotType.e_Widget,
        screen: AnnotType.e_Screen,
        printermark: AnnotType.e_PrinterMark,
        trapnet: AnnotType.e_TrapNet,
        watermark: AnnotType.e_Watermark,
        '3d': AnnotType.e_3D
    };
    return map[type] || AnnotType.e_UnknownType;
}

exports.getEngineAnnotType = getEngineAnnotType;

/***/ }),

/***/ "./src/pdf-jr/base/Destination.js":
/*!****************************************!*\
  !*** ./src/pdf-jr/base/Destination.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Destination = function () {
    function Destination(destination, doc, engine) {
        _classCallCheck(this, Destination);

        this.doc = doc;
        if (!(doc instanceof engine.PDFDoc)) {
            this.doc = doc.doc;
        }
        this.engine = engine;
        this.destination = destination;
    }

    Destination.createFitBBox = function createFitBBox(engine, pdfDoc, data) {
        return engine.Destination.CreateFitBBox(pdfDoc, data.pageIndex);
    };

    Destination.createFitBHorz = function createFitBHorz(engine, pdfDoc, data) {
        return engine.Destination.CreateFitBHorz(pdfDoc, data.pageIndex, data.top);
    };

    Destination.createFitBVert = function createFitBVert(engine, pdfDoc, data) {
        return engine.Destination.CreateFitBHorz(pdfDoc, data.pageIndex, data.left);
    };

    Destination.createFitHorz = function createFitHorz(engine, pdfDoc, data) {
        return engine.Destination.CreateFitHorz(pdfDoc, data.pageIndex, data.top);
    };

    Destination.createFitPage = function createFitPage(engine, pdfDoc, data) {
        return engine.Destination.CreateFitPage(pdfDoc, data.pageIndex);
    };

    Destination.createFitRect = function createFitRect(engine, pdfDoc, data) {
        return engine.Destination.CreateFitRect(pdfDoc, data.pageIndex, data.left, data.bottom, data.right, data.top);
    };

    Destination.createFitVert = function createFitVert(engine, pdfDoc, data) {
        return engine.Destination.CreateFitVert(pdfDoc, data.pageIndex, data.left);
    };

    Destination.createFromPDFArray = function createFromPDFArray(engine, pdfDoc, data) {
        return engine.Destination.CreateFromPDFArray(pdfDoc, data.pdfArray);
    };

    Destination.createXYZ = function createXYZ(engine, pdfDoc, data) {
        return engine.Destination.CreateXYZ(pdfDoc, data.pageIndex, data.left, data.top, data.zoomFactor);
    };

    Destination.prototype.toJson = function toJson() {
        var destination = null;
        if (!this.destination.IsEmpty()) {
            destination = {
                top: this.getTop(),
                bottom: this.getBottom(),
                left: this.getLeft(),
                right: this.getRight(),
                pageIndex: this.getPageIndex(),
                // destArray:this.getDestArray(),
                zoomFactor: this.getZoomFactor(),
                zoomMode: this.getZoomMode()
            };
        }
        return destination;
    };

    Destination.prototype.getTop = function getTop() {
        return this.destination.GetTop();
    };

    Destination.prototype.getBottom = function getBottom() {
        return this.destination.GetBottom();
    };

    Destination.prototype.getLeft = function getLeft() {
        return this.destination.GetLeft();
    };

    Destination.prototype.getRight = function getRight() {
        return this.destination.GetRight();
    };

    Destination.prototype.getPageIndex = function getPageIndex() {
        return this.destination.GetPageIndex(this.doc);
    };

    Destination.prototype.getDestArray = function getDestArray() {
        return this.destination.GetDestArray();
    };

    Destination.prototype.getZoomFactor = function getZoomFactor() {
        return this.destination.GetZoomFactor();
    };

    Destination.prototype.getZoomMode = function getZoomMode() {
        return this.destination.GetZoomMode().constructor.name.replace(/^e_/, '');
    };

    return Destination;
}();

exports.default = Destination;

/***/ }),

/***/ "./src/pdf-jr/base/FileSpec.js":
/*!*************************************!*\
  !*** ./src/pdf-jr/base/FileSpec.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _LoggerFactory = __webpack_require__(/*! ../../shared/logger/LoggerFactory */ "./src/shared/logger/LoggerFactory.js");

var _LoggerFactory2 = _interopRequireDefault(_LoggerFactory);

var _createDeferred = __webpack_require__(/*! ../../shared/createDeferred */ "./src/shared/createDeferred.js");

var _createDeferred2 = _interopRequireDefault(_createDeferred);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var logger = _LoggerFactory2.default.getLogger('pdf-jr.FileSpec');

var FileSpec = function () {
    FileSpec.createFile = function createFile(engine, doc, fileBuffer) {
        var fileSpec = new engine.FileSpec(doc);
        fileSpec.Embed(engine.StreamCallback.implement({
            Release: function Release() {
                release();
            },
            GetSize: function GetSize() {
                return fileBuffer.byteLength;
            },
            ReadBlock: function ReadBlock(buffer, offset, size) {
                var src = fileBuffer.slice(offset, offset + size);
                engine.HEAPU8.set(src, buffer);
                return true;
            }
        }));
        return fileSpec;
    };

    function FileSpec(fileSpec, parent) {
        _classCallCheck(this, FileSpec);

        this.parent = parent;
        this.engine = parent.engine;
        this.fileSpec = fileSpec;
    }

    FileSpec.prototype.toJson = function toJson() {
        var fileSpec = null;
        if (!this.fileSpec.IsEmpty()) {
            fileSpec = {
                //checksum:this.getChecksum(),
                //creationDateTime:this.getCreationDateTime(),
                description: this.getDescription(),
                dict: this.getDict(),
                fileData: this.getFileData(),
                fileName: this.getFileName(),
                fileSize: this.getFileSize(),
                //modifiedDateTime:this.getModifiedDateTime(),
                subtype: this.getSubtype(),
                isEmbedded: this.isEmbedded()
            };
        }
        return fileSpec;
    };

    FileSpec.prototype.gtAssociteFileRelationship = function gtAssociteFileRelationship() {
        return this.fileSpec.GetAssociteFileRelationship();
    };

    FileSpec.prototype.getChecksum = function getChecksum() {
        var checksum = this.fileSpec.GetChecksum();
        if (checksum.GetLength() === 0) {
            return null;
        } else {
            return checksum.toString();
        }
    };

    FileSpec.prototype.getCreationDateTime = function getCreationDateTime() {
        try {
            var createTime = this.fileSpec.GetCreationDateTime();
            if (createTime.IsValid()) {
                return createTime;
            } else {
                return null;
            }
        } catch (e) {
            var engine = this.engine;
            var errorCode = e instanceof engine.ErrorCode ? e : engine.getErrorCode(e);
            logger.warn(errorCode);
        }
    };

    FileSpec.prototype.getDescription = function getDescription() {
        var des = this.fileSpec.GetDescription();
        if (des.GetLength() === 0) {
            return null;
        } else {
            return des.toString();
        }
    };

    FileSpec.prototype.getDict = function getDict() {
        var dict = this.fileSpec.GetDict();
        return dict;
    };

    FileSpec.prototype.getFileData = function getFileData() {
        var fileData = this.fileSpec.GetFileData();
        return fileData;
    };

    FileSpec.prototype.getFileName = function getFileName() {
        var name = this.fileSpec.GetFileName();
        if (name.GetLength() === 0) {
            return null;
        } else {
            return name.toString();
        }
    };

    FileSpec.prototype.getFileSize = function getFileSize() {
        var fileSize = this.fileSpec.GetFileSize();
        return fileSize;
    };

    FileSpec.prototype.getModifiedDateTime = function getModifiedDateTime() {
        var modifiedTime = this.fileSpec.GetModifiedDateTime();
        if (modifiedTime.IsValid()) {
            return modifiedTime;
        } else {
            return null;
        }
    };

    FileSpec.prototype.getSubtype = function getSubtype() {
        var subtype = this.fileSpec.GetSubtype();
        if (subtype.GetLength() === 0) {
            return null;
        } else {
            return subtype.toString();
        }
    };

    FileSpec.prototype.isEmbedded = function isEmbedded() {
        return this.fileSpec.IsEmbedded();
    };

    FileSpec.prototype.setAssociteFileRelationship = function setAssociteFileRelationship(relationship) {
        this.fileSpec.SetAssociteFileRelationship(relationship);
    };

    FileSpec.prototype.setChecksum = function setChecksum(checksum) {
        this.fileSpec.SetChecksum(checksum);
    };

    FileSpec.prototype.setCreationDateTime = function setCreationDateTime(dateTime) {
        this.fileSpec.SetCreationDateTime(dateTime);
    };

    FileSpec.prototype.setDescription = function setDescription(description) {
        this.fileSpec.SetDescription(description);
    };

    FileSpec.prototype.setFileName = function setFileName(fileName) {
        this.fileSpec.SetFileName(new this.engine.WString(fileName));
    };

    FileSpec.prototype.setModifiedDateTime = function setModifiedDateTime(dateTime) {
        this.fileSpec.SetModifiedDateTime(dateTime);
    };

    FileSpec.prototype.setSubtype = function setSubtype(subtype) {
        this.fileSpec.SetSubtype(subtype);
    };

    FileSpec.prototype.getStream = function getStream(writeStream) {
        var engine = this.engine;
        var writtenSize = 0;
        var deferred = (0, _createDeferred2.default)();
        var streamCallback = engine.StreamCallback.implement({
            Release: function Release() {},
            Flush: function Flush() {
                return true;
            },
            GetSize: function GetSize() {
                return writtenSize;
            },
            WriteBlock: function WriteBlock(cursor, offset, size) {
                writtenSize += size;
                var engineBuffer = engine.HEAPU8.buffer;
                var arrayBuffer = void 0;
                if (engineBuffer.slice) {
                    arrayBuffer = engineBuffer.slice(cursor, cursor + size);
                } else {
                    arrayBuffer = new Uint8Array(engineBuffer, cursor, size).buffer;
                }
                writeStream(arrayBuffer, offset, size);
                deferred.resolve(writtenSize);
                return true;
            }
        });
        this.fileSpec.ExportToFileStream(streamCallback);
        return deferred.promise;
    };

    return FileSpec;
}();

exports.default = FileSpec;

/***/ }),

/***/ "./src/pdf-jr/base/Image.js":
/*!**********************************!*\
  !*** ./src/pdf-jr/base/Image.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Image = function () {
    Image.createImage = function createImage(engine, imageBuffer) {
        return new engine.Image(engine.ReaderCallback.implement({
            Release: function Release() {
                release();
            },
            GetSize: function GetSize() {
                return imageBuffer.byteLength;
            },
            ReadBlock: function ReadBlock(buffer, offset, size) {
                var src = imageBuffer.slice(offset, offset + size);
                engine.HEAPU8.set(src, buffer);
                return true;
            }
        }));
    };

    function Image() {
        _classCallCheck(this, Image);
    }

    return Image;
}();

exports.default = Image;

/***/ }),

/***/ "./src/pdf-jr/base/Watermark/Watermark.js":
/*!************************************************!*\
  !*** ./src/pdf-jr/base/Watermark/Watermark.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Image = __webpack_require__(/*! ../Image */ "./src/pdf-jr/base/Image.js");

var _Image2 = _interopRequireDefault(_Image);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _class = function () {
    function _class() {
        _classCallCheck(this, _class);
    }

    _class.createTextWatermark = function createTextWatermark(engine, pdfDoc, text, watermarkTextProperties, watermarkSettings) {
        return new engine.Watermark(pdfDoc, new engine.WString(text), watermarkTextProperties, watermarkSettings);
    };

    _class.createBitmapWatermark = function createBitmapWatermark(engine, pdfDoc, bitmap, watermarkSettings) {
        var image = _Image2.default.createImage(engine, bitmap),
            bmp = image.GetFrameBitmap(0);
        return new engine.Watermark(pdfDoc, bmp, watermarkSettings);
    };

    return _class;
}();

exports.default = _class;

/***/ }),

/***/ "./src/pdf-jr/base/Watermark/WatermarkSettings.js":
/*!********************************************************!*\
  !*** ./src/pdf-jr/base/Watermark/WatermarkSettings.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _class = function () {
    function _class() {
        _classCallCheck(this, _class);
    }

    /**
     * 
     * @param {GSDK} engine 
     * @param {*} position 
     * @param {*} offsetX 
     * @param {*} offsetY 
     * @param {*} flags 
     * @param {*} scaleX 
     * @param {*} scaleY 
     * @param {*} rotation 
     * @param {*} opacity 
     */
    _class.createWatermarkSettings = function createWatermarkSettings(engine, position, offsetX, offsetY, flags, scaleX, scaleY, rotation, opacity) {
        var positionType = {
            "TopLeft": engine.Position.e_PosTopLeft,
            "TopCenter": engine.Position.e_PosTopCenter,
            "TopRight": engine.Position.e_PosTopRight,
            "CenterLeft": engine.Position.e_PosCenterLeft,
            "Center": engine.Position.e_PosCenter,
            "CenterRight": engine.Position.e_PosCenterRight,
            "BottomLeft": engine.Position.e_PosBottomLeft,
            "BottomCenter": engine.Position.e_PosBottomCenter,
            "BottomRight": engine.Position.e_PosBottomRight
        },
            flagsType = {
            "0": engine.WatermarkSettingsFlags.e_FlagASPageContents,
            "1": engine.WatermarkSettingsFlags.e_FlagASAnnot,
            "2": engine.WatermarkSettingsFlags.e_FlagOnTop,
            "4": engine.WatermarkSettingsFlags.e_FlagNoPrint,
            "8": engine.WatermarkSettingsFlags.e_FlagInvisible
        };
        return new engine.WatermarkSettings(positionType[position], offsetX, offsetY, flagsType[flags].value, scaleX, scaleY, rotation, opacity);
    };

    return _class;
}();

exports.default = _class;

/***/ }),

/***/ "./src/pdf-jr/base/Watermark/WatermarkTextProperties.js":
/*!**************************************************************!*\
  !*** ./src/pdf-jr/base/Watermark/WatermarkTextProperties.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _class = function () {
    function _class() {
        _classCallCheck(this, _class);
    }

    _class.createWatermarkTextProperties = function createWatermarkTextProperties(engine, font, fontSize, color, fontStyle, lineSpace, alignment) {
        var fontType = [engine.StandardID.e_StdIDCourier, engine.StandardID.e_StdIDCourierB, engine.StandardID.e_StdIDCourierBI, engine.StandardID.e_StdIDCourierI, engine.StandardID.e_StdIDHelvetica, engine.StandardID.e_StdIDHelveticaB, engine.StandardID.e_StdIDHelveticaBI, engine.StandardID.e_StdIDHelveticaI, engine.StandardID.e_StdIDTimes, engine.StandardID.e_StdIDTimesB, engine.StandardID.e_StdIDTimesBI, engine.StandardID.e_StdIDTimesI, engine.StandardID.e_StdIDSymbol, engine.StandardID.e_StdIDZapfDingbats],
            fontStyleType = { "normal": engine.FontStyle.e_FontStyleNormal, "underline": engine.FontStyle.e_FontStyleUnderline },
            alignmentType = { "left": engine.Alignment.e_AlignmentLeft, "center": engine.Alignment.e_AlignmentCenter, "right": engine.Alignment.e_AlignmentRight };
        return new engine.WatermarkTextProperties(new engine.Font(fontType[font]), fontSize, color, fontStyleType[fontStyle.toLocaleLowerCase()], lineSpace, alignmentType[alignment.toLocaleLowerCase()]);
    };

    return _class;
}();

exports.default = _class;

/***/ }),

/***/ "./src/pdf-jr/brotli-decompress.js":
/*!*****************************************!*\
  !*** ./src/pdf-jr/brotli-decompress.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var require;var require;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (f) {
  if (( false ? undefined : _typeof(exports)) === "object" && typeof module !== "undefined") {
    module.exports = f();
  } else if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (f),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else { var g; }
})(function () {
  var define, module, exports;return function () {
    function r(e, n, t) {
      function o(i, f) {
        if (!n[i]) {
          if (!e[i]) {
            var c = "function" == typeof require && require;if (!f && c) return require(i, !0);if (u) return u(i, !0);var a = new Error("Cannot find module '" + i + "'");throw a.code = "MODULE_NOT_FOUND", a;
          }var p = n[i] = { exports: {} };e[i][0].call(p.exports, function (r) {
            var n = e[i][1][r];return o(n || r);
          }, p, p.exports, r, e, n, t);
        }return n[i].exports;
      }for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) {
        o(t[i]);
      }return o;
    }return r;
  }()({ 1: [function (require, module, exports) {
      'use strict';

      exports.byteLength = byteLength;
      exports.toByteArray = toByteArray;
      exports.fromByteArray = fromByteArray;

      var lookup = [];
      var revLookup = [];
      var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

      var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
      for (var i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      }

      // Support decoding URL-safe base64 strings, as Node.js does.
      // See: https://en.wikipedia.org/wiki/Base64#URL_applications
      revLookup['-'.charCodeAt(0)] = 62;
      revLookup['_'.charCodeAt(0)] = 63;

      function getLens(b64) {
        var len = b64.length;

        if (len % 4 > 0) {
          throw new Error('Invalid string. Length must be a multiple of 4');
        }

        // Trim off extra bytes after placeholder bytes are found
        // See: https://github.com/beatgammit/base64-js/issues/42
        var validLen = b64.indexOf('=');
        if (validLen === -1) validLen = len;

        var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;

        return [validLen, placeHoldersLen];
      }

      // base64 is 4/3 + up to two characters of the original data
      function byteLength(b64) {
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }

      function _byteLength(b64, validLen, placeHoldersLen) {
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }

      function toByteArray(b64) {
        var tmp;
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];

        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));

        var curByte = 0;

        // if there are placeholders, only get up to the last complete 4 chars
        var len = placeHoldersLen > 0 ? validLen - 4 : validLen;

        for (var i = 0; i < len; i += 4) {
          tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
          arr[curByte++] = tmp >> 16 & 0xFF;
          arr[curByte++] = tmp >> 8 & 0xFF;
          arr[curByte++] = tmp & 0xFF;
        }

        if (placeHoldersLen === 2) {
          tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
          arr[curByte++] = tmp & 0xFF;
        }

        if (placeHoldersLen === 1) {
          tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
          arr[curByte++] = tmp >> 8 & 0xFF;
          arr[curByte++] = tmp & 0xFF;
        }

        return arr;
      }

      function tripletToBase64(num) {
        return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
      }

      function encodeChunk(uint8, start, end) {
        var tmp;
        var output = [];
        for (var i = start; i < end; i += 3) {
          tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
          output.push(tripletToBase64(tmp));
        }
        return output.join('');
      }

      function fromByteArray(uint8) {
        var tmp;
        var len = uint8.length;
        var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
        var parts = [];
        var maxChunkLength = 16383; // must be multiple of 3

        // go through the array every three bytes, we'll deal with trailing stuff later
        for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
          parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
        }

        // pad the end with zeros, but make sure to not forget the extra bytes
        if (extraBytes === 1) {
          tmp = uint8[len - 1];
          parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
        } else if (extraBytes === 2) {
          tmp = (uint8[len - 2] << 8) + uint8[len - 1];
          parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
        }

        return parts.join('');
      }
    }, {}], 2: [function (require, module, exports) {
      /* Copyright 2013 Google Inc. All Rights Reserved.
      
         Licensed under the Apache License, Version 2.0 (the "License");
         you may not use this file except in compliance with the License.
         You may obtain a copy of the License at
      
         http://www.apache.org/licenses/LICENSE-2.0
      
         Unless required by applicable law or agreed to in writing, software
         distributed under the License is distributed on an "AS IS" BASIS,
         WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         See the License for the specific language governing permissions and
         limitations under the License.
      
         Bit reading helpers
      */

      var BROTLI_READ_SIZE = 4096;
      var BROTLI_IBUF_SIZE = 2 * BROTLI_READ_SIZE + 32;
      var BROTLI_IBUF_MASK = 2 * BROTLI_READ_SIZE - 1;

      var kBitMask = new Uint32Array([0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575, 2097151, 4194303, 8388607, 16777215]);

      /* Input byte buffer, consist of a ringbuffer and a "slack" region where */
      /* bytes from the start of the ringbuffer are copied. */
      function BrotliBitReader(input) {
        this.buf_ = new Uint8Array(BROTLI_IBUF_SIZE);
        this.input_ = input; /* input callback */

        this.reset();
      }

      BrotliBitReader.READ_SIZE = BROTLI_READ_SIZE;
      BrotliBitReader.IBUF_MASK = BROTLI_IBUF_MASK;

      BrotliBitReader.prototype.reset = function () {
        this.buf_ptr_ = 0; /* next input will write here */
        this.val_ = 0; /* pre-fetched bits */
        this.pos_ = 0; /* byte position in stream */
        this.bit_pos_ = 0; /* current bit-reading position in val_ */
        this.bit_end_pos_ = 0; /* bit-reading end position from LSB of val_ */
        this.eos_ = 0; /* input stream is finished */

        this.readMoreInput();
        for (var i = 0; i < 4; i++) {
          this.val_ |= this.buf_[this.pos_] << 8 * i;
          ++this.pos_;
        }

        return this.bit_end_pos_ > 0;
      };

      /* Fills up the input ringbuffer by calling the input callback.
      
         Does nothing if there are at least 32 bytes present after current position.
      
         Returns 0 if either:
          - the input callback returned an error, or
          - there is no more input and the position is past the end of the stream.
      
         After encountering the end of the input stream, 32 additional zero bytes are
         copied to the ringbuffer, therefore it is safe to call this function after
         every 32 bytes of input is read.
      */
      BrotliBitReader.prototype.readMoreInput = function () {
        if (this.bit_end_pos_ > 256) {
          return;
        } else if (this.eos_) {
          if (this.bit_pos_ > this.bit_end_pos_) throw new Error('Unexpected end of input ' + this.bit_pos_ + ' ' + this.bit_end_pos_);
        } else {
          var dst = this.buf_ptr_;
          var bytes_read = this.input_.read(this.buf_, dst, BROTLI_READ_SIZE);
          if (bytes_read < 0) {
            throw new Error('Unexpected end of input');
          }

          if (bytes_read < BROTLI_READ_SIZE) {
            this.eos_ = 1;
            /* Store 32 bytes of zero after the stream end. */
            for (var p = 0; p < 32; p++) {
              this.buf_[dst + bytes_read + p] = 0;
            }
          }

          if (dst === 0) {
            /* Copy the head of the ringbuffer to the slack region. */
            for (var p = 0; p < 32; p++) {
              this.buf_[(BROTLI_READ_SIZE << 1) + p] = this.buf_[p];
            }this.buf_ptr_ = BROTLI_READ_SIZE;
          } else {
            this.buf_ptr_ = 0;
          }

          this.bit_end_pos_ += bytes_read << 3;
        }
      };

      /* Guarantees that there are at least 24 bits in the buffer. */
      BrotliBitReader.prototype.fillBitWindow = function () {
        while (this.bit_pos_ >= 8) {
          this.val_ >>>= 8;
          this.val_ |= this.buf_[this.pos_ & BROTLI_IBUF_MASK] << 24;
          ++this.pos_;
          this.bit_pos_ = this.bit_pos_ - 8 >>> 0;
          this.bit_end_pos_ = this.bit_end_pos_ - 8 >>> 0;
        }
      };

      /* Reads the specified number of bits from Read Buffer. */
      BrotliBitReader.prototype.readBits = function (n_bits) {
        if (32 - this.bit_pos_ < n_bits) {
          this.fillBitWindow();
        }

        var val = this.val_ >>> this.bit_pos_ & kBitMask[n_bits];
        this.bit_pos_ += n_bits;
        return val;
      };

      module.exports = BrotliBitReader;
    }, {}], 3: [function (require, module, exports) {
      /* Copyright 2013 Google Inc. All Rights Reserved.
      
         Licensed under the Apache License, Version 2.0 (the "License");
         you may not use this file except in compliance with the License.
         You may obtain a copy of the License at
      
         http://www.apache.org/licenses/LICENSE-2.0
      
         Unless required by applicable law or agreed to in writing, software
         distributed under the License is distributed on an "AS IS" BASIS,
         WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         See the License for the specific language governing permissions and
         limitations under the License.
      
         Lookup table to map the previous two bytes to a context id.
      
         There are four different context modeling modes defined here:
           CONTEXT_LSB6: context id is the least significant 6 bits of the last byte,
           CONTEXT_MSB6: context id is the most significant 6 bits of the last byte,
           CONTEXT_UTF8: second-order context model tuned for UTF8-encoded text,
           CONTEXT_SIGNED: second-order context model tuned for signed integers.
      
         The context id for the UTF8 context model is calculated as follows. If p1
         and p2 are the previous two bytes, we calcualte the context as
      
           context = kContextLookup[p1] | kContextLookup[p2 + 256].
      
         If the previous two bytes are ASCII characters (i.e. < 128), this will be
         equivalent to
      
           context = 4 * context1(p1) + context2(p2),
      
         where context1 is based on the previous byte in the following way:
      
           0  : non-ASCII control
           1  : \t, \n, \r
           2  : space
           3  : other punctuation
           4  : " '
           5  : %
           6  : ( < [ {
           7  : ) > ] }
           8  : , ; :
           9  : .
           10 : =
           11 : number
           12 : upper-case vowel
           13 : upper-case consonant
           14 : lower-case vowel
           15 : lower-case consonant
      
         and context2 is based on the second last byte:
      
           0 : control, space
           1 : punctuation
           2 : upper-case letter, number
           3 : lower-case letter
      
         If the last byte is ASCII, and the second last byte is not (in a valid UTF8
         stream it will be a continuation byte, value between 128 and 191), the
         context is the same as if the second last byte was an ASCII control or space.
      
         If the last byte is a UTF8 lead byte (value >= 192), then the next byte will
         be a continuation byte and the context id is 2 or 3 depending on the LSB of
         the last byte and to a lesser extent on the second last byte if it is ASCII.
      
         If the last byte is a UTF8 continuation byte, the second last byte can be:
           - continuation byte: the next byte is probably ASCII or lead byte (assuming
             4-byte UTF8 characters are rare) and the context id is 0 or 1.
           - lead byte (192 - 207): next byte is ASCII or lead byte, context is 0 or 1
           - lead byte (208 - 255): next byte is continuation byte, context is 2 or 3
      
         The possible value combinations of the previous two bytes, the range of
         context ids and the type of the next byte is summarized in the table below:
      
         |--------\-----------------------------------------------------------------|
         |         \                         Last byte                              |
         | Second   \---------------------------------------------------------------|
         | last byte \    ASCII            |   cont. byte        |   lead byte      |
         |            \   (0-127)          |   (128-191)         |   (192-)         |
         |=============|===================|=====================|==================|
         |  ASCII      | next: ASCII/lead  |  not valid          |  next: cont.     |
         |  (0-127)    | context: 4 - 63   |                     |  context: 2 - 3  |
         |-------------|-------------------|---------------------|------------------|
         |  cont. byte | next: ASCII/lead  |  next: ASCII/lead   |  next: cont.     |
         |  (128-191)  | context: 4 - 63   |  context: 0 - 1     |  context: 2 - 3  |
         |-------------|-------------------|---------------------|------------------|
         |  lead byte  | not valid         |  next: ASCII/lead   |  not valid       |
         |  (192-207)  |                   |  context: 0 - 1     |                  |
         |-------------|-------------------|---------------------|------------------|
         |  lead byte  | not valid         |  next: cont.        |  not valid       |
         |  (208-)     |                   |  context: 2 - 3     |                  |
         |-------------|-------------------|---------------------|------------------|
      
         The context id for the signed context mode is calculated as:
      
           context = (kContextLookup[512 + p1] << 3) | kContextLookup[512 + p2].
      
         For any context modeling modes, the context ids can be calculated by |-ing
         together two lookups from one table using context model dependent offsets:
      
           context = kContextLookup[offset1 + p1] | kContextLookup[offset2 + p2].
      
         where offset1 and offset2 are dependent on the context mode.
      */

      var CONTEXT_LSB6 = 0;
      var CONTEXT_MSB6 = 1;
      var CONTEXT_UTF8 = 2;
      var CONTEXT_SIGNED = 3;

      /* Common context lookup table for all context modes. */
      exports.lookup = new Uint8Array([
      /* CONTEXT_UTF8, last byte. */
      /* ASCII range. */
      0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 12, 16, 12, 12, 20, 12, 16, 24, 28, 12, 12, 32, 12, 36, 12, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 32, 32, 24, 40, 28, 12, 12, 48, 52, 52, 52, 48, 52, 52, 52, 48, 52, 52, 52, 52, 52, 48, 52, 52, 52, 52, 52, 48, 52, 52, 52, 52, 52, 24, 12, 28, 12, 12, 12, 56, 60, 60, 60, 56, 60, 60, 60, 56, 60, 60, 60, 60, 60, 56, 60, 60, 60, 60, 60, 56, 60, 60, 60, 60, 60, 24, 12, 28, 12, 0,
      /* UTF8 continuation byte range. */
      0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
      /* UTF8 lead byte range. */
      2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
      /* CONTEXT_UTF8 second last byte. */
      /* ASCII range. */
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 0,
      /* UTF8 continuation byte range. */
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      /* UTF8 lead byte range. */
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
      /* CONTEXT_SIGNED, second last byte. */
      0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7,
      /* CONTEXT_SIGNED, last byte, same as the above values shifted by 3 bits. */
      0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 56,
      /* CONTEXT_LSB6, last byte. */
      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
      /* CONTEXT_MSB6, last byte. */
      0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 40, 40, 40, 40, 41, 41, 41, 41, 42, 42, 42, 42, 43, 43, 43, 43, 44, 44, 44, 44, 45, 45, 45, 45, 46, 46, 46, 46, 47, 47, 47, 47, 48, 48, 48, 48, 49, 49, 49, 49, 50, 50, 50, 50, 51, 51, 51, 51, 52, 52, 52, 52, 53, 53, 53, 53, 54, 54, 54, 54, 55, 55, 55, 55, 56, 56, 56, 56, 57, 57, 57, 57, 58, 58, 58, 58, 59, 59, 59, 59, 60, 60, 60, 60, 61, 61, 61, 61, 62, 62, 62, 62, 63, 63, 63, 63,
      /* CONTEXT_{M,L}SB6, second last byte, */
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);

      exports.lookupOffsets = new Uint16Array([
      /* CONTEXT_LSB6 */
      1024, 1536,
      /* CONTEXT_MSB6 */
      1280, 1536,
      /* CONTEXT_UTF8 */
      0, 256,
      /* CONTEXT_SIGNED */
      768, 512]);
    }, {}], 4: [function (require, module, exports) {
      /* Copyright 2013 Google Inc. All Rights Reserved.
      
         Licensed under the Apache License, Version 2.0 (the "License");
         you may not use this file except in compliance with the License.
         You may obtain a copy of the License at
      
         http://www.apache.org/licenses/LICENSE-2.0
      
         Unless required by applicable law or agreed to in writing, software
         distributed under the License is distributed on an "AS IS" BASIS,
         WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         See the License for the specific language governing permissions and
         limitations under the License.
      */

      var BrotliInput = require('./streams').BrotliInput;
      var BrotliOutput = require('./streams').BrotliOutput;
      var BrotliBitReader = require('./bit_reader');
      var BrotliDictionary = require('./dictionary');
      var HuffmanCode = require('./huffman').HuffmanCode;
      var BrotliBuildHuffmanTable = require('./huffman').BrotliBuildHuffmanTable;
      var Context = require('./context');
      var Prefix = require('./prefix');
      var Transform = require('./transform');

      var kDefaultCodeLength = 8;
      var kCodeLengthRepeatCode = 16;
      var kNumLiteralCodes = 256;
      var kNumInsertAndCopyCodes = 704;
      var kNumBlockLengthCodes = 26;
      var kLiteralContextBits = 6;
      var kDistanceContextBits = 2;

      var HUFFMAN_TABLE_BITS = 8;
      var HUFFMAN_TABLE_MASK = 0xff;
      /* Maximum possible Huffman table size for an alphabet size of 704, max code
       * length 15 and root table bits 8. */
      var HUFFMAN_MAX_TABLE_SIZE = 1080;

      var CODE_LENGTH_CODES = 18;
      var kCodeLengthCodeOrder = new Uint8Array([1, 2, 3, 4, 0, 5, 17, 6, 16, 7, 8, 9, 10, 11, 12, 13, 14, 15]);

      var NUM_DISTANCE_SHORT_CODES = 16;
      var kDistanceShortCodeIndexOffset = new Uint8Array([3, 2, 1, 0, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2]);

      var kDistanceShortCodeValueOffset = new Int8Array([0, 0, 0, 0, -1, 1, -2, 2, -3, 3, -1, 1, -2, 2, -3, 3]);

      var kMaxHuffmanTableSize = new Uint16Array([256, 402, 436, 468, 500, 534, 566, 598, 630, 662, 694, 726, 758, 790, 822, 854, 886, 920, 952, 984, 1016, 1048, 1080]);

      function DecodeWindowBits(br) {
        var n;
        if (br.readBits(1) === 0) {
          return 16;
        }

        n = br.readBits(3);
        if (n > 0) {
          return 17 + n;
        }

        n = br.readBits(3);
        if (n > 0) {
          return 8 + n;
        }

        return 17;
      }

      /* Decodes a number in the range [0..255], by reading 1 - 11 bits. */
      function DecodeVarLenUint8(br) {
        if (br.readBits(1)) {
          var nbits = br.readBits(3);
          if (nbits === 0) {
            return 1;
          } else {
            return br.readBits(nbits) + (1 << nbits);
          }
        }
        return 0;
      }

      function MetaBlockLength() {
        this.meta_block_length = 0;
        this.input_end = 0;
        this.is_uncompressed = 0;
        this.is_metadata = false;
      }

      function DecodeMetaBlockLength(br) {
        var out = new MetaBlockLength();
        var size_nibbles;
        var size_bytes;
        var i;

        out.input_end = br.readBits(1);
        if (out.input_end && br.readBits(1)) {
          return out;
        }

        size_nibbles = br.readBits(2) + 4;
        if (size_nibbles === 7) {
          out.is_metadata = true;

          if (br.readBits(1) !== 0) throw new Error('Invalid reserved bit');

          size_bytes = br.readBits(2);
          if (size_bytes === 0) return out;

          for (i = 0; i < size_bytes; i++) {
            var next_byte = br.readBits(8);
            if (i + 1 === size_bytes && size_bytes > 1 && next_byte === 0) throw new Error('Invalid size byte');

            out.meta_block_length |= next_byte << i * 8;
          }
        } else {
          for (i = 0; i < size_nibbles; ++i) {
            var next_nibble = br.readBits(4);
            if (i + 1 === size_nibbles && size_nibbles > 4 && next_nibble === 0) throw new Error('Invalid size nibble');

            out.meta_block_length |= next_nibble << i * 4;
          }
        }

        ++out.meta_block_length;

        if (!out.input_end && !out.is_metadata) {
          out.is_uncompressed = br.readBits(1);
        }

        return out;
      }

      /* Decodes the next Huffman code from bit-stream. */
      function ReadSymbol(table, index, br) {
        var start_index = index;

        var nbits;
        br.fillBitWindow();
        index += br.val_ >>> br.bit_pos_ & HUFFMAN_TABLE_MASK;
        nbits = table[index].bits - HUFFMAN_TABLE_BITS;
        if (nbits > 0) {
          br.bit_pos_ += HUFFMAN_TABLE_BITS;
          index += table[index].value;
          index += br.val_ >>> br.bit_pos_ & (1 << nbits) - 1;
        }
        br.bit_pos_ += table[index].bits;
        return table[index].value;
      }

      function ReadHuffmanCodeLengths(code_length_code_lengths, num_symbols, code_lengths, br) {
        var symbol = 0;
        var prev_code_len = kDefaultCodeLength;
        var repeat = 0;
        var repeat_code_len = 0;
        var space = 32768;

        var table = [];
        for (var i = 0; i < 32; i++) {
          table.push(new HuffmanCode(0, 0));
        }BrotliBuildHuffmanTable(table, 0, 5, code_length_code_lengths, CODE_LENGTH_CODES);

        while (symbol < num_symbols && space > 0) {
          var p = 0;
          var code_len;

          br.readMoreInput();
          br.fillBitWindow();
          p += br.val_ >>> br.bit_pos_ & 31;
          br.bit_pos_ += table[p].bits;
          code_len = table[p].value & 0xff;
          if (code_len < kCodeLengthRepeatCode) {
            repeat = 0;
            code_lengths[symbol++] = code_len;
            if (code_len !== 0) {
              prev_code_len = code_len;
              space -= 32768 >> code_len;
            }
          } else {
            var extra_bits = code_len - 14;
            var old_repeat;
            var repeat_delta;
            var new_len = 0;
            if (code_len === kCodeLengthRepeatCode) {
              new_len = prev_code_len;
            }
            if (repeat_code_len !== new_len) {
              repeat = 0;
              repeat_code_len = new_len;
            }
            old_repeat = repeat;
            if (repeat > 0) {
              repeat -= 2;
              repeat <<= extra_bits;
            }
            repeat += br.readBits(extra_bits) + 3;
            repeat_delta = repeat - old_repeat;
            if (symbol + repeat_delta > num_symbols) {
              throw new Error('[ReadHuffmanCodeLengths] symbol + repeat_delta > num_symbols');
            }

            for (var x = 0; x < repeat_delta; x++) {
              code_lengths[symbol + x] = repeat_code_len;
            }symbol += repeat_delta;

            if (repeat_code_len !== 0) {
              space -= repeat_delta << 15 - repeat_code_len;
            }
          }
        }
        if (space !== 0) {
          throw new Error("[ReadHuffmanCodeLengths] space = " + space);
        }

        for (; symbol < num_symbols; symbol++) {
          code_lengths[symbol] = 0;
        }
      }

      function ReadHuffmanCode(alphabet_size, tables, table, br) {
        var table_size = 0;
        var simple_code_or_skip;
        var code_lengths = new Uint8Array(alphabet_size);

        br.readMoreInput();

        /* simple_code_or_skip is used as follows:
           1 for simple code;
           0 for no skipping, 2 skips 2 code lengths, 3 skips 3 code lengths */
        simple_code_or_skip = br.readBits(2);
        if (simple_code_or_skip === 1) {
          /* Read symbols, codes & code lengths directly. */
          var i;
          var max_bits_counter = alphabet_size - 1;
          var max_bits = 0;
          var symbols = new Int32Array(4);
          var num_symbols = br.readBits(2) + 1;
          while (max_bits_counter) {
            max_bits_counter >>= 1;
            ++max_bits;
          }

          for (i = 0; i < num_symbols; ++i) {
            symbols[i] = br.readBits(max_bits) % alphabet_size;
            code_lengths[symbols[i]] = 2;
          }
          code_lengths[symbols[0]] = 1;
          switch (num_symbols) {
            case 1:
              break;
            case 3:
              if (symbols[0] === symbols[1] || symbols[0] === symbols[2] || symbols[1] === symbols[2]) {
                throw new Error('[ReadHuffmanCode] invalid symbols');
              }
              break;
            case 2:
              if (symbols[0] === symbols[1]) {
                throw new Error('[ReadHuffmanCode] invalid symbols');
              }

              code_lengths[symbols[1]] = 1;
              break;
            case 4:
              if (symbols[0] === symbols[1] || symbols[0] === symbols[2] || symbols[0] === symbols[3] || symbols[1] === symbols[2] || symbols[1] === symbols[3] || symbols[2] === symbols[3]) {
                throw new Error('[ReadHuffmanCode] invalid symbols');
              }

              if (br.readBits(1)) {
                code_lengths[symbols[2]] = 3;
                code_lengths[symbols[3]] = 3;
              } else {
                code_lengths[symbols[0]] = 2;
              }
              break;
          }
        } else {
          /* Decode Huffman-coded code lengths. */
          var i;
          var code_length_code_lengths = new Uint8Array(CODE_LENGTH_CODES);
          var space = 32;
          var num_codes = 0;
          /* Static Huffman code for the code length code lengths */
          var huff = [new HuffmanCode(2, 0), new HuffmanCode(2, 4), new HuffmanCode(2, 3), new HuffmanCode(3, 2), new HuffmanCode(2, 0), new HuffmanCode(2, 4), new HuffmanCode(2, 3), new HuffmanCode(4, 1), new HuffmanCode(2, 0), new HuffmanCode(2, 4), new HuffmanCode(2, 3), new HuffmanCode(3, 2), new HuffmanCode(2, 0), new HuffmanCode(2, 4), new HuffmanCode(2, 3), new HuffmanCode(4, 5)];
          for (i = simple_code_or_skip; i < CODE_LENGTH_CODES && space > 0; ++i) {
            var code_len_idx = kCodeLengthCodeOrder[i];
            var p = 0;
            var v;
            br.fillBitWindow();
            p += br.val_ >>> br.bit_pos_ & 15;
            br.bit_pos_ += huff[p].bits;
            v = huff[p].value;
            code_length_code_lengths[code_len_idx] = v;
            if (v !== 0) {
              space -= 32 >> v;
              ++num_codes;
            }
          }

          if (!(num_codes === 1 || space === 0)) throw new Error('[ReadHuffmanCode] invalid num_codes or space');

          ReadHuffmanCodeLengths(code_length_code_lengths, alphabet_size, code_lengths, br);
        }

        table_size = BrotliBuildHuffmanTable(tables, table, HUFFMAN_TABLE_BITS, code_lengths, alphabet_size);

        if (table_size === 0) {
          throw new Error("[ReadHuffmanCode] BuildHuffmanTable failed: ");
        }

        return table_size;
      }

      function ReadBlockLength(table, index, br) {
        var code;
        var nbits;
        code = ReadSymbol(table, index, br);
        nbits = Prefix.kBlockLengthPrefixCode[code].nbits;
        return Prefix.kBlockLengthPrefixCode[code].offset + br.readBits(nbits);
      }

      function TranslateShortCodes(code, ringbuffer, index) {
        var val;
        if (code < NUM_DISTANCE_SHORT_CODES) {
          index += kDistanceShortCodeIndexOffset[code];
          index &= 3;
          val = ringbuffer[index] + kDistanceShortCodeValueOffset[code];
        } else {
          val = code - NUM_DISTANCE_SHORT_CODES + 1;
        }
        return val;
      }

      function MoveToFront(v, index) {
        var value = v[index];
        var i = index;
        for (; i; --i) {
          v[i] = v[i - 1];
        }v[0] = value;
      }

      function InverseMoveToFrontTransform(v, v_len) {
        var mtf = new Uint8Array(256);
        var i;
        for (i = 0; i < 256; ++i) {
          mtf[i] = i;
        }
        for (i = 0; i < v_len; ++i) {
          var index = v[i];
          v[i] = mtf[index];
          if (index) MoveToFront(mtf, index);
        }
      }

      /* Contains a collection of huffman trees with the same alphabet size. */
      function HuffmanTreeGroup(alphabet_size, num_htrees) {
        this.alphabet_size = alphabet_size;
        this.num_htrees = num_htrees;
        this.codes = new Array(num_htrees + num_htrees * kMaxHuffmanTableSize[alphabet_size + 31 >>> 5]);
        this.htrees = new Uint32Array(num_htrees);
      }

      HuffmanTreeGroup.prototype.decode = function (br) {
        var i;
        var table_size;
        var next = 0;
        for (i = 0; i < this.num_htrees; ++i) {
          this.htrees[i] = next;
          table_size = ReadHuffmanCode(this.alphabet_size, this.codes, next, br);
          next += table_size;
        }
      };

      function DecodeContextMap(context_map_size, br) {
        var out = { num_htrees: null, context_map: null };
        var use_rle_for_zeros;
        var max_run_length_prefix = 0;
        var table;
        var i;

        br.readMoreInput();
        var num_htrees = out.num_htrees = DecodeVarLenUint8(br) + 1;

        var context_map = out.context_map = new Uint8Array(context_map_size);
        if (num_htrees <= 1) {
          return out;
        }

        use_rle_for_zeros = br.readBits(1);
        if (use_rle_for_zeros) {
          max_run_length_prefix = br.readBits(4) + 1;
        }

        table = [];
        for (i = 0; i < HUFFMAN_MAX_TABLE_SIZE; i++) {
          table[i] = new HuffmanCode(0, 0);
        }

        ReadHuffmanCode(num_htrees + max_run_length_prefix, table, 0, br);

        for (i = 0; i < context_map_size;) {
          var code;

          br.readMoreInput();
          code = ReadSymbol(table, 0, br);
          if (code === 0) {
            context_map[i] = 0;
            ++i;
          } else if (code <= max_run_length_prefix) {
            var reps = 1 + (1 << code) + br.readBits(code);
            while (--reps) {
              if (i >= context_map_size) {
                throw new Error("[DecodeContextMap] i >= context_map_size");
              }
              context_map[i] = 0;
              ++i;
            }
          } else {
            context_map[i] = code - max_run_length_prefix;
            ++i;
          }
        }
        if (br.readBits(1)) {
          InverseMoveToFrontTransform(context_map, context_map_size);
        }

        return out;
      }

      function DecodeBlockType(max_block_type, trees, tree_type, block_types, ringbuffers, indexes, br) {
        var ringbuffer = tree_type * 2;
        var index = tree_type;
        var type_code = ReadSymbol(trees, tree_type * HUFFMAN_MAX_TABLE_SIZE, br);
        var block_type;
        if (type_code === 0) {
          block_type = ringbuffers[ringbuffer + (indexes[index] & 1)];
        } else if (type_code === 1) {
          block_type = ringbuffers[ringbuffer + (indexes[index] - 1 & 1)] + 1;
        } else {
          block_type = type_code - 2;
        }
        if (block_type >= max_block_type) {
          block_type -= max_block_type;
        }
        block_types[tree_type] = block_type;
        ringbuffers[ringbuffer + (indexes[index] & 1)] = block_type;
        ++indexes[index];
      }

      function CopyUncompressedBlockToOutput(output, len, pos, ringbuffer, ringbuffer_mask, br) {
        var rb_size = ringbuffer_mask + 1;
        var rb_pos = pos & ringbuffer_mask;
        var br_pos = br.pos_ & BrotliBitReader.IBUF_MASK;
        var nbytes;

        /* For short lengths copy byte-by-byte */
        if (len < 8 || br.bit_pos_ + (len << 3) < br.bit_end_pos_) {
          while (len-- > 0) {
            br.readMoreInput();
            ringbuffer[rb_pos++] = br.readBits(8);
            if (rb_pos === rb_size) {
              output.write(ringbuffer, rb_size);
              rb_pos = 0;
            }
          }
          return;
        }

        if (br.bit_end_pos_ < 32) {
          throw new Error('[CopyUncompressedBlockToOutput] br.bit_end_pos_ < 32');
        }

        /* Copy remaining 0-4 bytes from br.val_ to ringbuffer. */
        while (br.bit_pos_ < 32) {
          ringbuffer[rb_pos] = br.val_ >>> br.bit_pos_;
          br.bit_pos_ += 8;
          ++rb_pos;
          --len;
        }

        /* Copy remaining bytes from br.buf_ to ringbuffer. */
        nbytes = br.bit_end_pos_ - br.bit_pos_ >> 3;
        if (br_pos + nbytes > BrotliBitReader.IBUF_MASK) {
          var tail = BrotliBitReader.IBUF_MASK + 1 - br_pos;
          for (var x = 0; x < tail; x++) {
            ringbuffer[rb_pos + x] = br.buf_[br_pos + x];
          }nbytes -= tail;
          rb_pos += tail;
          len -= tail;
          br_pos = 0;
        }

        for (var x = 0; x < nbytes; x++) {
          ringbuffer[rb_pos + x] = br.buf_[br_pos + x];
        }rb_pos += nbytes;
        len -= nbytes;

        /* If we wrote past the logical end of the ringbuffer, copy the tail of the
           ringbuffer to its beginning and flush the ringbuffer to the output. */
        if (rb_pos >= rb_size) {
          output.write(ringbuffer, rb_size);
          rb_pos -= rb_size;
          for (var x = 0; x < rb_pos; x++) {
            ringbuffer[x] = ringbuffer[rb_size + x];
          }
        }

        /* If we have more to copy than the remaining size of the ringbuffer, then we
           first fill the ringbuffer from the input and then flush the ringbuffer to
           the output */
        while (rb_pos + len >= rb_size) {
          nbytes = rb_size - rb_pos;
          if (br.input_.read(ringbuffer, rb_pos, nbytes) < nbytes) {
            throw new Error('[CopyUncompressedBlockToOutput] not enough bytes');
          }
          output.write(ringbuffer, rb_size);
          len -= nbytes;
          rb_pos = 0;
        }

        /* Copy straight from the input onto the ringbuffer. The ringbuffer will be
           flushed to the output at a later time. */
        if (br.input_.read(ringbuffer, rb_pos, len) < len) {
          throw new Error('[CopyUncompressedBlockToOutput] not enough bytes');
        }

        /* Restore the state of the bit reader. */
        br.reset();
      }

      /* Advances the bit reader position to the next byte boundary and verifies
         that any skipped bits are set to zero. */
      function JumpToByteBoundary(br) {
        var new_bit_pos = br.bit_pos_ + 7 & ~7;
        var pad_bits = br.readBits(new_bit_pos - br.bit_pos_);
        return pad_bits == 0;
      }

      function BrotliDecompressedSize(buffer) {
        var input = new BrotliInput(buffer);
        var br = new BrotliBitReader(input);
        DecodeWindowBits(br);
        var out = DecodeMetaBlockLength(br);
        return out.meta_block_length;
      }

      exports.BrotliDecompressedSize = BrotliDecompressedSize;

      function BrotliDecompressBuffer(buffer, output_size) {
        var input = new BrotliInput(buffer);

        if (output_size == null) {
          output_size = BrotliDecompressedSize(buffer);
        }

        var output_buffer = new Uint8Array(output_size);
        var output = new BrotliOutput(output_buffer);

        BrotliDecompress(input, output);

        if (output.pos < output.buffer.length) {
          output.buffer = output.buffer.subarray(0, output.pos);
        }

        return output.buffer;
      }

      exports.BrotliDecompressBuffer = BrotliDecompressBuffer;

      function BrotliDecompress(input, output) {
        var i;
        var pos = 0;
        var input_end = 0;
        var window_bits = 0;
        var max_backward_distance;
        var max_distance = 0;
        var ringbuffer_size;
        var ringbuffer_mask;
        var ringbuffer;
        var ringbuffer_end;
        /* This ring buffer holds a few past copy distances that will be used by */
        /* some special distance codes. */
        var dist_rb = [16, 15, 11, 4];
        var dist_rb_idx = 0;
        /* The previous 2 bytes used for context. */
        var prev_byte1 = 0;
        var prev_byte2 = 0;
        var hgroup = [new HuffmanTreeGroup(0, 0), new HuffmanTreeGroup(0, 0), new HuffmanTreeGroup(0, 0)];
        var block_type_trees;
        var block_len_trees;
        var br;

        /* We need the slack region for the following reasons:
             - always doing two 8-byte copies for fast backward copying
             - transforms
             - flushing the input ringbuffer when decoding uncompressed blocks */
        var kRingBufferWriteAheadSlack = 128 + BrotliBitReader.READ_SIZE;

        br = new BrotliBitReader(input);

        /* Decode window size. */
        window_bits = DecodeWindowBits(br);
        max_backward_distance = (1 << window_bits) - 16;

        ringbuffer_size = 1 << window_bits;
        ringbuffer_mask = ringbuffer_size - 1;
        ringbuffer = new Uint8Array(ringbuffer_size + kRingBufferWriteAheadSlack + BrotliDictionary.maxDictionaryWordLength);
        ringbuffer_end = ringbuffer_size;

        block_type_trees = [];
        block_len_trees = [];
        for (var x = 0; x < 3 * HUFFMAN_MAX_TABLE_SIZE; x++) {
          block_type_trees[x] = new HuffmanCode(0, 0);
          block_len_trees[x] = new HuffmanCode(0, 0);
        }

        while (!input_end) {
          var meta_block_remaining_len = 0;
          var is_uncompressed;
          var block_length = [1 << 28, 1 << 28, 1 << 28];
          var block_type = [0];
          var num_block_types = [1, 1, 1];
          var block_type_rb = [0, 1, 0, 1, 0, 1];
          var block_type_rb_index = [0];
          var distance_postfix_bits;
          var num_direct_distance_codes;
          var distance_postfix_mask;
          var num_distance_codes;
          var context_map = null;
          var context_modes = null;
          var num_literal_htrees;
          var dist_context_map = null;
          var num_dist_htrees;
          var context_offset = 0;
          var context_map_slice = null;
          var literal_htree_index = 0;
          var dist_context_offset = 0;
          var dist_context_map_slice = null;
          var dist_htree_index = 0;
          var context_lookup_offset1 = 0;
          var context_lookup_offset2 = 0;
          var context_mode;
          var htree_command;

          for (i = 0; i < 3; ++i) {
            hgroup[i].codes = null;
            hgroup[i].htrees = null;
          }

          br.readMoreInput();

          var _out = DecodeMetaBlockLength(br);
          meta_block_remaining_len = _out.meta_block_length;
          if (pos + meta_block_remaining_len > output.buffer.length) {
            /* We need to grow the output buffer to fit the additional data. */
            var tmp = new Uint8Array(pos + meta_block_remaining_len);
            tmp.set(output.buffer);
            output.buffer = tmp;
          }
          input_end = _out.input_end;
          is_uncompressed = _out.is_uncompressed;

          if (_out.is_metadata) {
            JumpToByteBoundary(br);

            for (; meta_block_remaining_len > 0; --meta_block_remaining_len) {
              br.readMoreInput();
              /* Read one byte and ignore it. */
              br.readBits(8);
            }

            continue;
          }

          if (meta_block_remaining_len === 0) {
            continue;
          }

          if (is_uncompressed) {
            br.bit_pos_ = br.bit_pos_ + 7 & ~7;
            CopyUncompressedBlockToOutput(output, meta_block_remaining_len, pos, ringbuffer, ringbuffer_mask, br);
            pos += meta_block_remaining_len;
            continue;
          }

          for (i = 0; i < 3; ++i) {
            num_block_types[i] = DecodeVarLenUint8(br) + 1;
            if (num_block_types[i] >= 2) {
              ReadHuffmanCode(num_block_types[i] + 2, block_type_trees, i * HUFFMAN_MAX_TABLE_SIZE, br);
              ReadHuffmanCode(kNumBlockLengthCodes, block_len_trees, i * HUFFMAN_MAX_TABLE_SIZE, br);
              block_length[i] = ReadBlockLength(block_len_trees, i * HUFFMAN_MAX_TABLE_SIZE, br);
              block_type_rb_index[i] = 1;
            }
          }

          br.readMoreInput();

          distance_postfix_bits = br.readBits(2);
          num_direct_distance_codes = NUM_DISTANCE_SHORT_CODES + (br.readBits(4) << distance_postfix_bits);
          distance_postfix_mask = (1 << distance_postfix_bits) - 1;
          num_distance_codes = num_direct_distance_codes + (48 << distance_postfix_bits);
          context_modes = new Uint8Array(num_block_types[0]);

          for (i = 0; i < num_block_types[0]; ++i) {
            br.readMoreInput();
            context_modes[i] = br.readBits(2) << 1;
          }

          var _o1 = DecodeContextMap(num_block_types[0] << kLiteralContextBits, br);
          num_literal_htrees = _o1.num_htrees;
          context_map = _o1.context_map;

          var _o2 = DecodeContextMap(num_block_types[2] << kDistanceContextBits, br);
          num_dist_htrees = _o2.num_htrees;
          dist_context_map = _o2.context_map;

          hgroup[0] = new HuffmanTreeGroup(kNumLiteralCodes, num_literal_htrees);
          hgroup[1] = new HuffmanTreeGroup(kNumInsertAndCopyCodes, num_block_types[1]);
          hgroup[2] = new HuffmanTreeGroup(num_distance_codes, num_dist_htrees);

          for (i = 0; i < 3; ++i) {
            hgroup[i].decode(br);
          }

          context_map_slice = 0;
          dist_context_map_slice = 0;
          context_mode = context_modes[block_type[0]];
          context_lookup_offset1 = Context.lookupOffsets[context_mode];
          context_lookup_offset2 = Context.lookupOffsets[context_mode + 1];
          htree_command = hgroup[1].htrees[0];

          while (meta_block_remaining_len > 0) {
            var cmd_code;
            var range_idx;
            var insert_code;
            var copy_code;
            var insert_length;
            var copy_length;
            var distance_code;
            var distance;
            var context;
            var j;
            var copy_dst;

            br.readMoreInput();

            if (block_length[1] === 0) {
              DecodeBlockType(num_block_types[1], block_type_trees, 1, block_type, block_type_rb, block_type_rb_index, br);
              block_length[1] = ReadBlockLength(block_len_trees, HUFFMAN_MAX_TABLE_SIZE, br);
              htree_command = hgroup[1].htrees[block_type[1]];
            }
            --block_length[1];
            cmd_code = ReadSymbol(hgroup[1].codes, htree_command, br);
            range_idx = cmd_code >> 6;
            if (range_idx >= 2) {
              range_idx -= 2;
              distance_code = -1;
            } else {
              distance_code = 0;
            }
            insert_code = Prefix.kInsertRangeLut[range_idx] + (cmd_code >> 3 & 7);
            copy_code = Prefix.kCopyRangeLut[range_idx] + (cmd_code & 7);
            insert_length = Prefix.kInsertLengthPrefixCode[insert_code].offset + br.readBits(Prefix.kInsertLengthPrefixCode[insert_code].nbits);
            copy_length = Prefix.kCopyLengthPrefixCode[copy_code].offset + br.readBits(Prefix.kCopyLengthPrefixCode[copy_code].nbits);
            prev_byte1 = ringbuffer[pos - 1 & ringbuffer_mask];
            prev_byte2 = ringbuffer[pos - 2 & ringbuffer_mask];
            for (j = 0; j < insert_length; ++j) {
              br.readMoreInput();

              if (block_length[0] === 0) {
                DecodeBlockType(num_block_types[0], block_type_trees, 0, block_type, block_type_rb, block_type_rb_index, br);
                block_length[0] = ReadBlockLength(block_len_trees, 0, br);
                context_offset = block_type[0] << kLiteralContextBits;
                context_map_slice = context_offset;
                context_mode = context_modes[block_type[0]];
                context_lookup_offset1 = Context.lookupOffsets[context_mode];
                context_lookup_offset2 = Context.lookupOffsets[context_mode + 1];
              }
              context = Context.lookup[context_lookup_offset1 + prev_byte1] | Context.lookup[context_lookup_offset2 + prev_byte2];
              literal_htree_index = context_map[context_map_slice + context];
              --block_length[0];
              prev_byte2 = prev_byte1;
              prev_byte1 = ReadSymbol(hgroup[0].codes, hgroup[0].htrees[literal_htree_index], br);
              ringbuffer[pos & ringbuffer_mask] = prev_byte1;
              if ((pos & ringbuffer_mask) === ringbuffer_mask) {
                output.write(ringbuffer, ringbuffer_size);
              }
              ++pos;
            }
            meta_block_remaining_len -= insert_length;
            if (meta_block_remaining_len <= 0) break;

            if (distance_code < 0) {
              var context;

              br.readMoreInput();
              if (block_length[2] === 0) {
                DecodeBlockType(num_block_types[2], block_type_trees, 2, block_type, block_type_rb, block_type_rb_index, br);
                block_length[2] = ReadBlockLength(block_len_trees, 2 * HUFFMAN_MAX_TABLE_SIZE, br);
                dist_context_offset = block_type[2] << kDistanceContextBits;
                dist_context_map_slice = dist_context_offset;
              }
              --block_length[2];
              context = (copy_length > 4 ? 3 : copy_length - 2) & 0xff;
              dist_htree_index = dist_context_map[dist_context_map_slice + context];
              distance_code = ReadSymbol(hgroup[2].codes, hgroup[2].htrees[dist_htree_index], br);
              if (distance_code >= num_direct_distance_codes) {
                var nbits;
                var postfix;
                var offset;
                distance_code -= num_direct_distance_codes;
                postfix = distance_code & distance_postfix_mask;
                distance_code >>= distance_postfix_bits;
                nbits = (distance_code >> 1) + 1;
                offset = (2 + (distance_code & 1) << nbits) - 4;
                distance_code = num_direct_distance_codes + (offset + br.readBits(nbits) << distance_postfix_bits) + postfix;
              }
            }

            /* Convert the distance code to the actual distance by possibly looking */
            /* up past distnaces from the ringbuffer. */
            distance = TranslateShortCodes(distance_code, dist_rb, dist_rb_idx);
            if (distance < 0) {
              throw new Error('[BrotliDecompress] invalid distance');
            }

            if (pos < max_backward_distance && max_distance !== max_backward_distance) {
              max_distance = pos;
            } else {
              max_distance = max_backward_distance;
            }

            copy_dst = pos & ringbuffer_mask;

            if (distance > max_distance) {
              if (copy_length >= BrotliDictionary.minDictionaryWordLength && copy_length <= BrotliDictionary.maxDictionaryWordLength) {
                var offset = BrotliDictionary.offsetsByLength[copy_length];
                var word_id = distance - max_distance - 1;
                var shift = BrotliDictionary.sizeBitsByLength[copy_length];
                var mask = (1 << shift) - 1;
                var word_idx = word_id & mask;
                var transform_idx = word_id >> shift;
                offset += word_idx * copy_length;
                if (transform_idx < Transform.kNumTransforms) {
                  var len = Transform.transformDictionaryWord(ringbuffer, copy_dst, offset, copy_length, transform_idx);
                  copy_dst += len;
                  pos += len;
                  meta_block_remaining_len -= len;
                  if (copy_dst >= ringbuffer_end) {
                    output.write(ringbuffer, ringbuffer_size);

                    for (var _x = 0; _x < copy_dst - ringbuffer_end; _x++) {
                      ringbuffer[_x] = ringbuffer[ringbuffer_end + _x];
                    }
                  }
                } else {
                  throw new Error("Invalid backward reference. pos: " + pos + " distance: " + distance + " len: " + copy_length + " bytes left: " + meta_block_remaining_len);
                }
              } else {
                throw new Error("Invalid backward reference. pos: " + pos + " distance: " + distance + " len: " + copy_length + " bytes left: " + meta_block_remaining_len);
              }
            } else {
              if (distance_code > 0) {
                dist_rb[dist_rb_idx & 3] = distance;
                ++dist_rb_idx;
              }

              if (copy_length > meta_block_remaining_len) {
                throw new Error("Invalid backward reference. pos: " + pos + " distance: " + distance + " len: " + copy_length + " bytes left: " + meta_block_remaining_len);
              }

              for (j = 0; j < copy_length; ++j) {
                ringbuffer[pos & ringbuffer_mask] = ringbuffer[pos - distance & ringbuffer_mask];
                if ((pos & ringbuffer_mask) === ringbuffer_mask) {
                  output.write(ringbuffer, ringbuffer_size);
                }
                ++pos;
                --meta_block_remaining_len;
              }
            }

            /* When we get here, we must have inserted at least one literal and */
            /* made a copy of at least length two, therefore accessing the last 2 */
            /* bytes is valid. */
            prev_byte1 = ringbuffer[pos - 1 & ringbuffer_mask];
            prev_byte2 = ringbuffer[pos - 2 & ringbuffer_mask];
          }

          /* Protect pos from overflow, wrap it around at every GB of input data */
          pos &= 0x3fffffff;
        }

        output.write(ringbuffer, pos & ringbuffer_mask);
      }

      exports.BrotliDecompress = BrotliDecompress;

      BrotliDictionary.init();
    }, { "./bit_reader": 2, "./context": 3, "./dictionary": 7, "./huffman": 8, "./prefix": 9, "./streams": 10, "./transform": 11 }], 5: [function (require, module, exports) {
      var base64 = require('base64-js');
      var fs = require('fs');

      /**
       * The normal dictionary-data.js is quite large, which makes it 
       * unsuitable for browser usage. In order to make it smaller, 
       * we read dictionary.bin, which is a compressed version of
       * the dictionary, and on initial load, Brotli decompresses 
       * it's own dictionary. 😜
       */
      exports.init = function () {
        var BrotliDecompressBuffer = require('./decode').BrotliDecompressBuffer;
        var compressed = base64.toByteArray(require('./dictionary.bin.js'));
        return BrotliDecompressBuffer(compressed);
      };
    }, { "./decode": 4, "./dictionary.bin.js": 6, "base64-js": 1, "fs": 13 }], 6: [function (require, module, exports) {
      module.exports = "";
    }, {}], 7: [function (require, module, exports) {
      /* Copyright 2013 Google Inc. All Rights Reserved.
      
         Licensed under the Apache License, Version 2.0 (the "License");
         you may not use this file except in compliance with the License.
         You may obtain a copy of the License at
      
         http://www.apache.org/licenses/LICENSE-2.0
      
         Unless required by applicable law or agreed to in writing, software
         distributed under the License is distributed on an "AS IS" BASIS,
         WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         See the License for the specific language governing permissions and
         limitations under the License.
      
         Collection of static dictionary words.
      */

      var data = require('./dictionary-data');
      exports.init = function () {
        exports.dictionary = data.init();
      };

      exports.offsetsByLength = new Uint32Array([0, 0, 0, 0, 0, 4096, 9216, 21504, 35840, 44032, 53248, 63488, 74752, 87040, 93696, 100864, 104704, 106752, 108928, 113536, 115968, 118528, 119872, 121280, 122016]);

      exports.sizeBitsByLength = new Uint8Array([0, 0, 0, 0, 10, 10, 11, 11, 10, 10, 10, 10, 10, 9, 9, 8, 7, 7, 8, 7, 7, 6, 6, 5, 5]);

      exports.minDictionaryWordLength = 4;
      exports.maxDictionaryWordLength = 24;
    }, { "./dictionary-data": 5 }], 8: [function (require, module, exports) {
      function HuffmanCode(bits, value) {
        this.bits = bits; /* number of bits used for this symbol */
        this.value = value; /* symbol value or table offset */
      }

      exports.HuffmanCode = HuffmanCode;

      var MAX_LENGTH = 15;

      /* Returns reverse(reverse(key, len) + 1, len), where reverse(key, len) is the
         bit-wise reversal of the len least significant bits of key. */
      function GetNextKey(key, len) {
        var step = 1 << len - 1;
        while (key & step) {
          step >>= 1;
        }
        return (key & step - 1) + step;
      }

      /* Stores code in table[0], table[step], table[2*step], ..., table[end] */
      /* Assumes that end is an integer multiple of step */
      function ReplicateValue(table, i, step, end, code) {
        do {
          end -= step;
          table[i + end] = new HuffmanCode(code.bits, code.value);
        } while (end > 0);
      }

      /* Returns the table width of the next 2nd level table. count is the histogram
         of bit lengths for the remaining symbols, len is the code length of the next
         processed symbol */
      function NextTableBitSize(count, len, root_bits) {
        var left = 1 << len - root_bits;
        while (len < MAX_LENGTH) {
          left -= count[len];
          if (left <= 0) break;
          ++len;
          left <<= 1;
        }
        return len - root_bits;
      }

      exports.BrotliBuildHuffmanTable = function (root_table, table, root_bits, code_lengths, code_lengths_size) {
        var start_table = table;
        var code; /* current table entry */
        var len; /* current code length */
        var symbol; /* symbol index in original or sorted table */
        var key; /* reversed prefix code */
        var step; /* step size to replicate values in current table */
        var low; /* low bits for current root entry */
        var mask; /* mask for low bits */
        var table_bits; /* key length of current table */
        var table_size; /* size of current table */
        var total_size; /* sum of root table size and 2nd level table sizes */
        var sorted; /* symbols sorted by code length */
        var count = new Int32Array(MAX_LENGTH + 1); /* number of codes of each length */
        var offset = new Int32Array(MAX_LENGTH + 1); /* offsets in sorted table for each length */

        sorted = new Int32Array(code_lengths_size);

        /* build histogram of code lengths */
        for (symbol = 0; symbol < code_lengths_size; symbol++) {
          count[code_lengths[symbol]]++;
        }

        /* generate offsets into sorted symbol table by code length */
        offset[1] = 0;
        for (len = 1; len < MAX_LENGTH; len++) {
          offset[len + 1] = offset[len] + count[len];
        }

        /* sort symbols by length, by symbol order within each length */
        for (symbol = 0; symbol < code_lengths_size; symbol++) {
          if (code_lengths[symbol] !== 0) {
            sorted[offset[code_lengths[symbol]]++] = symbol;
          }
        }

        table_bits = root_bits;
        table_size = 1 << table_bits;
        total_size = table_size;

        /* special case code with only one value */
        if (offset[MAX_LENGTH] === 1) {
          for (key = 0; key < total_size; ++key) {
            root_table[table + key] = new HuffmanCode(0, sorted[0] & 0xffff);
          }

          return total_size;
        }

        /* fill in root table */
        key = 0;
        symbol = 0;
        for (len = 1, step = 2; len <= root_bits; ++len, step <<= 1) {
          for (; count[len] > 0; --count[len]) {
            code = new HuffmanCode(len & 0xff, sorted[symbol++] & 0xffff);
            ReplicateValue(root_table, table + key, step, table_size, code);
            key = GetNextKey(key, len);
          }
        }

        /* fill in 2nd level tables and add pointers to root table */
        mask = total_size - 1;
        low = -1;
        for (len = root_bits + 1, step = 2; len <= MAX_LENGTH; ++len, step <<= 1) {
          for (; count[len] > 0; --count[len]) {
            if ((key & mask) !== low) {
              table += table_size;
              table_bits = NextTableBitSize(count, len, root_bits);
              table_size = 1 << table_bits;
              total_size += table_size;
              low = key & mask;
              root_table[start_table + low] = new HuffmanCode(table_bits + root_bits & 0xff, table - start_table - low & 0xffff);
            }
            code = new HuffmanCode(len - root_bits & 0xff, sorted[symbol++] & 0xffff);
            ReplicateValue(root_table, table + (key >> root_bits), step, table_size, code);
            key = GetNextKey(key, len);
          }
        }

        return total_size;
      };
    }, {}], 9: [function (require, module, exports) {
      /* Copyright 2013 Google Inc. All Rights Reserved.
      
         Licensed under the Apache License, Version 2.0 (the "License");
         you may not use this file except in compliance with the License.
         You may obtain a copy of the License at
      
         http://www.apache.org/licenses/LICENSE-2.0
      
         Unless required by applicable law or agreed to in writing, software
         distributed under the License is distributed on an "AS IS" BASIS,
         WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         See the License for the specific language governing permissions and
         limitations under the License.
      
         Lookup tables to map prefix codes to value ranges. This is used during
         decoding of the block lengths, literal insertion lengths and copy lengths.
      */

      /* Represents the range of values belonging to a prefix code: */
      /* [offset, offset + 2^nbits) */
      function PrefixCodeRange(offset, nbits) {
        this.offset = offset;
        this.nbits = nbits;
      }

      exports.kBlockLengthPrefixCode = [new PrefixCodeRange(1, 2), new PrefixCodeRange(5, 2), new PrefixCodeRange(9, 2), new PrefixCodeRange(13, 2), new PrefixCodeRange(17, 3), new PrefixCodeRange(25, 3), new PrefixCodeRange(33, 3), new PrefixCodeRange(41, 3), new PrefixCodeRange(49, 4), new PrefixCodeRange(65, 4), new PrefixCodeRange(81, 4), new PrefixCodeRange(97, 4), new PrefixCodeRange(113, 5), new PrefixCodeRange(145, 5), new PrefixCodeRange(177, 5), new PrefixCodeRange(209, 5), new PrefixCodeRange(241, 6), new PrefixCodeRange(305, 6), new PrefixCodeRange(369, 7), new PrefixCodeRange(497, 8), new PrefixCodeRange(753, 9), new PrefixCodeRange(1265, 10), new PrefixCodeRange(2289, 11), new PrefixCodeRange(4337, 12), new PrefixCodeRange(8433, 13), new PrefixCodeRange(16625, 24)];

      exports.kInsertLengthPrefixCode = [new PrefixCodeRange(0, 0), new PrefixCodeRange(1, 0), new PrefixCodeRange(2, 0), new PrefixCodeRange(3, 0), new PrefixCodeRange(4, 0), new PrefixCodeRange(5, 0), new PrefixCodeRange(6, 1), new PrefixCodeRange(8, 1), new PrefixCodeRange(10, 2), new PrefixCodeRange(14, 2), new PrefixCodeRange(18, 3), new PrefixCodeRange(26, 3), new PrefixCodeRange(34, 4), new PrefixCodeRange(50, 4), new PrefixCodeRange(66, 5), new PrefixCodeRange(98, 5), new PrefixCodeRange(130, 6), new PrefixCodeRange(194, 7), new PrefixCodeRange(322, 8), new PrefixCodeRange(578, 9), new PrefixCodeRange(1090, 10), new PrefixCodeRange(2114, 12), new PrefixCodeRange(6210, 14), new PrefixCodeRange(22594, 24)];

      exports.kCopyLengthPrefixCode = [new PrefixCodeRange(2, 0), new PrefixCodeRange(3, 0), new PrefixCodeRange(4, 0), new PrefixCodeRange(5, 0), new PrefixCodeRange(6, 0), new PrefixCodeRange(7, 0), new PrefixCodeRange(8, 0), new PrefixCodeRange(9, 0), new PrefixCodeRange(10, 1), new PrefixCodeRange(12, 1), new PrefixCodeRange(14, 2), new PrefixCodeRange(18, 2), new PrefixCodeRange(22, 3), new PrefixCodeRange(30, 3), new PrefixCodeRange(38, 4), new PrefixCodeRange(54, 4), new PrefixCodeRange(70, 5), new PrefixCodeRange(102, 5), new PrefixCodeRange(134, 6), new PrefixCodeRange(198, 7), new PrefixCodeRange(326, 8), new PrefixCodeRange(582, 9), new PrefixCodeRange(1094, 10), new PrefixCodeRange(2118, 24)];

      exports.kInsertRangeLut = [0, 0, 8, 8, 0, 16, 8, 16, 16];

      exports.kCopyRangeLut = [0, 8, 0, 8, 16, 0, 16, 8, 16];
    }, {}], 10: [function (require, module, exports) {
      function BrotliInput(buffer) {
        this.buffer = buffer;
        this.pos = 0;
      }

      BrotliInput.prototype.read = function (buf, i, count) {
        if (this.pos + count > this.buffer.length) {
          count = this.buffer.length - this.pos;
        }

        for (var p = 0; p < count; p++) {
          buf[i + p] = this.buffer[this.pos + p];
        }this.pos += count;
        return count;
      };

      exports.BrotliInput = BrotliInput;

      function BrotliOutput(buf) {
        this.buffer = buf;
        this.pos = 0;
      }

      BrotliOutput.prototype.write = function (buf, count) {
        if (this.pos + count > this.buffer.length) throw new Error('Output buffer is not large enough');

        this.buffer.set(buf.subarray(0, count), this.pos);
        this.pos += count;
        return count;
      };

      exports.BrotliOutput = BrotliOutput;
    }, {}], 11: [function (require, module, exports) {
      /* Copyright 2013 Google Inc. All Rights Reserved.
      
         Licensed under the Apache License, Version 2.0 (the "License");
         you may not use this file except in compliance with the License.
         You may obtain a copy of the License at
      
         http://www.apache.org/licenses/LICENSE-2.0
      
         Unless required by applicable law or agreed to in writing, software
         distributed under the License is distributed on an "AS IS" BASIS,
         WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         See the License for the specific language governing permissions and
         limitations under the License.
      
         Transformations on dictionary words.
      */

      var BrotliDictionary = require('./dictionary');

      var kIdentity = 0;
      var kOmitLast1 = 1;
      var kOmitLast2 = 2;
      var kOmitLast3 = 3;
      var kOmitLast4 = 4;
      var kOmitLast5 = 5;
      var kOmitLast6 = 6;
      var kOmitLast7 = 7;
      var kOmitLast8 = 8;
      var kOmitLast9 = 9;
      var kUppercaseFirst = 10;
      var kUppercaseAll = 11;
      var kOmitFirst1 = 12;
      var kOmitFirst2 = 13;
      var kOmitFirst3 = 14;
      var kOmitFirst4 = 15;
      var kOmitFirst5 = 16;
      var kOmitFirst6 = 17;
      var kOmitFirst7 = 18;
      var kOmitFirst8 = 19;
      var kOmitFirst9 = 20;

      function Transform(prefix, transform, suffix) {
        this.prefix = new Uint8Array(prefix.length);
        this.transform = transform;
        this.suffix = new Uint8Array(suffix.length);

        for (var i = 0; i < prefix.length; i++) {
          this.prefix[i] = prefix.charCodeAt(i);
        }for (var i = 0; i < suffix.length; i++) {
          this.suffix[i] = suffix.charCodeAt(i);
        }
      }

      var kTransforms = [new Transform("", kIdentity, ""), new Transform("", kIdentity, " "), new Transform(" ", kIdentity, " "), new Transform("", kOmitFirst1, ""), new Transform("", kUppercaseFirst, " "), new Transform("", kIdentity, " the "), new Transform(" ", kIdentity, ""), new Transform("s ", kIdentity, " "), new Transform("", kIdentity, " of "), new Transform("", kUppercaseFirst, ""), new Transform("", kIdentity, " and "), new Transform("", kOmitFirst2, ""), new Transform("", kOmitLast1, ""), new Transform(", ", kIdentity, " "), new Transform("", kIdentity, ", "), new Transform(" ", kUppercaseFirst, " "), new Transform("", kIdentity, " in "), new Transform("", kIdentity, " to "), new Transform("e ", kIdentity, " "), new Transform("", kIdentity, "\""), new Transform("", kIdentity, "."), new Transform("", kIdentity, "\">"), new Transform("", kIdentity, "\n"), new Transform("", kOmitLast3, ""), new Transform("", kIdentity, "]"), new Transform("", kIdentity, " for "), new Transform("", kOmitFirst3, ""), new Transform("", kOmitLast2, ""), new Transform("", kIdentity, " a "), new Transform("", kIdentity, " that "), new Transform(" ", kUppercaseFirst, ""), new Transform("", kIdentity, ". "), new Transform(".", kIdentity, ""), new Transform(" ", kIdentity, ", "), new Transform("", kOmitFirst4, ""), new Transform("", kIdentity, " with "), new Transform("", kIdentity, "'"), new Transform("", kIdentity, " from "), new Transform("", kIdentity, " by "), new Transform("", kOmitFirst5, ""), new Transform("", kOmitFirst6, ""), new Transform(" the ", kIdentity, ""), new Transform("", kOmitLast4, ""), new Transform("", kIdentity, ". The "), new Transform("", kUppercaseAll, ""), new Transform("", kIdentity, " on "), new Transform("", kIdentity, " as "), new Transform("", kIdentity, " is "), new Transform("", kOmitLast7, ""), new Transform("", kOmitLast1, "ing "), new Transform("", kIdentity, "\n\t"), new Transform("", kIdentity, ":"), new Transform(" ", kIdentity, ". "), new Transform("", kIdentity, "ed "), new Transform("", kOmitFirst9, ""), new Transform("", kOmitFirst7, ""), new Transform("", kOmitLast6, ""), new Transform("", kIdentity, "("), new Transform("", kUppercaseFirst, ", "), new Transform("", kOmitLast8, ""), new Transform("", kIdentity, " at "), new Transform("", kIdentity, "ly "), new Transform(" the ", kIdentity, " of "), new Transform("", kOmitLast5, ""), new Transform("", kOmitLast9, ""), new Transform(" ", kUppercaseFirst, ", "), new Transform("", kUppercaseFirst, "\""), new Transform(".", kIdentity, "("), new Transform("", kUppercaseAll, " "), new Transform("", kUppercaseFirst, "\">"), new Transform("", kIdentity, "=\""), new Transform(" ", kIdentity, "."), new Transform(".com/", kIdentity, ""), new Transform(" the ", kIdentity, " of the "), new Transform("", kUppercaseFirst, "'"), new Transform("", kIdentity, ". This "), new Transform("", kIdentity, ","), new Transform(".", kIdentity, " "), new Transform("", kUppercaseFirst, "("), new Transform("", kUppercaseFirst, "."), new Transform("", kIdentity, " not "), new Transform(" ", kIdentity, "=\""), new Transform("", kIdentity, "er "), new Transform(" ", kUppercaseAll, " "), new Transform("", kIdentity, "al "), new Transform(" ", kUppercaseAll, ""), new Transform("", kIdentity, "='"), new Transform("", kUppercaseAll, "\""), new Transform("", kUppercaseFirst, ". "), new Transform(" ", kIdentity, "("), new Transform("", kIdentity, "ful "), new Transform(" ", kUppercaseFirst, ". "), new Transform("", kIdentity, "ive "), new Transform("", kIdentity, "less "), new Transform("", kUppercaseAll, "'"), new Transform("", kIdentity, "est "), new Transform(" ", kUppercaseFirst, "."), new Transform("", kUppercaseAll, "\">"), new Transform(" ", kIdentity, "='"), new Transform("", kUppercaseFirst, ","), new Transform("", kIdentity, "ize "), new Transform("", kUppercaseAll, "."), new Transform("\xc2\xa0", kIdentity, ""), new Transform(" ", kIdentity, ","), new Transform("", kUppercaseFirst, "=\""), new Transform("", kUppercaseAll, "=\""), new Transform("", kIdentity, "ous "), new Transform("", kUppercaseAll, ", "), new Transform("", kUppercaseFirst, "='"), new Transform(" ", kUppercaseFirst, ","), new Transform(" ", kUppercaseAll, "=\""), new Transform(" ", kUppercaseAll, ", "), new Transform("", kUppercaseAll, ","), new Transform("", kUppercaseAll, "("), new Transform("", kUppercaseAll, ". "), new Transform(" ", kUppercaseAll, "."), new Transform("", kUppercaseAll, "='"), new Transform(" ", kUppercaseAll, ". "), new Transform(" ", kUppercaseFirst, "=\""), new Transform(" ", kUppercaseAll, "='"), new Transform(" ", kUppercaseFirst, "='")];

      exports.kTransforms = kTransforms;
      exports.kNumTransforms = kTransforms.length;

      function ToUpperCase(p, i) {
        if (p[i] < 0xc0) {
          if (p[i] >= 97 && p[i] <= 122) {
            p[i] ^= 32;
          }
          return 1;
        }

        /* An overly simplified uppercasing model for utf-8. */
        if (p[i] < 0xe0) {
          p[i + 1] ^= 32;
          return 2;
        }

        /* An arbitrary transform for three byte characters. */
        p[i + 2] ^= 5;
        return 3;
      }

      exports.transformDictionaryWord = function (dst, idx, word, len, transform) {
        var prefix = kTransforms[transform].prefix;
        var suffix = kTransforms[transform].suffix;
        var t = kTransforms[transform].transform;
        var skip = t < kOmitFirst1 ? 0 : t - (kOmitFirst1 - 1);
        var i = 0;
        var start_idx = idx;
        var uppercase;

        if (skip > len) {
          skip = len;
        }

        var prefix_pos = 0;
        while (prefix_pos < prefix.length) {
          dst[idx++] = prefix[prefix_pos++];
        }

        word += skip;
        len -= skip;

        if (t <= kOmitLast9) {
          len -= t;
        }

        for (i = 0; i < len; i++) {
          dst[idx++] = BrotliDictionary.dictionary[word + i];
        }

        uppercase = idx - len;

        if (t === kUppercaseFirst) {
          ToUpperCase(dst, uppercase);
        } else if (t === kUppercaseAll) {
          while (len > 0) {
            var step = ToUpperCase(dst, uppercase);
            uppercase += step;
            len -= step;
          }
        }

        var suffix_pos = 0;
        while (suffix_pos < suffix.length) {
          dst[idx++] = suffix[suffix_pos++];
        }

        return idx - start_idx;
      };
    }, { "./dictionary": 7 }], 12: [function (require, module, exports) {
      module.exports = require('./dec/decode').BrotliDecompressBuffer;
    }, { "./dec/decode": 4 }], 13: [function (require, module, exports) {}, {}] }, {}, [12])(12);
});

/***/ }),

/***/ "./src/pdf-jr/customSecurityHandler.js":
/*!*********************************************!*\
  !*** ./src/pdf-jr/customSecurityHandler.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var customEncryptData = void 0;
/**
 * 
 * @type {GSDK.CustomSecurityHandler} gsdk 
 */
var customSecurityHandler = void 0;
var customSecurityCallback = void 0;
/**
 * 
 * @param {GSDK} gsdk 
 */
function initSecurityHandler(gsdk) {
  customEncryptData = new gsdk.CustomEncryptData(true, new gsdk.String('filter'), new gsdk.String('subfilter'));
  customSecurityHandler = new gsdk.CustomSecurityHandler();
  customSecurityCallback = gsdk.CustomSecurityCallback.implement({
    JSCreateContext: function JSCreateContext(filter, subfilter, encrypt_info) {
      return 800;
    },
    JSReleaseContext: function JSReleaseContext(context) {
      return true;
    },
    JSGetUserPermissions: function JSGetUserPermissions(context, permission) {
      return permission;
    },
    JSIsOwner: function JSIsOwner(context) {
      return true;
    },
    JSGetCipher: function JSGetCipher(context) {
      return gsdk.CipherType.e_CipherRC4;
    },
    JSGetEncryptKey: function JSGetEncryptKey(context) {
      return new gsdk.String('abcdef');
    },
    JSGetDecryptedSize: function JSGetDecryptedSize(context, size) {
      return size;
    },
    JSStartDecryptor: function JSStartDecryptor(context, obj_num, gen_num) {
      return 900;
    },
    JSDecryptData: function JSDecryptData(decryptor, encrypted_data, encrypted_data_len) {
      var s = new gsdk.String('');
      var buffer = gsdk._malloc(encrypted_data_len);
      var arrayBuffer = void 0;

      var engineBuffer = gsdk.HEAPU8.buffer;
      if (engineBuffer.slice) {
        arrayBuffer = new Uint8Array(engineBuffer.slice(encrypted_data, encrypted_data + encrypted_data_len));
      } else {
        arrayBuffer = new Uint8Array(engineBuffer, encrypted_data, encrypted_data_len);
      }

      gsdk.HEAPU8.set(arrayBuffer, buffer);

      gsdk.HEAP8[buffer] = gsdk.HEAP8[buffer] + 10;

      s.Load(buffer, encrypted_data_len);
      return s;
    },
    JSFinishDecryptor: function JSFinishDecryptor(decryptor) {
      return new gsdk.String('77788899');
    },
    JSGetEncryptedSize: function JSGetEncryptedSize(context, obj_num, gen_num, src_data, src_data_len) {
      return src_data_len;
    },
    JSEncryptData: function JSEncryptData(context, obj_num, gen_num, src_data, src_data_len, out_dst_buffer, out_dst_buffer_len) {
      var engineBuffer = gsdk.HEAPU8.buffer;
      var arrayBuffer = void 0;
      if (engineBuffer.slice) {
        arrayBuffer = new Uint8Array(engineBuffer.slice(src_data, src_data + src_data_len));
      } else {
        arrayBuffer = new Uint8Array(engineBuffer, src_data, src_data_len);
      }
      gsdk.HEAPU8.set(arrayBuffer, out_dst_buffer);

      gsdk.HEAP8[out_dst_buffer] = gsdk.HEAP8[out_dst_buffer] - 10;
      return src_data_len;
    }
  });
  customSecurityHandler.Initialize(customEncryptData, customSecurityCallback);
}

function getCustomSecurityCallback(gsdk) {
  if (!customSecurityHandler) {
    initSecurityHandler(gsdk);
  }
  return [new gsdk.String('filter'), customSecurityCallback];
}

function getCustomSecurityHandler(gsdk) {
  if (!customSecurityHandler) {
    initSecurityHandler(gsdk);
  }
  return customSecurityHandler;
}
exports.getCustomSecurityCallback = getCustomSecurityCallback;
exports.getCustomSecurityHandler = getCustomSecurityHandler;

/***/ }),

/***/ "./src/pdf-jr/getThirdPartyFontBuffer.js":
/*!***********************************************!*\
  !*** ./src/pdf-jr/getThirdPartyFontBuffer.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _brotliDecompress = __webpack_require__(/*! ./brotli-decompress */ "./src/pdf-jr/brotli-decompress.js");

var _brotliDecompress2 = _interopRequireDefault(_brotliDecompress);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 Charset_e_CharsetANSI 0
 Charset_e_CharsetDefault 1
 Charset_e_CharsetSymbol 2
 Charset_e_CharsetShift_JIS 128
 Charset_e_CharsetHangeul 129
 Charset_e_CharsetGB2312 134
 Charset_e_CharsetChineseBig5 136
 Charset_e_CharsetGreek 161
 Charset_e_CharsetTurkish 162
 Charset_e_CharsetHebrew 177
 Charset_e_CharsetArabic 178
 Charset_e_CharsetBaltic 186
 Charset_e_CharsetRussian 204
 Charset_e_CharsetThai 222
 Charset_e_CharsetEastEurope 238
 */

var fontMap = [{
    fontName: "franklin",
    charSet: 0,
    bold: "NotoSans-Bold.ttf",
    boldItalic: "NotoSans-BoldItalic.ttf"
}, {
    fontName: "stsonglight",
    charSet: -1,
    charset: 134,
    regular: "NotoSansTCLight.otf"
},

/** WEBPDF-2896
 * Fixed pitch for song and simhei
 */
{
    fontName: "youyuan_simhei_simsun_song_仿宋_黑体_宋体",
    charSet: -1,
    charset: 134,
    regular: "NotoSansMonoCJKsc-Regular.otf",
    bold: "NotoSansMonoCJKsc-Bold.otf"
},
//日文
{
    fontName: "meiryo_meiryoui_msgothic_msmincho_mspgothic_mspmincho_uigothic",
    charSet: 128,
    regular: "NotoSansCJKjp-Regular.otf",
    thin: "NotoSansCJKjp-Thin.otf",
    light: "NotoSansCJKjp-Light.otf",
    normal: "NotoSansCJKjp-DemiLight.otf",
    medium: "NotoSansCJKjp-Medium.otf",
    bold: "NotoSansCJKjp-Bold.otf",
    black: "NotoSansCJKjp-Black.otf",
    monoRegular: "NotoSansMonoCJKjp-Regular.otf",
    monoBold: "NotoSansMonoCJKjp-Bold.otf"
},
//韩文
{
    fontName: "Korean",
    charSet: 129,
    regular: "NotoSansCJKkr-Regular.otf",
    thin: "NotoSansCJKkr-Thin.otf",
    light: "NotoSansCJKkr-Light.otf",
    normal: "NotoSansCJKkr-DemiLight.otf",
    medium: "NotoSansCJKkr-Medium.otf",
    bold: "NotoSansCJKkr-Bold.otf",
    black: "NotoSansCJKkr-Black.otf",
    monoRegular: "NotoSansMonoCJKkr-Regular.otf",
    monoBold: "NotoSansMonoCJKkr-Bold.otf"
},
//简体中文

{
    fontName: "simhei_simsun_simsunextb_方正_仿宋_黑体_华文_楷体_隶书_宋体_微软雅黑_新宋体_幼圆",
    charSet: 134,
    regular: "NotoSansSC-Regular.otf",
    thin: "NotoSansSC-Thin.otf",
    light: "NotoSansSC-Light.otf",
    normal: "NotoSansSC-DemiLight.otf",
    medium: "NotoSansSC-Medium.otf",
    bold: "NotoSansSC-Bold.otf",
    black: "NotoSansSC-Black.otf",
    monoRegular: "NotoSansMonoCJKsc-Regular.otf",
    monoBold: "NotoSansMonoCJKsc-Bold.otf"
},
//繁体中文
{
    fontName: "dfkaisb_microsoftjhenghei_mingliu_mingliuhkscs_mingliuhkscsextb_mingliuextb_pmingliu_pmingliuextb",
    charSet: 136,
    regular: "NotoSansMonoCJKtc-Regular.otf",
    thin: "NotoSansCJKtc-Thin.otf",
    light: "NotoSansCJKtc-Light.otf",
    normal: "NotoSansCJKtc-DemiLight.otf",
    medium: "NotoSansCJKtc-Medium.otf",
    bold: "NotoSansCJKtc-Bold.otf",
    black: "NotoSansCJKtc-Black.otf",
    monoRegular: "NotoSansMonoCJKtc-Regular.otf",
    monoBold: "NotoSansMonoCJKtc-Bold.otf"
},
//阿拉伯
{
    fontName: "arabic_andalus_arabictypesetting_sakkalmajalla_simplifiedarabic_simplifiedarabicfixed_traditionalarabic",
    charSet: 178,
    regular: "NotoNaskhArabic-Regular.ttf",
    bold: "NotoNaskhArabic-Bold.ttf"
},
//泰语
{
    fontName: "angsananew_angsanaupc_browallianew_browalliaupc_cordianew_cordiaupc_" + "eucrosiaupc_freesiaupc_irisupc_jasmineupc_kodchiangupc_leelawadee_lilyupc",
    charSet: 222,
    regular: "NotoSansThai-Regular.ttf",
    bold: "NotoSansThai-Bold.ttf",
    serif: "NotoSerifThai-Regular.ttf",
    serifBold: "NotoSerifThai-Bold.ttf"
},
//希伯来语
{
    fontName: "aharoni_david_frankruehl_gisha_levenimmt_miriam_narkism_rod",
    charSet: -1,
    charset: 177,
    regular: "NotoSansHebrew-Regular.ttf",
    bold: "NotoSansHebrew-Bold.ttf"
}, {
    fontName: "arial_sylfaen_tahoma_couriernew_lucidasansunicode_timesnewroman_calibri_" + "cambria_candara_comicsansms_consolas_constantia_corbel_franklingothic_gabriola_" + "georgia_impact_lucidaconsole_microsoftsansserif_msrefrencesansserif_palatinolinotype_" + "segoeprint_segoescript_segoeui_trebuchetms_verdana_helvetica",
    charSet: -1,
    charset: 177,
    regular: "NotoSans-Regular.ttf",
    bold: "NotoSans-Bold.ttf",
    italic: "NotoSans-Italic.ttf",
    boldItalic: "NotoSans-BoldItalic.ttf"
},
//彝文
{
    fontName: "yi_microsoftyibati",
    charSet: -1,
    charset: 178,
    regular: "NotoSansYi-Regular.ttf"
},
//高棉语
{
    fontName: "daunpenh_khmer_moolboran",
    charSet: -1,
    charset: 177,
    regular: "NotoSansKhmer-Regular.ttf",
    bold: "NotoSansKhmer-Bold.ttf",
    serif: "NotoSerifKhmer-Regular.ttf",
    serifBold: "NotoSerifKhmer-Bold.ttf"
},
//老挝文
{
    fontName: "dokchampa_lao",
    charSet: -1,
    charset: 177,
    regular: "NotoSansLao-Regular.ttf",
    bold: "NotoSansLao-Bold.ttf",
    serif: "NotoSerifLao-Regular.ttf",
    serifBold: "NotoSerifLao-Bold.ttf"
},
//泰卢固文
{
    fontName: "vani_gautami",
    charSet: -1,
    charset: 177,
    regular: "NotoSansTelugu-Regular.ttf",
    bold: "NotoSansTelugu-Bold.ttf"
},
//泰米尔文
{
    fontName: "latha_vijaya",
    charSet: -1,
    charset: 177, //南亚
    regular: "NotoSansTamil-Regular.ttf",
    bold: "NotoSansTamil-Bold.ttf"
},
//马尔代夫语
{
    fontName: "moboli_mvboli",
    charSet: -1,
    charset: 177,
    regular: "NotoSansThaana-Regular.ttf",
    bold: "NotoSansThaana-Bold.ttf"
},
//德宏泰语
{
    fontName: "taile_microsofttaile",
    charSet: -1,
    charset: 161,
    regular: "NotoSansTaiLe-Regular.ttf"
},
//叙利亚文
{
    fontName: "estrangeloedessa",
    charSet: -1,
    charset: 222,
    regular: "NotoSansSyriacEastern-Regular.ttf"
},
//僧伽罗语
{
    fontName: "iskoolapota",
    charSet: -1,
    charset: 178,
    regular: "NotoSansSinhala-Regular.ttf",
    bold: "NotoSansSinhala-Bold.ttf"
},
//藏文
{
    fontName: "himalaya_microsofthimalaya",
    charSet: -1,
    charset: 178,
    regular: "NotoSansTibetan-Regular.ttf",
    bold: "NotoSansTibetan-Bold.ttf"
},
//八思巴文
{
    fontName: "phagspa_microsoftphagspa",
    charSet: -1,
    charset: 178,
    regular: "NotoSansPhagsPa-Regular.ttf"
},
//统一加拿大土著语音节
{
    fontName: "euphemia_gadugi",
    charSet: -1,
    charset: 178,
    regular: "NotoSansCanadianAboriginal-Regular.ttf"
},
//切罗基语
{
    fontName: "plantagenetcherokee",
    charSet: -1,
    charset: 178,
    regular: "NotoSansCherokee-Regular.ttf"
},
//埃塞俄比亚语
{
    fontName: "nyala_ebrima",
    charSet: -1,
    charset: 222,
    regular: "NotoSansEthiopic-Regular.ttf",
    bold: "NotoSansEthiopic-Bold.ttf"
},
//古吉拉特文
{
    fontName: "shruti",
    charSet: -1,
    charset: 222,
    regular: "NotoSansGujarati-Regular.ttf",
    bold: "NotoSansGujarati-Bold.ttf"
},
//蒙古文
{
    fontName: "mongolian_mongolianbaiti",
    charSet: -1,
    charset: 178,
    regular: "NotoSansMongolian-Regular.ttf"
},
//古吉拉特文+僧伽罗语+泰文+泰米尔文+泰卢固文
{
    fontName: "nirmalaui",
    charSet: -1,
    charset: 161,
    regular: "NotoNirmalaui-Regular.ttf"
}];

var fontMapCache = {};
var fontMatchMapCache = {};
var fontBufferCache = {};

function getCacheKey(fontName, charset, italic, weight, fontFlag) {
    return [fontName, charset, italic, weight, fontFlag].join('-');
}

function getFontMatch(fontName, charset, italic, weight, fontFlag) {
    if (!fontName) {
        return false;
    }
    var cacheKey = getCacheKey(fontName, charset, italic, weight, fontFlag);
    fontName = adjustFontName(fontName);

    if (fontName === 'helvetica') {
        if (!(fontFlag & 0x80000)) {
            return false;
        }
    }

    var fontMatch = fontMapCache[cacheKey];

    if (fontMatch) {
        return fontMatch;
    }
    var map;
    for (var i = 0, j = fontMap.length; i < j; i++) {
        map = fontMap[i];
        var matchFontName = isMatchFontName(fontName, map.fontName);
        //fix WEBPDF-2882 charset为0，对某些特殊字体名称做匹配。
        if (!matchFontName && (map.charSet !== charset || charset === 0)) {
            continue;
        }
        if (fontMatch = matchSerif(fontName, fontFlag, map)) {
            break;
        }
        if (fontMatch = matchFixedPitch(fontName, fontFlag, map)) {
            break;
        }
        fontMatch = matchRegular(map);
        var fontMatch2 = void 0;
        if (fontMatch2 = matchWeight(weight, map)) {
            fontMatch = fontMatch2;
            break;
        }
        if (fontMatch2 = matchBold(fontName, fontFlag, map)) {
            fontMatch = fontMatch2;
            break;
        }
        if (fontMatch2 = matchBoldItalic(fontName, fontFlag, map)) {
            fontMatch = fontMatch2;
            break;
        }
        if (fontMatch2 = matchItalic(fontName, fontFlag, map)) {
            fontMatch = fontMatch2;
            break;
        }

        break;
    }
    if (fontMatch) {
        fontMapCache[cacheKey] = fontMatch;
        fontMatchMapCache[fontMatch] = map;
    }
    return fontMatch;
}
function adjustFontName(fontName) {
    return fontName.replace(/-/g, "").replace(/\s/g, "").toLowerCase();
}
//匹配名字
function isMatchFontName(fontName, fontMapName) {
    var fontMapNames = fontMapName.split('_');
    for (var i = 0, j = fontMapNames.length; i < j; i++) {
        if (fontName.indexOf(fontMapNames[i]) !== -1) {
            return true;
        }
    }
    return false;
}
function matchSerif(fontName, flags, map) {
    var fontFileName = void 0;
    if (flags & 0x02) {
        fontFileName = map.serif;

        if (checkBoldHeavy(fontName, flags)) {
            fontFileName = map.serifBold;
        }
    }
    return fontFileName;
}
function matchFixedPitch(fontName, flags, map) {
    var fontFileName = void 0;
    if (flags & 0x01) {
        fontFileName = map.monoRegular;

        if (checkBoldHeavy(fontName, flags)) {
            fontFileName = map.monoBold;
        }
    }

    return fontFileName;
}
function checkBoldHeavy(fontName, flags) {
    return flags & 0x4000 || fontName.indexOf("bold") !== -1 || fontName.indexOf("heavy") !== -1;
}
function matchRegular(map) {
    return map.regular;
}
function matchWeight(weight, map) {
    return {
        100: map.thin,
        200: map.light,
        300: map.normal,
        700: map.bold,
        900: map.black
    }[weight];
}
function matchBold(fontName, flags, map) {
    if (checkBoldHeavy(fontName, flags) || fontName.indexOf("black") !== -1) {
        return map.bold;
    }
}
function matchItalic(fontName, flags, map) {
    if (flags & 0x4000 || fontName.indexOf("italic") !== -1 || fontName.indexOf("oblique") !== -1) {
        return map.italic;
    }
}
function matchBoldItalic(fontName, flags, map) {
    if (flags & 0x4000 || fontName.indexOf("italic") !== -1 || fontName.indexOf("oblique") !== -1) {
        return map.boldItalic;
    }
}

function getFontBufferSync(fontBaseUrl, fontMatch) {
    if (fontBufferCache[fontMatch]) {
        return fontBufferCache[fontMatch];
    }

    var xmlHttp = new XMLHttpRequest();
    xmlHttp.open("get", fontBaseUrl + '/' + fontMatch + '.brotli', false);
    xmlHttp.responseType = "arraybuffer";
    xmlHttp.send();

    var status = xmlHttp.status;
    var result = xmlHttp.response;
    if (status >= 200 && status < 300 || status === 304 && result instanceof ArrayBuffer) {
        result = (0, _brotliDecompress2.default)(new Uint8Array(result));
        return fontBufferCache[fontMatch] = result;
    } else {
        return null;
    }
}

function getThirdPartyFontBuffer(fontBaseUrl, fontName, charset, italic, weight, fontFlag) {
    var realName = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;

    if (!realName) {
        var fontMatch = getFontMatch(fontName, charset, italic, weight, fontFlag);

        if (!fontMatch) {
            return null;
        }
        return getFontBufferSync(fontBaseUrl, fontMatch);
    } else {
        for (var i = 0, j = fontMap.length; i < j; i++) {
            var map = fontMap[i];
            if (map.regular && map.regular.split(".")[0] === fontName) {
                return getFontBufferSync(fontBaseUrl, map.regular);
            }
            if (map.bold && map.bold.split(".")[0] === fontName) {
                return getFontBufferSync(fontBaseUrl, map.bold);
            }
        }
        if (italic) {
            return getFontBufferSync(fontBaseUrl, "NotoSans-Italic.ttf");
        }
        if (weight == 700) {
            return getFontBufferSync(fontBaseUrl, "NotoSans-Bold.ttf");
        }
        return getFontBufferSync(fontBaseUrl, "NotoSans-Regular.ttf");
        // regular:"NotoSans-Regular.ttf",
        // bold:"NotoSans-Bold.ttf",
        // italic:"NotoSans-Italic.ttf",
        // boldItalic:"NotoSans-BoldItalic.ttf"
    }
}
function getWebFontFileBuffer(fontBaseUrl, pos) {
    var map = fontMap[pos - 1];
    if (!map) {
        return null;
    }
    if (map.regular) {
        return getFontBufferSync(fontBaseUrl, map.regular);
    }
    if (map.bold) {
        return getFontBufferSync(fontBaseUrl, map.bold);
    }
}
function getFontFilesPos(pos) {
    return (pos + 1) % fontMap.length;
}
function getCharsetFromName(fontName) {
    fontName = fontName.toLowerCase();
    for (var i = 0, j = fontMap.length; i < j; i++) {
        var map = fontMap[i];
        for (var _j in map) {
            if ((map[_j] + '').replace(/-/g, '').toLowerCase().indexOf(fontName) !== -1) {
                if (map.charSet !== -1) {
                    return map.charSet;
                } else {
                    return map.charset;
                }
            }
        }
    }
    return 0;
}
exports.default = {
    getThirdPartyFontBuffer: getThirdPartyFontBuffer,
    getWebFontFileBuffer: getWebFontFileBuffer,
    getFontFilesPos: getFontFilesPos,
    getFontMatch: getFontMatch,
    getCharsetFromName: getCharsetFromName
};

/***/ }),

/***/ "./src/pdf-jr/graphics/FormXObject.js":
/*!********************************************!*\
  !*** ./src/pdf-jr/graphics/FormXObject.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _GraphicsObject2 = __webpack_require__(/*! ./GraphicsObject */ "./src/pdf-jr/graphics/GraphicsObject.js");

var _GraphicsObject3 = _interopRequireDefault(_GraphicsObject2);

var _graphicObjectMgr = __webpack_require__(/*! ./graphicObjectMgr */ "./src/pdf-jr/graphics/graphicObjectMgr.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var FormXObject = function (_GraphicsObject) {
  _inherits(FormXObject, _GraphicsObject);

  /**
   * 
   * @param {GSDK.GraphicsObject} graphicObject 
   * @param {GSDK.PDFPage} page 
   * @param {GSDK} engine 
   */
  function FormXObject(graphicObject, c_page, page, engine) {
    _classCallCheck(this, FormXObject);

    var _this = _possibleConstructorReturn(this, _GraphicsObject.call(this, graphicObject, c_page, page, engine));

    _this.graphicsObject = graphicObject.GetFormXObject();
    return _this;
  }

  FormXObject.prototype.getGraphicsObjectAtPoint = function getGraphicsObjectAtPoint(x, y, type, manager) {
    var GOs = this.graphicsObject.GetGraphicsObjects();
    var filter = this.engine.GraphicsObjectType.e_TypeAll;

    var pos = GOs.GetFirstGraphicsObjectPosition(filter);
    while (pos) {
      var graphicsObject = GOs.GetGraphicsObject(pos);

      var rect = graphicsObject.GetRect();
      if (rect.Contains(x, y)) {
        var jrObject = manager.get(graphicsObject, this.c_page);
        var objType = graphicsObject.GetType().value;
        if (objType === type) {
          return jrObject;
        }
        if (objType === 5) {
          return jrObject.getGraphicsObjectAtPoint(x, y, type, manager);
        }
      }

      pos = GOs.GetNextGraphicsObjectPosition(pos, filter);
    }

    return null;
  };

  FormXObject.prototype.getGraphicsObjectsAtPoint = function getGraphicsObjectsAtPoint(x, y, type, tolerance, manager) {
    var result = [];

    var GOs = this.graphicsObject.GetGraphicsObjects();
    var filter = this.engine.GraphicsObjectType.e_TypeAll;
    var formXMatrix = this.graphicsObject.GetMatrix();

    var pos = GOs.GetFirstGraphicsObjectPosition(filter);
    while (pos) {
      var graphicsObject = GOs.GetGraphicsObject(pos);

      /**
      * @type GSDK.CFX_FloatRect
      **/
      var rect = graphicsObject.GetRect();
      formXMatrix.TransformRect(rect);
      if (rect.Contains(x, y)) {
        var jrObject = manager.get(graphicsObject, this.c_page, this);
        var objType = graphicsObject.GetType().value;
        if (objType === type || type == 0) {
          result.push(jrObject);
        }
        if (objType === 5) {
          result = result.concat(jrObject.getGraphicsObjectsAtPoint(x, y, type, manager));
        }
      }

      pos = GOs.GetNextGraphicsObjectPosition(pos, filter);
    }

    return result;
  };

  FormXObject.prototype.toJson = function toJson() {
    var baseInfo = _GraphicsObject.prototype.toJson.call(this);

    var graphicsObjects = this.graphicsObject.GetGraphicsObjects();

    var chidren = (0, _graphicObjectMgr.getGraphicObjectsInfo)(this.engine, this.c_page, graphicsObjects, 0);

    return Object.assign({}, baseInfo, {
      chidren: chidren
    });
  };

  return FormXObject;
}(_GraphicsObject3.default);

exports.default = FormXObject;

/***/ }),

/***/ "./src/pdf-jr/graphics/GraphicsObject.js":
/*!***********************************************!*\
  !*** ./src/pdf-jr/graphics/GraphicsObject.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getUniqueId = __webpack_require__(/*! ../../shared/getUniqueId */ "./src/shared/getUniqueId.js");

var _getUniqueId2 = _interopRequireDefault(_getUniqueId);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GraphicsObject = function () {
  function GraphicsObject(object, c_page, page, engine, jr) {
    _classCallCheck(this, GraphicsObject);

    this.id = (0, _getUniqueId2.default)('graphics_object');
    /**
     * @type GSDK
     */
    this.engine = engine;
    /**
     * @type GSDK.PDFPage
     */
    this.c_page = c_page;
    this.page = page;
    /**
     * @type GSDK.GraphicsObject
     */
    this.graphicsObject = object;
    //this.index = index;

    this.jr = jr;
  }

  GraphicsObject.prototype.getType = function getType() {
    return this.graphicsObject.GetType().value;
  };

  GraphicsObject.prototype.toJson = function toJson() {
    var object = this.graphicsObject;

    var clipPathsJSON = [];

    var clipPathCount = object.GetClipPathCount();
    for (var index = 0; index < clipPathCount; index++) {
      var clipPath = object.GetClipPath(index);
      var clipFillMode = object.GetClipPathFillMode(index).value;
      var number = clipPath.GetPointCount();

      var clipPathJson = [];
      for (var pointIndex = 0; pointIndex < number; pointIndex++) {
        var point = clipPath.GetPoint(pointIndex);
        clipPathJson.push({
          index: pointIndex,
          x: point.x,
          y: point.y,
          type: clipPath.GetPointType(pointIndex).value
        });
      }
      clipPathsJSON.push({
        clipFillMode: clipFillMode,
        clipPathJson: clipPathJson
      });
    }

    var blendMode = object.GetBlendMode().value;

    var clipTextObjectCount = object.GetClipTextObjectCount();
    //todo

    var fillColor = object.GetFillColor();
    var strokeColor = object.GetStrokeColor();

    var graphicState = object.GetGraphState();
    var dashes = [];
    for (var _index = 0; _index < graphicState.dashes.GetSize(); _index++) {
      dashes.push(graphicState.dashes.GetAt(_index));
    }

    var matrix = object.GetMatrix();
    var rect = object.GetRect();

    return {
      id: this.id,
      clipPaths: clipPathsJSON,
      graphState: {
        dashes: dashes,
        lineCap: graphicState.line_cap.value,
        lineJoin: graphicState.line_join.value,
        lineWidth: graphicState.line_width,
        lineLimit: graphicState.line_limit
      },
      blendMode: blendMode,
      //index:this.index,
      fillColor: fillColor,
      strokeColor: strokeColor,
      hasTransparency: object.HasTransparency(),
      type: object.GetType().value,
      matrix: {
        a: matrix.a,
        b: matrix.b,
        c: matrix.c,
        d: matrix.d,
        e: matrix.e,
        f: matrix.f
      },
      rect: {
        left: rect.left,
        top: rect.top,
        right: rect.right,
        bottom: rect.bottom
      }
    };
  };

  GraphicsObject.prototype.setMatrix = function setMatrix(rect) {
    /*let m = this.graphicsObject.GetMatrix();
    let oriRect = this.graphicsObject.GetRect();
    m.SetReverse(m);
    m.TransformRect(oriRect);
    m.delete();
     m = new this.engine.Matrix();
    let pdfRect = new this.engine.CFX_FloatRect(rect.left,rect.bottom,rect.right,rect.top)
    m.a=pdfRect.Width()/oriRect.Width();
    m.d=pdfRect.Height()/oriRect.Height();
    m.e=pdfRect.left-m.a*oriRect.left;
    m.f=pdfRect.bottom-m.d*oriRect.bottom;
    this.graphicsObject.SetMatrix(m)
    this.c_page.GenerateContent();
     m.delete();*/
    var m = this.graphicsObject.GetMatrix();
    var oriRect = this.graphicsObject.GetRect();
    var pdfRect = new this.engine.CFX_FloatRect(rect.left, rect.bottom, rect.right, rect.top);
    var sx = pdfRect.Width() / oriRect.Width();
    var sy = pdfRect.Height() / oriRect.Height();
    m.Scale(sx, sy, 0);
    m.Translate(pdfRect.left - sx * oriRect.left, pdfRect.bottom - sy * oriRect.bottom, 0);
    this.graphicsObject.SetMatrix(m);
    this.c_page.GenerateContent();
    m.delete();
  };

  GraphicsObject.prototype.render = function render() {
    var scale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

    var engine = this.engine;
    /**
     * @type GSDK.CFX_FloatRect
     */
    var rect = this.graphicsObject.GetRect();

    var objectMatrix = this.graphicsObject.GetMatrix();
    var matrix = new engine.Matrix();
    matrix.Rotate(-this.c_page.GetRotation().value * Math.PI / 2, 0);

    matrix.TransformRect(rect);

    matrix.e = -rect.left;
    matrix.f = -rect.bottom;

    matrix.Scale(scale, scale, false);
    //matrix.SetReverse(objectMatrix);

    var width = rect.Width();
    var height = rect.Height();

    var bitmapWidth = Math.max(width * scale, 1);
    var bitmapHeight = Math.max(height * scale, 1);

    var bitmap = new engine.Bitmap(bitmapWidth, bitmapHeight, engine.DIBFormat.e_DIBArgb, 0, 0);
    var renderer = new engine.Renderer(bitmap, true);
    renderer.RenderGraphicsObject(this.graphicsObject, this.c_page, matrix);

    var flipBitmap = bitmap.Flip(false, true);
    bitmapWidth = flipBitmap.GetWidth();
    bitmapHeight = flipBitmap.GetHeight();

    var start = flipBitmap.GetBuffer();
    var size = bitmapHeight * flipBitmap.GetPitch();
    var end = start + size;
    var imageDataBuffer = void 0;

    if (engine.HEAPU8.buffer.slice) {
      imageDataBuffer = engine.HEAPU8.buffer.slice(start, end);
    } else {
      imageDataBuffer = new Uint8Array(engine.HEAPU8.buffer, start, size).buffer;
    }

    renderer.delete();
    bitmap.delete();
    flipBitmap.delete();

    return {
      buffer: imageDataBuffer,
      width: bitmapWidth,
      height: bitmapHeight
    };
  };

  GraphicsObject.prototype.updateGraphState = function updateGraphState(proprerty, value) {
    var extraParam = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

    var graphicState = this.graphicsObject.GetGraphState();
    switch (proprerty) {
      case 'BorderStyle':
        var dashes = new this.engine.FloatArray();
        dashes.SetSize(extraParam.length, -1);
        for (var eleIndex = 0; eleIndex < extraParam.length; eleIndex++) {
          dashes.SetAt(eleIndex, extraParam[eleIndex]);
        }
        graphicState.dashes = dashes;
        break;
      case 'BorderWidth':
        graphicState.line_width = value;
        break;
      case 'opacity':
    }
    this.graphicsObject.SetGraphState(graphicState);
  };

  GraphicsObject.prototype.setBorderStyle = function setBorderStyle(style, dashes) {
    var resetContent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

    this.updateGraphState('BorderStyle', style, dashes);
    if (resetContent) {
      this.c_page.GenerateContent();
    }
    return this.toJson();
  };

  GraphicsObject.prototype.setBorderWidth = function setBorderWidth(width) {
    var resetContent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

    this.updateGraphState('BorderWidth', width);
    if (resetContent) {
      this.c_page.GenerateContent();
    }
    return this.toJson();
  };

  GraphicsObject.prototype.setBorderColor = function setBorderColor(color) {
    var resetContent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

    var oriColor = this.graphicsObject.GetStrokeColor();
    var alpha = oriColor & 0xff000000;
    this.graphicsObject.SetStrokeColor((color | alpha) >>> 0);
    if (resetContent) {
      this.c_page.GenerateContent();
    }
    return this.toJson();
  };

  GraphicsObject.prototype.setFillColor = function setFillColor(color) {
    var resetContent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

    this.graphicsObject.SetFillColor((color | 0xff000000) >>> 0);
    if (resetContent) {
      this.c_page.GenerateContent();
    }
    return this.toJson();
  };

  GraphicsObject.prototype.setOpacity = function setOpacity(opacity) {
    var resetContent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

    this.graphicsObject.SetFillOpacity(opacity);
    this.graphicsObject.SetStrokeOpacity(opacity);
    if (resetContent) {
      this.c_page.GenerateContent();
    }
    return this.toJson();
  };

  GraphicsObject.prototype.remove = function remove() {
    this.c_page.RemoveGraphicsObject(this.graphicsObject);
    this.c_page.GenerateContent();
  };

  return GraphicsObject;
}();

exports.default = GraphicsObject;

/***/ }),

/***/ "./src/pdf-jr/graphics/GraphicsObjectManager.js":
/*!******************************************************!*\
  !*** ./src/pdf-jr/graphics/GraphicsObjectManager.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _GraphicsObject = __webpack_require__(/*! ./GraphicsObject */ "./src/pdf-jr/graphics/GraphicsObject.js");

var _GraphicsObject2 = _interopRequireDefault(_GraphicsObject);

var _TextObject = __webpack_require__(/*! ./TextObject */ "./src/pdf-jr/graphics/TextObject.js");

var _TextObject2 = _interopRequireDefault(_TextObject);

var _PathObject = __webpack_require__(/*! ./PathObject */ "./src/pdf-jr/graphics/PathObject.js");

var _PathObject2 = _interopRequireDefault(_PathObject);

var _ImageObject = __webpack_require__(/*! ./ImageObject */ "./src/pdf-jr/graphics/ImageObject.js");

var _ImageObject2 = _interopRequireDefault(_ImageObject);

var _FormXObject = __webpack_require__(/*! ./FormXObject */ "./src/pdf-jr/graphics/FormXObject.js");

var _FormXObject2 = _interopRequireDefault(_FormXObject);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } /**
                                                                                                                                                           * Created by linc on 2019/4/23.
                                                                                                                                                           */


var GraphicsObjectManager = function () {
    function GraphicsObjectManager(engine, jr) {
        _classCallCheck(this, GraphicsObjectManager);

        this.engine = engine;
        this.jr = jr;
    }

    GraphicsObjectManager.prototype.get = function get(object, c_page, page) {
        var engine = this.engine;
        var types = engine.GraphicsObjectType;
        switch (object.GetType()) {
            case types.e_TypeText:
                return new _TextObject2.default(object, c_page, page, engine, this.jr);
            case types.e_TypePath:
                return new _PathObject2.default(object, c_page, page, engine, this.jr);
            case types.e_TypeImage:
                return new _ImageObject2.default(object, c_page, page, engine, this.jr);
            case types.e_TypeFormXObject:
                return new _FormXObject2.default(object, c_page, page, engine, this.jr);
            default:
                return new _GraphicsObject2.default(object, c_page, page, engine, this.jr);
        }
    };

    GraphicsObjectManager.prototype.create = function create(info, c_page, page) {
        var engine = this.engine;
        var types = engine.GraphicsObjectType;
        switch (info.type) {
            case types.e_TypeText.value:
                return _TextObject2.default.create(info, c_page, page, engine, this);
            case types.e_TypePath.value:
                return _PathObject2.default.create(info, c_page, page, engine, this);
            case types.e_TypeImage.value:
                return _ImageObject2.default.create(info, c_page, page, engine, this);
            default:
                return;
        }
    };

    return GraphicsObjectManager;
}();

exports.default = GraphicsObjectManager;

/***/ }),

/***/ "./src/pdf-jr/graphics/ImageObject.js":
/*!********************************************!*\
  !*** ./src/pdf-jr/graphics/ImageObject.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _GraphicsObject2 = __webpack_require__(/*! ./GraphicsObject */ "./src/pdf-jr/graphics/GraphicsObject.js");

var _GraphicsObject3 = _interopRequireDefault(_GraphicsObject2);

var _Image = __webpack_require__(/*! ../base/Image */ "./src/pdf-jr/base/Image.js");

var _Image2 = _interopRequireDefault(_Image);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var ImageObject = function (_GraphicsObject) {
    _inherits(ImageObject, _GraphicsObject);

    function ImageObject(graphicObject, c_page, page, engine) {
        _classCallCheck(this, ImageObject);

        var _this = _possibleConstructorReturn(this, _GraphicsObject.call(this, graphicObject, c_page, page, engine));

        _this.imageObject = graphicObject.GetImageObject();
        return _this;
    }

    ImageObject.prototype.setRotation = function setRotation(rotation) {
        var resetContent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        var radian = rotation * Math.PI / 180;
        var oriRect = this.graphicsObject.GetRect();
        var center = {
            x: (oriRect.right + oriRect.left) / 2,
            y: (oriRect.top + oriRect.bottom) / 2
        };
        var m = this.graphicsObject.GetMatrix();
        m.RotateAt(-radian, -center.x, -center.y, 0);
        // m.Translate(-center.x,-center.y,0);
        // m.Rotate(-radian,0);
        // m.Translate(center.x,center.y,0);
        this.graphicsObject.SetMatrix(m);
        this.c_page.GenerateContent();
        m.delete();
        return this.toJson();
    };

    ImageObject.create = function create(info, PdfPage, page, engine, graphicsManager) {
        var imageObject = engine.ImageObject.Create(page.doc);
        try {
            var image = _Image2.default.createImage(engine, info.buffer);
            imageObject.SetImage(image, 0);
            var m = imageObject.GetMatrix();
            var _info$rect = info.rect,
                left = _info$rect.left,
                right = _info$rect.right,
                top = _info$rect.top,
                bottom = _info$rect.bottom;

            m.a = right - left;
            m.d = top - bottom;
            m.Translate(left, bottom, 0);
            imageObject.SetMatrix(m);
            var pos = PdfPage.GetLastGraphicsObjectPosition(engine.GraphicsObjectType.e_TypeAll);
            PdfPage.InsertGraphicsObject(pos, imageObject);

            PdfPage.GenerateContent();

            PdfPage.StartParse(0, null, true);

            pos = PdfPage.GetLastGraphicsObjectPosition(engine.GraphicsObjectType.e_TypeAll);
            imageObject = PdfPage.GetGraphicsObject(pos);
        } catch (err) {
            if (!isNaN(err)) {
                err = this.engine.getErrorCode(err);
            }
            console.warn(err);
        }
        return graphicsManager.get(imageObject, PdfPage, page);
    };

    return ImageObject;
}(_GraphicsObject3.default);

exports.default = ImageObject;

/***/ }),

/***/ "./src/pdf-jr/graphics/PathObject.js":
/*!*******************************************!*\
  !*** ./src/pdf-jr/graphics/PathObject.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _GraphicsObject2 = __webpack_require__(/*! ./GraphicsObject */ "./src/pdf-jr/graphics/GraphicsObject.js");

var _GraphicsObject3 = _interopRequireDefault(_GraphicsObject2);

var _FormXObject = __webpack_require__(/*! ./FormXObject */ "./src/pdf-jr/graphics/FormXObject.js");

var _FormXObject2 = _interopRequireDefault(_FormXObject);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var PathObject = function (_GraphicsObject) {
  _inherits(PathObject, _GraphicsObject);

  function PathObject(graphicObject, c_page, page, engine, jr) {
    _classCallCheck(this, PathObject);

    /**
     * @type GSDK.PathObject
     */
    var _this = _possibleConstructorReturn(this, _GraphicsObject.call(this, graphicObject, c_page, page, engine, jr));

    _this.graphicsObject = graphicObject.GetPathObject();
    return _this;
  }

  PathObject.prototype.toJson = function toJson() {
    var graphicObject = this.graphicsObject;
    var baseInfo = _GraphicsObject.prototype.toJson.call(this);

    var path = this.graphicsObject.GetPathData();
    var number = path.GetPointCount();

    var pathList = [];
    for (var pointIndex = 0; pointIndex < number; pointIndex++) {
      var point = path.GetPoint(pointIndex);
      pathList.push({
        x: point.x,
        y: point.y,
        type: path.GetPointType(pointIndex).value
      });
    }

    var pathInfo = {
      fillMode: graphicObject.GetFillMode().value,
      strokeState: graphicObject.GetStrokeState(),
      path: pathList,
      needStroke: graphicObject.GetStrokeState()
    };

    return Object.assign(pathInfo, baseInfo);
  };

  PathObject.prototype.setBorderColor = function setBorderColor(color) {
    this.graphicsObject.SetStrokeState(color !== 0);
    _GraphicsObject.prototype.setBorderColor.call(this, color);
  };

  PathObject.prototype.setFillColor = function setFillColor(color) {
    var resetContent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

    if (color === 0) {
      this.graphicsObject.SetFillColor(0xff000000 >>> 0);
      this.graphicsObject.SetFillMode(this.engine.FillMode.e_FillModeNone);
    } else {
      this.graphicsObject.SetFillColor((color | 0xff000000) >>> 0);
      this.graphicsObject.SetFillMode(this.engine.FillMode.e_FillModeWinding);
    }
    if (resetContent) {
      this.c_page.GenerateContent();
    }
    return this.toJson();
  };

  PathObject.prototype.isPointInLine = function isPointInLine(x, y) {
    var torance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3;

    var path = this.graphicsObject.GetPathData();
    var number = path.GetPointCount();

    var startPoint = void 0;
    var currentPoint = void 0;
    var endPoint = void 0;

    var dx = void 0,
        dy = void 0,
        percentage = void 0;

    var m = this.graphicsObject.GetMatrix();
    if (this.page instanceof _FormXObject2.default) {
      var parantMatrix = this.page.graphicsObject.GetMatrix();
      parantMatrix.Concat(m.a, m.b, m.c, m.d, m.e, m.f, false);
      m.delete();
      m = parantMatrix;
    }

    var bezierPoint = [];
    for (var pointIndex = 0; pointIndex < number; pointIndex++) {
      var point = path.GetPoint(pointIndex);
      point = m.TransformPoint(point.x, point.y);
      switch (path.GetPointType(pointIndex).value) {
        case 1:
          currentPoint = startPoint = [point.x, point.y];
          break;
        case 2:
          //l
          endPoint = [point.x, point.y];
          dx = endPoint[0] - currentPoint[0];
          dy = endPoint[1] - currentPoint[1];
          percentage = Math.max(Math.abs(dx), Math.abs(dy));

          for (var i = 0; i < percentage; i++) {
            var linePoint = [currentPoint[0] + dx * i / percentage, currentPoint[1] + dy * i / percentage];
            if (getPointsLength([x, y], linePoint) < torance) {
              return true;
            }
          }

          currentPoint = endPoint;
          break;
        case 3:
          //h
          dx = currentPoint[0] - startPoint[0];
          dy = currentPoint[1] - startPoint[1];
          percentage = Math.max(Math.abs(dx), Math.abs(dy));

          for (var _i = 0; _i < percentage; _i++) {
            var _linePoint = [startPoint[0] + dx * _i / percentage, startPoint[1] + dy * _i / percentage];
            if (getPointsLength([x, y], _linePoint) < torance) {
              return true;
            }
          }
          startPoint = currentPoint = [];
        case 4: //c
        case 5:
          // c h
          var p = [point.x, point.y];
          bezierPoint.push(p);

          percentage = Math.ceil(Math.max(Math.abs(point.x - currentPoint[0]), Math.abs(point.y - currentPoint[1])));
          if (bezierPoint.length == 3) {
            for (var _i2 = 0; _i2 < percentage; _i2++) {
              var bezierP = calculateBezierPointForCubic(_i2 / percentage, currentPoint, bezierPoint[0], bezierPoint[1], bezierPoint[2]);

              if (getPointsLength([x, y], bezierP) < torance) {
                return true;
              }
            }
            bezierPoint = [];
            currentPoint = p;
          }
      }
    }
    return false;
  };

  /**
   * 
   * @param {*} info 
   * @param {GSDK.PDFPage} PdfPage
   * @param {GSDK} engine 
   */


  PathObject.create = function create(info, PdfPage, page, engine, graphicsManager) {
    /**
     * @type GSDK.PathObject
     */
    var pathObject = engine.PathObject.Create();
    try {
      var pathData = new engine.Path();

      var bezierPoints = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = info.points[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var point = _step.value;

          switch (point[0]) {
            case 'm':
              pathData.MoveTo(new engine.PointF(point[1], point[2]));
              break;
            case 'l':
              pathData.LineTo(new engine.PointF(point[1], point[2]));
              break;
            case 'c':
              bezierPoints.push(new engine.PointF(point[1], point[2]));
              if (bezierPoints.length == 3) {
                pathData.CubicBezierTo(bezierPoints[0], bezierPoints[1], bezierPoints[2]);
                bezierPoints.length = 0;
              }
              break;
            case 'h':
              pathData.CloseFigure();
              break;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      pathObject.SetPathData(pathData);
      pathObject.SetStrokeColor(0xff000000);

      var graphicState = pathObject.GetGraphState();
      graphicState.line_width = info.borderWidth || 1;

      pathObject.SetGraphState(graphicState);

      var pos = PdfPage.GetLastGraphicsObjectPosition(engine.GraphicsObjectType.e_TypeAll);
      PdfPage.InsertGraphicsObject(pos, pathObject);

      PdfPage.GenerateContent();

      PdfPage.StartParse(0, null, true);

      pos = PdfPage.GetLastGraphicsObjectPosition(engine.GraphicsObjectType.e_TypeAll);

      pathObject = PdfPage.GetGraphicsObject(pos);
    } catch (err) {
      if (!isNaN(err)) {
        err = this.engine.getErrorCode(err);
      }
      console.warn(err);
    }

    return graphicsManager.get(pathObject, PdfPage, page);
  };

  return PathObject;
}(_GraphicsObject3.default);

exports.default = PathObject;

function isPointInLine(startPoint, endPoint, x, y, torance) {
  var left = Math.min(startPoint[0], endPoint[0]) - torance;
  var right = Math.max(startPoint[0], endPoint[0]) + torance;
  var top = Math.max(startPoint[1], endPoint[1]) + torance;
  var bottom = Math.min(startPoint[0], endPoint[0]) - torance;

  return x > left && x < right && y > bottom && y < top;
}
function getPointsLength(p1, p2) {
  var dy = p2[1] - p1[1];
  var dx = p2[0] - p1[0];
  return Math.sqrt(dx * dx + dy * dy);
}
function calculateBezierPointForCubic(t, p0, p1, p2, p3) {
  var point = [1, 1];
  var temp = 1 - t;
  point[0] = p0[0] * temp * temp * temp + 3 * p1[0] * t * temp * temp + 3 * p2[0] * t * t * temp + p3[0] * t * t * t;
  point[1] = p0[1] * temp * temp * temp + 3 * p1[1] * t * temp * temp + 3 * p2[1] * t * t * temp + p3[1] * t * t * t;
  return point;
}

/***/ }),

/***/ "./src/pdf-jr/graphics/TextObject.js":
/*!*******************************************!*\
  !*** ./src/pdf-jr/graphics/TextObject.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _GraphicsObject2 = __webpack_require__(/*! ./GraphicsObject */ "./src/pdf-jr/graphics/GraphicsObject.js");

var _GraphicsObject3 = _interopRequireDefault(_GraphicsObject2);

var _PDFFontMgr = __webpack_require__(/*! ../PDFFontMgr */ "./src/pdf-jr/PDFFontMgr.js");

var _PDFFontMgr2 = _interopRequireDefault(_PDFFontMgr);

var _getThirdPartyFontBuffer = __webpack_require__(/*! ../getThirdPartyFontBuffer */ "./src/pdf-jr/getThirdPartyFontBuffer.js");

var _getThirdPartyFontBuffer2 = _interopRequireDefault(_getThirdPartyFontBuffer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var TextObject = function (_GraphicsObject) {
    _inherits(TextObject, _GraphicsObject);

    function TextObject(graphicObject, c_page, page, engine, jr) {
        _classCallCheck(this, TextObject);

        /**
         * @type GSDK.TextObject
         */
        var _this = _possibleConstructorReturn(this, _GraphicsObject.call(this, graphicObject, c_page, page, engine));

        _this.graphicsObject = graphicObject.GetTextObject();
        _this.jr = jr;
        return _this;
    }

    TextObject.create = function create(info, c_page, page, engine, graphicsObjectManager) {
        var textObject = engine.TextObject.Create();
        // pdf的左上角
        var originPosition = info.originPosition;
        if (!originPosition) {
            throw 'originPosition is required';
        }
        var left = originPosition.x;
        var bottom = originPosition.y;
        var charspace = info.charspace || 0;
        var wordspace = info.wordspace || 0;
        var fontSize = info.fontSize || 12;
        var textmatrix = info.textmatrix || [1, 0, 0, 1];
        var textmode = engine.Mode.values[info.textmode || 0];
        var font = void 0;
        if (info.font) {
            var fontInfo = info.font;
            if (typeof fontInfo.standardId !== 'undefined') {
                font = new engine.Font(engine.StandardID.values[fontInfo.standardId]);
            } else {
                font = new engine.Font(new engine.WString(fontInfo.name), fontInfo.styles, engine.Charset.values[fontInfo.charset == 1 ? 0 : fontInfo.charset], fontInfo.weight || 0);
            }
        } else {
            font = new engine.Font(new engine.WString('FoxitSansOTF'), 458863, engine.Charset.e_CharsetANSI, 400);
        }
        var textState = textObject.GetTextState(c_page);
        textState.font = font;
        textState.font_size = fontSize;
        textState.charspace = charspace;
        textState.wordspace = wordspace;
        textState.textmode = textmode;
        textState.origin_position = new engine.PointF(left, bottom);
        textState.textmatrix = textmatrix;
        //let textState = new engine.TextState(1, font, fontSize, charspace, wordspace, textmode, new engine.PointF(left, bottom), textmatrix)
        textObject.SetTextState(c_page, textState, !!info.italic, info.weight || 400);
        //if (info.text) {
        textObject.SetText(new engine.WString(info.text || ''));
        //}
        if (info.fillColor) {
            textObject.SetFillColor((info.fillColor | 0xff000000) >>> 0);
        }

        var pos = c_page.GetLastGraphicsObjectPosition(engine.GraphicsObjectType.e_TypeAll);
        c_page.InsertGraphicsObject(pos, textObject);
        c_page.GenerateContent();
        //return page.reParsePage().then((c_page) => {
        return graphicsObjectManager.get(textObject, c_page, page);
        //});
    };

    TextObject.prototype.toJson = function toJson() {
        var baseInfo = _GraphicsObject.prototype.toJson.call(this);
        var textInfo = {};
        var engine = this.engine;
        var c_page = this.c_page;
        var c_doc = c_page.GetDocument();
        var textState = this.graphicsObject.GetTextState(c_page);
        var font = textState.font;
        var fontJson = {};
        if (!font.IsEmpty()) {
            fontJson.name = font.GetName().toString();
            var familyName = font.GetFamilyName().toString();
            fontJson.familyName = familyName;
            var baseName = fontJson.baseName = font.GetBaseFontName(c_doc).toString();
            //console.log('familyName', familyName)
            fontJson.ascent = font.GetAscent();
            fontJson.descent = font.GetDescent();
            fontJson.isItalic = font.IsItalic();
            var isBold = fontJson.isBold = font.IsBold();
            var weight = isBold ? 700 : 400;
            var nameKey = void 0;

            var styles = fontJson.styles = font.GetStyles(c_doc);
            var charset = engine.Charset.e_CharsetDefault.value;
            if (font.GetFontType(c_doc) == engine.FontTypes.e_FontTypeCIDFont) {
                charset = font.GetCharset(c_doc);;
                // font.GetCharset(c_doc) 值返回的不对
                if (charset === engine.Charset.e_CharsetDefault) {
                    charset = engine.Charset.values[_getThirdPartyFontBuffer2.default.getCharsetFromName(font.GetBaseFontName(c_doc).toString())];
                    if (!charset) {
                        charset = engine.Charset.e_CharsetANSI;
                    }
                }
                charset = charset.value;
            }
            fontJson.charset = charset;
            if (font.IsEmbedded(c_doc)) {
                fontJson.isEmbedded = true;
                fontJson.nameKey = 'fv_' + this.id;
            } else if (font.IsStandardFont(c_doc)) {
                fontJson.isStandard = true;
                fontJson.standardId = font.GetStandard14Font(c_doc).value;
                if (nameKey = _getThirdPartyFontBuffer2.default.getFontMatch(baseName, charset, 0, weight, styles)) {
                    nameKey = 'fv_' + nameKey.replace(/\./g, '_');
                    fontJson.nameKey = nameKey;
                }
            } else if (nameKey = _getThirdPartyFontBuffer2.default.getFontMatch(baseName, charset, 0, weight, styles)) {
                nameKey = 'fv_' + nameKey.replace(/\./g, '_');
                fontJson.nameKey = nameKey;
            }
        }

        //baseInfo.fonturl = PDFFontMgr.addFont(font.GetWoffData(this.c_page.GetDocument()), this.engine);
        textInfo.textState = {
            text: this.graphicsObject.GetText().toString(),
            charSpace: textState.charspace,
            font: fontJson,
            size: textState.font_size,
            position: {
                x: textState.origin_position.x,
                y: textState.origin_position.y
            },
            // matrix:[
            //   textState.textmatrix[0],
            //   textState.textmatrix[1],
            //   textState.textmatrix[2],
            //   textState.textmatrix[3],
            // ],
            matrix: [textState.GetMatrixA(), textState.GetMatrixB(), textState.GetMatrixC(), textState.GetMatrixD()],
            mode: textState.textmode.value,
            wordSpace: textState.wordspace
        };

        return Object.assign({}, baseInfo, textInfo);
    };

    TextObject.prototype.setText = function setText(char) {
        var c_page = this.c_page;
        var graphicsObject = this.graphicsObject;
        var textState = graphicsObject.GetTextState(c_page);
        var font = textState.font;
        graphicsObject.SetText(new this.engine.WString(char));
        //if (!font.IsEmpty()) {
        //    let isItalic = font.IsEmpty() ? false : font.IsItalic();
        //    let weight = font.IsEmpty() ? 400 : (font.IsBold() ? 700 : 400);
        //    font = new this.engine.Font(font.GetName(), this.engine.Styles.e_StyleSerif.value, this.engine.Charset.e_CharsetGB2312.value, 400);
        //    textState.font = font;
        //    graphicsObject.SetTextState(c_page, textState, isItalic, weight);
        //}
        this.c_page.GenerateContent();
        return this.reParsePage();
    };

    TextObject.prototype.setItalic = function setItalic(italic) {
        var c_page = this.c_page;
        var c_doc = c_page.GetDocument();
        var graphicsObject = this.graphicsObject;
        var engine = this.engine;
        var textState = graphicsObject.GetTextState(c_page);
        var font = textState.font;
        var newFont = void 0;
        if (font.IsEmpty()) {
            return Promise.resolve();
        } else if (font.IsStandardFont(c_doc)) {
            var standardId = font.GetStandard14Font(c_doc);
            var newStandardId = void 0;
            if (italic) {
                switch (standardId) {
                    case engine.StandardID.e_StdIDCourier:
                        newStandardId = engine.StandardID.e_StdIDCourierI;
                        break;
                    case engine.StandardID.e_StdIDCourierB:
                        newStandardId = engine.StandardID.e_StdIDCourierBI;
                        break;
                    case engine.StandardID.e_StdIDHelvetica:
                        newStandardId = engine.StandardID.e_StdIDHelveticaI;
                        break;
                    case engine.StandardID.e_StdIDHelveticaB:
                        newStandardId = engine.StandardID.e_StdIDHelveticaBI;
                        break;
                    case engine.StandardID.e_StdIDTimes:
                        newStandardId = engine.StandardID.e_StdIDTimesI;
                        break;
                    case engine.StandardID.e_StdIDTimesB:
                        newStandardId = engine.StandardID.e_StdIDTimesBI;
                        break;
                }
            } else {
                switch (standardId) {
                    case engine.StandardID.e_StdIDCourierI:
                        newStandardId = engine.StandardID.e_StdIDCourier;
                        break;
                    case engine.StandardID.e_StdIDCourierBI:
                        newStandardId = engine.StandardID.e_StdIDCourierB;
                        break;
                    case engine.StandardID.e_StdIDHelveticaI:
                        newStandardId = engine.StandardID.e_StdIDHelvetica;
                        break;
                    case engine.StandardID.e_StdIDHelveticaBI:
                        newStandardId = engine.StandardID.e_StdIDHelveticaB;
                        break;
                    case engine.StandardID.e_StdIDTimesI:
                        newStandardId = engine.StandardID.e_StdIDTimes;
                        break;
                    case engine.StandardID.e_StdIDTimesBI:
                        newStandardId = engine.StandardID.e_StdIDTimesB;
                        break;
                }
            }
            if (newStandardId) {
                newFont = new engine.Font(newStandardId);
            }
        } else {
            var styles = font.GetStyles(c_doc);
            var styleItalic = engine.Styles.e_StyleItalic.value;
            if (italic) {
                styles |= styleItalic;
            } else {
                styles &= ~styleItalic;
            }
            var charset = engine.Charset.e_CharsetANSI;
            if (font.GetFontType(c_doc) == engine.FontTypes.e_FontTypeCIDFont) {
                charset = font.GetCharset(c_doc);
                // font.GetCharset(c_doc) 值返回的不对
                if (charset === engine.Charset.e_CharsetDefault) {
                    charset = engine.Charset.values[_getThirdPartyFontBuffer2.default.getCharsetFromName(font.GetBaseFontName(c_doc).toString())];
                    if (!charset) {
                        charset = engine.Charset.e_CharsetANSI;
                    }
                }
            }
            newFont = new engine.Font(new engine.WString(font.GetBaseFontName(c_doc)), styles, charset, font.IsBold() ? 700 : 400);
        }
        if (newFont) {
            textState.font = newFont;
            graphicsObject.SetTextState(c_page, textState, newFont.IsItalic(), newFont.IsBold() ? 700 : 400);
            if (!graphicsObject.GetText().toString()) {
                //这个会触发Rect的计算
                graphicsObject.SetText(new this.engine.WString(''));
            }
            c_page.GenerateContent();
            return this.reParsePage();
        } else {
            return Promise.resolve();
        }
    };

    TextObject.prototype.setBold = function setBold(bold) {
        var c_page = this.c_page;
        var c_doc = c_page.GetDocument();
        var graphicsObject = this.graphicsObject;
        var engine = this.engine;
        var textState = graphicsObject.GetTextState(c_page);
        var font = textState.font;
        var newFont = void 0;
        if (font.IsEmpty()) {
            return Promise.resolve();
        } else if (font.IsStandardFont(c_doc)) {
            var standardId = font.GetStandard14Font(c_doc);
            var newStandardId = void 0;
            if (bold) {
                switch (standardId) {
                    case engine.StandardID.e_StdIDCourier:
                        newStandardId = engine.StandardID.e_StdIDCourierB;
                        break;
                    case engine.StandardID.e_StdIDCourierI:
                        newStandardId = engine.StandardID.e_StdIDCourierBI;
                        break;
                    case engine.StandardID.e_StdIDHelvetica:
                        newStandardId = engine.StandardID.e_StdIDHelveticaB;
                        break;
                    case engine.StandardID.e_StdIDHelveticaI:
                        newStandardId = engine.StandardID.e_StdIDHelveticaBI;
                        break;
                    case engine.StandardID.e_StdIDTimes:
                        newStandardId = engine.StandardID.e_StdIDTimesB;
                        break;
                    case engine.StandardID.e_StdIDTimesI:
                        newStandardId = engine.StandardID.e_StdIDTimesBI;
                        break;
                }
            } else {
                switch (standardId) {
                    case engine.StandardID.e_StdIDCourierB:
                        newStandardId = engine.StandardID.e_StdIDCourier;
                        break;
                    case engine.StandardID.e_StdIDCourierBI:
                        newStandardId = engine.StandardID.e_StdIDCourierI;
                        break;
                    case engine.StandardID.e_StdIDHelveticaB:
                        newStandardId = engine.StandardID.e_StdIDHelvetica;
                        break;
                    case engine.StandardID.e_StdIDHelveticaBI:
                        newStandardId = engine.StandardID.e_StdIDHelveticaI;
                        break;
                    case engine.StandardID.e_StdIDTimesB:
                        newStandardId = engine.StandardID.e_StdIDTimes;
                        break;
                    case engine.StandardID.e_StdIDTimesBI:
                        newStandardId = engine.StandardID.e_StdIDTimesI;
                        break;
                }
            }
            if (newStandardId) {
                newFont = new engine.Font(newStandardId);
            }
        } else {
            var styles = font.GetStyles(c_doc);
            var styleBold = engine.Styles.e_StylesBold.value;
            if (bold) {
                styles |= styleBold;
            } else {
                styles &= ~styleBold;
            }
            var charset = engine.Charset.e_CharsetANSI;
            if (font.GetFontType(c_doc) == engine.FontTypes.e_FontTypeCIDFont) {
                charset = font.GetCharset(c_doc);
                // font.GetCharset(c_doc) 值返回的不对
                if (charset === engine.Charset.e_CharsetDefault) {
                    charset = engine.Charset.values[_getThirdPartyFontBuffer2.default.getCharsetFromName(font.GetBaseFontName(c_doc).toString())];
                    if (!charset) {
                        charset = engine.Charset.e_CharsetANSI;
                    }
                }
            }
            newFont = new engine.Font(new engine.WString(font.GetBaseFontName(c_doc)), styles, charset, bold ? 700 : 400);
        }
        if (newFont) {
            textState.font = newFont;
            graphicsObject.SetTextState(c_page, textState, newFont.IsItalic(), newFont.IsBold() ? 700 : 400);
            if (!graphicsObject.GetText().toString()) {
                //这个会触发Rect的计算
                graphicsObject.SetText(new this.engine.WString(''));
            }
            c_page.GenerateContent();
            return this.reParsePage();
        } else {
            return Promise.resolve();
        }
    };

    TextObject.prototype.setFontSize = function setFontSize(size) {
        var c_page = this.c_page;
        var graphicsObject = this.graphicsObject;
        var textState = graphicsObject.GetTextState(c_page);
        var font = textState.font;
        //textState.Set(textState.version, textState.font, size, textState.charspace, textState.wordspace, textState.textmode, textState.origin_position, textState.textmatrix);
        textState.font_size = size;
        var weight = font.IsEmpty() ? 400 : font.IsBold() ? 700 : 400;
        var isItalic = font.IsEmpty() ? false : font.IsItalic();
        graphicsObject.SetTextState(c_page, textState, isItalic, weight);
        if (!graphicsObject.GetText().toString()) {
            //这个会触发Rect的计算
            graphicsObject.SetText(new this.engine.WString(''));
        }
        c_page.GenerateContent();
        return this.reParsePage();
    };

    TextObject.prototype.setStandardFont = function setStandardFont(id) {
        var engine = this.engine;
        id = engine.StandardID.values[id];
        var font = new engine.Font(id);
        //let font = new engine.Font(new this.engine.WString('SimSun'), 458863, this.engine.Charset.e_CharsetGB2312, 400)
        //if (!font.IsEmpty()) {
        //    let isItalic = font.IsEmpty() ? false : font.IsItalic();
        //    let weight = font.IsEmpty() ? 400 : (font.IsBold() ? 700 : 400);
        //    font = new this.engine.Font(new engine.WString(font.GetBaseFontName(c_doc)), this.engine.Styles.e_StyleSerif.value, this.engine.Charset.e_CharsetGB2312.value, 400);
        //    textState.font = font;
        //    graphicsObject.SetTextState(c_page, textState, isItalic, weight);
        //}
        var c_page = this.c_page;
        var graphicsObject = this.graphicsObject;
        var textState = graphicsObject.GetTextState(c_page);
        //textState.Set(textState.version, font, textState.font_size, textState.charspace, textState.wordspace, textState.textmode, textState.origin_position, textState.textmatrix);
        textState.font = font;
        var weight = font.IsEmpty() ? 400 : font.IsBold() ? 700 : 400;
        var isItalic = font.IsEmpty() ? false : font.IsItalic();
        graphicsObject.SetTextState(c_page, textState, isItalic, weight);
        if (!graphicsObject.GetText().toString()) {
            //这个会触发Rect的计算
            graphicsObject.SetText(new this.engine.WString(''));
        }
        c_page.GenerateContent();
        return this.reParsePage();
    };

    TextObject.prototype.setFontByName = function setFontByName(name) {
        var styles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 458863;
        var charset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

        var engine = this.engine;
        var font = new engine.Font(new engine.WString(name), styles, engine.Charset.values[charset] || engine.Charset.e_CharsetANSI, 400);
        //let font = new engine.Font(new this.engine.WString('SimSun'), 458863, this.engine.Charset.e_CharsetGB2312, 400)
        //if (!font.IsEmpty()) {
        //    let isItalic = font.IsEmpty() ? false : font.IsItalic();
        //    let weight = font.IsEmpty() ? 400 : (font.IsBold() ? 700 : 400);
        //    font = new this.engine.Font(new engine.WString(font.GetBaseFontName(c_doc)), this.engine.Styles.e_StyleSerif.value, this.engine.Charset.e_CharsetGB2312.value, 400);
        //    textState.font = font;
        //    graphicsObject.SetTextState(c_page, textState, isItalic, weight);
        //}
        var c_page = this.c_page;
        var graphicsObject = this.graphicsObject;
        var textState = graphicsObject.GetTextState(c_page);
        //textState.Set(textState.version, font, textState.font_size, textState.charspace, textState.wordspace, textState.textmode, textState.origin_position, textState.textmatrix);
        textState.font = font;
        var weight = font.IsEmpty() ? 400 : font.IsBold() ? 700 : 400;
        var isItalic = font.IsEmpty() ? false : font.IsItalic();
        graphicsObject.SetTextState(c_page, textState, isItalic, weight);
        if (!graphicsObject.GetText().toString()) {
            //这个会触发Rect的计算
            graphicsObject.SetText(new this.engine.WString(''));
        }
        c_page.GenerateContent();
        return this.reParsePage();
    };

    TextObject.prototype.setFillColor = function setFillColor(color) {
        this.graphicsObject.SetFillColor((color | 0xff000000) >>> 0);
        this.c_page.GenerateContent();
        return this.toJson();
    };

    TextObject.prototype.reParsePage = function reParsePage() {
        var _this2 = this;

        return Promise.resolve();
        return this.page.reParsePage().then(function (page) {
            _this2.c_page = page;
        });
    };

    TextObject.prototype.getWoff = function getWoff() {
        var engine = this.engine;
        var c_page = this.c_page;
        var c_doc = c_page.GetDocument();
        var textState = this.graphicsObject.GetTextState(c_page);
        var font = textState.font;
        if (font.IsEmpty()) {
            return null;
        } else if (font.IsEmbedded(c_doc)) {
            return _PDFFontMgr2.default.getWoffDataBuffer(font.GetWoffData(c_doc), this.engine);
        } else {
            var charset = engine.Charset.e_CharsetANSI.value;
            if (font.GetFontType(c_doc) == engine.FontTypes.e_FontTypeCIDFont) {
                charset = font.GetCharset(c_doc).value;
            }
            var buffer = this.jr.getFontBuffer(font.GetBaseFontName(c_doc).toString(), font.GetStyles(c_doc), 0, charset, font.IsBold() ? 700 : 400, true);
            if (buffer) {
                return { buffer: buffer };
            }
            return null;
        }
    };

    return TextObject;
}(_GraphicsObject3.default);

exports.default = TextObject;

/***/ }),

/***/ "./src/pdf-jr/graphics/graphicObjectMgr.js":
/*!*************************************************!*\
  !*** ./src/pdf-jr/graphics/graphicObjectMgr.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setGraphicObjectProperty = exports.getGraphicObjectsInfo = undefined;

var _TextObject = __webpack_require__(/*! ./TextObject */ "./src/pdf-jr/graphics/TextObject.js");

var _TextObject2 = _interopRequireDefault(_TextObject);

var _PathObject = __webpack_require__(/*! ./PathObject */ "./src/pdf-jr/graphics/PathObject.js");

var _PathObject2 = _interopRequireDefault(_PathObject);

var _FormXObject = __webpack_require__(/*! ./FormXObject */ "./src/pdf-jr/graphics/FormXObject.js");

var _FormXObject2 = _interopRequireDefault(_FormXObject);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GraphicsObjectFatory = function () {
  function GraphicsObjectFatory() {
    _classCallCheck(this, GraphicsObjectFatory);
  }

  GraphicsObjectFatory.get = function get(engine, page, object, index) {
    switch (object.GetType().value) {
      case 1:
        //e_TypeText
        return new _TextObject2.default(object, page, object, index);
      case 2:
        //e_TypePath
        return new _PathObject2.default(object, page, object, index);
      case 3:
        //e_TypeImage
        return null;
      case 4:
        //e_TypeShading
        return null;
      case 5:
        //e_TypeFormXObject
        return new _FormXObject2.default(object, page, object, index);
    }
  };

  return GraphicsObjectFatory;
}();

var getGraphicObjectsInfo = function getGraphicObjectsInfo(engine, page, graphicsObjects, type) {
  var objectList = [];
  if (!graphicsObjects) {
    graphicsObjects = page;
  }
  var position = graphicsObjects.GetFirstGraphicsObjectPosition({ value: type });
  while (position !== 0) {
    /**
     * @type BaseGraphicObject
     */
    var object = GraphicsObjectFatory.get(engine, page, graphicsObjects.GetGraphicsObject(position), position);
    object && objectList.push(object.toJson());

    position = graphicsObjects.GetNextGraphicsObjectPosition(position, {
      value: type
    });
  }

  return objectList;
};
var setGraphicObjectProperty = function setGraphicObjectProperty(engine, pageIndex, objectIndex, propertyKey, propertyValue) {};
exports.getGraphicObjectsInfo = getGraphicObjectsInfo;
exports.setGraphicObjectProperty = setGraphicObjectProperty;

/***/ }),

/***/ "./src/pdf-jr/iconProvider.js":
/*!************************************!*\
  !*** ./src/pdf-jr/iconProvider.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _LoggerFactory = __webpack_require__(/*! ../shared/logger/LoggerFactory */ "./src/shared/logger/LoggerFactory.js");

var _LoggerFactory2 = _interopRequireDefault(_LoggerFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var logger = _LoggerFactory2.default.getLogger('pdf-jr.WebSDKIcons');

var WebSDKIcons = function () {
  function WebSDKIcons() {
    _classCallCheck(this, WebSDKIcons);

    this.docsMap = {};
    this.formsMap = {};
    this.iconCatalog = 'Static';
    this._enable = false;
    this.seperator = ',';
    this.timeFormat = 'YYYY-MM-DD, HH:mm:SS';
    this.icons = {};
  }

  WebSDKIcons.prototype.setIcons = function setIcons(icons) {
    if (typeof icons === 'string') this.icons = JSON.parse(icons);else this.icons = icons;
  };

  WebSDKIcons.prototype.addIcon = function addIcon(icon) {
    var annotType = icon.annotType;
    var catalog = icon.catagory;
    var name = icon.name;
    var fileType = icon.fileType;
    var strUrl = icon.url;

    if (!(annotType in this.icons)) {
      this.icons[annotType] = {};
    }

    if (!(catalog in this.icons[annotType])) {
      this.icons[annotType][catalog] = {};
    }
    this.icons[annotType][catalog][name] = {
      url: strUrl,
      type: fileType
    };
  };

  WebSDKIcons.prototype.removeIcon = function removeIcon(annotType, catalog, name) {
    if (name) {
      if (this.icons[annotType][catalog] && this.icons[annotType][catalog][name]) delete this.icons[annotType][catalog][name];

      if (this.docsMap[annotType] && this.docsMap[annotType][catalog] && this.docsMap[annotType][catalog][name]) {
        this.docsMap[annotType][catalog][name].delete();
        delete this.docsMap[annotType][catalog][name];
      }
    } else {
      if (this.docsMap[annotType] && this.docsMap[annotType][catalog]) {
        for (var key in this.icons[annotType][catalog]) {
          var doc = this.docsMap[annotType][catalog][key];
          if (doc) {
            doc.delete();
          }
          delete this.docsMap[annotType][catalog][name];
        }
      }

      delete this.icons[annotType][catalog];
    }
  };

  WebSDKIcons.prototype.setIconCatalog = function setIconCatalog(catalog) {
    this.iconCatalog = catalog;
    this._enable = true;
  };

  WebSDKIcons.prototype.setDynamicInfoFormula = function setDynamicInfoFormula(seperator, timeFormat) {
    this.seperator = seperator;
    this.timeFormat = timeFormat;
  };

  WebSDKIcons.prototype.enable = function enable(_enable) {
    this._enable = _enable;
  };

  WebSDKIcons.prototype.getPDFDoc = function getPDFDoc(type, key, name) {
    if (this.docsMap[type] && this.docsMap[type][key] && this.docsMap[type][key][name]) {
      return this.docsMap[type][key][name];
    }

    var engine = this.engine;
    var jr = this.jr;

    var fileInfo = this.icons[type][key][name];
    if (!fileInfo) {
      return null;
    }

    var doc = void 0;
    var form = void 0;
    var page = void 0;
    var field = void 0;

    var readerCallback = engine.ReaderCallback.implement({
      url: fileInfo.url,
      Release: function Release() {
        release();
      },
      GetSize: function GetSize() {
        if (this.size) {
          return this.size;
        }
        var xhr = jr.requestData('GET', false, this.url, 0, 1, true);
        var size = xhr.getResponseHeader('Content-Range').match(/bytes [\s\S]*?-[\s\S]*?\/(\d*)/)[1];
        return this.size = parseInt(size);
      },
      ReadBlock: function ReadBlock(buffer, offset, size) {
        var src = new Uint8Array(jr.requestData('GET', false, this.url, offset, size));
        if (src.byteLength != size) {
          this.size = src.byteLength;
          src = src.slice(offset, offset + size);
        }
        engine.HEAPU8.set(src, buffer);
        return true;
      }
    });

    switch (fileInfo.type) {
      case 'pdf':
        doc = engine.createPDFDocWithReaderCallback(readerCallback, false);
        var error = doc.Load(new engine.String(''));

        form = new engine.Form(doc);
        if (form.IsEmpty()) {
          field = null;
        } else {
          field = form.GetField(0, new engine.WString(''));
          field = field.IsEmpty() ? null : field;
        }
        page = doc.GetPage(0);
        break;
      case 'bmp':
      case 'jpg':
      case 'jpeg':
      case 'png':
      case 'tif':
      case 'tiff':
        var image = new engine.Image(readerCallback);
        var bmp = image.GetFrameBitmap(0);

        doc = new engine.PDFDoc();

        page = doc.InsertPage(0, bmp.GetWidth(), bmp.GetHeight());
        page.StartParse(0, null, false);
        page.AddImage(image, 0, new engine.PointF(0, 0), page.GetWidth(), page.GetHeight(), true);
        break;
    }

    this.docsMap[type] = this.docsMap[type] || {};
    this.docsMap[type][key] = this.docsMap[type][key] || {};
    return this.docsMap[type][key][name] = {
      doc: doc,
      page: page,
      form: form,
      field: field
    };
  };

  WebSDKIcons.prototype.initIconProvider = function initIconProvider(jr, engine) {
    if (this.engine) {
      return;
    }

    this.jr = jr;
    !this.engine && (this.engine = engine);

    engine.setAnnotIconProviderCallback(this.getEngineIconProvider(engine));
  };

  WebSDKIcons.prototype.setFieldValue = function setFieldValue(iconDoc) {
    try {
      if (iconDoc.field && !iconDoc.field.IsEmpty()) {
        var userName = this.jr.getUserName();

        var fieldValue = userName;
        if (this.timeFormat.length > 0) {
          if (fieldValue.length > 0) {
            fieldValue += this.seperator;
          }
          fieldValue += formatDateTime(this.timeFormat);
        }
        iconDoc.field.SetValue(new this.engine.WString(fieldValue));
      }
    } catch (err) {
      if (!isNaN(err)) {
        err = this.engine.getErrorCode(err);
      }
      console.warn(err);
    }
  };

  WebSDKIcons.prototype.getEngineIconProvider = function getEngineIconProvider() {
    var _this = this;

    var engine = this.engine;
    return engine.IconProviderCallback.implement({
      Release: function Release() {
        for (var type in _this.docsMap) {
          for (var key in _this.docsMap[type]) {
            for (var docIndex in _this.docsMap[type][key]) {
              _this.docsMap[type][key][docIndex].delete();
            }
          }
        }
      },
      GetProviderID: function GetProviderID() {
        return new engine.String('gsdk');
      },
      GetProviderVersion: function GetProviderVersion() {
        return new engine.String(_this.iconCatalog + new Date().valueOf());
      },
      HasIcon: function HasIcon(annot_type, icon_name) {
        if (!_this._enable) {
          return false;
        }

        var jrName = icon_name.toString();
        var strAnnotType = 'stamp';
        switch (annot_type.value) {
          case 0:
            //'Note':
            strAnnotType = 'note';
            break;
          case 13: //'Stamp':
        }
        if (_this.icons && _this.icons[strAnnotType] && _this.icons[strAnnotType][_this.iconCatalog] && _this.icons[strAnnotType][_this.iconCatalog][jrName]) {
          return true;
        }
        return false;
      },
      CanChangeColor: function CanChangeColor(annot_type, icon_name) {
        return true;
      },
      GetIcon: function GetIcon(annot_type, icon_name, color) {
        icon_name = icon_name.toString();
        switch (annot_type.value) {
          case 0:
            //'Note':
            break;
          case 13:
            //'Stamp':
            var iconDoc = _this.getPDFDoc('stamp', _this.iconCatalog, icon_name);
            if (iconDoc) {
              _this.setFieldValue(iconDoc);

              return iconDoc.page;
            }
            return new _this.engine.PDFPage(null);
        }
      },
      GetShadingColor: function GetShadingColor(annot_type, icon_name, referenced_color, shading_index, color) {
        color.first_color = referenced_color;
        color.second_color = referenced_color;
        return true;
      },
      GetDisplayWidth: function GetDisplayWidth(annot_type, icon_name) {
        return 0;
      },
      GetDisplayHeight: function GetDisplayHeight(annot_type, icon_name) {
        return 0;
      }
    });
  };

  return WebSDKIcons;
}();

var Week = ['日', '一', '二', '三', '四', '五', '六'];
var formatDateTime = function formatDateTime(formatStr) {
  var date = new Date();
  var str = formatStr;

  str = str.replace(/yyyy|YYYY/, date.getFullYear());
  str = str.replace(/yy|YY/, date.getYear() % 100 > 9 ? (date.getYear() % 100).toString() : '0' + date.getYear() % 100);

  var month = date.getMonth() + 1;
  str = str.replace(/MM/, month > 9 ? month.toString() : '0' + month);
  str = str.replace(/M/g, month);

  str = str.replace(/w|W/g, Week[date.getDay()]);

  str = str.replace(/dd|DD/, date.getDate() > 9 ? date.getDate().toString() : '0' + date.getDate());
  str = str.replace(/d|D/g, date.getDate());

  str = str.replace(/hh|HH/, date.getHours() > 9 ? date.getHours().toString() : '0' + date.getHours());
  str = str.replace(/h|H/g, date.getHours());
  str = str.replace(/mm/, date.getMinutes() > 9 ? date.getMinutes().toString() : '0' + date.getMinutes());
  str = str.replace(/m/g, date.getMinutes());

  str = str.replace(/ss|SS/, date.getSeconds() > 9 ? date.getSeconds().toString() : '0' + date.getSeconds());
  str = str.replace(/s|S/g, date.getSeconds());

  return str;
};

var webSDKIcons = void 0;
var getIconProvider = function getIconProvider() {
  if (webSDKIcons) {
    return webSDKIcons;
  }

  return webSDKIcons = new WebSDKIcons();
};

exports.default = getIconProvider;

/***/ }),

/***/ "./src/pdf-jr/object/PDFObject.js":
/*!****************************************!*\
  !*** ./src/pdf-jr/object/PDFObject.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PDFObject = function () {
    function PDFObject(pdfDoc, pdfObject) {
        _classCallCheck(this, PDFObject);

        this.pdfDoc = pdfDoc;
        this.pdfObject = pdfObject;
    }

    PDFObject.prototype.getDict = function getDict() {
        return this.pdfObject.GetDict();
    };

    return PDFObject;
}();

exports.default = PDFObject;

/***/ }),

/***/ "./src/pdf-jr/polyfill.js":
/*!********************************!*\
  !*** ./src/pdf-jr/polyfill.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (!Uint8Array.prototype.slice) {
  Object.defineProperty(Uint8Array.prototype, 'slice', {
    value: Array.prototype.slice
  });
}

/***/ }),

/***/ "./src/pdf-jr/progressiveCountine.js":
/*!*******************************************!*\
  !*** ./src/pdf-jr/progressiveCountine.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = progressiveCountine;
function progressiveCountine(progressive, continueState, finshedState) {
    var state = progressive.Continue();
    if (state === continueState) {
        return progressiveContinue(progressive, continueState, finshedState);
    }
    progressive.delete();
    return state === finshedState;
}

/***/ }),

/***/ "./src/pdf-jr/share/DefaultAP.js":
/*!***************************************!*\
  !*** ./src/pdf-jr/share/DefaultAP.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DefaultAP = function () {
    function DefaultAP(engineDA) {
        _classCallCheck(this, DefaultAP);

        this.engineDA = engineDA;
    }

    DefaultAP.prototype.toJson = function toJson() {
        return {};
    };

    return DefaultAP;
}();

exports.default = DefaultAP;

/***/ }),

/***/ "./src/pdf-jr/share/RectOperator.js":
/*!******************************************!*\
  !*** ./src/pdf-jr/share/RectOperator.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _RectOperator = __webpack_require__(/*! ../../shared/RectOperator */ "./src/shared/RectOperator.js");

var _RectOperator2 = _interopRequireDefault(_RectOperator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var RectOperator = function (_CommonRectOperator) {
    _inherits(RectOperator, _CommonRectOperator);

    RectOperator.on = function on(target) {
        return new RectOperator(target);
    };
    /**
     * 
     * @param {engine.CFX_FloatRect} target 
     */


    function RectOperator(target) {
        _classCallCheck(this, RectOperator);

        var _this = _possibleConstructorReturn(this, _CommonRectOperator.call(this, target));

        _this.Constructor = target.constructor;
        return _this;
    }

    RectOperator.prototype.extract = function extract() {
        var left = this.target.left + this.offsetLeft;
        var right = this.target.right + this.offsetRight;
        var top = this.target.top + this.offsetTop;
        var bottom = this.target.bottom + this.offsetBottom;
        return new this.Constructor(left, bottom, right, top);
    };

    return RectOperator;
}(_RectOperator2.default);

exports.default = RectOperator;

/***/ }),

/***/ "./src/pdf-jr/share/rect.js":
/*!**********************************!*\
  !*** ./src/pdf-jr/share/rect.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * Created by linc on 2019/1/28.
 */
function getEngineRectF(engine, rect) {
    var RectF = engine.CFX_FloatRect;
    return new RectF(rect.left, rect.bottom, rect.right, rect.top);
}

exports.getEngineRectF = getEngineRectF;

/***/ }),

/***/ "./src/shared/RectOperator.js":
/*!************************************!*\
  !*** ./src/shared/RectOperator.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RectDiffer = exports.RectDiffer = function RectDiffer() {
    var top = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var left = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : top;
    var bottom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : top;
    var right = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : left;

    _classCallCheck(this, RectDiffer);

    this.top = top;
    this.left = left;
    this.bottom = bottom;
    this.right = right;
};

var Rect = exports.Rect = function Rect() {
    var top = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var left = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var bottom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var right = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

    _classCallCheck(this, Rect);

    this.top = top;
    this.left = left;
    this.bottom = bottom;
    this.right = right;
};

var Boundary = exports.Boundary = function Boundary(top, left, width, height) {
    _classCallCheck(this, Boundary);

    this.top = top;
    this.left = left;
    this.bottom = bottom;
    this.right = right;
};

var RectOperator = function () {
    RectOperator.on = function on(target) {
        return new RectOperator(target);
    };
    /**
     *
     * @static
     * @param {Rect} minuend
     * @param {Rect} subtrahend
     * @returns {RectDiffer}
     * @memberof RectOperator
     */


    RectOperator.subtract = function subtract(minuend, subtrahend) {
        return new RectDiffer(minuend.top - subtrahend.top, minuend.left - subtrahend.left, minuend.bottom - subtrahend.bottom, minuend.right - subtrahend.right);
    };
    /**
     *
     * @static
     * @param {Rect} inner
     * @param {Rect} outer
     * @memberof RectOperator
     * @returns {RectDiffer}
     */


    RectOperator.expandOffset = function expandOffset(inner, outer) {
        return new RectDiffer(inner.top - outer.top, inner.left - outer.left, outer.bottom - inner.bottom, outer.right - inner.right);
    };
    /**
     *
     *
     * @static
     * @param {Rect} from
     * @param {Rect} dest
     * @memberof RectOperator
     */


    RectOperator.copyTo = function copyTo(from, dest) {
        dest.left = from.left;
        dest.top = from.top;
        dest.right = from.right;
        dest.bottom = from.bottom;
    };
    /**
     * 
     * @param {Rect} target 
     */


    function RectOperator(target) {
        _classCallCheck(this, RectOperator);

        this.offsetLeft = 0;
        this.offsetTop = 0;
        this.offsetRight = 0;
        this.offsetBottom = 0;
        this.target = target;
    }

    RectOperator.prototype.moveLeft = function moveLeft(offset) {
        this.offsetLeft += offset;
        this.offsetRight += offset;
        return this;
    };

    RectOperator.prototype.moveTop = function moveTop(offset) {
        this.offsetTop += offset;
        this.offsetBottom += offset;
        return this;
    };

    RectOperator.prototype.move = function move(offsetX, offsetY) {
        return this.moveLeft(offsetX).moveTop(offsetY);
    };

    RectOperator.prototype.moveTo = function moveTo(left, top) {
        this.offsetLeft = this.offsetRight = this.target.left - left;
        this.offsetTop = this.offsetBottom = this.target.top - top;
        return this;
    };

    RectOperator.prototype.shrink = function shrink() {
        var offsetTop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var offsetLeft = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : offsetTop;
        var offsetBottom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : offsetTop;
        var offsetRight = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : offsetLeft;

        return this.add(new RectDiffer(offsetTop, offsetLeft, -offsetBottom, -offsetRight));
    };

    RectOperator.prototype.expand = function expand() {
        var offsetTop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var offsetLeft = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : offsetTop;
        var offsetBottom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : offsetTop;
        var offsetRight = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : offsetLeft;

        return this.add(new RectDiffer(-offsetTop, -offsetLeft, offsetBottom, offsetRight));
    };

    RectOperator.prototype.zoom = function zoom() {
        var scale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var originh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'center';
        var originv = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'center';


        var width = this.target.right + this.offsetRight - (this.target.left + this.offsetLeft);
        var height = this.target.bottom + this.offsetBottom - (this.target.top + this.offsetTop);
        var newWidth = width * scale;
        var newHeight = height * scale;

        var offsetWidth = newWidth - width;
        var offsetHeight = newHeight - height;

        var offsetLeft = 0,
            offsetRight = 0;
        var offsetTop = 0,
            offsetBottom = 0;

        switch (originh) {
            case 'right':
                offsetLeft = -offsetWidth;
                break;
            case 'center':
                offsetLeft = -offsetWidth / 2;
                offsetRight = offsetWidth / 2;
                break;
            case 'left':
            default:
                offsetRight = offsetWidth;
        }

        switch (originv) {
            case 'bottom':
                offsetTop = -offsetHeight;
                break;
            case 'center':
                offsetTop = -offsetHeight / 2;
                offsetBottom = offsetHeight / 2;
                break;
            case 'top':
            default:
                offsetBottom = offsetHeight;
        }
        return this.add(new RectDiffer(offsetTop, offsetLeft, offsetBottom, offsetRight));
    };
    /**
     *
     * @param {RectDiffer | Rect} diff
     * @returns
     * @memberof RectOperator
     */


    RectOperator.prototype.add = function add() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            _ref$top = _ref.top,
            top = _ref$top === undefined ? 0 : _ref$top,
            _ref$left = _ref.left,
            left = _ref$left === undefined ? top : _ref$left,
            _ref$bottom = _ref.bottom,
            bottom = _ref$bottom === undefined ? top : _ref$bottom,
            _ref$right = _ref.right,
            right = _ref$right === undefined ? left : _ref$right;

        this.offsetLeft += left;
        this.offsetRight += right;
        this.offsetBottom += bottom;
        this.offsetTop += top;
        return this;
    };

    RectOperator.prototype.extract = function extract() {
        var left = this.target.left + this.offsetLeft;
        var right = this.target.right + this.offsetRight;
        var top = this.target.top + this.offsetTop;
        var bottom = this.target.bottom + this.offsetBottom;
        return {
            left: left, top: top, right: right, bottom: bottom
        };
    };

    RectOperator.prototype.boundary = function boundary() {
        var left = this.target.left + this.offsetLeft;
        var right = this.target.right + this.offsetRight;
        var top = this.target.top + this.offsetTop;
        var bottom = this.target.bottom + this.offsetBottom;
        return {
            left: left, top: top, width: right - left, height: bottom - top
        };
    };

    RectOperator.prototype.toPlainObject = function toPlainObject() {
        return {
            left: this.target.left,
            right: this.target.right,
            top: this.target.top,
            bottom: this.target.bottom
        };
    };

    return RectOperator;
}();

exports.default = RectOperator;

/***/ }),

/***/ "./src/shared/cipherType.js":
/*!**********************************!*\
  !*** ./src/shared/cipherType.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = {
    None: "none",
    RC4: "rc4",
    AES128: "aes128",
    AES256: "aes256"
};

/***/ }),

/***/ "./src/shared/color.js":
/*!*****************************!*\
  !*** ./src/shared/color.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.convertFromNumberToHex = convertFromNumberToHex;
exports.convertFromNumberToRGBA = convertFromNumberToRGBA;
exports.colorConvertor = colorConvertor;
exports.standardColorAsARGBNumber = standardColorAsARGBNumber;
/**
 * 将 0xFFFFFF 格式的颜色数字转为#为前缀的十六进制颜色，
 */
function convertFromNumberToHex(color) {
    if (typeof color !== 'number') {
        throw new TypeError('Unexpected color value:' + color);
    }
    if (color < 0) {
        return -1;
    }
    var hex = color.toString(16);
    var len = 6;
    if (color > 0xFFFFFF) {
        len = 8;
    }
    while (hex.length < len) {
        hex = '0' + hex;
    }
    return '#' + hex;
}

function convertFromNumberToRGBA(color) {
    var r = void 0,
        g = void 0,
        b = void 0,
        a = void 0;
    if (color < 0x01000000) {
        a = 0xFF;
    } else {
        a = color >> 24 & 0xFF;
        color = color & 0xFFFFFF;
    }
    b = color & 0xFF;
    g = color >> 8 & 0xFF;
    r = color >> 16 & 0xFF;
    return {
        r: r, g: g, b: b, a: a
    };
}
function colorConvertor(color) {
    var outType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'HTML';
    var opacity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

    var value;
    var R, G, B;
    var components = void 0;
    if (typeof color == 'number') {
        color = ['int', color];
    }
    switch (color[0]) {
        case 'int':
            R = (color[1] & 0x00ff0000) >> 16;
            G = (color[1] & 0x0000ff00) >> 8;
            B = color[1] & 0x000000ff;
            break;
        case 'T':
            R = -1;
            G = -1;
            B = -1;
            break;
        case 'G':
            R = G = B = color[1] * 255;
            break;
        case 'RGB':
            R = color[1] * 255;
            G = color[2] * 255;
            B = color[3] * 255;
            break;
        case 'CMYK':
            R = (1 - color[4]) * (1 - color[1]) * 255;
            G = (1 - color[4]) * (1 - color[2]) * 255;
            B = (1 - color[4]) * (1 - color[3]) * 255;
            break;
        case 'r':
            components = color.match(/rgba?\((\d*), (\d*), (\d*),? ?([\.0-9]*)?\)/);
            R = +components[1];
            G = +components[2];
            B = +components[3];
            break;
        case '#':
            var p = color.length == 4 ? /#([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])$/ : /#([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/;
            components = color.match(p);
            R = parseInt(components[1], 16);
            G = parseInt(components[2], 16);
            B = parseInt(components[3], 16);
    }
    switch (outType) {
        case 'HTML':
            if (R === G && G === B && B === -1) {
                value = 'transparent';
            } else {
                value = 'rgba(' + parseInt(R) + ',' + parseInt(G) + ',' + parseInt(B) + ',' + opacity + ')';
            }
            break;
        case '#':
            value = 0;
            value |= R << 16;
            value |= G << 8;
            value |= B;
            value = convertFromNumberToHex(value);
            break;
        case 'int':
            value = 0;

            opacity *= 255;
            value |= opacity << 24;
            value |= R << 16;
            value |= G << 8;
            value |= B;
            value = value >>> 0;
            break;
    }

    return value;
}
var FF000000 = 0xFF000000;
function standardColorAsARGBNumber(colorValue) {
    if (colorValue <= 0xFFFFFF) {
        return FF000000 + colorValue;
    } else if (colorValue > 0xFFFFFF) {
        return colorValue;
    } else if (typeof colorValue === 'string') {
        colorValue = colorValue.replace('#', '').trim();
        if (colorValue.match(/^[0-9A-F]{8}$/i)) {
            return parseInt(colorValue, 16);
        } else if (colorValue.match(/^[0-9A-F]{6}$/i)) {
            return FF000000 + parseInt(colorValue, 16);
        } else if (colorValue.match(/^rgb\(\d{1,3}(,\d{1,3}){2}\)$/i)) {
            var _colorValue$split$map = colorValue.split(/\D+/).map(function (x) {
                return parseInt(x);
            }),
                _colorValue$split$map2 = _slicedToArray(_colorValue$split$map, 4),
                r = _colorValue$split$map2[1],
                g = _colorValue$split$map2[2],
                b = _colorValue$split$map2[3];

            return FF000000 + (r << 16) + (g << 8) + b;
        } else if (colorValue.match(/^rgba\(\d{1,3}(,\d{1,3}){3}\)$/i)) {
            var _colorValue$split$map3 = colorValue.split(/\D+/).map(function (x) {
                return parseInt(x);
            }),
                _colorValue$split$map4 = _slicedToArray(_colorValue$split$map3, 5),
                _r = _colorValue$split$map4[1],
                _g = _colorValue$split$map4[2],
                _b = _colorValue$split$map4[3],
                a = _colorValue$split$map4[4];

            return Math.floor(a * FF000000) + (_r << 16) + (_g << 8) + _b;
        }
    }
    throw new Error('incorrect color format: "' + colorValue + '"');
}

/***/ }),

/***/ "./src/shared/consts.js":
/*!******************************!*\
  !*** ./src/shared/consts.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * @private
 * @defgroup AnnotConsts Annotation's Constants variable.
 * @ingroup ViewerAnnotations
 */

var BORDER_STYLE = exports.BORDER_STYLE = {
  /**
   * @breif This is only useful for link, free text, line, square, circle, polygon, polyline and screen annotation. 
   * If this is set to other type annotation, Foxit PDF SDK will change to set border style as BorderInfo::e_Solid by default internally.
   */
  SOLID: 0, // 0 engine.Style.e_Solid
  /**
   * @breif This is only useful for link, free text, line, square, circle, polygon, polyline and screen annotation. 
   * If this is set to other type annotation, Foxit PDF SDK will change to set border style as BorderInfo::e_Solid by default internally.
   */
  DASHED: 1, // 1 engine.Style.e_Dashed
  /**
   * @breif This is only useful for link annotation. 
   * If this is set to other type annotation, Foxit PDF SDK will change to set border style as BorderInfo::e_Solid by default internally. 
   */
  UNDERLINE: 2, // 2 engine.Style.e_Underline
  /**
   * @breif Currently, Foxit PDF SDK does not support the annotation appearance of this border style. 
   * If this is set to any annotation, Foxit PDF SDK will change to set border style as BorderInfo::e_Solid by default internally. 
   * @private
   */
  BEVELED: 3, // 3 engine.Style.e_Beveled
  /**
   * @breif Currently, Foxit PDF SDK does not support the annotation appearance of this border style. 
   * If this is set to any annotation, Foxit PDF SDK will change to set border style as BorderInfo::e_Solid by default internally.
   */
  INSET: 4, // 4 engine.Style.e_Inset
  /**
   * @breif This is only useful for free text, square, circle, and polygon annotations. 
   * If this is set to other type annotation, Foxit PDF SDK will change to set border style as BorderInfo::e_Solid by default internally. 
   */
  CLOUDY: 5 // 5 engine.Style.e_Cloudy
};
var MARKUP_ANNOTATION_STATE = exports.MARKUP_ANNOTATION_STATE = {
  MARKED: 'marked',
  UNMARKED: 'unmarked',
  ACCEPTED: 'accepted',
  REJECTED: 'rejected',
  CANCELLED: 'cancelled',
  COMPLETED: 'completed',
  NONE: 'none'
};
/**
 * Enumeration for point type in path. 
 * Values of this enumeration should be used alone.
 */
var POINT_TYPE = exports.POINT_TYPE = {
  /**
   * 
   * Indicates that the point is the first point of a 
   */
  MOVE_TO: 1, // engine.PointType.e_TypeMoveTo
  /**
   * Indicates that a line is drawn from the previous point to this point
   */
  LINE_TO: 2, // engine.PointType.e_TypeLineTo
  /**
   * Indicates that a line is drawn from the previous point to this point, 
   * and this point will also be connected to the nearest {@link POINT_TYPE.MOVE_TO} point before this point, in order to close current figure
   */
  LINE_TO_CLOSE_FIGURE: 3, // engine.PointType.e_TypeLineToCloseFigure
  /**
   * Indicates that this point is a control point or ending point for a Bezier spline
   */
  BEZIER_TO: 4, // engine.PointType.e_TypeBezierTo
  /**
   * Indicates that this point is the ending point for a Bezier spline, 
   * and this point will also be connected to the nearest {@link POINT_TYPE.BEZIER_TO} point before this point, in order to close current 
   */
  BEZIER_TO_CLOSE_FIGURE: 5 // engine.PointType.e_TypeBezierToCloseFigure
};
var Intents = exports.Intents = {
  /**
   * @private
   * If a line annotation's intent is to be set to "LineArrow", 
   * the line annotation's line ending styles will be Markup::e_EndingStyleNone for start point and 
   * Markup::e_EndingStyleOpenArrow for end point by default
   */
  LINE_ARROW: 'LineArrow',
  LINE_DIMENSION: 'LineDimension',
  /**
   * @private
   * If a polygon annotation's intent is to be set to "PolygonCloud", 
   * the polygon annotation's border style will be changed to BorderInfo::e_Cloudy and 
   * BorderInfo::cloud_intensity will be set to 2 by default. 
   */
  POLYGON_CLOUD: 'PolygonCloud',
  POLYGON_DIMENSION: 'PolygonDimension',
  POLYLINE_DIMENSION: 'PolyLineDimension',
  /**
  * @private
  * A free text annotation displays text directly on the page. 
  * So free text annotation does not need a related pop-up annotation to show the text.
  * Free text annotation is a kind of markup annotation
  * so class FreeText is derived from class Markup,
  * and also offers functions to get/set free text annotation's properties and reset appearance stream of a free text annotation.      
  */
  FREETEXT_TYPEWRITER: 'FreeTextTypewriter',
  FREETEXT_CALLOUT: 'FreeTextCallout',

  STRIKEOUT_TEXTEDIT: 'StrikeOutTextEdit'
};

var LineEndingName = exports.LineEndingName = {
  0: "None",
  1: "Square",
  2: "Circle",
  3: "Diamond",
  4: "OpenArrow",
  5: "ClosedArrow",
  6: "Butt",
  7: "ROpenArrow",
  8: "RClosedArrow",
  9: "Slash"
};

var LineEndingStyle = exports.LineEndingStyle = Object.keys(LineEndingName).reduce(function (prev, key) {
  prev[LineEndingName[key]] = key;
  return prev;
}, {});

var AnnotFlagsName = exports.AnnotFlagsName = {
  0: "invisible",
  1: "hidden",
  2: "print",
  3: "nozoom",
  4: "norotate",
  5: "noview",
  6: "readonly",
  7: "locked",
  8: "togglenoview"
};

var PDFDocPermission = exports.PDFDocPermission = {
  PrintLowQuality: 4,
  ModifyDocument: 8,
  Extract: 16,
  AnnotForm: 32,
  FillForm: 256,
  ExtractAccess: 512,
  Assemble: 1024,
  PrintHighQuality: 2048
};

/***/ }),

/***/ "./src/shared/createDeferred.js":
/*!**************************************!*\
  !*** ./src/shared/createDeferred.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = createDeferred;
function createDeferred() {
    var deferred = {};
    deferred.promise = new Promise(function (resolve, reject) {
        deferred.resolve = resolve;
        deferred.reject = reject;
    });
    return deferred;
}

/***/ }),

/***/ "./src/shared/getUniqueId.js":
/*!***********************************!*\
  !*** ./src/shared/getUniqueId.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = getUniqueId;
var uniquePrefix = 'unique_' + Date.now();
var index = 0;
// Symbol 不能被postMessage传递
function getUniqueId(prefix) {
    return [prefix || '', uniquePrefix, index++].join('_');
}

/***/ }),

/***/ "./src/shared/guid.js":
/*!****************************!*\
  !*** ./src/shared/guid.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = guid;
/**
 * Created by linc on 2019/2/14.
 */
function guid() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = Math.random() * 16 | 0,
            v = c == 'x' ? r : r & 0x3 | 0x8;
        return v.toString(16);
    });
}

/***/ }),

/***/ "./src/shared/logger/Appender.js":
/*!***************************************!*\
  !*** ./src/shared/logger/Appender.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _notImplemented = __webpack_require__(/*! ../notImplemented */ "./src/shared/notImplemented.js");

var _notImplemented2 = _interopRequireDefault(_notImplemented);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Appender = function () {
    function Appender() {
        _classCallCheck(this, Appender);
    }

    Appender.prototype.print = function print(data, level) {
        (0, _notImplemented2.default)(data, level);
    };

    return Appender;
}();

exports.default = Appender;

/***/ }),

/***/ "./src/shared/logger/ComplexLayout.js":
/*!********************************************!*\
  !*** ./src/shared/logger/ComplexLayout.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _consts = __webpack_require__(/*! ./consts */ "./src/shared/logger/consts.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ComplexLayout = function () {
    function ComplexLayout() {
        _classCallCheck(this, ComplexLayout);
    }

    ComplexLayout.prototype.format = function format(module, level, messages) {
        var _this = this;

        var stack = new Error().stack;
        var realTrace = void 0;
        if (stack) {
            var tracestack = stack.split('\n');
            realTrace = '\n  ' + tracestack[4].trim();
        }
        return [{
            type: 'string',
            style: 'color: ' + this.levelColor(level) + ';',
            value: '[' + this.levelText(level) + ']'
        }, {
            type: 'string',
            style: 'color: magenta',
            value: '{' + module + '}'
        }].concat(messages.map(function (msg) {
            if (msg === undefined || msg === null) {
                return {
                    type: typeof msg === 'undefined' ? 'undefined' : _typeof(msg),
                    style: 'color: megenta;font-weight: bold',
                    value: msg + ''
                };
            }
            if (typeof msg === 'string') {
                return {
                    type: typeof msg === 'undefined' ? 'undefined' : _typeof(msg),
                    style: 'color: ' + _this.levelColor(level),
                    value: msg
                };
            } else {
                return {
                    type: typeof msg === 'undefined' ? 'undefined' : _typeof(msg),
                    value: msg
                };
            }
        })).concat({
            type: 'string',
            style: 'color: grey;',
            value: realTrace
        });
    };

    ComplexLayout.prototype.levelColor = function levelColor(level) {
        switch (level) {
            case _consts.LEVEL_DEBUG:
                return 'blue';
            case _consts.LEVEL_INFO:
                return 'green';
            case _consts.LEVEL_WARN:
                return '#5C3C00';
            case _consts.LEVEL_ERROR:
                return 'red';
        }
        return '#000';
    };

    ComplexLayout.prototype.levelText = function levelText(level) {
        switch (level) {
            case _consts.LEVEL_DEBUG:
                return 'DEBUG';
            case _consts.LEVEL_INFO:
                return 'INFO';
            case _consts.LEVEL_WARN:
                return 'WARN';
            case _consts.LEVEL_ERROR:
                return 'ERROR';
        }
        return 'UNKNOWN LEVEL';
    };

    return ComplexLayout;
}();

exports.default = ComplexLayout;

/***/ }),

/***/ "./src/shared/logger/ConsoleAppender.js":
/*!**********************************************!*\
  !*** ./src/shared/logger/ConsoleAppender.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _consts = __webpack_require__(/*! ./consts */ "./src/shared/logger/consts.js");

var _Appender2 = __webpack_require__(/*! ./Appender */ "./src/shared/logger/Appender.js");

var _Appender3 = _interopRequireDefault(_Appender2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var ConsoleAppender = function (_Appender) {
    _inherits(ConsoleAppender, _Appender);

    function ConsoleAppender() {
        _classCallCheck(this, ConsoleAppender);

        return _possibleConstructorReturn(this, _Appender.apply(this, arguments));
    }

    ConsoleAppender.prototype.print = function print(data, level) {
        var _console, _console2, _console3, _console4, _console5;

        return;
        var msg = data.map(function (item) {
            if (item.type !== 'string') {
                return ' %o';
            } else {
                return ' %c' + item.value;
            }
        }).join('').trim();
        var params = data.map(function (item) {
            switch (item.type) {
                case 'string':
                    return item.style;
                default:
                    return item.value;
            }
        });
        params.splice(0, 0, msg);
        switch (level) {
            case _consts.LEVEL_DEBUG:
                (_console = console).debug.apply(_console, _toConsumableArray(params));
                break;
            case _consts.LEVEL_INFO:
                (_console2 = console).info.apply(_console2, _toConsumableArray(params));
                break;
            case _consts.LEVEL_WARN:
                (_console3 = console).warn.apply(_console3, _toConsumableArray(params));
                break;
            case _consts.LEVEL_ERROR:
                (_console4 = console).error.apply(_console4, _toConsumableArray(params));
                break;
            default:
                (_console5 = console).log.apply(_console5, _toConsumableArray(params));
        }
    };

    return ConsoleAppender;
}(_Appender3.default);

exports.default = ConsoleAppender;

/***/ }),

/***/ "./src/shared/logger/Logger.js":
/*!*************************************!*\
  !*** ./src/shared/logger/Logger.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NoLogger = undefined;

var _consts = __webpack_require__(/*! ./consts */ "./src/shared/logger/consts.js");

var _config = __webpack_require__(/*! ./config */ "./src/shared/logger/config.js");

var config = _interopRequireWildcard(_config);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Logger = function () {
    function Logger(appender, layout, module, minLevel) {
        _classCallCheck(this, Logger);

        this.appender = appender;
        this.layout = layout;
        this.module = module;
        this.minLevel = minLevel;
        this.logOff = false;
    }

    Logger.prototype.toggle = function toggle(logOff) {
        if (typeof logOff === 'boolean') {
            this.logOff = logOff;
        } else {
            this.logOff = !config.logOff;
        }
    };

    Logger.prototype.setLevel = function setLevel(level) {
        this.minLevel = level;
    };

    Logger.prototype.doLog = function doLog(level) {
        if (this.logOff || config.logOff || level < this.minLevel) {
            return;
        }

        for (var _len = arguments.length, messages = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            messages[_key - 1] = arguments[_key];
        }

        var data = this.layout.format(this.module, level, messages);
        this.appender.print(data, level);
    };

    Logger.prototype.log = function log(level) {
        for (var _len2 = arguments.length, messages = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            messages[_key2 - 1] = arguments[_key2];
        }

        this.doLog.apply(this, [level].concat(messages));
    };

    Logger.prototype.debug = function debug() {
        for (var _len3 = arguments.length, messages = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            messages[_key3] = arguments[_key3];
        }

        this.doLog.apply(this, [_consts.LEVEL_DEBUG].concat(messages));
    };

    Logger.prototype.info = function info() {
        for (var _len4 = arguments.length, messages = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            messages[_key4] = arguments[_key4];
        }

        this.doLog.apply(this, [_consts.LEVEL_INFO].concat(messages));
    };

    Logger.prototype.warn = function warn() {
        for (var _len5 = arguments.length, messages = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
            messages[_key5] = arguments[_key5];
        }

        this.doLog.apply(this, [_consts.LEVEL_WARN].concat(messages));
    };

    Logger.prototype.error = function error() {
        for (var _len6 = arguments.length, messages = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
            messages[_key6] = arguments[_key6];
        }

        this.doLog.apply(this, [_consts.LEVEL_ERROR].concat(messages));
    };

    return Logger;
}();

exports.default = Logger;

var NoLogger = exports.NoLogger = function (_Logger) {
    _inherits(NoLogger, _Logger);

    function NoLogger() {
        _classCallCheck(this, NoLogger);

        return _possibleConstructorReturn(this, _Logger.apply(this, arguments));
    }

    NoLogger.prototype.doLog = function doLog() {};

    return NoLogger;
}(Logger);

/***/ }),

/***/ "./src/shared/logger/LoggerFactory.js":
/*!********************************************!*\
  !*** ./src/shared/logger/LoggerFactory.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _config = __webpack_require__(/*! ./config */ "./src/shared/logger/config.js");

var config = _interopRequireWildcard(_config);

var _SimpleLayout = __webpack_require__(/*! ./SimpleLayout */ "./src/shared/logger/SimpleLayout.js");

var _SimpleLayout2 = _interopRequireDefault(_SimpleLayout);

var _consts = __webpack_require__(/*! ./consts */ "./src/shared/logger/consts.js");

var _Logger = __webpack_require__(/*! ./Logger */ "./src/shared/logger/Logger.js");

var _Logger2 = _interopRequireDefault(_Logger);

var _ConsoleAppender = __webpack_require__(/*! ./ConsoleAppender */ "./src/shared/logger/ConsoleAppender.js");

var _ConsoleAppender2 = _interopRequireDefault(_ConsoleAppender);

var _ComplexLayout = __webpack_require__(/*! ./ComplexLayout */ "./src/shared/logger/ComplexLayout.js");

var _ComplexLayout2 = _interopRequireDefault(_ComplexLayout);

var _MultipleAppender = __webpack_require__(/*! ./MultipleAppender */ "./src/shared/logger/MultipleAppender.js");

var _MultipleAppender2 = _interopRequireDefault(_MultipleAppender);

var _Appender = __webpack_require__(/*! ./Appender */ "./src/shared/logger/Appender.js");

var _Appender2 = _interopRequireDefault(_Appender);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var loggerStorage = {};

var LoggerFactory = function () {
    function LoggerFactory() {
        _classCallCheck(this, LoggerFactory);
    }

    LoggerFactory.toggleLogger = function toggleLogger(logOff) {
        if (typeof logOff === 'boolean') {
            config.logOff = logOff;
        } else {
            config.logOff = !config.logOff;
        }
    };
    /**
     * 
     * @static
     * @param {string} name
     * @returns {Logger}
     * @memberof LoggerFactory
     */


    LoggerFactory.getLogger = function getLogger(name) {
        return loggerStorage[name] = loggerStorage[name] || this.createLogger(name);
    };
    /**
     * @private
     * @static
     * @param {string} name
     * @returns {Logger}
     * @memberof LoggerFactory
     */


    LoggerFactory.createLogger = function createLogger(name) {
        var layout = void 0,
            level = void 0,
            appenders = [];
        switch (config.logLayout) {
            case 'complex':
                layout = new _ComplexLayout2.default();
                break;
            case 'simple':
            default:
                layout = new _SimpleLayout2.default();

        }
        switch (config.logLevel) {
            case 'debug':
                level = _consts.LEVEL_DEBUG;
                break;
            case 'info':
                level = _consts.LEVEL_INFO;
                break;
            case 'warn':
                level = _consts.LEVEL_WARN;
                break;
            case 'error':
            default:
                level = _consts.LEVEL_ERROR;
        }
        appenders = config.logAppenders.map(function (name) {
            switch (name) {
                case 'console':
                    return new _ConsoleAppender2.default();
                case 'websocket':
                    return new WebsocketAppender();
            }
        }).filter(function (appender) {
            return appender instanceof _Appender2.default;
        });
        return new _Logger2.default(new _MultipleAppender2.default(appenders), layout, name, level);
    };

    return LoggerFactory;
}();

exports.default = LoggerFactory;

/***/ }),

/***/ "./src/shared/logger/MultipleAppender.js":
/*!***********************************************!*\
  !*** ./src/shared/logger/MultipleAppender.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _ConsoleAppender = __webpack_require__(/*! ./ConsoleAppender */ "./src/shared/logger/ConsoleAppender.js");

var _ConsoleAppender2 = _interopRequireDefault(_ConsoleAppender);

var _Appender2 = __webpack_require__(/*! ./Appender */ "./src/shared/logger/Appender.js");

var _Appender3 = _interopRequireDefault(_Appender2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var MultipleAppender = function (_Appender) {
    _inherits(MultipleAppender, _Appender);

    /**
     * 
     * @param {Appender} appenders 
     */
    function MultipleAppender(appenders) {
        _classCallCheck(this, MultipleAppender);

        var _this = _possibleConstructorReturn(this, _Appender.call(this));

        _this.appenders = appenders || [];
        return _this;
    }

    MultipleAppender.prototype.print = function print(data, level) {
        this.appenders.forEach(function (appender) {
            return appender.print(data, level);
        });
    };

    return MultipleAppender;
}(_Appender3.default);

exports.default = MultipleAppender;

/***/ }),

/***/ "./src/shared/logger/SimpleLayout.js":
/*!*******************************************!*\
  !*** ./src/shared/logger/SimpleLayout.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _consts = __webpack_require__(/*! ./consts */ "./src/shared/logger/consts.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SimpleLayout = function () {
    function SimpleLayout() {
        _classCallCheck(this, SimpleLayout);
    }

    SimpleLayout.prototype.format = function format(module, level, messages) {
        return [{
            type: 'string',
            value: '[' + this.levelText(level) + ']'
        }, {
            type: 'string',
            value: '{' + module + '}'
        }].concat(messages.map(function (msg) {
            if (msg === undefined || msg === null) {
                return {
                    type: typeof msg === 'undefined' ? 'undefined' : _typeof(msg),
                    value: msg + ''
                };
            }
            if (typeof msg === 'string') {
                return {
                    type: typeof msg === 'undefined' ? 'undefined' : _typeof(msg),
                    value: msg
                };
            } else {
                return {
                    type: typeof msg === 'undefined' ? 'undefined' : _typeof(msg),
                    value: msg
                };
            }
        }));
    };

    SimpleLayout.prototype.levelText = function levelText(level) {
        switch (level) {
            case _consts.LEVEL_DEBUG:
                return 'DEBUG';
            case _consts.LEVEL_INFO:
                return 'INFO';
            case _consts.LEVEL_WARN:
                return 'WARN';
            case _consts.LEVEL_ERROR:
                return 'ERROR';
        }
        return 'UNKNOWN LEVEL';
    };

    return SimpleLayout;
}();

exports.default = SimpleLayout;

/***/ }),

/***/ "./src/shared/logger/config.js":
/*!*************************************!*\
  !*** ./src/shared/logger/config.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var logLevel = exports.logLevel = "warn";
var logLayout = exports.logLayout = "complex";
var logAppenders = exports.logAppenders = ["console"];
var logOff = exports.logOff = false;

/***/ }),

/***/ "./src/shared/logger/consts.js":
/*!*************************************!*\
  !*** ./src/shared/logger/consts.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var LEVEL_DEBUG = exports.LEVEL_DEBUG = 0;
var LEVEL_INFO = exports.LEVEL_INFO = 2;
var LEVEL_WARN = exports.LEVEL_WARN = 4;
var LEVEL_ERROR = exports.LEVEL_ERROR = 8;

/***/ }),

/***/ "./src/shared/notImplemented.js":
/*!**************************************!*\
  !*** ./src/shared/notImplemented.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = notImplemented;
function notImplemented() {
    throw new Error('Method not implemented');
};

/***/ }),

/***/ "./src/web-pdf-jr/WebPDFJRWorker.js":
/*!******************************************!*\
  !*** ./src/web-pdf-jr/WebPDFJRWorker.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
//import { Promise as ES6Promise } from 'es6-promise';


__webpack_require__(/*! babel-polyfill */ "./node_modules/babel-polyfill/lib/index.js");

var _PDFJR = __webpack_require__(/*! ../pdf-jr/PDFJR */ "./src/pdf-jr/PDFJR.js");

var _PDFJR2 = _interopRequireDefault(_PDFJR);

var _createDeferred = __webpack_require__(/*! ../shared/createDeferred */ "./src/shared/createDeferred.js");

var _createDeferred2 = _interopRequireDefault(_createDeferred);

var _getUniqueId = __webpack_require__(/*! ../shared/getUniqueId */ "./src/shared/getUniqueId.js");

var _getUniqueId2 = _interopRequireDefault(_getUniqueId);

var _gsdk = __webpack_require__(/*! ../jr-engine/gsdk/gsdk.hash */ "./src/jr-engine/gsdk/gsdk.hash.js");

var _workerAPIForForm = __webpack_require__(/*! ./workerAPIForForm */ "./src/web-pdf-jr/workerAPIForForm.js");

var _workerAPIForForm2 = _interopRequireDefault(_workerAPIForForm);

var _workerAPIForGraphicObject = __webpack_require__(/*! ./workerAPIForGraphicObject */ "./src/web-pdf-jr/workerAPIForGraphicObject.js");

var _workerAPIForGraphicObject2 = _interopRequireDefault(_workerAPIForGraphicObject);

var _iconProvider = __webpack_require__(/*! ../pdf-jr/iconProvider */ "./src/pdf-jr/iconProvider.js");

var _iconProvider2 = _interopRequireDefault(_iconProvider);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isIE10() {
    var userAgent = navigator.userAgent.toLowerCase();
    var match = void 0;
    if ('ActiveXObject' in self && (match = userAgent.match(/msie ([\d\.]+)/))) {
        return parseInt(match[1]) === 10;
    }
    return false;
}
var c_textSearchCache = {};
//ES6Promise.prototype._onerror = function (e) {
//    console.warn(e);
//};
//self.Promise = self.Promise || ES6Promise;

var DOC_IS_NULL = 'The document does not exist and may have been destroyed';
var pdfJRDeferred = (0, _createDeferred2.default)();
var pdfJRPromise = pdfJRDeferred.promise;
// jr引擎文件已加载
var jrEngineIsLoaded = false;
// jr引擎已准备好了，key认证通过
var jrEngineIsReady = false;
// 移除通过getPDFDocByArrayBuffer接口打开的文档的ArrayBuffer缓存
var destroyArrayBufferDocMap = {};

var functionMap = {};
(0, _workerAPIForForm2.default)(functionMap, _getPDFDocById, pdfJRPromise, workerResolve, workerReject);
var graphicsModule = (0, _workerAPIForGraphicObject2.default)(functionMap, _getPDFDocById, _getPageById, pdfJRPromise, workerResolve, workerReject);

var backMap = {};
var asyncCallCache = function () {
    var cache = {};

    return {
        push: function push(id) {
            var array = cache[id] = cache[id] || [];

            for (var _len = arguments.length, calls = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                calls[_key - 1] = arguments[_key];
            }

            array.push.apply(array, calls);
        },
        get: function get(id) {
            return cache[id] || [];
        }
    };
}();
var gsdkObjCache = {};
var rangeMap = {};
var rangeDocMap = {};
self.onmessage = function (event) {
    var data = event.data;
    var params = data.params;
    var backId = data.backId;
    if (backId) {
        return backMap[backId](params);
    }
    var name = data.name;
    var id = data.id;

    try {
        var fn = functionMap[name];
        if (fn) {
            fn(id, params);
        } else {
            execGSDK(data);
        }
    } catch (e) {
        workerReject(id, { error: -1, message: 'web-pdf-jr-worker-error\r\n' + name + '\r\n' + e.toString(), stack: e.stack });
    }
};
function execGSDK(data) {
    var id = data.id;
    var name = data.name;
    var names = name.split('.');
    return pdfJRPromise.then(function (pdfJr) {
        return pdfJr.engine;
    }).then(function (engine) {
        var current = engine;
        for (var i = 0, j = names.length; i < j; i++) {
            var key = names[i];
            var Obj = void 0;
            if (Obj = current[key]) {
                var nextKey = names[i + 1];
                if (nextKey === 'prototype') {
                    var that = void 0;
                    try {
                        that = data.more.self;
                        current = getObjFromCache(that);
                    } catch (e) {
                        current = new Obj();
                    }
                    i++;
                    if (names[i + 1] === 'destroy') {
                        removeObjFromCache(that);
                        return that;
                    }
                } else if (nextKey === 'create') {
                    current = new Obj.apply(Obj, parseRquestParams(data));
                    i++;
                } else if (typeof Obj === 'function') {
                    current = Obj.apply(current, parseRquestParams(data));
                } else {
                    current = Obj;
                }
            }
        }
        return setObjToCache(current);
    }).then(function (that) {
        workerResolve(id, that);
    }, function (e) {
        workerReject(id, { code: e.code, stack: e.stack, message: e.message });
    });
}
function getObjFromCache(id) {
    return gsdkObjCache[id];
}
function setObjToCache(obj) {
    if (!obj) {
        return '';
    }
    var id = (0, _getUniqueId2.default)('obj');
    gsdkObjCache[id] = obj;
    return id;
}
function removeObjFromCache(id) {}
function parseRquestParams(data, engine) {
    var params = data.params || [];
    var paramsInfo = data.more.paramsInfo || [];
    var result = [];
    for (var i = params.length; i--;) {
        var param = params[i];
        var paramInfo = paramsInfo[i] || {};
        if (paramInfo.isObject) {
            if (!(result[i] = getObjFromCache(param)) && paramInfo.enumName) {
                result[i] = getEnumObj(param, paramInfo.enumName, engine);
            }
        } else {
            result[i] = params[i];
        }
    }
    return result;
}
function getEnumObj(value, name, engine) {
    var keys = name.split('.');
    var enumObj = engine;
    for (var i = 0, j = keys.length; i < j; i++) {
        enumObj = enumObj[keys[i]];
    }
    return enumObj.values[value];
}
function workerReject(id) {
    var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { error: -1 };
    var transfer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    var error = arguments[3];

    console.warn(error);
    if (isIE10()) {
        transfer = null;
    }
    self.postMessage({
        id: id,
        type: 1,
        params: result
    }, transfer);
}
function workerResolve(id, result) {
    var transfer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

    if (isIE10()) {
        transfer = null;
    }
    self.postMessage({
        id: id,
        type: 0,
        params: result
    }, transfer);
}
function workerContinue(callId, params) {
    var transfer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

    if (isIE10()) {
        transfer = null;
    }
    var backId = (0, _getUniqueId2.default)('worker_back');
    var deferred = (0, _createDeferred2.default)();
    backMap[backId] = function (params) {
        deferred.resolve(params);
        delete backMap[backId];
    };
    self.postMessage({
        callId: callId,
        params: params,
        backId: backId
    }, transfer);
    return deferred.promise;
}
function workerContinueEnd(destroyId) {
    self.postMessage({
        destroyId: destroyId
    });
}

function initJREngine(id, _ref) {
    var enginePath = _ref.enginePath,
        licenseSN = _ref.licenseSN,
        licenseKey = _ref.licenseKey,
        fontPath = _ref.fontPath;

    if (jrEngineIsReady) {
        return workerResolve(id);
    }
    pdfJRPromise.then(function (pdfJr) {
        workerResolve(id);
    });
    if (jrEngineIsLoaded) {
        return;
    }
    try {
        var agent = navigator.userAgent.toLowerCase();
        var wasmEnabled = false;
        var isSafari = agent.indexOf('safari') > -1 && agent.indexOf('chrome') == -1;
        if (isSafari && parseFloat(agent.match(/ applewebkit\/(\d+)/)[1]) < 607) {
            wasmEnabled = false;
        } else {
            wasmEnabled = true;
        }

        if (wasmEnabled && (typeof WebAssembly === 'undefined' ? 'undefined' : _typeof(WebAssembly)) == "object") {
            importScripts(enginePath + '/gsdk.js?h=' + _gsdk.jsHash);
        } else {
            importScripts(enginePath + '/gsdk.asm.js?h=' + _gsdk.asmJSHash);
        }

        jrEngineIsLoaded = true;
    } catch (ex) {
        console.log(ex);
        return workerReject(id, { error: 1 });
    }
    var pdfJr = new _PDFJR2.default(GSDK, {
        enginePath: enginePath,
        fontPath: fontPath
    });
    pdfJr.jrEnginePromise.catch(function (_ref2) {
        var _ref3 = _slicedToArray(_ref2, 2),
            a = _ref3[0],
            b = _ref3[1];

        workerReject(id, { error: [a, b] });
    });
    pdfJr.checkLicense(licenseSN, licenseKey).then(function (flag) {
        if (flag) {
            jrEngineIsReady = true;
            pdfJRDeferred.resolve(pdfJr);
        } else {
            workerReject(id, { error: 2 });
        }
    });
}
functionMap.initJREngine = initJREngine;

function getPDFDocByFile(id, _ref4) {
    var file = _ref4.file;

    pdfJRPromise.then(function (pdfJr) {
        var fileSize = _getFileSize(file);
        var fileSyncReader = _getFileSyncReader(file);
        return pdfJr.getPDFDoc({
            size: fileSize,
            getBuffer: function getBuffer(offset, size) {
                return fileSyncReader(offset, size);
            }
        });
    }).then(function (pdfDoc) {
        return pdfDoc.id;
    }).then(function (pdfDocId) {
        workerResolve(id, pdfDocId);
    });
}
functionMap.getPDFDocByFile = getPDFDocByFile;
function getPDFDocByArrayBuffer(id, _ref5) {
    var buffer = _ref5.buffer;

    pdfJRPromise.then(function (pdfJr) {
        return pdfJr.getPDFDoc({
            size: buffer.byteLength,
            getBuffer: function getBuffer(offset, size) {
                if (buffer.slice) {
                    return buffer.slice(offset, offset + size);
                } else {
                    return new Uint8Array(buffer, offset, size).buffer;
                }
            }
        });
    }).then(function (pdfDoc) {
        var id = pdfDoc.id;
        destroyArrayBufferDocMap[id] = function () {
            buffer = null;
        };
        return pdfDoc.id;
    }).then(function (pdfDocId) {
        workerResolve(id, pdfDocId);
    });
}
functionMap.getPDFDocByArrayBuffer = getPDFDocByArrayBuffer;

function createNewDoc(id, _ref6) {
    var title = _ref6.title,
        author = _ref6.author,
        pageSize = _ref6.pageSize;

    pdfJRPromise.then(function (pdfJr) {
        return pdfJr.createNewDoc(title, author, pageSize);
    }).then(function (pdfDoc) {
        var id = pdfDoc.id;
        destroyArrayBufferDocMap[id] = function () {
            buffer = null;
        };
        return pdfDoc.id;
    }).then(function (pdfDocId) {
        workerResolve(id, pdfDocId);
    });
}
functionMap.createNewDoc = createNewDoc;

function setIcons(callId, _ref7) {
    var icons = _ref7.icons;

    (0, _iconProvider2.default)().setIcons(icons);
    workerResolve(callId);
}
functionMap.setIcons = setIcons;

function addIcon(callId, _ref8) {
    var icon = _ref8.icon;

    (0, _iconProvider2.default)().addIcon(icon);
    workerResolve(callId);
}
functionMap.addIcon = addIcon;

function removeIcon(callId, _ref9) {
    var type = _ref9.type,
        catalog = _ref9.catalog,
        name = _ref9.name;

    (0, _iconProvider2.default)().removeIcon(type, catalog, name);
    workerResolve(callId);
}
functionMap.removeIcon = removeIcon;

function parsePDFDocByPassword(callId, _ref10) {
    var id = _ref10.id,
        password = _ref10.password,
        _ref10$initData = _ref10.initData,
        initData = _ref10$initData === undefined ? {} : _ref10$initData;

    var promise = Promise.resolve();
    if (initData.fdf && initData.fdf.file) {
        var fdf = initData.fdf.file;
        promise = pdfJRPromise.then(function (pdfJr) {
            var fileSize = _getFileSize(fdf);
            var fileSyncReader = _getFileSyncReader(fdf);
            return pdfJr.getFDFDoc({
                size: fileSize,
                getBuffer: function getBuffer(offset, size) {
                    return fileSyncReader(offset, size);
                }
            });
        }).then(function (fdf) {
            initData.fdf.file = fdf;
        });
    }
    var _pdfDoc = void 0;
    promise.then(function () {
        return _getPDFDocById(id);
    }).then(function (pdfDoc) {
        if (!pdfDoc) {
            throw DOC_IS_NULL;
        }
        _pdfDoc = pdfDoc;

        return pdfDoc.parseByPassword(password, initData);
    }).then(function (code) {
        var result = { code: code };
        if (code === 0) {
            result.info = _pdfDoc.toJson();
        }
        workerResolve(callId, result);
    }, function () {
        workerReject(callId);
    });
}
functionMap.parsePDFDocByPassword = parsePDFDocByPassword;
function getPageCount(callId, id) {
    _getPDFDocById(id).then(function (pdfDoc) {
        if (!pdfDoc) {
            throw DOC_IS_NULL;
        }
        return pdfDoc.getPageCount();
    }).then(function (count) {
        workerResolve(callId, count);
    }, function () {
        workerReject(callId);
    });
}
functionMap.getPageCount = getPageCount;
function _getPDFDocById(id) {
    return pdfJRPromise.then(function (pdfJr) {
        return pdfJr.getPDFDocById(id);
    });
}
function getPDFDocInfoById(callId, id) {
    _getPDFDocById(id).then(function (pdfDoc) {
        if (!pdfDoc) {
            return workerReject(callId, { error: 404 });
        }
        workerResolve(callId, pdfDoc.toJson());
    });
}
functionMap.getPDFDocInfoById = getPDFDocInfoById;

function getMetadata(callId, id) {
    _getPDFDocById(id).then(function (pdfDoc) {
        if (!pdfDoc) {
            return workerReject(callId, { error: 404 });
        }
        workerResolve(callId, pdfDoc.getMetadata());
    });
}
functionMap.getMetadata = getMetadata;

function setMetadataValue(callId, id) {
    _getPDFDocById(id).then(function (pdfDoc) {
        if (!pdfDoc) {
            return workerReject(callId, { error: 404 });
        }
        workerResolve(callId, pdfDoc.setMetadataValue());
    });
}
functionMap.setMetadataValue = setMetadataValue;

function getPageInfoByIndex(callId, _ref11) {
    var id = _ref11.id,
        index = _ref11.index;

    _getPDFDocById(id).then(function (pdfDoc) {
        if (!pdfDoc) {
            throw DOC_IS_NULL;
        }
        return pdfDoc.getPageByIndex(index);
    }).then(function (page) {
        if (!page) {
            return workerReject(callId);
        }
        workerResolve(callId, page.toJson());
    }, function () {
        workerReject(callId);
    });
}
functionMap.getPageInfoByIndex = getPageInfoByIndex;
function getDocPermission(callId, id) {
    _getPDFDocById(id).then(function (pdfDoc) {
        if (!pdfDoc) {
            throw DOC_IS_NULL;
        }
        return pdfDoc.getPermission();
    }).then(function (permission) {
        workerResolve(callId, permission);
    }, function () {
        workerReject(callId);
    });
}
functionMap.getDocPermission = getDocPermission;
function getPageWidth(callId, _ref12) {
    var docId = _ref12.docId,
        pageId = _ref12.pageId;

    _getPageById(docId, pageId).then(function (page) {
        return page.getWidth();
    }).then(function (width) {
        workerResolve(callId, width);
    });
}
functionMap.getPageWidth = getPageWidth;
function getPageHeight(callId, _ref13) {
    var docId = _ref13.docId,
        pageId = _ref13.pageId;

    _getPageById(docId, pageId).then(function (page) {
        return page.getHeight();
    }).then(function (height) {
        workerResolve(callId, height);
    }, function () {
        workerReject(callId);
    });
}
functionMap.getPageHeight = getPageHeight;
function getPageImageData(callId, _ref14) {
    var docId = _ref14.docId,
        pageId = _ref14.pageId,
        scale = _ref14.scale;

    _getPageById(docId, pageId).then(function (page) {
        return page.getImageData(scale);
    }).then(function (imageData) {
        var transfer = [];
        if (imageData.buffer) {
            transfer = [imageData.buffer];
        }
        workerResolve(callId, imageData, transfer);
    }, function () {
        workerReject(callId);
    });
}
functionMap.getPageImageData = getPageImageData;
function _getPageById(docId, pageId) {
    return _getPDFDocById(docId).then(function (pdfDoc) {
        if (!pdfDoc) {
            throw DOC_IS_NULL;
        }
        return pdfDoc.getPageById(pageId);
    });
}
function destroyDoc(callId, _ref15) {
    var id = _ref15.id;

    asyncCallCache.get(id).forEach(function (value) {
        workerContinueEnd(value);
    });
    if (rangeDocMap[id]) {
        delete rangeMap[rangeDocMap[id]];
    }
    _getPDFDocById(id).then(function (pdfDoc) {
        if (!pdfDoc) {
            throw DOC_IS_NULL;
        }
        pdfJRPromise.then(function (pdfjr) {
            pdfjr.destroyDoc(id);
        });
        graphicsModule.clearObjectFromCache(id);
        pdfDoc.destroy();
        var destroyArrayBufferCallback = destroyArrayBufferDocMap[id];
        if (destroyArrayBufferCallback) {
            destroyArrayBufferCallback();
            delete destroyArrayBufferDocMap[id];
        }
    }).catch(function (e) {
        workerReject(callId);
    });
    workerResolve(callId);
}
functionMap.destroyDoc = destroyDoc;
function getPDFDocAsync(callId, _ref16) {
    var size = _ref16.size,
        getChunk = _ref16.getChunk;

    return pdfJRPromise.then(function (pdfJr) {
        return pdfJr.getPDFDocAsync({
            size: size,
            getBuffer: function getBuffer(offset, size) {
                return workerContinue(getChunk, { offset: offset, size: size }).then(function (blob) {
                    if (blob instanceof ArrayBuffer) {
                        return blob;
                    }
                    var fileReaderSync = new FileReaderSync();
                    return fileReaderSync.readAsArrayBuffer(blob);
                });
            }
        });
    }).then(function (pdfDoc) {
        asyncCallCache.push(pdfDoc.id, getChunk);
        return pdfDoc.id;
    }).then(function (pdfDocId) {
        workerResolve(callId, pdfDocId);
    });
}
functionMap.getPDFDocAsync = getPDFDocAsync;
function getImageDataByTile(callId, _ref17, renderFlags) {
    var docId = _ref17.docId,
        pageId = _ref17.pageId,
        x = _ref17.x,
        y = _ref17.y,
        width = _ref17.width,
        height = _ref17.height,
        scale = _ref17.scale,
        rotate = _ref17.rotate;

    _getPageById(docId, pageId).then(function (page) {
        return page.getImageDataByTile(x, y, width, height, scale, rotate, renderFlags);
    }).then(function (imageData) {
        var transfer = [];
        if (imageData.buffer) {
            transfer = [imageData.buffer];
        }
        workerResolve(callId, imageData, transfer);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.getImageDataByTile = getImageDataByTile;
function getImageDataWithoutAnnotByTile(callId, _ref18) {
    var docId = _ref18.docId,
        pageId = _ref18.pageId,
        x = _ref18.x,
        y = _ref18.y,
        width = _ref18.width,
        height = _ref18.height,
        scale = _ref18.scale,
        rotate = _ref18.rotate;

    pdfJRPromise.then(function (pdfJr) {
        getImageDataByTile(callId, { docId: docId, pageId: pageId, x: x, y: y, width: width, height: height, scale: scale, rotate: rotate }, [pdfJr.engine.ContentFlag.e_RenderPage.value]);
    });
}
functionMap.getImageDataWithoutAnnotByTile = getImageDataWithoutAnnotByTile;

function getAnnot(callId, _ref19) {
    var docId = _ref19.docId,
        pageId = _ref19.pageId,
        annotId = _ref19.annotId;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        return annot.toJson();
    }).then(function (info) {
        workerResolve(callId, info);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.getAnnot = getAnnot;

functionMap.getPageAnnotIDList = function getPageAnnotIDList(callId, _ref20) {
    var docId = _ref20.docId,
        pageId = _ref20.pageId;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotIDList();
    }).then(function (idList) {
        workerResolve(callId, idList);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
};

functionMap.getAnnots = function getAnnots(callId, _ref21) {
    var docId = _ref21.docId,
        pageId = _ref21.pageId,
        idList = _ref21.idList;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnots(idList);
    }).then(function (annots) {
        return annots.map(function (annot) {
            return annot && annot.toJson();
        });
    }).then(function (annots) {
        workerResolve(callId, annots);
    }).catch(function (e) {
        workerReject(callId);
    });
};
function setRenderFlag(callId, _ref22) {
    var docId = _ref22.docId,
        flags = _ref22.flags;

    _getPDFDocById(docId).then(function (doc) {
        doc.setRenderFlag(flags);
    });
}
functionMap.setRenderFlag = setRenderFlag;
function getPageBitmap(callId, _ref23) {
    var docId = _ref23.docId,
        pageId = _ref23.pageId,
        scale = _ref23.scale,
        rotate = _ref23.rotate,
        rect = _ref23.rect,
        flags = _ref23.flags;

    _getPageById(docId, pageId).then(function (page) {
        return page.getBitmap(scale, rotate, rect, flags);
    }).then(function (imageData) {
        var transfer = [];
        if (imageData.buffer) {
            transfer = [imageData.buffer];
        }
        workerResolve(callId, imageData, transfer);
    }).catch(function (e) {
        workerReject(callId);
    });
}
functionMap.getPageBitmap = getPageBitmap;
function getPageAndHighlightBitmap(callId, _ref24) {
    var docId = _ref24.docId,
        pageId = _ref24.pageId,
        scale = _ref24.scale,
        rotate = _ref24.rotate,
        rect = _ref24.rect;

    _getPageById(docId, pageId).then(function (page) {
        return page.getPageAndHighlightBitmap(scale, rotate, rect);
    }).then(function (imageData) {
        var transfer = [];
        if (imageData.buffer) {
            transfer = [imageData.buffer];
        }
        workerResolve(callId, imageData, transfer);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.getPageAndHighlightBitmap = getPageAndHighlightBitmap;
function getAnnotBitmap(callId, _ref25) {
    var docId = _ref25.docId,
        pageId = _ref25.pageId,
        annotId = _ref25.annotId,
        scale = _ref25.scale,
        rotate = _ref25.rotate,
        rect = _ref25.rect;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotBitmap(annotId, scale, rotate, rect);
    }).then(function (imageData) {
        var transfer = [];
        if (imageData.buffer) {
            transfer = [imageData.buffer];
        }
        workerResolve(callId, imageData, transfer);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.getAnnotBitmap = getAnnotBitmap;
function getAnnotBitmapByRange(callId, _ref26) {
    var docId = _ref26.docId,
        pageId = _ref26.pageId,
        range = _ref26.range,
        scale = _ref26.scale,
        rotate = _ref26.rotate,
        rect = _ref26.rect;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotBitmapByRange(range, scale, rotate, rect);
    }).then(function (imageData) {
        var transfer = [];
        if (imageData.buffer) {
            transfer = [imageData.buffer];
        }
        workerResolve(callId, imageData, transfer);
    }).catch(function (e) {
        console.log(e);
        workerReject(callId, null, [], e);
    });
}
functionMap.getAnnotBitmapByRange = getAnnotBitmapByRange;
function getAnnotIdAtPoint(callId, _ref27) {
    var docId = _ref27.docId,
        pageId = _ref27.pageId,
        points = _ref27.points,
        tolerance = _ref27.tolerance;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotIdAtDevicePoint(points.x, points.y, tolerance);
    }).then(function (id) {
        workerResolve(callId, id);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.getAnnotIdAtPoint = getAnnotIdAtPoint;
function getAnnotIdAtDevicePoint(callId, _ref28) {
    var docId = _ref28.docId,
        pageId = _ref28.pageId,
        points = _ref28.points,
        tolerance = _ref28.tolerance,
        matrix = _ref28.matrix;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotIdAtDevicePoint(points.x, points.y, tolerance, matrix);
    }).then(function (id) {
        workerResolve(callId, id);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.getAnnotIdAtDevicePoint = getAnnotIdAtDevicePoint;
function getCharInfoAtPoint(callId, _ref29) {
    var docId = _ref29.docId,
        pageId = _ref29.pageId,
        points = _ref29.points,
        tolerance = _ref29.tolerance;

    _getPageById(docId, pageId).then(function (page) {
        return page.getCharInfoAtPoint(points.x, points.y, tolerance);
    }).then(function (info) {
        workerResolve(callId, info);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.getCharInfoAtPoint = getCharInfoAtPoint;
function getThumb(callId, _ref30) {
    var docId = _ref30.docId,
        pageId = _ref30.pageId;

    _getPageById(docId, pageId).then(function (page) {
        return page.getThumb();
    }).then(function (buffer) {
        workerResolve(callId, buffer);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.getThumb = getThumb;
function updateAnnotQuadPointsByCharIndex(callId, _ref31) {
    var docId = _ref31.docId,
        pageId = _ref31.pageId,
        annotId = _ref31.annotId,
        startCharIndex = _ref31.startCharIndex,
        endCharIndex = _ref31.endCharIndex;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        return annot.updateQuadPointsByCharIndex(startCharIndex, endCharIndex);
    }).then(function (flag) {
        workerResolve(callId, flag);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.updateAnnotQuadPointsByCharIndex = updateAnnotQuadPointsByCharIndex;
function setAnnotContent(callId, _ref32) {
    var docId = _ref32.docId,
        pageId = _ref32.pageId,
        annotId = _ref32.annotId,
        content = _ref32.content;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        return annot.setContent(content);
    }).then(function (id) {
        workerResolve(callId, id);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.setAnnotContent = setAnnotContent;
function setAnnotBorderColor(callId, _ref33) {
    var docId = _ref33.docId,
        pageId = _ref33.pageId,
        annotId = _ref33.annotId,
        color = _ref33.color;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        return annot.setBorderColor(color);
    }).then(function () {
        workerResolve(callId, true);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.setAnnotBorderColor = setAnnotBorderColor;
function setAnnotOpacity(callId, _ref34) {
    var docId = _ref34.docId,
        pageId = _ref34.pageId,
        annotId = _ref34.annotId,
        opacity = _ref34.opacity;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        return annot.setOpacity(opacity);
    }).then(function (modifiedIds) {
        workerResolve(callId, modifiedIds);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.setAnnotOpacity = setAnnotOpacity;
function setAnnotRotation(callId, _ref35) {
    var docId = _ref35.docId,
        pageId = _ref35.pageId,
        annotId = _ref35.annotId,
        rotation = _ref35.rotation;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        return annot.setRotation(rotation);
    }).then(function (modifiedIds) {
        workerResolve(callId, modifiedIds);
    });
}
functionMap.setAnnotRotation = setAnnotRotation;
function removeAnnot(callId, _ref36) {
    var docId = _ref36.docId,
        pageId = _ref36.pageId,
        annotId = _ref36.annotId;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        return annot.remove();
    }).then(function (removedIds) {
        workerResolve(callId, removedIds || []);
    }).catch(function (e) {
        workerReject(callId);
    });
}
functionMap.removeAnnot = removeAnnot;

function annotAddReply(callId, _ref37) {
    var docId = _ref37.docId,
        pageId = _ref37.pageId,
        annotId = _ref37.annotId,
        content = _ref37.content;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        return annot.addReply(content);
    }).then(function (annot) {
        return annot.pdfPage.update().then(function () {
            return annot;
        });
    }).then(function (annot) {
        workerResolve(callId, annot.toJson());
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.annotAddReply = annotAddReply;

function setAnnotRect(callId, _ref38) {
    var docId = _ref38.docId,
        pageId = _ref38.pageId,
        annotId = _ref38.annotId,
        rect = _ref38.rect;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        var ret = annot.setRect(rect);
        return ret;
    }).then(function (flag) {
        workerResolve(callId, flag);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.setAnnotRect = setAnnotRect;

function getAnnotInnerRect(callId, _ref39) {
    var docId = _ref39.docId,
        pageId = _ref39.pageId,
        annotId = _ref39.annotId;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        if (annot.getInnerRect) {
            workerResolve(callId, annot.getInnerRect());
        } else {
            workerResolve(callId, false);
        }
    });
}
functionMap.getAnnotInnerRect = getAnnotInnerRect;

functionMap.moveAnnotTo = function moveAnnotTo(callId, _ref40) {
    var docId = _ref40.docId,
        pageId = _ref40.pageId,
        annotId = _ref40.annotId,
        position = _ref40.position;

    _getPageById(docId, pageId) //
    .then(function (page) {
        return page.getAnnotById(annotId);
    }) //
    .then(function (annot) {
        return annot.moveTo(position.left, position.top);
    }) //
    .then(function (flag) {
        return workerResolve(callId, flag);
    }).catch(function () {
        workerReject(callId);
    });
};

functionMap.setAnnotInnerRect = function setAnnotInnerRect(callId, _ref41) {
    var docId = _ref41.docId,
        pageId = _ref41.pageId,
        annotId = _ref41.annotId,
        rect = _ref41.rect;

    _getPageById(docId, pageId) //
    .then(function (page) {
        return page.getAnnotById(annotId);
    }) //
    .then(function (annot) {
        return annot.setInnerRect(rect);
    }) //
    .then(function (flag) {
        return workerResolve(callId, flag);
    }).catch(function () {
        workerReject(callId);
    });
};

functionMap.setAnnotAPBitmap = function setAnnotAPBitmap(callId, _ref42) {
    var docId = _ref42.docId,
        pageId = _ref42.pageId,
        annotId = _ref42.annotId,
        url = _ref42.url,
        size = _ref42.size;

    _getPageById(docId, pageId) //
    .then(function (page) {
        return page.getAnnotById(annotId);
    }) //
    .then(function (annot) {
        return annot.setAnnotAPBitmap(url, size);
    }) //
    .then(function (flag) {
        return workerResolve(callId, flag);
    }).catch(function () {
        workerReject(callId);
    });
};

function getPDFDocStream(callId, _ref43) {
    var docId = _ref43.docId,
        _writeStream = _ref43.writeStream;

    var _pdfDoc = void 0;
    _getPDFDocById(docId).then(function (pdfDoc) {
        if (!pdfDoc) {
            throw DOC_IS_NULL;
        }
        _pdfDoc = pdfDoc;
        return pdfDoc.getStream({
            writeStream: function writeStream(arrayBuffer, offset, size) {
                workerContinue(_writeStream, { arrayBuffer: arrayBuffer, offset: offset, size: size }, [arrayBuffer]);
            }
        });
    }).then(function (size) {
        asyncCallCache.push(_pdfDoc.id, _writeStream);
        workerResolve(callId, size);
    }, function (e) {
        console.warn(e);
        workerReject(callId);
    }).catch(function (e) {
        console.warn(e);
        workerReject(callId);
    });
}
functionMap.getPDFDocStream = getPDFDocStream;

function setAnnotBorderStyle(callId, _ref44) {
    var docId = _ref44.docId,
        pageId = _ref44.pageId,
        annotId = _ref44.annotId,
        style = _ref44.style,
        styleParam = _ref44.styleParam;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        var annotIds = annot.setBorderStyle(style, styleParam);
        return annotIds;
    }).then(function (annotIds) {
        workerResolve(callId, annotIds);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.setAnnotBorderStyle = setAnnotBorderStyle;

function setAnnotBorderWidth(callId, _ref45) {
    var docId = _ref45.docId,
        pageId = _ref45.pageId,
        annotId = _ref45.annotId,
        width = _ref45.width;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        var ret = annot.setBorderWidth(width);
        return ret;
    }).then(function (flag) {
        workerResolve(callId, flag);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.setAnnotBorderWidth = setAnnotBorderWidth;

function setAnnotFillColor(callId, _ref46) {
    var docId = _ref46.docId,
        pageId = _ref46.pageId,
        annotId = _ref46.annotId,
        color = _ref46.color;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        var ret = annot.setFillColor(color);
        return !!ret.length;
    }).then(function (flag) {
        workerResolve(callId, flag);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.setAnnotFillColor = setAnnotFillColor;

function setRedactApplyFillColor(callId, _ref47) {
    var docId = _ref47.docId,
        pageId = _ref47.pageId,
        annotId = _ref47.annotId,
        color = _ref47.color;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        return annot.setRedactApplyFillColor(color);
    }).then(function (flag) {
        workerResolve(callId, flag);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.setRedactApplyFillColor = setRedactApplyFillColor;

function setAnnotIconName(callId, _ref48) {
    var docId = _ref48.docId,
        pageId = _ref48.pageId,
        annotId = _ref48.annotId,
        iconName = _ref48.iconName;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        return annot.setIconName(iconName);
    }).then(function (flag) {
        workerResolve(callId, flag);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.setAnnotIconName = setAnnotIconName;

function getFileattachmentStream(callId, _ref49) {
    var docId = _ref49.docId,
        pageId = _ref49.pageId,
        annotId = _ref49.annotId,
        _writeStream2 = _ref49.writeStream;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        return annot.getStream({
            writeStream: function writeStream(arrayBuffer, offset, size) {
                workerContinue(_writeStream2, { arrayBuffer: arrayBuffer, offset: offset, size: size }, [arrayBuffer]);
            }
        });
    }).then(function (size) {
        asyncCallCache.push(annotId, _writeStream2);
        workerResolve(callId, size);
    });
}
functionMap.getFileattachmentStream = getFileattachmentStream;

function setAnnotEndingStyle(callId, _ref50) {
    var docId = _ref50.docId,
        pageId = _ref50.pageId,
        annotId = _ref50.annotId,
        isBeginning = _ref50.isBeginning,
        style = _ref50.style;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        style = parseInt(style);
        if (isBeginning) {
            annot.setLineStartStyle(style);
        } else {
            annot.setLineEndStyle(style);
        }
    }).then(function () {
        workerResolve(callId);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.setAnnotEndingStyle = setAnnotEndingStyle;

function enableLineCaption(callId, _ref51) {
    var docId = _ref51.docId,
        pageId = _ref51.pageId,
        annotId = _ref51.annotId,
        enable = _ref51.enable;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        annot.enableCaption(enable);
    }).then(function () {
        workerResolve(callId);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.enableLineCaption = enableLineCaption;

function setLineStartPoint(callId, _ref52) {
    var docId = _ref52.docId,
        pageId = _ref52.pageId,
        annotId = _ref52.annotId,
        x = _ref52.x,
        y = _ref52.y;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        annot.setStartPoint(x, y);
    }).then(function () {
        workerResolve(callId);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.setLineStartPoint = setLineStartPoint;

function setLineEndPoint(callId, _ref53) {
    var docId = _ref53.docId,
        pageId = _ref53.pageId,
        annotId = _ref53.annotId,
        x = _ref53.x,
        y = _ref53.y;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        annot.setEndPoint(x, y);
    }).then(function () {
        workerResolve(callId);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.setLineEndPoint = setLineEndPoint;

function setAnnotLeaderLineLength(callId, _ref54) {
    var docId = _ref54.docId,
        pageId = _ref54.pageId,
        annotId = _ref54.annotId,
        length = _ref54.length;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        annot.setLeaderLineLength(length);
    }).then(function () {
        workerResolve(callId);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.setAnnotLeaderLineLength = setAnnotLeaderLineLength;

function updateAnnotVertexes(callId, _ref55) {
    var docId = _ref55.docId,
        pageId = _ref55.pageId,
        annotId = _ref55.annotId,
        pointIndex = _ref55.pointIndex,
        x = _ref55.x,
        y = _ref55.y;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        annot.updateVertexes(pointIndex, x, y);
    }).then(function () {
        workerResolve(callId);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.updateAnnotVertexes = updateAnnotVertexes;

function setAnnotVertexes(callId, _ref56) {
    var docId = _ref56.docId,
        pageId = _ref56.pageId,
        annotId = _ref56.annotId,
        vertexes = _ref56.vertexes;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        annot.setVertexes(vertexes);
    }).then(function () {
        workerResolve(callId);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.setAnnotVertexes = setAnnotVertexes;

function setHighlightingMode(callId, _ref57) {
    var docId = _ref57.docId,
        pageId = _ref57.pageId,
        annotId = _ref57.annotId,
        highlightingMode = _ref57.highlightingMode;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        return annot.setHighlightingMode(highlightingMode);
    }).then(function (modifiedIds) {
        workerResolve(callId, modifiedIds);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.setHighlightingMode = setHighlightingMode;

function _getFileSize(blob) {
    return blob instanceof Blob ? blob.size : blob.byteLength;
}
function _getFileSyncReader(file) {
    if (file instanceof Blob) {
        return function (offset, size) {
            var fileReaderSync = new FileReaderSync();
            return fileReaderSync.readAsArrayBuffer(file.slice(offset, offset + size));
        };
    }
    if (file.slice) {
        return function (offset, size) {
            return file.slice(offset, offset + size);
        };
    }
    return function (offset, size) {
        return new Uint8Array(file, offset, size).buffer;
    };
}
function importFromFDF(callId, _ref58) {
    var docId = _ref58.docId,
        fdf = _ref58.fdf,
        dataType = _ref58.dataType;

    pdfJRPromise.then(function (pdfJr) {
        var fileSize = _getFileSize(fdf);
        var fileSyncReader = _getFileSyncReader(fdf);
        return Promise.all([pdfJr.getFDFDoc({
            size: fileSize,
            getBuffer: function getBuffer(offset, size) {
                return fileSyncReader(offset, size);
            }
        }), _getPDFDocById(docId)]);
    }).then(function (_ref59) {
        var _ref60 = _slicedToArray(_ref59, 2),
            fdfdoc = _ref60[0],
            pdfDoc = _ref60[1];

        pdfDoc.importFromFDF(fdfdoc, dataType);
        return Promise.all(pdfDoc.getAllLoadedPages().map(function (page) {
            return page.update();
        }));
    }).then(function () {
        workerResolve(callId);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.importFromFDF = importFromFDF;
function importFromFDFFile(callId, _ref61) {
    var docId = _ref61.docId,
        file = _ref61.file,
        size = _ref61.size,
        type = _ref61.type;

    pdfJRPromise.then(function (pdfJr) {
        var promise = void 0;
        if (file instanceof Uint8Array) {
            promise = pdfJr.getFDFDoc({
                size: file.byteLength,
                getBuffer: function getBuffer(offset, size) {
                    if (file.slice) {
                        return file.slice(offset, offset + size);
                    } else {
                        return new Uint8Array(file, offset, size).buffer;
                    }
                }
            });
        } else if (typeof file === "string") {
            promise = pdfJr.getFDFFromURL(file, size);
        }
        return promise;
    }).then(function (fdf) {
        return Promise.all([fdf, _getPDFDocById(docId)]);
    }).then(function (_ref62) {
        var _ref63 = _slicedToArray(_ref62, 2),
            fdf = _ref63[0],
            doc = _ref63[1];

        var result = doc.importFromFDF(fdf, type);
        return Promise.all(doc.getAllLoadedPages().map(function (page) {
            return page.update();
        })).then(function () {
            return result;
        });
    }).then(function (flag) {
        workerResolve(callId, flag);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.importFromFDFFile = importFromFDFFile;

function setCalloutLineEndingStyle(callId, _ref64) {
    var docId = _ref64.docId,
        pageId = _ref64.pageId,
        annotId = _ref64.annotId,
        endingStyle = _ref64.endingStyle;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        annot.setCalloutLineEndingStyle(endingStyle);
    }).then(function () {
        workerResolve(callId);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.setCalloutLineEndingStyle = setCalloutLineEndingStyle;

function setAction(callId, _ref65) {
    var docId = _ref65.docId,
        pageId = _ref65.pageId,
        annotId = _ref65.annotId,
        type = _ref65.type;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        return annot.setAction(type);
    }).then(function (action) {
        workerResolve(callId, action.toJson());
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.setAction = setAction;

function addAnnotReviewState(callId, _ref66) {
    var docId = _ref66.docId,
        pageId = _ref66.pageId,
        annotId = _ref66.annotId,
        stateName = _ref66.stateName;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        return annot.addReviewState(stateName);
    }).then(function (annot) {
        return annot.pdfPage.update().then(function () {
            return annot;
        });
    }).then(function (annot) {
        workerResolve(callId, annot.toJson());
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.addAnnotReviewState = addAnnotReviewState;

function addAnnotMarkedState(callId, _ref67) {
    var docId = _ref67.docId,
        pageId = _ref67.pageId,
        annotId = _ref67.annotId,
        stateName = _ref67.stateName;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        return annot.addMarkedState(stateName);
    }).then(function (annot) {
        return annot.pdfPage.update().then(function () {
            return annot;
        });
    }).then(function (annot) {
        workerResolve(callId, annot.toJson());
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.addAnnotMarkedState = addAnnotMarkedState;

functionMap.removeAllStateAnnots = function removeAllStateAnnots(callId, _ref68) {
    var docId = _ref68.docId,
        pageId = _ref68.pageId,
        annotId = _ref68.annotId;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        var isSuccess = annot.removeAllStateAnnots();
        if (isSuccess) {
            return annot.pdfPage.update().then(function (_) {
                return isSuccess;
            });
        }
        return false;
    }).then(function (isSuccess) {
        return workerResolve(callId, isSuccess);
    }).catch(function (reason) {
        return workerReject(callId, reason);
    });
};

functionMap.setStateName = function setStateName(callId, _ref69) {
    var docId = _ref69.docId,
        pageId = _ref69.pageId,
        stateAnnotId = _ref69.stateAnnotId,
        stateName = _ref69.stateName;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(stateAnnotId);
    }).then(function (annot) {
        annot.setStateName(stateName);
        workerResolve(callId, true);
    }).catch(function (reason) {
        return workerReject(callId, reason);
    });
};

functionMap.setNoteOpenStatus = function setNoteOpenStatus(callId, _ref70) {
    var docId = _ref70.docId,
        pageId = _ref70.pageId,
        annotId = _ref70.annotId,
        isOpen = _ref70.isOpen;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        var isSuccess = annot.setOpenStatus(isOpen);
        workerResolve(callId, isSuccess);
    }).catch(function (reason) {
        return workerReject(callId, reason);
    });
};

function setActionDataByIndex(callId, _ref71) {
    var docId = _ref71.docId,
        pageId = _ref71.pageId,
        annotId = _ref71.annotId,
        data = _ref71.data,
        actionIndex = _ref71.actionIndex;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        return annot.action.setActionDataByIndex(data, actionIndex);
    }).then(function (action) {
        workerResolve(callId, action.toJson());
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.setActionDataByIndex = setActionDataByIndex;

function setCalloutLinePoints(callId, _ref72) {
    var docId = _ref72.docId,
        pageId = _ref72.pageId,
        annotId = _ref72.annotId,
        calloutLinePoints = _ref72.calloutLinePoints;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        return annot.setCalloutLinePoints(calloutLinePoints);
    }).then(function () {
        workerResolve(callId);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.setCalloutLinePoints = setCalloutLinePoints;

function setSubject(callId, _ref73) {
    var docId = _ref73.docId,
        pageId = _ref73.pageId,
        annotId = _ref73.annotId,
        subject = _ref73.subject;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        var ret = annot.setSubject(subject);
        return ret;
    }).then(function (modifiedIds) {
        workerResolve(callId, modifiedIds);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.setSubject = setSubject;

function setTitle(callId, _ref74) {
    var docId = _ref74.docId,
        pageId = _ref74.pageId,
        annotId = _ref74.annotId,
        title = _ref74.title;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        var ret = annot.setTitle(title);
        return ret;
    }).then(function (modifiedIds) {
        workerResolve(callId, modifiedIds);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.setTitle = setTitle;

function setCreateDateTime(callId, _ref75) {
    var docId = _ref75.docId,
        pageId = _ref75.pageId,
        annotId = _ref75.annotId,
        date = _ref75.date;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        var ret = annot.setCreateDateTime(date);
        return ret;
    }).then(function (modifiedIds) {
        workerResolve(callId, modifiedIds);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.setCreateDateTime = setCreateDateTime;

function setModifiedDateTime(callId, _ref76) {
    var docId = _ref76.docId,
        pageId = _ref76.pageId,
        annotId = _ref76.annotId,
        date = _ref76.date;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        var ret = annot.setModifiedDateTime(date);
        return ret;
    }).then(function (flag) {
        workerResolve(callId, flag);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.setModifiedDateTime = setModifiedDateTime;

function setDefaultAp(callId, _ref77) {
    var docId = _ref77.docId,
        pageId = _ref77.pageId,
        annotId = _ref77.annotId,
        defaultAppearance = _ref77.defaultAppearance;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        var ret = annot.setDefaultAp(defaultAppearance);
        return ret;
    }).then(function (flag) {
        workerResolve(callId, flag);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.setDefaultAp = setDefaultAp;

function exportToFDF(callId, _ref78) {
    var docId = _ref78.docId,
        fileType = _ref78.fileType,
        dataType = _ref78.dataType;

    _getPDFDocById(docId).then(function (pdfDoc) {
        return pdfDoc.exportToFDF(fileType, dataType);
    }).then(function (_) {
        workerResolve(callId, _);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.exportToFDF = exportToFDF;

function setAnnotFlag(callId, _ref79) {
    var docId = _ref79.docId,
        pageId = _ref79.pageId,
        annotId = _ref79.annotId,
        flag = _ref79.flag;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        var ret = annot.setFlags(flag);
        return ret;
    }).then(function (_) {
        workerResolve(callId, true);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.setAnnotFlag = setAnnotFlag;

function addAnnot(callId, _ref80) {
    var docId = _ref80.docId,
        pageId = _ref80.pageId,
        annot = _ref80.annot;

    _getPageById(docId, pageId).then(function (page) {
        return page.addAnnot(annot);
    }).then(function (annots) {
        var list = [];
        for (var i = 0, j = annots.length; i < j; i++) {
            var _annot = annots[i];
            if (!_annot) {
                list[i] = null;
                continue;
            }
            list[i] = _annot.toJson();
        }
        return list;
    }).then(function (annots) {
        workerResolve(callId, annots);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.addAnnot = addAnnot;

function getLayerNodes(callId, _ref81) {
    var docId = _ref81.docId;

    _getPDFDocById(docId).then(function (pdfDoc) {
        return pdfDoc.getLayerNodes();
    }).then(function (_) {
        workerResolve(callId, _);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.getLayerNodes = getLayerNodes;

function setLayerNodeVisiable(callId, _ref82) {
    var docId = _ref82.docId,
        layerId = _ref82.layerId,
        visiable = _ref82.visiable;

    _getPDFDocById(docId).then(function (pdfDoc) {
        if (pdfDoc.pdfLayer) {
            return pdfDoc.pdfLayer.setLayerNodeVisiable(layerId, visiable);
        }
        return false;
    }).then(function (_) {
        workerResolve(callId, _);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.setLayerNodeVisiable = setLayerNodeVisiable;

function addAnnotGroup(callId, _ref83) {
    var docId = _ref83.docId,
        pageId = _ref83.pageId,
        annots = _ref83.annots,
        headerIndex = _ref83.headerIndex;

    _getPageById(docId, pageId).then(function (page) {
        return page.addAnnotGroup(annots, headerIndex);
    }).then(function (annots) {
        var list = [];
        for (var i = 0, j = annots.length; i < j; i++) {
            var annot = annots[i];
            if (!annot) {
                list[i] = null;
                continue;
            }
            list[i] = annot.toJson();
        }
        return list;
    }).then(function (annots) {
        workerResolve(callId, annots);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.addAnnotGroup = addAnnotGroup;

function getBookmarks(callId, _ref84) {
    var docId = _ref84.docId;

    _getPDFDocById(docId).then(function (pdfDoc) {
        return pdfDoc.getBookmarks();
    }).then(function (_) {
        workerResolve(callId, _);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.getBookmarks = getBookmarks;

function createRootBookmark(callId, _ref85) {
    var docId = _ref85.docId;

    _getPDFDocById(docId).then(function (pdfDoc) {
        return pdfDoc.createRootBookmark();
    }).then(function (_) {
        workerResolve(callId, _);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.createRootBookmark = createRootBookmark;

function insertBookmark(callId, _ref86) {
    var docId = _ref86.docId,
        pbkId = _ref86.pbkId,
        title = _ref86.title,
        pageIndex = _ref86.pageIndex,
        top = _ref86.top,
        left = _ref86.left;

    _getPDFDocById(docId).then(function (pdfDoc) {
        return pdfDoc.insertBookmark(pbkId, title, pageIndex, top, left);
    }).then(function (_) {
        workerResolve(callId, _);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.insertBookmark = insertBookmark;

function setBookmarkProperty(callId, _ref87) {
    var docId = _ref87.docId,
        bkId = _ref87.bkId,
        properties = _ref87.properties;

    _getPDFDocById(docId).then(function (pdfDoc) {
        return pdfDoc.setBookmarkProperty(bkId, properties);
    }).then(function (_) {
        workerResolve(callId, _);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.setBookmarkProperty = setBookmarkProperty;

function removeBookmark(callId, _ref88) {
    var docId = _ref88.docId,
        bkId = _ref88.bkId;

    _getPDFDocById(docId).then(function (pdfDoc) {
        return pdfDoc.removeBookmark(bkId);
    }).then(function (_) {
        workerResolve(callId, _);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.removeBookmark = removeBookmark;

function getTextRectsAtRect(callId, _ref89) {
    var docId = _ref89.docId,
        pageId = _ref89.pageId,
        rect = _ref89.rect;

    _getPageById(docId, pageId).then(function (page) {
        return page.getTextRectsAtRect(rect);
    }).then(function (rectArray) {
        workerResolve(callId, rectArray);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.getTextRectsAtRect = getTextRectsAtRect;
function getTextContinuousRectsAtRect(callId, _ref90) {
    var docId = _ref90.docId,
        pageId = _ref90.pageId,
        rect = _ref90.rect;

    _getPageById(docId, pageId).then(function (page) {
        return page.getTextContinuousRectsAtRect(rect);
    }).then(function (rectArray) {
        workerResolve(callId, rectArray);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.getTextContinuousRectsAtRect = getTextContinuousRectsAtRect;
function getTextContinuousCharsAtRect(callId, _ref91) {
    var docId = _ref91.docId,
        pageId = _ref91.pageId,
        rect = _ref91.rect;

    _getPageById(docId, pageId).then(function (page) {
        return page.getTextContinuousCharsAtRect(rect);
    }).then(function (rectArray) {
        workerResolve(callId, rectArray);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.getTextContinuousCharsAtRect = getTextContinuousCharsAtRect;

function getTextSearch(callId, _ref92) {
    var docId = _ref92.docId,
        pageId = _ref92.pageId,
        pattern = _ref92.pattern,
        flags = _ref92.flags;

    _getPageById(docId, pageId).then(function (page) {
        return page.getTextSearch(pattern, flags);
    }).then(function (textSearch) {
        var id = (0, _getUniqueId2.default)('page_text_search');
        c_textSearchCache[id] = textSearch;
        workerResolve(callId, id);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.getTextSearch = getTextSearch;
function textSearchFindNext(callId, _ref93) {
    var id = _ref93.id;

    var c_textSearch = c_textSearchCache[id];
    if (!c_textSearch) {
        return workerReject(callId);
    }
    var bFind = c_textSearch.FindNext();
    if (!bFind) {
        return workerResolve(callId, null);
    }

    workerResolve(callId, _getTextSearchMatch(c_textSearch));
}
functionMap.textSearchFindNext = textSearchFindNext;
function textSearchFindPrev(callId, _ref94) {
    var id = _ref94.id;

    var c_textSearch = c_textSearchCache[id];
    if (!c_textSearch) {
        return workerReject(callId);
    }
    var bFind = c_textSearch.FindPrev();
    if (!bFind) {
        return workerResolve(callId, null);
    }

    workerResolve(callId, _getTextSearchMatch(c_textSearch));
}
functionMap.textSearchFindPrev = textSearchFindPrev;
function _getTextSearchMatch(c_textSearch) {
    var rectArray = [];
    var c_rects = c_textSearch.GetMatchRects();
    for (var i = 0, j = c_rects.GetSize(); i < j; i++) {
        var c_rect = c_rects.GetAt(i);
        rectArray[i] = {
            left: c_rect.left,
            right: c_rect.right,
            top: c_rect.top,
            bottom: c_rect.bottom
        };
    }
    return {
        pageIndex: c_textSearch.GetMatchPageIndex(),
        startCharIndex: c_textSearch.GetMatchStartCharIndex(),
        endCharIndex: c_textSearch.GetMatchEndCharIndex(),
        sentenceStartIndex: c_textSearch.GetMatchSentenceStartIndex(),
        sentence: c_textSearch.GetMatchSentence().toString(),
        rectArray: rectArray
    };
}
function textSearchDestroy(callId, _ref95) {
    var id = _ref95.id;

    var c_textSearch = c_textSearchCache[id];
    if (!c_textSearch) {
        return workerReject(callId);
    }
    c_textSearch.delete();
    delete c_textSearchCache[id];
}

functionMap.textSearchDestroy = textSearchDestroy;

function registerSecurityCallback(callId, _ref96) {
    var type = _ref96.type,
        options = _ref96.options;

    pdfJRPromise.then(function (pdfJr) {
        return pdfJr.registerSecurityCallback(type, options);
    }).then(function (flag) {
        workerResolve(callId, flag);
    });
}
functionMap.registerSecurityCallback = registerSecurityCallback;

function setPopupOpenStatus(callId, _ref97) {
    var docId = _ref97.docId,
        pageId = _ref97.pageId,
        index = _ref97.index,
        status = _ref97.status;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnot(index);
    }).then(function (annot) {
        return annot.setOpenStatus(status);
    }).then(function (flag) {
        workerResolve(callId, flag);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.setPopupOpenStatus = setPopupOpenStatus;

function setDocOpenAction(callId, _ref98) {
    var docId = _ref98.docId,
        type = _ref98.type;

    _getPDFDocById(docId).then(function (doc) {
        return doc.setOpenAction(type);
    }).then(function (flag) {
        workerResolve(callId, flag);
    });
}
functionMap.setDocOpenAction = setDocOpenAction;

function setDocActionData(callId, _ref99) {
    var docId = _ref99.docId,
        data = _ref99.data,
        index = _ref99.index;

    _getPDFDocById(docId).then(function (doc) {
        return doc.action.setActionDataByIndex(data, index);
    }).then(function (doc) {
        workerResolve(callId, doc.toJson());
    });
}
functionMap.setDocActionData = setDocActionData;

function moveCaretRectByCharIndex(callId, _ref100) {
    var docId = _ref100.docId,
        pageId = _ref100.pageId,
        annotId = _ref100.annotId,
        charIndex = _ref100.charIndex;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        var ret = annot.moveRectByCharIndex(charIndex);
        return ret;
    }).then(function (_) {
        workerResolve(callId, true);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.moveCaretRectByCharIndex = moveCaretRectByCharIndex;

function setAnnotIntent(callId, _ref101) {
    var docId = _ref101.docId,
        pageId = _ref101.pageId,
        annotId = _ref101.annotId,
        intent = _ref101.intent;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        var ret = annot.setIntent(intent);
        return ret;
    }).then(function (annotIds) {
        workerResolve(callId, annotIds);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.setAnnotIntent = setAnnotIntent;

function setInkList(callId, _ref102) {
    var docId = _ref102.docId,
        pageId = _ref102.pageId,
        annotId = _ref102.annotId,
        inkList = _ref102.inkList;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        var flag = annot.setInkList(inkList);
        return flag;
    }).then(function (flag) {
        workerResolve(callId, flag);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.setInkList = setInkList;

function setUserName(callId, _ref103) {
    var name = _ref103.name;

    pdfJRPromise.then(function (pdfJr) {
        return pdfJr.setUserName(name);
    }).then(function () {
        workerResolve(callId);
    });
}
functionMap.setUserName = setUserName;

functionMap.getUserName = function getUserName(callId) {
    pdfJRPromise.then(function (pdfJr) {
        return pdfJr.getUserName();
    }).then(function (userName) {
        return workerResolve(callId, userName);
    });
};

function flatten(callId, _ref104) {
    var docId = _ref104.docId,
        pageId = _ref104.pageId,
        option = _ref104.option;

    _getPageById(docId, pageId).then(function (page) {
        return page.flatten(option);
    }).then(function (result) {
        if (result) {
            workerResolve(callId, result);
        } else {
            workerReject(callId);
        }
    });
}
functionMap.flatten = flatten;

function setDynamicInfoFormula(callId, _ref105) {
    var seperator = _ref105.seperator,
        timeFormat = _ref105.timeFormat;

    (0, _iconProvider2.default)().setDynamicInfoFormula(seperator, timeFormat);
    workerResolve(callId);
}

functionMap.setDynamicInfoFormula = setDynamicInfoFormula;

function updatePageInfo(callId, _ref106) {
    var docId = _ref106.docId,
        pageId = _ref106.pageId;

    _getPageById(docId, pageId).then(function (page) {
        return page.toJson();
    }).then(function (result) {
        workerResolve(callId, result);
    }, function () {
        workerReject(callId);
    });
}
functionMap.updatePageInfo = updatePageInfo;
function setPageRotation(callId, _ref107) {
    var docId = _ref107.docId,
        pageId = _ref107.pageId,
        rotation = _ref107.rotation;

    _getPageById(docId, pageId).then(function (page) {
        return page.setRotation(rotation);
    }).then(function (result) {
        //if(result){
        workerResolve(callId, result);
        //}else{
        //    workerReject(callId);
        //}
    }, function () {
        workerReject(callId);
    });
}
functionMap.setPageRotation = setPageRotation;

function setPasswordAndPermission(callId, _ref108) {
    var docId = _ref108.docId,
        userPassword = _ref108.userPassword,
        ownerPassword = _ref108.ownerPassword,
        permission = _ref108.permission,
        cipher = _ref108.cipher,
        isEncryptMetaData = _ref108.isEncryptMetaData;

    _getPDFDocById(docId).then(function (doc) {
        return doc.setPasswordAndPermission(userPassword, ownerPassword, permission, cipher, isEncryptMetaData);
    }).then(function (result) {
        workerResolve(callId, result);
    }).catch(function (e) {
        workerReject(callId, e);
    });
}
functionMap.setPasswordAndPermission = setPasswordAndPermission;

function removeSecurity(callId, _ref109) {
    var docId = _ref109.docId;

    _getPDFDocById(docId).then(function (doc) {
        return doc.removeSecurity();
    }).then(function (result) {
        workerResolve(callId, result);
    }).catch(function (e) {
        workerReject(callId, e);
    });
}
functionMap.removeSecurity = removeSecurity;

function checkPassword(callId, _ref110) {
    var docId = _ref110.docId,
        password = _ref110.password;

    _getPDFDocById(docId).then(function (doc) {
        return doc.checkPassword(password);
    }).then(function (result) {
        workerResolve(callId, result);
    }).catch(function (e) {
        workerReject(callId, e);
    });
}
functionMap.checkPassword = checkPassword;

function getPermission(callId, _ref111) {
    var docId = _ref111.docId;

    _getPDFDocById(docId).then(function (doc) {
        return doc.getPermission();
    }).then(function (result) {
        workerResolve(callId, result);
    }).catch(function (e) {
        workerReject(callId, e);
    });
}
functionMap.getPermission = getPermission;

function getStdCipherOptions(callId, _ref112) {
    var docId = _ref112.docId;

    _getPDFDocById(docId).then(function (doc) {
        return doc.getStdCipherOptions();
    }).then(function (result) {
        workerResolve(callId, result);
    }).catch(function (e) {
        workerReject(callId, e);
    });
}
functionMap.getStdCipherOptions = getStdCipherOptions;

function addPageImage(callId, _ref113) {
    var docId = _ref113.docId,
        pageId = _ref113.pageId,
        imageBuffer = _ref113.imageBuffer,
        point = _ref113.point,
        width = _ref113.width,
        height = _ref113.height;

    _getPageById(docId, pageId).then(function (page) {
        return page.addImage(imageBuffer, point, width, height);
    }).then(function (flag) {
        workerResolve(callId, flag);
    });
}
functionMap.addPageImage = addPageImage;

function addWatermark(callId, _ref114) {
    var docId = _ref114.docId,
        pageId = _ref114.pageId,
        data = _ref114.data;

    _getPageById(docId, pageId).then(function (page) {
        return page.addWatermark(data);
    }).then(function (flag) {
        workerResolve(callId, flag);
    });
}
functionMap.addWatermark = addWatermark;

function getUserPassword(callId, _ref115) {
    var docId = _ref115.docId,
        password = _ref115.password;

    _getPDFDocById(docId).then(function (doc) {
        return doc.getUserPassword(password);
    }).then(function (result) {
        workerResolve(callId, result);
    }).catch(function (e) {
        workerReject(callId, e);
    });
}
functionMap.getUserPassword = getUserPassword;

function getPasswordType(callId, _ref116) {
    var docId = _ref116.docId;

    _getPDFDocById(docId).then(function (doc) {
        return doc.getPasswordType();
    }).then(function (result) {
        workerResolve(callId, result);
    }).catch(function (e) {
        workerReject(callId, e);
    });
}
functionMap.getPasswordType = getPasswordType;

function setPasswordType(callId, _ref117) {
    var docId = _ref117.docId,
        type = _ref117.type;

    _getPDFDocById(docId).then(function (doc) {
        return doc.setPasswordType(type);
    }).then(function (result) {
        workerResolve(callId, result);
    }).catch(function (e) {
        workerReject(callId, e);
    });
}
functionMap.setPasswordType = setPasswordType;

function movePageTo(callId, _ref118) {
    var docId = _ref118.docId,
        pageId = _ref118.pageId,
        destIndex = _ref118.destIndex;

    _getPDFDocById(docId).then(function (doc) {
        return doc.movePageTo(pageId, destIndex);
    }).then(function (result) {
        workerResolve(callId, result);
    }).catch(function (e) {
        workerReject(callId, e);
    });
}
functionMap.movePageTo = movePageTo;
function insertPage(callId, _ref119) {
    var docId = _ref119.docId,
        pageIndex = _ref119.pageIndex,
        width = _ref119.width,
        height = _ref119.height;

    _getPDFDocById(docId).then(function (doc) {
        return doc.insertPage(pageIndex, width, height);
    }).then(function (result) {
        workerResolve(callId, result);
    }).catch(function (e) {
        workerReject(callId, e);
    });
}
functionMap.insertPage = insertPage;
function removePage(callId, _ref120) {
    var docId = _ref120.docId,
        pageIndex = _ref120.pageIndex;

    var pageId = void 0;
    _getPDFDocById(docId).then(function (doc) {
        try {
            pageId = doc.pageIndexMap[pageIndex].id;
        } catch (e) {}
        return doc.removePage(pageIndex);
    }).then(function (result) {
        if (result) {
            graphicsModule.clearObjectFromCache(docId, pageId);
        }
        workerResolve(callId, result);
    }).catch(function (e) {
        workerReject(callId, e);
    });
}
functionMap.removePage = removePage;

function markRedactAnnot(callId, _ref121) {
    var docId = _ref121.docId,
        pageId = _ref121.pageId,
        rects = _ref121.rects;

    _getPageById(docId, pageId).then(function (page) {
        return page.markRedactAnnot(rects);
    }).then(function (annots) {
        var list = [];
        for (var i = 0, j = annots.length; i < j; i++) {
            var annot = annots[i];
            if (!annot) {
                list[i] = null;
                continue;
            }
            list[i] = annot.toJson();
        }
        return list;
    }).then(function (annots) {
        workerResolve(callId, annots);
    }).catch(function () {
        workerReject(callId);
    });
}
functionMap.markRedactAnnot = markRedactAnnot;
function applyRedaction(callId, _ref122) {
    var docId = _ref122.docId;

    _getPDFDocById(docId).then(function (doc) {
        return doc.applyRedaction();
    }).then(function (result) {
        workerResolve(callId, result);
    }).catch(function (e) {
        workerReject(callId, e);
    });
}
functionMap.applyRedaction = applyRedaction;

function redactApply(callId, _ref123) {
    var docId = _ref123.docId,
        pageId = _ref123.pageId,
        annotId = _ref123.annotId;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        return annot.apply();
    }).then(function (id) {
        workerResolve(callId, id);
    }).catch(function (e) {
        workerReject(callId, e);
    });
}
functionMap.redactApply = redactApply;

function insertSubAction(callId, _ref124) {
    var docId = _ref124.docId,
        objNum = _ref124.objNum,
        index = _ref124.index,
        type = _ref124.type;

    _getPDFDocById(docId).then(function (doc) {
        return doc.getIndirectObject(objNum);
    }).then(function (object) {
        return pdfJRPromise.then(function (pdfjr) {
            var doc = object.pdfDoc;
            var action = pdfjr.actionManager.get(pdfjr.actionManager.getActionByDict(doc, object.getDict()), doc, pdfjr);
            action.insertSubAction(index, type);
            return action;
        });
    }).then(function (action) {
        workerResolve(callId, action.toJson());
    });
}
functionMap.insertSubAction = insertSubAction;

function setSubAction(callId, _ref125) {
    var docId = _ref125.docId,
        objNum = _ref125.objNum,
        index = _ref125.index,
        type = _ref125.type;

    _getPDFDocById(docId).then(function (doc) {
        return doc.getIndirectObject(objNum);
    }).then(function (object) {
        return pdfJRPromise.then(function (pdfjr) {
            var doc = object.pdfDoc;
            var action = pdfjr.actionManager.get(pdfjr.actionManager.getActionByDict(doc, object.getDict()), doc, pdfjr);
            action.setSubAction(index, type);
            return action;
        });
    }).then(function (action) {
        workerResolve(callId, action.toJson());
    });
}
functionMap.setSubAction = setSubAction;

function removeAllSubActions(callId, _ref126) {
    var docId = _ref126.docId,
        objNum = _ref126.objNum;

    _getPDFDocById(docId).then(function (doc) {
        return doc.getIndirectObject(objNum);
    }).then(function (object) {
        return pdfJRPromise.then(function (pdfjr) {
            var doc = object.pdfDoc;
            var action = pdfjr.actionManager.get(pdfjr.actionManager.getActionByDict(doc, object.getDict()), doc, pdfjr);
            action.removeAllSubActions();
            return action;
        });
    }).then(function (action) {
        workerResolve(callId, action.toJson());
    });
}
functionMap.removeAllSubActions = removeAllSubActions;

function removeSubAction(callId, _ref127) {
    var docId = _ref127.docId,
        objNum = _ref127.objNum,
        index = _ref127.index;

    _getPDFDocById(docId).then(function (doc) {
        return doc.getIndirectObject(objNum);
    }).then(function (object) {
        return pdfJRPromise.then(function (pdfjr) {
            var doc = object.pdfDoc;
            var action = pdfjr.actionManager.get(pdfjr.actionManager.getActionByDict(doc, object.getDict()), doc, pdfjr);
            action.removeSubAction(index);
            return action;
        });
    }).then(function (action) {
        workerResolve(callId, action.toJson());
    });
}
functionMap.removeSubAction = removeSubAction;

function setActionData(callId, _ref128) {
    var docId = _ref128.docId,
        objNum = _ref128.objNum,
        data = _ref128.data;

    _getPDFDocById(docId).then(function (doc) {
        return doc.getIndirectObject(objNum);
    }).then(function (object) {
        return pdfJRPromise.then(function (pdfjr) {
            var doc = object.pdfDoc;
            var action = pdfjr.actionManager.get(pdfjr.actionManager.getActionByDict(doc, object.getDict()), doc, pdfjr);
            action.setActionData(data);
            return action;
        });
    }).then(function (action) {
        workerResolve(callId, action.toJson());
    });
}
functionMap.setActionData = setActionData;

function getActionFileStream(callId, _ref129) {
    var docId = _ref129.docId,
        objNum = _ref129.objNum,
        writeStream = _ref129.writeStream;

    _getPDFDocById(docId).then(function (doc) {
        return doc.getIndirectObject(objNum);
    }).then(function (object) {
        return pdfJRPromise.then(function (pdfjr) {
            var doc = object.pdfDoc;
            var action = pdfjr.actionManager.get(pdfjr.actionManager.getActionByDict(doc, object.getDict()), doc, pdfjr);
            return action.getFileSpec().getStream(function (arrayBuffer, offset, size) {
                workerContinue(writeStream, { arrayBuffer: arrayBuffer, offset: offset, size: size }, [arrayBuffer]);
            });
        });
    }).then(function (size) {
        workerResolve(callId, size);
    });
}
functionMap.getActionFileStream = getActionFileStream;

function getPDFDocIdByHttpRangeRequest(callId, _ref130) {
    var size = _ref130.size,
        _ref130$range = _ref130.range,
        range = _ref130$range === undefined ? {} : _ref130$range;

    var sizePromise = void 0;
    if (size) {
        sizePromise = Promise.resolve(size);
    } else {
        var sizeDeferred = (0, _createDeferred2.default)();
        sizePromise = sizeDeferred.promise;
        var xmlHttp = new XMLHttpRequest();
        xmlHttp.open(range.type || 'GET', range.url || range.url, true, range.user, range.password);
        //if (typeof range.withCredentials !== 'undefined') {
        //    xmlHttp.withCredentials = range.withCredentials
        //}
        xmlHttp.responseType = 'arraybuffer';
        if (range.headers) {
            var headers = range.headers;
            for (var i in headers) {
                xmlHttp.setRequestHeader(i, headers[i]);
            }
        }

        xmlHttp.setRequestHeader('Range', 'bytes=0-0');
        xmlHttp.onreadystatechange = function () {
            if (xmlHttp.readyState === 4) {
                if (xmlHttp.status >= 200 && xmlHttp.status < 300 || xmlHttp.status === 304) {
                    var contentRange = xmlHttp.getResponseHeader('Content-Range') || xmlHttp.getResponseHeader('content-range');
                    var lastIndex = void 0;
                    if ((lastIndex = contentRange.lastIndexOf('/')) !== -1) {
                        sizeDeferred.resolve(+contentRange.slice(lastIndex + 1));
                    } else {
                        sizeDeferred.reject(xmlHttp.status);
                    }
                } else {
                    sizeDeferred.reject(xmlHttp.status);
                }
            }
        };
        xmlHttp.send(range.data);
    }
    Promise.all([sizePromise, pdfJRPromise]).then(function (_ref131) {
        var _ref132 = _slicedToArray(_ref131, 2),
            size = _ref132[0],
            pdfJr = _ref132[1];

        var totalSize = size;
        return pdfJr.getPDFDoc({
            size: size,
            getBuffer: function getBuffer(offset, size) {
                return fileReaderBySyncHttpRange(range, offset, size, totalSize);
            }
        });
    }).then(function (pdfDoc) {
        rangeDocMap[pdfDoc.id] = range.id || range.url;
        return pdfDoc.id;
    }).then(function (pdfDocId) {
        workerResolve(callId, pdfDocId);
    });
}
functionMap.getPDFDocIdByHttpRangeRequest = getPDFDocIdByHttpRangeRequest;
function fileReaderBySyncHttpRange(range, offset, size, totalSize) {
    var url = range.url;
    var id = range.id || url;
    var map = rangeMap[id] = rangeMap[id] || { buffers: [] };
    var chunkSize = +(range.chunkSize || 131072); // 128*1024 128KB
    var startBlock = Math.floor(offset / chunkSize);
    var endBlock = Math.floor((offset + size) / chunkSize);
    var buffers = map.buffers;
    for (var i = startBlock, j = endBlock; i <= j; i++) {
        if (!buffers[i]) {
            buffers[i] = syncHttpRequestArrayBuffer(range, i * chunkSize, chunkSize, totalSize);
        }
    }
    if (startBlock === endBlock) {
        var _buffer = buffers[startBlock];
        var start = offset - startBlock * chunkSize;
        if (_buffer.slice) {
            return _buffer.slice(start, start + size);
        } else {
            return new Uint8Array(_buffer, start, size).buffer;
        }
    } else {
        var uInt8Array = new Uint8Array(size);
        var _buffer2 = buffers[startBlock];
        var _start = offset - startBlock * chunkSize;
        uInt8Array.set(new Uint8Array(_buffer2, _start));
        var bufferLength = chunkSize - _start;
        for (var _i = startBlock + 1, _j = endBlock - 1; _i <= _j; _i++) {
            _buffer2 = buffers[_i];
            uInt8Array.set(new Uint8Array(_buffer2), bufferLength);
            bufferLength += chunkSize;
        }
        _buffer2 = buffers[endBlock];
        uInt8Array.set(new Uint8Array(_buffer2, 0, (offset + size) % chunkSize), bufferLength);
        return uInt8Array.buffer;
    }
}
function syncHttpRequestArrayBuffer(range, offset, size, totalSize) {
    var xmlHttp = new XMLHttpRequest();
    xmlHttp.open(range.type || 'GET', range.url || range.url, false, range.user, range.password);
    //if (typeof range.withCredentials !== 'undefined') {
    //    xmlHttp.withCredentials = range.withCredentials
    //}
    xmlHttp.responseType = 'arraybuffer';
    if (range.headers) {
        var headers = range.headers;
        for (var i in headers) {
            xmlHttp.setRequestHeader(i, headers[i]);
        }
    }
    xmlHttp.setRequestHeader('Range', 'bytes=' + offset + '-' + Math.min(offset + size - 1, totalSize - 1));
    xmlHttp.send(range.data);
    if (!(xmlHttp.status >= 200 && xmlHttp.status < 300 || xmlHttp.status === 304)) {
        throw 'request error: ' + xmlHttp.status;
    }
    return xmlHttp.response;
}
function setPopupOpenStatus(callId, _ref133) {
    var docId = _ref133.docId,
        pageId = _ref133.pageId,
        annotId = _ref133.annotId,
        status = _ref133.status;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(annotId);
    }).then(function (annot) {
        var ret = annot.setOpenStatus(status);
        return ret;
    }).then(function (annotIds) {
        workerResolve(callId, annotIds);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.setPopupOpenStatus = setPopupOpenStatus;

function removePageAllAnnot(callId, _ref134) {
    var docId = _ref134.docId,
        pageId = _ref134.pageId;

    _getPageById(docId, pageId).then(function (page) {
        return page.removeAllAnnot();
    }).then(function () {
        workerResolve(callId);
    }).catch(function (e) {
        workerReject(callId);
    });
}
functionMap.removePageAllAnnot = removePageAllAnnot;

function getAnnotWoff(callId, _ref135) {
    var docId = _ref135.docId,
        pageId = _ref135.pageId,
        id = _ref135.id;

    _getPageById(docId, pageId).then(function (page) {
        return page.getAnnotById(id);
    }).then(function (annot) {
        return annot.getWoff();
    }).then(function (woff) {
        workerResolve(callId, woff);
    }).catch(function (e) {
        workerReject(callId, null, [], e);
    });
}
functionMap.getAnnotWoff = getAnnotWoff;

function drmEncrypt(callId, _ref136) {
    var docId = _ref136.docId,
        options = _ref136.options;

    _getPDFDocById(docId).then(function (pdfDoc) {
        if (!pdfDoc) {
            throw DOC_IS_NULL;
        }
        return pdfDoc.drmEncrypt(options);
    }).then(function (flag) {
        if (flag) {
            return workerResolve(callId);
        } else {
            return workerReject(callId, { error: -1 });
        }
    }, function (e) {
        if (e && e.error) {
            return workerReject(callId, e);
        }
        return workerReject(callId);
    });
}
functionMap.drmEncrypt = drmEncrypt;

/***/ }),

/***/ "./src/web-pdf-jr/workerAPIForForm.js":
/*!********************************************!*\
  !*** ./src/web-pdf-jr/workerAPIForForm.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});


var workerObj = {};
function extendsWorkerAPI(fontMap, getPDFDocById, pdfJRPromise, resolve, reject) {
    for (var key in formAPIHandler) {
        fontMap[key] = formAPIHandler[key];
    }
    workerObj = {
        getDocByID: getPDFDocById,
        jrPromise: pdfJRPromise,
        resolve: resolve,
        reject: reject
    };
}

var formAPIHandler = {};
var form = void 0;
var engine = void 0;

formAPIHandler.loadForm = function (callId, _ref) {
    var docId = _ref.docId;

    if (engine) {
        return syncLoadForm(callId, engine, docId);
    }

    var enginePromise = workerObj.jrPromise;
    enginePromise.then(function (pdfjr) {
        engine = pdfjr.engine;
        return syncLoadForm(callId, engine, docId);
    });
};

function syncLoadForm(callId, engine, docId) {
    return workerObj.getDocByID(docId).then(function (pdfDoc) {
        if (pdfDoc.doc.HasForm()) {
            var _form = pdfDoc.loadForm();
            return _form.toJson();
        } else {
            return null;
        }
    }).then(function (formJson) {
        workerObj.resolve(callId, formJson);
    }).catch(function (err) {
        if (!isNaN(err)) {
            err = engine.getErrorCode(err);
        }
        if (err === engine.ErrorCode.e_ErrDataNotReady) {
            setTimeout(function () {
                syncLoadForm(callId, engine, docId);
            }, 200);
        } else {
            console.warn(err);
        }
    });
}

formAPIHandler.formFillerEvent = function (callId, _ref2) {
    var docId = _ref2.docId,
        type = _ref2.type,
        pageIndex = _ref2.pageIndex,
        point = _ref2.point;

    return workerObj.getDocByID(docId).then(function (pdfDoc) {
        var form = pdfDoc.loadForm();
        var page = pdfDoc.getPageById(pageIndex);
        return form.fill(type, page, point);
    }).then(function (_) {
        workerObj.resolve(callId);
    });
};

formAPIHandler.updateField = function (callId, _ref3) {
    var docId = _ref3.docId,
        title = _ref3.title,
        key = _ref3.key,
        value = _ref3.value;

    return workerObj.getDocByID(docId).then(function (pdfDoc) {
        if (!pdfDoc) {
            console.warn(docId);
            throw docId;
        }
        var form = pdfDoc.loadForm();
        var field = form.getField(title);
        field.update(key, value);
        return field.toJson();
    }).then(function (fieldJson) {
        workerObj.resolve(callId, fieldJson);
    });
};

formAPIHandler.setFieldValue = function (callId, _ref4) {
    var docId = _ref4.docId,
        title = _ref4.title,
        value = _ref4.value;

    return workerObj.getDocByID(docId).then(function (pdfDoc) {
        if (!pdfDoc) {
            console.warn(docId);
            throw docId;
        }
        var form = pdfDoc.loadForm();
        var field = form.getField(title);
        field.setValue(value);
    }).then(function (_) {
        workerObj.resolve(callId);
    });
};

formAPIHandler.updateMKProperty = function (callId, _ref5) {
    var docId = _ref5.docId,
        pageId = _ref5.pageId,
        annotId = _ref5.annotId,
        key = _ref5.key,
        value = _ref5.value;

    return workerObj.getDocByID(docId).then(function (pdfDoc) {
        return pdfDoc.getPageById(pageId).getAnnotById(annotId);
    }).then(function (annot) {
        return annot.updateMKProperty(key, value);
    }).then(function (_) {
        workerObj.resolve(callId);
    });
};

formAPIHandler.setWidgetAS = function (callId, _ref6) {
    var docId = _ref6.docId,
        pageId = _ref6.pageId,
        annotId = _ref6.annotId,
        AS = _ref6.AS;

    return workerObj.getDocByID(docId).then(function (pdfDoc) {
        return pdfDoc.getPageById(pageId).getAnnotById(annotId);
    }).then(function (annot) {
        return annot.setAS(AS);
    }).then(function (_) {
        workerObj.resolve(callId);
    });
};

formAPIHandler.getFieldsValue = function (callId, _ref7) {
    var docId = _ref7.docId;

    return workerObj.getDocByID(docId).then(function (pdfDoc) {
        var form = pdfDoc.loadForm();
        return form.getFieldsValue();
    }).then(function (json) {
        workerObj.resolve(callId, json);
    });
};

exports.default = extendsWorkerAPI;

/***/ }),

/***/ "./src/web-pdf-jr/workerAPIForGraphicObject.js":
/*!*****************************************************!*\
  !*** ./src/web-pdf-jr/workerAPIForGraphicObject.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

//import {getGraphicObjectsInfo} from '../pdf-jr/graphics/GraphicsObjectMgr';

var objectCacheMap = {};
function pushObjectToCache(obj, docId, pageId) {
    var map1 = objectCacheMap[docId] = objectCacheMap[docId] || {};
    var map2 = map1[pageId] = map1[pageId] || {};
    map2[obj.id] = obj;
}
function getObjectFromCache(docId, pageId, id) {
    try {
        return objectCacheMap[docId][pageId][id];
    } catch (ex) {
        return null;
    }
}
function clearObjectFromCache(docId, pageId, id) {
    try {
        if (id) {
            delete objectCacheMap[docId][pageId][id];
        } else if (pageId) {
            delete objectCacheMap[docId][pageId];
        } else if (docId) {
            delete objectCacheMap[docId];
        }
    } catch (ex) {}
}
var workerObj = {};
function extendsGraphicAPI(functionMap, getPDFDocById, getPageById, pdfJRPromise, resolve, reject) {
    for (var key in graphicObjectAPI) {
        functionMap[key] = graphicObjectAPI[key];
    }
    workerObj = {
        getDocByID: getPDFDocById,
        getPageByID: getPageById,
        jrPromise: pdfJRPromise,
        resolve: resolve,
        reject: reject
    };
    return {
        clearObjectFromCache: clearObjectFromCache
    };
}

var graphicObjectAPI = {};

//graphicObjectAPI.getGraphicObjectsInfo = (callID, {docId, pageId,type=0}) => {
//    return workerObj
//        .getDocByID (docId)
//        .then (pdfDoc => {
//        /**
//         * @type PDFPage
//         */
//        return pdfDoc.getPageById (pageId);
//    })
//        .then (page => {
//        return getGraphicObjectsInfo (page.engine, page.page, null, type);
//    }).then (json => {
//        workerObj.resolve(callID,json)
//    });
//};

function getGraphicsObjectAtPoint(callId, _ref) {
    var docId = _ref.docId,
        pageId = _ref.pageId,
        point = _ref.point,
        tolerance = _ref.tolerance,
        type = _ref.type;

    workerObj.getPageByID(docId, pageId).then(function (page) {
        return page.getGraphicsObjectAtPoint(point, tolerance, type);
    }).then(function (result) {
        if (result) {
            pushObjectToCache(result, docId, pageId);
            workerObj.resolve(callId, result.toJson());
        } else {
            workerObj.resolve(callId, {});
        }
    }, function (e) {
        workerObj.reject(callId);
    });
}
graphicObjectAPI.getGraphicsObjectAtPoint = getGraphicsObjectAtPoint;

function setGraphicsObjectMatrix(callId, _ref2) {
    var docId = _ref2.docId,
        pageId = _ref2.pageId,
        id = _ref2.id,
        rect = _ref2.rect;

    var focusedObject = getObjectFromCache(docId, pageId, id);
    if (focusedObject) {
        focusedObject.setMatrix(rect, true);
        workerObj.resolve(callId, focusedObject.toJson());
    } else {
        workerObj.reject(callId);
    }
}
graphicObjectAPI.setGraphicsObjectMatrix = setGraphicsObjectMatrix;

function getGraphicsObjectBitmap(callId, _ref3) {
    var docId = _ref3.docId,
        pageId = _ref3.pageId,
        id = _ref3.id,
        scale = _ref3.scale;

    var jr = null;
    var focusedObject = getObjectFromCache(docId, pageId, id);
    //workerObj.jrPromise.then(jr=>{
    var imageData = focusedObject.render(scale, jr);
    workerObj.resolve(callId, imageData, [imageData.buffer]);

    //})
}
graphicObjectAPI.getGraphicsObjectBitmap = getGraphicsObjectBitmap;

function setGraphicsObjectBorderStyle(callId, _ref4) {
    var docId = _ref4.docId,
        pageId = _ref4.pageId,
        id = _ref4.id,
        style = _ref4.style,
        dashes = _ref4.dashes;

    var focusedObject = getObjectFromCache(docId, pageId, id);
    if (focusedObject) {
        focusedObject.setBorderStyle(style, dashes, true);
        workerObj.resolve(callId, focusedObject.toJson());
    } else {
        workerObj.reject(callId);
    }
}
graphicObjectAPI.setGraphicsObjectBorderStyle = setGraphicsObjectBorderStyle;
function setGraphicsObjectBorderWidth(callId, _ref5) {
    var docId = _ref5.docId,
        pageId = _ref5.pageId,
        id = _ref5.id,
        width = _ref5.width;

    var focusedObject = getObjectFromCache(docId, pageId, id);
    if (focusedObject) {
        focusedObject.setBorderWidth(width, true);
        workerObj.resolve(callId, focusedObject.toJson());
    } else {
        workerObj.reject(callId);
    }
}
graphicObjectAPI.setGraphicsObjectBorderWidth = setGraphicsObjectBorderWidth;
function setGraphicsObjectBorderColor(callId, _ref6) {
    var docId = _ref6.docId,
        pageId = _ref6.pageId,
        id = _ref6.id,
        color = _ref6.color;

    var ret = void 0;
    var focusedObject = getObjectFromCache(docId, pageId, id);
    if (focusedObject) {
        ret = focusedObject.setBorderColor(color, true);
    }
    workerObj.resolve(callId, ret);
}
graphicObjectAPI.setGraphicsObjectBorderColor = setGraphicsObjectBorderColor;
function setGraphicsObjectFillColor(callId, _ref7) {
    var docId = _ref7.docId,
        pageId = _ref7.pageId,
        id = _ref7.id,
        color = _ref7.color;

    var focusedObject = getObjectFromCache(docId, pageId, id);
    if (focusedObject) {
        focusedObject.setFillColor(color, true);
        workerObj.resolve(callId, focusedObject.toJson());
    } else {
        workerObj.reject(callId);
    }
}
graphicObjectAPI.setGraphicsObjectFillColor = setGraphicsObjectFillColor;
function setGraphicsObjectOpacity(callId, _ref8) {
    var docId = _ref8.docId,
        pageId = _ref8.pageId,
        id = _ref8.id,
        opacity = _ref8.opacity;

    var ret = void 0;
    var focusedObject = getObjectFromCache(docId, pageId, id);
    if (focusedObject) {
        ret = focusedObject.setOpacity(parseFloat(opacity), true);
    }
    workerObj.resolve(callId, ret);
}
graphicObjectAPI.setGraphicsObjectOpacity = setGraphicsObjectOpacity;

function addGraphicsObject(callId, _ref9) {
    var docId = _ref9.docId,
        pageId = _ref9.pageId,
        info = _ref9.info;

    Promise.all([workerObj.jrPromise, workerObj.getPageByID(docId, pageId)]).then(function (_ref10) {
        var _ref11 = _slicedToArray(_ref10, 2),
            jr = _ref11[0],
            page = _ref11[1];

        return Promise.all([jr, page, page.c_pagePromise]);
    }).then(function (_ref12) {
        var _ref13 = _slicedToArray(_ref12, 3),
            jr = _ref13[0],
            page = _ref13[1],
            c_page = _ref13[2];

        return jr.graphicsObjectManager.create(info, c_page, page);
    }).then(function (graphics) {
        clearObjectFromCache(docId, pageId);
        pushObjectToCache(graphics, docId, pageId);
        workerObj.resolve(callId, graphics.toJson());
    }).catch(function () {
        workerObj.reject(callId);
    });
    //workerObj.jrPromise.then(jr=>{
    //    workerObj.getPageByID(docId,pageId).then(page=>{
    //        jr.graphicsObjectManager.create(info, page.page);
    //    })
    //})
    //workerObj.resolve(callId);
}
graphicObjectAPI.addGraphicsObject = addGraphicsObject;

function setImageObjectOpacity(callId, _ref14) {
    var docId = _ref14.docId,
        pageId = _ref14.pageId,
        id = _ref14.id,
        opacity = _ref14.opacity;

    var ret = void 0;
    var focusedObject = getObjectFromCache(docId, pageId, id);
    if (focusedObject) {
        ret = focusedObject.setOpacity(opacity, true);
    }
    workerObj.resolve(callId, ret);
}
graphicObjectAPI.setImageObjectOpacity = setImageObjectOpacity;

function removeGraphicsObject(callId, _ref15) {
    var docId = _ref15.docId,
        pageId = _ref15.pageId,
        id = _ref15.id;

    var ret = void 0;
    var focusedObject = getObjectFromCache(docId, pageId, id);
    if (focusedObject) {
        ret = focusedObject.remove();
        focusedObject = null;
        clearObjectFromCache(docId, pageId, id);
    }
    workerObj.resolve(callId, ret);
}
graphicObjectAPI.removeGraphicsObject = removeGraphicsObject;

function setImageObjectRotation(callId, _ref16) {
    var docId = _ref16.docId,
        pageId = _ref16.pageId,
        id = _ref16.id,
        rotation = _ref16.rotation;

    var focusedObject = getObjectFromCache(docId, pageId, id);
    if (focusedObject) {
        focusedObject.setRotation(rotation, true);
        workerObj.resolve(callId, focusedObject.toJson());
    } else {
        workerObj.reject(callId);
    }
}
graphicObjectAPI.setImageObjectRotation = setImageObjectRotation;

function setTextObjectChar(callId, _ref17) {
    var docId = _ref17.docId,
        pageId = _ref17.pageId,
        id = _ref17.id,
        char = _ref17.char;

    var focusedObject = getObjectFromCache(docId, pageId, id);
    if (focusedObject) {
        return focusedObject.setText(char).then(function () {
            workerObj.resolve(callId, focusedObject.toJson());
        }, function () {
            workerObj.reject(callId);
        });
    }
    return workerObj.reject(callId);
}
graphicObjectAPI.setTextObjectChar = setTextObjectChar;

function setTextObjectItalic(callId, _ref18) {
    var docId = _ref18.docId,
        pageId = _ref18.pageId,
        id = _ref18.id,
        italic = _ref18.italic;

    var focusedObject = getObjectFromCache(docId, pageId, id);
    if (focusedObject) {
        return focusedObject.setItalic(italic).then(function () {
            workerObj.resolve(callId, focusedObject.toJson());
        }, function () {
            workerObj.reject(callId);
        });
    }
    return workerObj.reject(callId);
}
graphicObjectAPI.setTextObjectItalic = setTextObjectItalic;

function setTextObjectBold(callId, _ref19) {
    var docId = _ref19.docId,
        pageId = _ref19.pageId,
        id = _ref19.id,
        bold = _ref19.bold;

    var focusedObject = getObjectFromCache(docId, pageId, id);
    if (focusedObject) {
        return focusedObject.setBold(bold).then(function () {
            workerObj.resolve(callId, focusedObject.toJson());
        }, function () {
            workerObj.reject(callId);
        });
    }
    return workerObj.reject(callId);
}
graphicObjectAPI.setTextObjectBold = setTextObjectBold;

function setTextObjectFontSize(callId, _ref20) {
    var docId = _ref20.docId,
        pageId = _ref20.pageId,
        id = _ref20.id,
        size = _ref20.size;

    var focusedObject = getObjectFromCache(docId, pageId, id);
    if (focusedObject) {
        return focusedObject.setFontSize(size).then(function () {
            workerObj.resolve(callId, focusedObject.toJson());
        }, function () {
            workerObj.reject(callId);
        });
    }
    return workerObj.reject(callId);
}
graphicObjectAPI.setTextObjectFontSize = setTextObjectFontSize;

function setTextObjectStandardFont(callId, _ref21) {
    var docId = _ref21.docId,
        pageId = _ref21.pageId,
        id = _ref21.id,
        standardId = _ref21.standardId;

    var focusedObject = getObjectFromCache(docId, pageId, id);
    if (focusedObject) {
        return focusedObject.setStandardFont(standardId).then(function () {
            workerObj.resolve(callId, focusedObject.toJson());
        }, function () {
            workerObj.reject(callId);
        });
    }
    return workerObj.reject(callId);
}
graphicObjectAPI.setTextObjectStandardFont = setTextObjectStandardFont;
function setTextObjectFontByName(callId, _ref22) {
    var docId = _ref22.docId,
        pageId = _ref22.pageId,
        id = _ref22.id,
        name = _ref22.name,
        styles = _ref22.styles,
        charset = _ref22.charset;

    var focusedObject = getObjectFromCache(docId, pageId, id);
    if (focusedObject) {
        return focusedObject.setFontByName(name, styles, charset).then(function () {
            workerObj.resolve(callId, focusedObject.toJson());
        }, function () {
            workerObj.reject(callId);
        });
    }
    return workerObj.reject(callId);
}
graphicObjectAPI.setTextObjectFontByName = setTextObjectFontByName;

function getTextObjectWoff(callId, _ref23) {
    var docId = _ref23.docId,
        pageId = _ref23.pageId,
        id = _ref23.id;

    var focusedObject = getObjectFromCache(docId, pageId, id);
    if (focusedObject) {
        var woff = focusedObject.getWoff();
        var transfer = [];
        //if (woff.buffer) {
        //    transfer=[woff.buffer];
        //}
        return workerObj.resolve(callId, woff, transfer);
        //return focusedObject.setWoffBlob().then(function () {
        //    workerObj.resolve(callId)
        //}, function () {
        //    workerObj.reject(callId);
        //})
    }
    return workerObj.reject(callId);
}
graphicObjectAPI.getTextObjectWoff = getTextObjectWoff;

exports.default = extendsGraphicAPI;

/***/ })

/******/ });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL3JlZ2V4cC9lc2NhcGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLW51bWJlci12YWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWR2YW5jZS1zdHJpbmctaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4taW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWNvcHktd2l0aGluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktZnJvbS1pdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1tZXRob2RzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXJlZHVjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY2xhc3NvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi10by1qc29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24td2Vhay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2N0eC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kYXRlLXRvLWlzby1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGF0ZS10by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy1pcy1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZml4LXJlLXdrcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGFncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGF0dGVuLWludG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZm9yLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Z1bmN0aW9uLXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hpZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ludm9rZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LWl0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtcmVnZXhwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY2FsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRldGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2xpYnJhcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1leHBtMS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWZyb3VuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWxvZzFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtc2NhbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1zaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21ldGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWljcm90YXNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX25ldy1wcm9taXNlLWNhcGFiaWxpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHBzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1mb3JjZWQtcGFtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLWV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ3BvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1waWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXNhcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtdG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BlcmZvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvbWlzZS1yZXNvbHZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZ2V4cC1leGVjLWFic3RyYWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZ2V4cC1leGVjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlcGxhY2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NhbWUtdmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LWNvbGxlY3Rpb24tZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtY29sbGVjdGlvbi1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtcHJvdG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpY3QtbWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctY29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctaHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcGFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXRyaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Rhc2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191aWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdXNlci1hZ2VudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL192YWxpZGF0ZS1jb2xsZWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLWV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLnJlZ2V4cC5lc2NhcGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZXZlcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuam9pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUubm93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5oYXMtaW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hY29zaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmFzaW5oLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXRhbmguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jYnJ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2x6MzIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jb3NoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5mcm91bmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5oeXBvdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmltdWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxMC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaW5oLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgudGFuaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRydW5jLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuZXBzaWxvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWF4LXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWluLXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWludC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIudG8tZml4ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1mcm96ZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWludC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wcm9taXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmV4ZWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5tYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5zcGxpdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYW5jaG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5iaWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5ib2xkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcubGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcucmF3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdWIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcudHJpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmRhdGEtdmlldy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDMyLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWNsYW1wZWQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuZmxhdC1tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuZmxhdHRlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hc2FwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmVycm9yLmlzLWVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lmdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXAuZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXAub2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5jbGFtcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmRlZy1wZXItcmFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguZGVncmVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmZzY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmlhZGRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaW11bGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5pc3ViaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnJhZC1wZXItZGVnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGgucmFkaWFucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnNjYWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguc2lnbmJpdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnVtdWxoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtZ2V0dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtc2V0dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtZ2V0dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtc2V0dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5wcm9taXNlLmZpbmFsbHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucHJvbWlzZS50cnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5kZWZpbmUtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5kZWxldGUtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtbWV0YWRhdGEta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtb3duLW1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QubWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0LmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0Lm9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnNldC50by1qc29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcubWF0Y2gtYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3lzdGVtLmdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLW1hcC5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstbWFwLm9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstc2V0LmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcud2Vhay1zZXQub2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi50aW1lcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvc2hpbS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pyLWVuZ2luZS9nc2RrL2dzZGsuaGFzaC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGRmLWpyL0J1ZmZlckJsb2NrLmpzIiwid2VicGFjazovLy8uL3NyYy9wZGYtanIvRm9ybS9Db250cm9sLmpzIiwid2VicGFjazovLy8uL3NyYy9wZGYtanIvRm9ybS9GaWVsZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGRmLWpyL0Zvcm0vRm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGRmLWpyL1BERkJvb2ttYXJrLmpzIiwid2VicGFjazovLy8uL3NyYy9wZGYtanIvUERGRG9jLmpzIiwid2VicGFjazovLy8uL3NyYy9wZGYtanIvUERGRm9udE1nci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGRmLWpyL1BERkpSLmpzIiwid2VicGFjazovLy8uL3NyYy9wZGYtanIvUERGTGF5ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BkZi1qci9QREZQYWdlLmpzIiwid2VicGFjazovLy8uL3NyYy9wZGYtanIvYWN0aW9uL0FjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGRmLWpyL2FjdGlvbi9BY3Rpb25NYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9wZGYtanIvYWN0aW9uL0VtYmVkZGVkR290b0FjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGRmLWpyL2FjdGlvbi9FbWJlZGRlZEdvdG9UYXJnZXQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BkZi1qci9hY3Rpb24vR290b0FjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGRmLWpyL2FjdGlvbi9IaWRlQWN0aW9uLmpzIiwid2VicGFjazovLy8uL3NyYy9wZGYtanIvYWN0aW9uL0ltcG9ydERhdGFBY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BkZi1qci9hY3Rpb24vSmF2YVNjcmlwdEFjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGRmLWpyL2FjdGlvbi9MYXVuY2hBY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BkZi1qci9hY3Rpb24vTmFtZWRBY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BkZi1qci9hY3Rpb24vUmVtb3RlR290b0FjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGRmLWpyL2FjdGlvbi9SZW5kaXRpb25BY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BkZi1qci9hY3Rpb24vUmVzZXRGb3JtQWN0aW9uLmpzIiwid2VicGFjazovLy8uL3NyYy9wZGYtanIvYWN0aW9uL1N1Ym1pdEZvcm1BY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BkZi1qci9hY3Rpb24vVVJJQWN0aW9uLmpzIiwid2VicGFjazovLy8uL3NyYy9wZGYtanIvYW5ub3QvQW5ub3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BkZi1qci9hbm5vdC9Bbm5vdE1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BkZi1qci9hbm5vdC9DYXJldC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGRmLWpyL2Fubm90L0NpcmNsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGRmLWpyL2Fubm90L0ZpbGVBdHRhY2htZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9wZGYtanIvYW5ub3QvRnJlZVRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BkZi1qci9hbm5vdC9IaWdobGlnaHQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BkZi1qci9hbm5vdC9JbmsuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BkZi1qci9hbm5vdC9MaW5lLmpzIiwid2VicGFjazovLy8uL3NyYy9wZGYtanIvYW5ub3QvTGluay5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGRmLWpyL2Fubm90L01hcmt1cEFubm90LmpzIiwid2VicGFjazovLy8uL3NyYy9wZGYtanIvYW5ub3QvTm90ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGRmLWpyL2Fubm90L1BvbHlMaW5lLmpzIiwid2VicGFjazovLy8uL3NyYy9wZGYtanIvYW5ub3QvUG9seWdvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGRmLWpyL2Fubm90L1BvcHVwLmpzIiwid2VicGFjazovLy8uL3NyYy9wZGYtanIvYW5ub3QvUmVkYWN0LmpzIiwid2VicGFjazovLy8uL3NyYy9wZGYtanIvYW5ub3QvU2NyZWVuLmpzIiwid2VicGFjazovLy8uL3NyYy9wZGYtanIvYW5ub3QvU3F1YXJlLmpzIiwid2VicGFjazovLy8uL3NyYy9wZGYtanIvYW5ub3QvU3F1aWdnbHkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BkZi1qci9hbm5vdC9TdGFtcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGRmLWpyL2Fubm90L1N0cmlrZU91dC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGRmLWpyL2Fubm90L1RleHRNYXJrdXBBbm5vdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGRmLWpyL2Fubm90L1VuZGVybGluZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGRmLWpyL2Fubm90L1dpZGdldC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGRmLWpyL2Fubm90L2Fubm90VHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGRmLWpyL2Jhc2UvRGVzdGluYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BkZi1qci9iYXNlL0ZpbGVTcGVjLmpzIiwid2VicGFjazovLy8uL3NyYy9wZGYtanIvYmFzZS9JbWFnZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGRmLWpyL2Jhc2UvV2F0ZXJtYXJrL1dhdGVybWFyay5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGRmLWpyL2Jhc2UvV2F0ZXJtYXJrL1dhdGVybWFya1NldHRpbmdzLmpzIiwid2VicGFjazovLy8uL3NyYy9wZGYtanIvYmFzZS9XYXRlcm1hcmsvV2F0ZXJtYXJrVGV4dFByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BkZi1qci9icm90bGktZGVjb21wcmVzcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGRmLWpyL2N1c3RvbVNlY3VyaXR5SGFuZGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGRmLWpyL2dldFRoaXJkUGFydHlGb250QnVmZmVyLmpzIiwid2VicGFjazovLy8uL3NyYy9wZGYtanIvZ3JhcGhpY3MvRm9ybVhPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BkZi1qci9ncmFwaGljcy9HcmFwaGljc09iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGRmLWpyL2dyYXBoaWNzL0dyYXBoaWNzT2JqZWN0TWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGRmLWpyL2dyYXBoaWNzL0ltYWdlT2JqZWN0LmpzIiwid2VicGFjazovLy8uL3NyYy9wZGYtanIvZ3JhcGhpY3MvUGF0aE9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGRmLWpyL2dyYXBoaWNzL1RleHRPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BkZi1qci9ncmFwaGljcy9ncmFwaGljT2JqZWN0TWdyLmpzIiwid2VicGFjazovLy8uL3NyYy9wZGYtanIvaWNvblByb3ZpZGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9wZGYtanIvb2JqZWN0L1BERk9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGRmLWpyL3BvbHlmaWxsLmpzIiwid2VicGFjazovLy8uL3NyYy9wZGYtanIvcHJvZ3Jlc3NpdmVDb3VudGluZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGRmLWpyL3NoYXJlL0RlZmF1bHRBUC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGRmLWpyL3NoYXJlL1JlY3RPcGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGRmLWpyL3NoYXJlL3JlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NoYXJlZC9SZWN0T3BlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NoYXJlZC9jaXBoZXJUeXBlLmpzIiwid2VicGFjazovLy8uL3NyYy9zaGFyZWQvY29sb3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NoYXJlZC9jb25zdHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NoYXJlZC9jcmVhdGVEZWZlcnJlZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2hhcmVkL2dldFVuaXF1ZUlkLmpzIiwid2VicGFjazovLy8uL3NyYy9zaGFyZWQvZ3VpZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2hhcmVkL2xvZ2dlci9BcHBlbmRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2hhcmVkL2xvZ2dlci9Db21wbGV4TGF5b3V0LmpzIiwid2VicGFjazovLy8uL3NyYy9zaGFyZWQvbG9nZ2VyL0NvbnNvbGVBcHBlbmRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2hhcmVkL2xvZ2dlci9Mb2dnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NoYXJlZC9sb2dnZXIvTG9nZ2VyRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2hhcmVkL2xvZ2dlci9NdWx0aXBsZUFwcGVuZGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9zaGFyZWQvbG9nZ2VyL1NpbXBsZUxheW91dC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2hhcmVkL2xvZ2dlci9jb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NoYXJlZC9sb2dnZXIvY29uc3RzLmpzIiwid2VicGFjazovLy8uL3NyYy9zaGFyZWQvbm90SW1wbGVtZW50ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3dlYi1wZGYtanIvV2ViUERGSlJXb3JrZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3dlYi1wZGYtanIvd29ya2VyQVBJRm9yRm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvd2ViLXBkZi1qci93b3JrZXJBUElGb3JHcmFwaGljT2JqZWN0LmpzIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsInNlbGYiLCJ3YXNtSGFzaCIsImpzSGFzaCIsImFzbU1lbUhhc2giLCJhc21KU0hhc2giLCJVTkRFRklORUQiLCJfVVJMIiwiVVJMIiwid2Via2l0VVJMIiwiYXN5bmNSZWFkQmxvYlRvQnVmZmVyIiwid3JpdGVCdWZmZXJUb0Jsb2IiLCJGaWxlUmVhZGVyU3luYyIsImJsb2IiLCJvZmZzZXQiLCJzaXplIiwiZmlsZVJlYWRlclN5bmMiLCJyZWFkQXNBcnJheUJ1ZmZlciIsInNsaWNlIiwiYnVmZmVyIiwiQmxvYiIsImJsb2JVcmwiLCJjcmVhdGVPYmplY3RVUkwiLCJ4bWxIdHRwIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwicmVzcG9uc2VUeXBlIiwic2VuZCIsInN0YXR1cyIsInJldm9rZU9iamVjdFVSTCIsInJlc3BvbnNlIiwiVWludDhBcnJheSIsImJ5dGVMZW5ndGgiLCJCdWZmZXJCbG9jayIsImJsb2NrU2l6ZSIsImJsb2NrcyIsImxvYWRpbmdCbG9ja3MiLCJibG9iQ2FjaGUiLCJsb2FkaW5nQ2FjaGUiLCJwdXNoIiwibWluIiwiTWF0aCIsIm1heCIsImludGVyc2VjdGlvbiIsImkiLCJsZW5ndGgiLCJibG9jayIsInN0YXJ0IiwiZW5kIiwiaiIsInNwbGljZSIsImF2YWlsIiwiZnVsbCIsImNoZWNrTG9hZEJ1ZmZlciIsImxvYWRpbmdCdWZmZXIiLCJhZGRCdWZmZXIiLCJhZGRVaW50OEFycmF5Iiwic3RhcnRCbG9jayIsImZsb29yIiwiZW5kQmxvY2siLCJzcmNTdGFydCIsImFkZFN0YXJ0IiwiYWRkRW5kIiwic3JjQXJyYXlCdWZmZXIiLCJBcnJheUJ1ZmZlciIsInNyY1VpbnQ4QXJyYXkiLCJzZXQiLCJnZXRCdWZmZXIiLCJhcnJheUJ1ZmZlciIsInNyY0VuZCIsImdldFN0YXJ0IiwiZ2V0RW5kIiwiX2dldEJ1ZmZlckNhY2hlS2V5Iiwiam9pbiIsImRlc3Ryb3kiLCJQREZDb250cm9sIiwiZW5naW5lQ29udHJvbCIsImVuZ2luZSIsInRvSnNvbiIsImluZGV4IiwiR2V0SW5kZXgiLCJpc0NoZWNrZWQiLCJJc0NoZWNrZWQiLCJpc0RlZmF1bHRDaGVja2VkIiwiSXNEZWZhdWx0Q2hlY2tlZCIsImlzRW1wdHkiLCJJc0VtcHR5IiwiR2V0V2lkZ2V0Iiwib2JqZWN0TnVtIiwiR2V0RGljdCIsIkdldE9iak51bSIsIk9iamVjdCIsImFzc2lnbiIsImxvZ2dlciIsIkxvZ2dlckZhY3RvcnkiLCJnZXRMb2dnZXIiLCJGaWVsZCIsImVuZ2luZUZvcm0iLCJlbmdpbmVGaWVsZCIsIkpSIiwidXBkYXRlIiwia2V5IiwidmFsdWUiLCJvcHRpb25BcnJheSIsIlNldEFsaWdubWVudCIsIlNldEZsYWdzIiwiU2V0TWF4TGVuZ3RoIiwiU2V0RGVmYXVsdFZhbHVlIiwiV1N0cmluZyIsIm9wdHMiLCJDaG9pY2VPcHRpb25BcnJheSIsIlNldE9wdGlvbnMiLCJHZXRPcHRpb25zIiwib3B0aW9ucyIsIkdldFNpemUiLCJvcHQiLCJHZXRBdCIsIkFkZCIsImZpZWxkVmFsdWUiLCJHZXRWYWx1ZSIsInRvU3RyaW5nIiwib3B0aW9uX3ZhbHVlIiwibmV3T3B0IiwiQ2hvaWNlT3B0aW9uIiwib3B0aW9uX2xhYmVsIiwibGFibGUiLCJzZWxlY3RlZCIsImRlZmF1bHRfc2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJJbnNlcnRBdCIsIlNldEFsdGVybmF0ZU5hbWUiLCJkYSIsIkdldERlZmF1bHRBcHBlYXJhbmNlIiwidGV4dF9jb2xvciIsIlNldERlZmF1bHRBcHBlYXJhbmNlIiwibWFwIiwiZ3Nka09wdGlvbiIsIm9wdGlvbiIsImRlbGV0ZSIsIlNldFZhbHVlIiwiY29udHJvbENvdW50IiwiR2V0Q29udHJvbENvdW50IiwiY29udHJvbCIsIkdldENvbnRyb2wiLCJ3aWRnZXQiLCJSZXNldEFwcGVhcmFuY2VTdHJlYW0iLCJzZXRWYWx1ZSIsImdldFZhbHVlIiwiYWxpZ25tZW50IiwiR2V0QWxpZ25tZW50IiwiYWx0ZXJuYXRlTmFtZSIsIkdldEFsdGVybmF0ZU5hbWUiLCJjb250cm9scyIsImRlZmF1bHRBcCIsImRlZmF1bHRWYWx1ZSIsIkdldERlZmF1bHRWYWx1ZSIsImZsYWciLCJHZXRGbGFncyIsIm1hcHBpbmdOYW1lIiwiR2V0TWFwcGluZ05hbWUiLCJtYXhMZW5ndGgiLCJHZXRNYXhMZW5ndGgiLCJuYW1lIiwiR2V0TmFtZSIsInRvcFZpc2libGVJbmRleCIsIkdldFRvcFZpc2libGVJbmRleCIsInR5cGUiLCJHZXRUeXBlIiwianNvbkFBIiwiZmllbGREaWN0IiwiQUFPYmoiLCJHZXRFbGVtZW50IiwiU3RyaW5nIiwiR2V0RGlyZWN0T2JqZWN0IiwiQUFEaWN0IiwiQUEiLCJBZGRpdGlvbmFsQWN0aW9uIiwiR2V0RG9jdW1lbnQiLCJ0cmlnZ2VycyIsIlRyaWdnZXJFdmVudCIsImVfVHJpZ2dlckZpZWxkS2V5U3Ryb2tlIiwiZV9UcmlnZ2VyRmllbGRXaWxsRm9ybWF0IiwiZV9UcmlnZ2VyRmllbGRWYWx1ZUNoYW5nZWQiLCJlX1RyaWdnZXJGaWVsZFJlY2FsY3VsYXRlVmFsdWUiLCJlX1RyaWdnZXJBbm5vdEN1cnNvckVudGVyIiwiZV9UcmlnZ2VyQW5ub3RDdXJzb3JFeGl0IiwiZV9UcmlnZ2VyQW5ub3RNb3VzZUJ1dHRvblByZXNzZWQiLCJlX1RyaWdnZXJBbm5vdE1vdXNlQnV0dG9uUmVsZWFzZWQiLCJlX1RyaWdnZXJBbm5vdFJlY2VpdmVJbnB1dEZvY3VzIiwiZV9UcmlnZ2VyQW5ub3RMb3NlSW5wdXRGb2N1cyIsIkEiLCJHZXRBY3Rpb24iLCJhY3Rpb25NYW5hZ2VyIiwiZ2V0IiwiZSIsImZvbnROYW1lIiwiZm9udCIsImVyciIsImlzTmFOIiwiZ2V0RXJyb3JDb2RlIiwiY29uc29sZSIsIndhcm4iLCJEQSIsImZsYWdzIiwidGV4dENvbG9yIiwidGV4dFNpemUiLCJ0ZXh0X3NpemUiLCJQREZGb3JtIiwiYXNzaXN0Q2FsbGJhY2siLCJGb2N1c0dvdE9uQ29udHJvbCIsIkZvY3VzTG9zdEZyb21Db250cm9sIiwiR2V0VmVyc2lvbiIsIktpbGxUaW1lciIsIlJlZnJlc2giLCJSZWxlYXNlIiwiU2V0VGltZXJDYWxsYmFjayIsImdldEZpZWxkIiwidGl0bGUiLCJmaWVsZHMiLCJmaWxsIiwicGFnZSIsInBvaW50IiwiUERGUG9pbnQiLCJQb2ludEYiLCJ4IiwieSIsImdldEZpZWxkc1ZhbHVlIiwianNvbiIsIm5lZWRDb25zdHJ1Y3RBcHBlYXJhbmNlcyIsIk5lZWRDb25zdHJ1Y3RBcHBlYXJhbmNlcyIsImZpbHRlciIsImZpZWxkQ291bnQiLCJHZXRGaWVsZENvdW50IiwiZmllbGQiLCJHZXRGaWVsZCIsImpyRmllbGQiLCJQREZGaWVsZCIsImZpZWxkQXJyYXkiLCJHZXRGaWVsZHNJbkNhbGN1bGF0aW9uT3JkZXIiLCJjYWxjdWxhdGlvbk9yZGVyIiwiZXJyb3IiLCJEZWZhdWx0QXBwZWFyYW5jZSIsInRleHRfU2l6ZSIsIlBERkJvb2ttYXJrIiwiaWQiLCJjX2Jvb2ttYXJrIiwiY19kb2MiLCJkZWVwIiwiR2V0VGl0bGUiLCJjb2xvcjE2IiwiR2V0Q29sb3IiLCJjb2xvciIsInN1YnN0ciIsInN0eWxlIiwiR2V0U3R5bGUiLCJpc0l0YWxpYyIsImlzQm9sZCIsImNfZGVzdGluYXRpb24iLCJHZXREZXN0aW5hdGlvbiIsImNoaWxkcmVuIiwicGFnZUluZGV4IiwicGFnZVRvcCIsInBhZ2VMZWZ0IiwiR2V0UGFnZUluZGV4IiwiR2V0VG9wIiwiR2V0TGVmdCIsImluc2VydCIsImRlc3RpbmF0aW9uIiwid3NfdGl0bGUiLCJuZXdfYm9va21hcmsiLCJJbnNlcnQiLCJCb29rbWFya1Bvc2l0aW9uIiwiZV9Qb3NMYXN0Q2hpbGQiLCJHZXRQYWdlIiwidG9wIiwiR2V0SGVpZ2h0IiwiRGVzdGluYXRpb24iLCJDcmVhdGVYWVoiLCJsZWZ0IiwiU2V0RGVzdGluYXRpb24iLCJjaGlsZHJlbkNvdW50IiwiYm9va21hcmsiLCJnZXRCb29rbWFya0J5SWQiLCJpbmRleE9mIiwiaWRzIiwic3BsaXQiLCJyZW1vdmUiLCJSZW1vdmVCb29rbWFyayIsInNldFByb3BlcnR5IiwicHJvcGVydGllcyIsInByb3BlcnR5IiwiU2V0VGl0bGUiLCJTZXRTdHlsZSIsIlNldENvbG9yIiwiSGFzQ2hpbGQiLCJmaXJzdF9jaGlsZF9ib29rbWFyayIsIkdldEZpcnN0Q2hpbGQiLCJjX25leHQiLCJHZXROZXh0U2libGluZyIsIm5vb3AiLCJpc2xvYWQiLCJQREZEb2MiLCJyZWxlYXNlIiwiYXN5bmMiLCJpc0NyZWF0ZSIsImRvY0RlZmVycmVkIiwiZG9jUHJvbWlzZSIsInByb21pc2UiLCJkb2NTaXplIiwicmVhZGVyQ2FsbGJhY2siLCJyZWFkZXJCbG9ja0xvYWRpbmciLCJwZGZUcmVlIiwiZG9jIiwicmVzb2x2ZSIsImFzeW5jQmxvY2siLCJBc3luY1JlYWRlckNhbGxiYWNrIiwiaW1wbGVtZW50IiwiUmVhZEJsb2NrIiwidGhlbiIsImFzeW5jQnVmZmVyIiwic3JjIiwiSEVBUFU4IiwiSXNEYXRhQXZhaWwiLCJBZGREb3dubG9hZEhpbnQiLCJtb3JlIiwibWF4U2l6ZSIsIlJlYWRlckNhbGxiYWNrIiwiY3JlYXRlUERGRG9jV2l0aFJlYWRlckNhbGxiYWNrIiwicGFnZUNhY2hlIiwicGFnZUluZGV4TWFwIiwicGFnZUluZGV4UHJvbWlzZSIsImJsb2NrUmFuZ2VzIiwicmVuZGVyRmxhZ3MiLCJwYXJzZUJ5UGFzc3dvcmQiLCJwYXNzd29yZCIsIm90aGVyRGF0YSIsImRlZmVycmVkIiwicmV0cnkiLCJzZXRUaW1lb3V0IiwiZXJyb3JDb2RlIiwicHdkIiwiTG9hZCIsImVuY3J5cHRQYXNzd29yZCIsIkxvYWRCeUFzeW1tZXRyaWNFbmNyeXB0aW9uIiwiRXJyb3JDb2RlIiwiZV9FcnJTdWNjZXNzIiwiYWN0aW9uIiwiR2V0T3BlbkFjdGlvbiIsImZkZiIsImZpbGUiLCJpbXBvcnRGcm9tRkRGIiwiZV9FcnJEYXRhTm90UmVhZHkiLCJlX0VyclNlY3VyaXR5SGFuZGxlciIsImRybSIsInJlZ2lzdGVyRFJNU2VjdXJpdHlDYWxsYmFjayIsInVwZGF0ZVBhZ2VDYWNoZSIsInVwZGF0ZVBhZ2VJbmRleE1hcCIsImdldFBhZ2VCeUlkIiwiZ2V0QWxsTG9hZGVkUGFnZXMiLCJwYWdlcyIsImdldFBERkRvY0luZm8iLCJfdGhpcyIsImRpY3QiLCJHZXRJbmZvIiwiZ2V0UGFnZUNvdW50IiwiR2V0UGFnZUNvdW50IiwiZ2V0SW5kaXJlY3RPYmplY3QiLCJvYmpOdW0iLCJvYmplY3QiLCJHZXRJbmRpcmVjdE9iamVjdCIsIlBERk9iamVjdCIsImdldFBhZ2VzV2lkdGhIZWlnaHQiLCJjb3VudCIsImxpc3QiLCJub3ciLCJEYXRlIiwid2lkdGgiLCJHZXRXaWR0aCIsImhlaWdodCIsImFmdGVyIiwiZ2V0UGFnZUJ5SW5kZXgiLCJwZGZQYWdlIiwiUHJvbWlzZSIsIlBERlBhZ2UiLCJjX3BhZ2VQcm9taXNlIiwiZ2V0UGFnZSIsInBhZ2VOdW1iZXIiLCJnZXRQREZQYWdlQnlQYWdlSW5kZXgiLCJnZXRQZXJtaXNzaW9uIiwic3RkQ2lwaGVyT3B0aW9ucyIsInBlcm1pc3Npb24iLCJHZXRVc2VyUGVybWlzc2lvbnMiLCJnZXRNZXRhZGF0YSIsIm1ldGFkYXRhIiwiTWV0YWRhdGEiLCJiYXNlSW5mbyIsImdldE1ldGFkYXRhVmFsdWVzIiwiY3VzdG9taXplZEtleSIsIkdldEN1c3RvbWVyS2V5cyIsIkdldFZhbHVlcyIsInNldE1ldGFkYXRhVmFsdWUiLCJ2YWx1ZUFycmF5IiwiUmVtb3ZlQWxsIiwiU2V0VmFsdWVzIiwibW92ZVBhZ2VUbyIsInBhZ2VJZCIsImRlc3RJbmRleCIsInBhcnNlZFBhZ2UiLCJyZXN1bHQiLCJNb3ZlUGFnZVRvIiwiY19wYWdlIiwibWluSW5kZXgiLCJtYXhJbmRleCIsImlzVXAiLCJ1cGRhdGVQYWdlSW5kZXgiLCJpbnNlcnRQYWdlIiwiSW5zZXJ0UGFnZSIsIm5ld0JsYW5rUGFnZSIsInJlbW92ZVBhZ2UiLCJSZW1vdmVQYWdlIiwiaXNNb3ZlIiwidG1wIiwicGFzc3dvcmRUeXBlIiwiZGVzdHJveVBhZ2UiLCJwYWdlQ291bnQiLCJmaWxlU2l6ZSIsIkdldEZpbGVTaXplIiwiZmlsZUlEIiwidHJhaWxlciIsIkdldFRyYWlsZXIiLCJJRE9iaiIsInN0cklEIiwiSURBcnJheSIsIkdldEFycmF5Iiwic3oiLCJzdHJCdWZmZXIiLCJHZXRTdHJpbmciLCJHZXRCdWZmZXIiLCJoZXhTdHJJRCIsInN0ckxlbmd0aCIsImNvZGUiLCJIRUFQOCIsImlzT3duZXIiLCJzZWN1cml0eUhhbmRsZXIiLCJHZXRTZWN1cml0eUhhbmRsZXIiLCJFbmNyeXB0VHlwZSIsIkdldFNlY3VyaXR5VHlwZSIsImVfRW5jcnlwdE5vbmUiLCJlX0VuY3J5cHRQYXNzd29yZCIsIkxpYnJhcnkiLCJEZWNyeXB0UGFzc3dvcmQiLCJDaGVja1Bhc3N3b3JkIiwiUGFzc3dvcmRUeXBlIiwiZV9Qd2RPd25lciIsImVfRW5jcnlwdEZveGl0RFJNIiwiZV9FbmNyeXB0Q0RSTSIsIkdldERSTUVuY3J5cHREYXRhIiwiaXNfb3duZXIiLCJlX0VuY3J5cHRDZXJ0aWZpY2F0ZSIsImVfRW5jcnlwdEN1c3RvbSIsImVfRW5jcnlwdFJNUyIsImVfRW5jcnlwdFVua25vd24iLCJqc05hbWVUcmVlIiwibmFtZVRyZWUiLCJQREZOYW1lVHJlZSIsIlBERk5hbWVUcmVlVHlwZSIsImVfSmF2YVNjcmlwdCIsIm5hbWVJbmRleCIsIkdldENvdW50Iiwib2JqIiwiR2V0T2JqIiwiQWN0aW9uIiwiamF2YVNjcmlwdEFjdGlvbiIsIkphdmFTY3JpcHRBY3Rpb24iLCJzY3JpcHRzIiwiR2V0U2NyaXB0IiwiaWNvbnMiLCJjIiwiR2V0Q2F0YWxvZyIsIm4iLCJpY29uc09iaiIsImljb25zRGljdCIsIm5hbWVzIiwiR2V0RWxlbWVudENvdW50IiwibyIsInN0ck5hbWUiLCJHZXRMZW5ndGgiLCJmcm9tQ2hhckNvZGUiLCJwZGZOYW1lRGVjb2RpbmciLCJ1c2VyUGVybWlzc2lvbnMiLCJoYXNGb3JtIiwiSGFzRm9ybSIsImdldFN0cmVhbSIsIndyaXRlU3RyZWFtIiwid3JpdHRlblNpemUiLCJzYXZlRG9jIiwiV3JpdGVyQ2FsbGJhY2siLCJGbHVzaCIsIldyaXRlQmxvY2siLCJjdXJzb3IiLCJlbmdpbmVCdWZmZXIiLCJTYXZlRmxhZ3MiLCJlX1NhdmVGbGFnTm9ybWFsIiwiZmRmZG9jIiwicmFuZ2UiLCJSYW5nZSIsIlJhbmdlRmlsdGVyIiwiZV9BbGwiLCJyZXQiLCJJbXBvcnRGcm9tRkRGIiwiaW5mbyIsImdldEJvb2ttYXJrcyIsInJvb3RfYm9va21hcmsiLCJHZXRSb290Qm9va21hcmsiLCJib29rbWFya1RyZWUiLCJyb290Qm9va21hcmsiLCJjcmVhdGVSb290Qm9va21hcmsiLCJDcmVhdGVSb290Qm9va21hcmsiLCJwZGZCb29rbWFyayIsImluc2VydEJvb2ttYXJrIiwibmV3Qm9va21hcmsiLCJzZXRCb29rbWFya1Byb3BlcnR5IiwicmVtb3ZlQm9va21hcmsiLCJnZXRMYXllck5vZGVzIiwicGRmTGF5ZXIiLCJQREZMYXllciIsImxheWVySlNPTiIsImdldFJlZGFjdGlvbiIsImNfcmVkYWN0aW9uIiwiUmVkYWN0aW9uIiwiYXBwbHlSZWRhY3Rpb24iLCJvbGRQYWdlc0Fubm90T2JqcyIsInBhZ2VzTWFwIiwicHJvbWlzZXMiLCJnZXRBbm5vdHMiLCJhbGwiLCJwYWdlc0Fubm90T2JqcyIsImZvckVhY2giLCJhbm5vdCIsIkdldFVuaXF1ZUlEIiwiQXBwbHkiLCJkZWxldGVkUGFnZUFubm90cyIsInBhZ2VzQW5ub3RzIiwicGFnZUFubm90cyIsIm9sZEFubm90cyIsImRlbGV0ZWRBbm5vdHMiLCJhbm5vdElkcyIsImdldFR5cGUiLCJtYXJrVXAiLCJHZXRSZXBseVRvIiwicmVjdCIsIkdldFJlY3QiLCJyaWdodCIsImJvdHRvbSIsImFubm90SWQiLCJpc0RlbGV0ZWQiLCJzdWNjZXNzIiwicmVtb3ZlZEFubm90SWRzIiwiY2F0Y2giLCJsb2ciLCJleHBvcnRUb0ZERiIsImZpbGVUeXBlIiwiZGF0YVR5cGUiLCJGREZEb2MiLCJFeHBvcnRUb0ZERiIsImJ1ZmZlcnMiLCJTYXZlQXMiLCJsb2FkRm9ybSIsImZvcm0iLCJGb3JtIiwianJGb3JtIiwic2V0T3BlbkFjdGlvbiIsImNyZWF0ZSIsIlNldE9wZW5BY3Rpb24iLCJzZXRQYXNzd29yZEFuZFBlcm1pc3Npb24iLCJ1c2VyUGFzc3dvcmQiLCJhZG1pblBhc3N3b3JkIiwiY2lwaGVyIiwiaXNFbmNyeXB0TWV0YURhdGEiLCJjX2NpcGhlciIsImtleUxlbmd0aCIsImNpcGhlclR5cGUiLCJOb25lIiwiQ2lwaGVyVHlwZSIsImVfQ2lwaGVyTm9uZSIsIlJDNCIsImVfQ2lwaGVyUkM0IiwiQUVTMTI4IiwiZV9DaXBoZXJBRVMiLCJBRVMyNTYiLCJFcnJvciIsInNlY3VyaXR5VHlwZSIsInN0ZFNlY3VyaXR5SGFuZGxlciIsInN0ZEVuY3J5cHREYXRhIiwiR2V0U3RkRW5jcnlwdERhdGEiLCJpc19lbmNyeXB0X21ldGFkYXRhIiwia2V5X2xlbmd0aCIsInVzZXJfcGVybWlzc2lvbnMiLCJTdGRTZWN1cml0eUhhbmRsZXIiLCJTdGRFbmNyeXB0RGF0YSIsInN0clVzZXJQd2QiLCJzdHJPd25lclB3ZCIsIlNldEFFUzI1Nk1vZGlmeUZsYWdzIiwiSW5pdGlhbGl6ZVciLCJJbml0aWFsaXplIiwiU2V0U2VjdXJpdHlIYW5kbGVyIiwiaXNFbmNyeXB0TWV0YWRhdGEiLCJyZW1vdmVTZWN1cml0eSIsIlJlbW92ZVNlY3VyaXR5IiwiY2hlY2tQYXNzd29yZCIsImdldFN0ZENpcGhlck9wdGlvbnMiLCJlbmNyeXBlRGF0YSIsImdldFVzZXJQYXNzd29yZCIsIkdldFVzZXJQYXNzd29yZCIsInNldFBhc3N3b3JkVHlwZSIsImdldFBhc3N3b3JkVHlwZSIsIkdldFBhc3N3b3JkVHlwZSIsInNldFJlbmRlckZsYWciLCJnZXRSZW5kZXJGbGFncyIsImRybUVuY3J5cHQiLCJlbmNyeXB0VHlwZSIsInJlamVjdCIsImRybUVuY3J5cHREYXRhIiwiRFJNRW5jcnlwdERhdGEiLCJzdWJGaWx0ZXIiLCJ2YWx1ZXMiLCJkcm1TZWN1cml0eUhhbmRsZXIiLCJEUk1TZWN1cml0eUhhbmRsZXIiLCJTZXREUk1WYWx1ZSIsImZpbGVJZCIsImluaXRpYWxLZXkiLCJqc1ZhbHVlQXJyYXkiLCJ1cmxMaXN0IiwiYWRkRm9udCIsImJ1ZmZlclN0cmluZyIsInJldm9rZUFsbFVSTCIsImdldFdvZmZEYXRhQnVmZmVyIiwid29mZkRhdGEiLCJQREZKUiIsIlBERkpyRW5naW5lIiwiZW5naW5lUGF0aCIsImZvbnRQYXRoIiwianJFbmdpbmVEZWZlcnJlZCIsImpyRW5naW5lUHJvbWlzZSIsIm9uUnVudGltZUluaXRpYWxpemVkIiwibG9jYXRlRmlsZSIsImZpbGVuYW1lIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwicmVhZEJpbmFyeSIsIndhc21CaW5hcnlGaWxlIiwicHJlIiwicmVwbGFjZSIsInJlYWRCcm90bGlBc3luYyIsInJlYWRBc3luYyIsIm1lbW9yeUluaXRpYWxpemVyIiwib25sb2FkIiwib25lcnJvciIsImFubm90TWFuYWdlciIsIkFubm90TWFuYWdlciIsIkFjdGlvbk1hbmFnZXIiLCJncmFwaGljc09iamVjdE1hbmFnZXIiLCJHcmFwaGljc09iamVjdE1hbmFnZXIiLCJwZGZEb2NDYWNoZSIsImZvbnRJbmZvTWFwIiwic2V0VGhpcmRQYXJ0eUZvbnRIYW5kbGVyIiwiVGhpcmRQYXJ0eUZvbnRIYW5kbGVyIiwiR2V0VGhpcmRQYXJ0eUZvbnQiLCJjaGFyc2V0IiwiaXRhbGljIiwid2VpZ2h0IiwiZm9udEZsYWciLCJGb250RW51bXMiLCJnZXRUaGlyZFBhcnR5Rm9udEJ1ZmZlciIsImZvbnRJbmZvIiwiVGhpcmRQYXJ0eUZvbnRJbmZvIiwiR2V0RmFjZUluZGV4IiwiR2V0Rm9udEZpbGVEYXRhIiwiZGF0YSIsIl9tYWxsb2MiLCJHZXRGb250RmlsZVNpemUiLCJHZXRXZWJGb250RmlsZVN0cmVhbSIsInBvcyIsImdldFdlYkZvbnRGaWxlQnVmZmVyIiwic3RyZWFtQ2FsbGJhY2siLCJTdHJlYW1DYWxsYmFjayIsImJ1ZlB0ciIsIkdldEZvbnRGaWxlc1BvcyIsImdldEZvbnRGaWxlc1BvcyIsInVzZXJOYW1lIiwiZ2V0Rm9udEJ1ZmZlciIsInJlYWxOYW1lIiwidXBkYXRlUGRmRG9jQ2FjaGUiLCJwZGZEb2MiLCJnZXRQREZEb2NCeUlkIiwiZGVzdHJveURvYyIsImNoZWNrTGljZW5zZSIsInNuIiwiaW5pdGlhbGl6ZSIsIkVuYWJsZUphdmFTY3JpcHQiLCJpbml0SWNvblByb3ZpZGVyIiwiY3JlYXRlTmV3RG9jIiwiYXV0aG9yIiwicGFnZVNpemUiLCJzZXRNZXRhRGF0YSIsInRpdGxlS2V5IiwiYXV0aG9yS2V5IiwicHJvZHVjZXJLZXkiLCJ0aXRsZVZhbCIsImF1dGhvclZhbCIsInByb2R1Y2VyVmFsIiwiZ2V0VVRDRnVsbFllYXIiLCJtIiwiZ2V0VVRDTW9udGgiLCJkIiwiZ2V0VVRDRGF0ZSIsImgiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJzIiwiZ2V0VVRDU2Vjb25kcyIsImRhdGUiLCJjcmVhdGlvbkRhdGUiLCJtb2REYXRlIiwiZ2V0UERGRG9jIiwiZ2V0RkRGRG9jIiwiZ2V0RkRGRnJvbVVSTCIsInVybCIsInhociIsInJlcXVlc3REYXRhIiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJtYXRjaCIsImdldFBERkRvY0FzeW5jIiwiZ2V0UERGRG9jQnlSZWFkZXJDYWxiYWNrIiwicmVhZGVyQ2FsbGJhY2tQYXJhbXMiLCJnZXRQREZEb2NCeUFzeW5jUmVhZGVyQ2FsbGJhY2siLCJjcmVhdGVQREZEb2MiLCJlbnRpdHkiLCJzZXRSZXF1ZXN0SGVhZGVyIiwicmVnaXN0ZXJTZWN1cml0eUNhbGxiYWNrIiwidW5SZWdpc3RlclNlY3VyaXR5Q2FsbGJhY2siLCJyZWdpc3RlcmVkRFJNU2VjdXJpdHlDYWxsYmFjayIsInNlY3VyaXR5Q2FsbGJhY2siLCJEUk1TZWN1cml0eUNhbGxiYWNrIiwiSXNPd25lciIsImdldFBERkRvY0Zyb21DRG9jIiwiR2V0Q2lwaGVyVHlwZSIsIkdldEtleUxlbmd0aCIsIkdldEZpbGVJRCIsIkdldEluaXRpYWxLZXkiLCJSZWdpc3RlclNlY3VyaXR5Q2FsbGJhY2siLCJleCIsIlVucmVnaXN0ZXJTZWN1cml0eUNhbGxiYWNrIiwic2V0VXNlck5hbWUiLCJnZXRVc2VyTmFtZSIsImdldFJvdGF0ZWRBbm5vdFJlY3QiLCJwZGZSZWN0Iiwicm90YXRlIiwiZ2V0SGV4U3RyaW5nIiwiR1NES1N0ciIsIkVxdWFscyIsInN0cmluZyIsImNoYXJDb2RlQXQiLCJ0ZW1wIiwieGhyX29ubG9hZCIsImNfZW5naW5lIiwibGF5ZXJfdHJlZSIsIkxheWVyVHJlZSIsImxheWVyX2NvbnRleHQiLCJMYXllckNvbnRleHQiLCJyb290X25vZGUiLCJHZXRSb290Tm9kZSIsInJvb3RMYXllck5vZGUiLCJQREZMYXllck5vZGUiLCJzZXRMYXllck5vZGVWaXNpYWJsZSIsInZpc2lhYmxlIiwibGF5ZXJOb2RlIiwiZ2V0TGF5ZXJOb2RlQnlJZCIsIlNldFZpc2libGUiLCJsYXllcl9ub2RlIiwiaGFzTGF5ZXIiLCJIYXNMYXllciIsInZpc2libGUiLCJJc1Zpc2libGUiLCJpc0xvY2tlZCIsIklzTG9ja2VkIiwiZ2V0Q2hpbGRyZW4iLCJjaGlsZENvdW50IiwiR2V0Q2hpbGRyZW5Db3VudCIsIkdldENoaWxkIiwiQ1JFQVRFX0JJVE1BUF9GQUlMIiwiQ1JFQVRFX0JJVE1BUF9SRU5ERVJfRkFJTCIsIkJJVE1BUF9SRU5ERVJfRkFJTCIsImNoZWNrSUUxMCIsInRvTG93ZXJDYXNlIiwicGFyc2VJbnQiLCJpc0lFMTAiLCJnZXRCaXRtYXBCdWZmZXIiLCJjcmVhdGVCaXRtYXBSZW5kZXIiLCJiaXRtYXAiLCJyZW5kZXJlciIsIlJlbmRlcmVyIiwiYml0bWFwV2lkdGgiLCJiaXRtYXBIZWlnaHQiLCJpbWFnZSIsIkltYWdlIiwiQWRkRnJhbWUiLCJHZXRGb3JtYXQiLCJESUJGb3JtYXQiLCJlX0RJQkFyZ2IiLCJDb252ZXJ0Rm9ybWF0IiwiR2V0UGl0Y2giLCJpbWFnZURhdGFCdWZmZXIiLCJwcm9ncmVzc2l2ZUNvbnRpbnVlU3RhdGUiLCJQcm9ncmVzc2l2ZVN0YXRlIiwiZV9Ub0JlQ29udGludWVkIiwicHJvZ3Jlc3NpdmVGaW5pc2hTdGF0ZSIsImVfRmluaXNoZWQiLCJwYWdlRGVmZXJyZWQiLCJfZ2V0UGFnZSIsImFubm90YXRpb25JREFycmF5IiwiX3ByZXBhcmVBbm5vdGF0aW9ucyIsImRhdGFOb3RSZWFkeSIsImFubm90YXRpb25JZEFycmF5IiwiX2dldEFubm90YXRpb25JZEFycmF5IiwicmVkdWNlIiwicHJldiIsImFycmF5Iiwib3RoZXJSZXBlYXRJbmRleCIsIm5ld0lkIiwiZGVidWciLCJHZXRBbm5vdCIsIlNldFVuaXF1ZUlEIiwiX2dldEFubm90SW5kZXhCeUlkIiwiX3NldEFubm90SWRBdCIsImlkeCIsInBhcnNlZFBhZ2VQcm9taXNlIiwiSXNQYXJzZWQiLCJwYXJzZVN1Y2Nlc3MiLCJTdGFydFBhcnNlIiwicmVQYXJzZVBhZ2UiLCJnZXRJbmRleCIsImdldE9iak51bWJlciIsImdldFdpZHRoIiwiZ2V0SGVpZ2h0IiwiZ2V0QW5ub3RzSW1hZ2VEYXRhQnlUaWxlIiwiYW5ub3RJbmRleHMiLCJzY2FsZSIsImlkTGlzdCIsIl9nZXRBbm5vdEJ5SW5kZXgiLCJnZXRBbm5vdElETGlzdCIsImdldEFubm90QnlJZCIsImdldE5hdGl2ZUFubm90QnlJZCIsImdldFRodW1iIiwidGh1bWIiLCJHZXRUaHVtYiIsInNjYWxlV2lkdGgiLCJnZXRJbWFnZURhdGEiLCJnZXRJbWFnZURhdGFCeVRpbGUiLCJyZW5kZXJXaWR0aCIsInJlbmRlckhlaWdodCIsInBhZ2VXaWR0aCIsInBhZ2VIZWlnaHQiLCJjcmVhdGVCaXRtYXAiLCJIYXNUcmFuc3BhcmVuY3kiLCJTZXRMYXllckNvbnRleHQiLCJzdGFydEJpdG1hcFJlbmRlciIsIkJpdG1hcCIsIm1hdHJpeCIsIkdldERpc3BsYXlNYXRyaXgiLCJSb3RhdGlvbiIsImVfUm90YXRpb24wIiwiaXNSZW5kZXJTdWNjZXNzIiwiU3RhcnRSZW5kZXIiLCJnZXRSb3RhdGlvbiIsIkdldFJvdGF0aW9uIiwic2V0Um90YXRpb24iLCJyb3RhdGlvbiIsIlNldFJvdGF0aW9uIiwiZ2V0UGFnZUltYWdlIiwiZ2V0VmlzaWJsZUNvbnRlbnRCb3giLCJnZXRNZWRpYUJveCIsImdldFRleHRzIiwiZ2V0SW1hZ2VzIiwiZ2V0U2hhcGVzIiwiZ2V0U2hhZGluZ3MiLCJSZWN0RiIsIkNGWF9GbG9hdFJlY3QiLCJtZWRpYUJveCIsIkdldEJveCIsIkJveFR5cGUiLCJlX01lZGlhQm94IiwiTm9ybWFsaXplIiwiYm94IiwiY3JvcEJveCIsImVfQ3JvcEJveCIsIkludGVyc2VjdCIsInBkZk1hdHJpeCIsIk1hdHJpeCIsImVfUm90YXRpb245MCIsImVfUm90YXRpb24xODAiLCJlX1JvdGF0aW9uMjcwIiwicGRmUGFnZU1hdHJpeCIsImFubm90Q291bnQiLCJHZXRBbm5vdENvdW50IiwiR2V0QSIsIkdldEIiLCJHZXRDIiwiR2V0RCIsIkdldEUiLCJHZXRGIiwiZ2V0UGFnZU1hdHJpeCIsImdldEJpdG1hcCIsImZsYWdNYXAiLCJDb250ZW50RmxhZyIsImVfUmVuZGVyUGFnZSIsImVfUmVuZGVyQW5ub3QiLCJfcGFnZSIsImdldEJpdG1hcEJ5TWF0cml4IiwiZ2V0UGFnZUFuZEhpZ2hsaWdodEJpdG1hcCIsInN0YXJ0Qml0bWFwUmVuZGVyV2l0aFBhZ2VIaWdobGlnaHQiLCJnZXRBbm5vdEJpdG1hcCIsImFubm90UmVjdCIsImV4dGVuZFNpemUiLCJkaXNwbGF5TWF0cml4IiwicmVuZGVyZWQiLCJSZW5kZXJBbm5vdCIsImdldEFubm90Qml0bWFwQnlSYW5nZSIsImFubm90cyIsIml0ZW1zIiwiQXJyYXkiLCJnZXRBbm5vdElkQXRQb2ludCIsInRvbGVyYW5jZSIsIkdldEFubm90QXRQb2ludCIsImdldEFubm90SWRBdERldmljZVBvaW50IiwiU2V0IiwiR2V0QW5ub3RBdERldmljZVBvaW50IiwiZ2V0Q2hhckluZm9BdFBvaW50IiwiZ2V0Tm9ybWFsVGV4dFBhZ2UiLCJ0ZXh0UGFnZSIsImNoYXJJbmRleCIsIkdldEluZGV4QXRQb3MiLCJ0ZXh0UmVjdENvdW50IiwiR2V0VGV4dFJlY3RDb3VudCIsIkdldFRleHRSZWN0IiwiR2V0QmFzZWxpbmVSb3RhdGlvbiIsIlRleHRQYWdlIiwiVGV4dFBhcnNlRmxhZ3MiLCJlX1BhcnNlVGV4dE5vcm1hbCIsImdldE5vcm1hbFRleHRQYWdlU3luYyIsInJlbW92ZUFubm90QnlJZCIsIlJlbW92ZUFubm90IiwicmVtb3ZlQWxsQW5ub3QiLCJ1bmRlZmluZWQiLCJfIiwiYWRkSW1hZ2UiLCJpbWFnZUJ1ZmZlciIsImNyZWF0ZUltYWdlIiwiQWRkSW1hZ2UiLCJhZGRBbm5vdCIsImNfQW5ub3RUeXBlIiwiY19yZWN0ZiIsImNfYW5ub3QiLCJBZGRBbm5vdCIsImNyZWF0ZWRBbm5vdCIsImdldElkIiwibWFya1JlZGFjdEFubm90IiwicmVjdEZBcnJheSIsInJlZGFjdEFubm90IiwiY19yZWN0X2ZfYXJyYXkiLCJSZWN0RkFycmF5IiwiTWFya1JlZGFjdEFubm90IiwiYWRkQW5ub3RHcm91cCIsImhlYWRlckluZGV4IiwiZ3JvdXAiLCJNYXJrdXBBcnJheSIsIm5vUG9wdXAiLCJNYXJrdXAiLCJjb25jYXQiLCJTZXRBbm5vdEdyb3VwIiwiY3JlYXRlQW5ub3QiLCJoaWdobGlnaHQiLCJIaWdobGlnaHQiLCJxdWFkUG9pbnRzQXJyYXkiLCJRdWFkUG9pbnRzQXJyYXkiLCJRdWFkUG9pbnRzIiwiU2V0UXVhZFBvaW50cyIsIlRyYW5zbGF0ZSIsImlzT0siLCJnZXRUZXh0UmVjdHNBdFJlY3QiLCJjX3RleHRQYWdlIiwiY19yZWN0QXJyYXkiLCJHZXRUZXh0UmVjdEFycmF5QnlSZWN0IiwiY19yZWN0IiwiZ2V0VGV4dENvbnRpbnVvdXNSZWN0c0F0UmVjdCIsInJlY3RBcnJheSIsImZpcnN0UmVjdCIsImxhc3RSZWN0Iiwic3RhcnRUb2xlcmFuY2UiLCJzdGFydFBvaW50Iiwic3RhcnRDaGFySW5kZXgiLCJlbmRUb2xlcmFuY2UiLCJlbmRQb2ludCIsImVuZENoYXJJbmRleCIsInRlbXBDaGFySW5kZXgiLCJyZXN1bHRBcnJheSIsInRleHRSZWN0IiwiZ2V0VGV4dENvbnRpbnVvdXNDaGFyc0F0UmVjdCIsIkdldENoYXJzIiwiZ2V0VGV4dFNlYXJjaCIsInBhdHRlcm4iLCJTZWFyY2hGbGFncyIsImVfU2VhcmNoTm9ybWFsIiwiY190ZXh0U2VhcmNoIiwiVGV4dFNlYXJjaCIsIlNldFBhdHRlcm4iLCJTZXRTZWFyY2hGbGFncyIsImZsYXR0ZW4iLCJGbGF0dGVuIiwiZ2V0R3JhcGhpY3NPYmplY3RBdFBvaW50X3MiLCJ0eXBlcyIsIkdyYXBoaWNzT2JqZWN0VHlwZSIsIkdldEdyYXBoaWNzT2JqZWN0QXRQb2ludCIsImpyT2JqZWN0IiwiZ2V0R3JhcGhpY3NPYmplY3RBdFBvaW50IiwiaXNQb2ludEluTGluZSIsIkdldEdyYXBoaWNzT2JqZWN0c0F0UG9pbnQiLCJjaGVja1BhdGhPYmplY3RzIiwib2JqZWN0cyIsIm51bWJlciIsImdldE9iamVjdCIsImdldEdyYXBoaWNzT2JqZWN0c0F0UG9pbnQiLCJhZGRXYXRlcm1hcmsiLCJ3YXRlcm1hcmsiLCJ0ZXh0UHJvcGVydGllcyIsIndhdGVybWFya1NldHRpbmdzIiwicG9zaXRpb24iLCJvZmZzZXRYIiwib2Zmc2V0WSIsInNjYWxlWCIsInNjYWxlWSIsIm9wYWNpdHkiLCJzZXR0aW5ncyIsIldhdGVybWFya1NldHRpbmdzIiwiY3JlYXRlV2F0ZXJtYXJrU2V0dGluZ3MiLCJ0b0xvY2FsZUxvd2VyQ2FzZSIsIldhdGVybWFyayIsImNyZWF0ZUJpdG1hcFdhdGVybWFyayIsIndhdGVybWFya1RleHRQcm9wZXJ0aWVzIiwiZm9udFNpemUiLCJmb250U3R5bGUiLCJsaW5lU3BhY2UiLCJXYXRlcm1hcmtUZXh0UHJvcGVydGllcyIsImNyZWF0ZVdhdGVybWFya1RleHRQcm9wZXJ0aWVzIiwiY3JlYXRlVGV4dFdhdGVybWFyayIsInRleHQiLCJJbnNlcnRUb1BhZ2UiLCJHZW5lcmF0ZUNvbnRlbnQiLCJoYXNUcmFuc3BhcmVuY3kiLCJlX0RJQlJnYiIsIkZYX1JFQ1QiLCJGaWxsUmVjdCIsInJlbmRlckdyYXBoaWNPYmplY3QiLCJqclJlbmRlckZsYWdzIiwiR2V0Rmlyc3RHcmFwaGljc09iamVjdFBvc2l0aW9uIiwiZV9UeXBlQWxsIiwiR2V0R3JhcGhpY3NPYmplY3QiLCJHZXROZXh0R3JhcGhpY3NPYmplY3RQb3NpdGlvbiIsImVfVHlwZVBhdGgiLCJlX1R5cGVJbWFnZSIsIlJlbmRlckdyYXBoaWNzT2JqZWN0IiwiU2V0UmVuZGVyQ29udGVudEZsYWdzIiwiaGlnaGxpZ2h0VHlwZSIsIkFubm90VHlwZSIsImVfSGlnaGxpZ2h0IiwiZ2V0RW5naW5lUm90YXRlIiwiUm90YXRlIiwicm90YXRlMCIsIkNyZWF0ZSIsImluaXRTdWJBY3Rpb25zIiwidHlwZUluRW5naW5lIiwic3ViQWN0aW9uIiwib2JqTnVtYmVyIiwic3ViQWN0aW9uQ291bnQiLCJHZXRTdWJBY3Rpb25Db3VudCIsInNldEFjdGlvbkRhdGFCeUluZGV4IiwiYWN0aW9uSW5kZXgiLCJzZXRBY3Rpb25EYXRhIiwic2V0U3ViQWN0aW9uIiwiU2V0U3ViQWN0aW9uIiwiaW5zZXJ0U3ViQWN0aW9uIiwiSW5zZXJ0U3ViQWN0aW9uIiwicmVtb3ZlQWxsU3ViQWN0aW9ucyIsIlJlbW92ZUFsbFN1YkFjdGlvbnMiLCJyZW1vdmVTdWJBY3Rpb24iLCJSZW1vdmVTdWJBY3Rpb24iLCJjb25zdHJ1Y3RvciIsIkdldFN1YkFjdGlvbiIsIkFjdGlvblR5cGUiLCJhY3Rpb25UeXBlIiwiZV9UeXBlVVJJIiwiVVJJQWN0aW9uIiwiZV9UeXBlTGF1bmNoIiwiTGF1bmNoQWN0aW9uIiwiZV9UeXBlTmFtZWQiLCJOYW1lZEFjdGlvbiIsImVfVHlwZUphdmFTY3JpcHQiLCJlX1R5cGVSZXNldEZvcm0iLCJSZXNldEZvcm1BY3Rpb24iLCJlX1R5cGVTdWJtaXRGb3JtIiwiU3VibWl0Rm9ybUFjdGlvbiIsImVfVHlwZUltcG9ydERhdGEiLCJJbXBvcnREYXRhQWN0aW9uIiwiZV9UeXBlR290byIsIkdvdG9BY3Rpb24iLCJlX1R5cGVSZW5kaXRpb24iLCJSZW5kaXRpb25BY3Rpb24iLCJlX1R5cGVIaWRlIiwiSGlkZUFjdGlvbiIsImVfVHlwZUdvVG9SIiwiUmVtb3RlR290b0FjdGlvbiIsImVfVHlwZUdvVG9FIiwiRW1iZWRkZWRHb3RvQWN0aW9uIiwiZV9UeXBlVW5rbm93biIsImVfVHlwZVNvdW5kIiwiZV9UeXBlTW92aWUiLCJlX1R5cGVTZXRPQ0dTdGF0ZSIsImVfVHlwZVRyYW5zIiwiZV9UeXBlR29UbzNEVmlldyIsImdldEFjdGlvbkJ5RGljdCIsImRlc3RpbmF0aW9uTmFtZSIsImdldERlc3RpbmF0aW9uTmFtZSIsImdldERlc3RpbmF0aW9uIiwicm9vdEZpbGUiLCJnZXRSb290RmlsZSIsIm5ld1dpbmRvd0ZsYWciLCJnZXROZXdXaW5kb3dGbGFnIiwiR2V0VGFyZ2V0IiwidGFyZ2V0IiwiZ2V0VGFyZ2V0IiwiR2V0RGVzdGluYXRpb25OYW1lIiwiZmlsZVNwZWMiLCJGaWxlU3BlYyIsIkdldFJvb3RGaWxlIiwiR2V0TmV3V2luZG93RmxhZyIsIkVtYmVkZGVkR290b1RhcmdldCIsInNldERlc3RpbmF0aW9uIiwic2V0RGVzdGluYXRpb25OYW1lIiwic2V0Um9vdEZpbGUiLCJmaWxlTmFtZSIsInNldE5ld1dpbmRvd0ZsYWciLCJzZXRUYXJnZXQiLCJkZXN0Rm4iLCJjcmVhdGVYWVoiLCJjcmVhdGVGaXRQYWdlIiwiY3JlYXRlRml0SG9yeiIsImNyZWF0ZUZpdFZlcnQiLCJjcmVhdGVGaXRSZWN0IiwiY3JlYXRlRml0QkJveCIsImNyZWF0ZUZpdEJIb3J6IiwiY3JlYXRlRml0QlZlcnQiLCJTZXREZXN0aW5hdGlvbk5hbWUiLCJjcmVhdGVGaWxlIiwic2V0RmlsZU5hbWUiLCJTZXRSb290RmlsZSIsImZsYWdUeXBlIiwiTmV3V2luZG93RmxhZyIsImVfTmV3V2luZG93RmxhZ0ZhbHNlIiwiZV9OZXdXaW5kb3dGbGFnVHJ1ZSIsImVfTmV3V2luZG93RmxhZ05vbmUiLCJTZXROZXdXaW5kb3dGbGFnIiwiYXR0YWNoZWRGaWxlTmFtZSIsImZpbGVBdHRhY2htZW50QW5ub3RJbmRleCIsInJlbGF0aW9uc2hpcCIsImVtYmVkZWRHb3RvVGFyZ2V0IiwiZW1iZWRlZFRhcmdldCIsInNldEF0dGFjaGVkRmlsZU5hbWUiLCJzZXRGaWxlQXR0YWNobWVudEFubm90SW5kZXgiLCJzZXRQYWdlSW5kZXgiLCJzZXRSZWxhdGlvbnNoaXAiLCJTZXRUYXJnZXQiLCJlbWJlZGRlZEdvdG9UYXJnZXQiLCJnZXRBdHRhY2hlZEZpbGVOYW1lIiwiZ2V0RmlsZUF0dGFjaG1lbnRBbm5vdEluZGV4IiwiZ2V0UGFnZUluZGV4IiwiZ2V0UmVsYXRpb25zaGlwIiwiR2V0QXR0YWNoZWRGaWxlTmFtZSIsIkdldEZpbGVBdHRhY2htZW50QW5ub3RJbmRleCIsIkdldFJlbGF0aW9uc2hpcCIsIlNldEF0dGFjaGVkRmlsZU5hbWUiLCJhbm5vdEluZGV4IiwiU2V0RmlsZUF0dGFjaG1lbnRBbm5vdEluZGV4IiwiU2V0UGFnZUluZGV4IiwiU2V0UmVsYXRpb25zaGlwIiwiZmllbGROYW1lcyIsImdldEZpZWxkTmFtZXMiLCJoaWRlU3RhdGUiLCJnZXRIaWRlU3RhdGUiLCJ3U3RyaW5nQXJyYXkiLCJHZXRGaWVsZE5hbWVzIiwiR2V0SGlkZVN0YXRlIiwic2V0RmllbGROYW1lcyIsInNldEhpZGVTdGF0ZSIsImZpZWxkV1N0cmluZ0FycmF5IiwiV1N0cmluZ0FycmF5IiwiZmllbGROYW1lIiwiU2V0RmllbGROYW1lcyIsIlNldEhpZGVTdGF0ZSIsImdldEZERkZpbGVTcGVjIiwic2V0RkRGRmlsZVNwZWMiLCJHZXRGREZGaWxlU3BlYyIsImhvc3QiLCJTZXRGREZGaWxlU3BlYyIsImphdmFzY3JpcHQiLCJnZXRTY3JpcHQiLCJzZXRTY3JpcHQiLCJzY3JpcHQiLCJTZXRTY3JpcHQiLCJnZXRGaWxlU3BlYyIsIkdldEZpbGVTcGVjIiwic2V0RmlsZVNwZWMiLCJTZXRGaWxlU3BlYyIsImdldE5hbWUiLCJzZXROYW1lIiwiU2V0TmFtZSIsInJlbmRpdGlvbkNvdW50IiwiR2V0UmVuZGl0aW9uQ291bnQiLCJyZW5kaXRpb25zIiwiY19yZW5kaXRpb24iLCJHZXRSZW5kaXRpb24iLCJjb250ZW50VHlwZVN0ciIsIkdldE1lZGlhQ2xpcENvbnRlbnRUeXBlIiwiY29udGVudFR5cGUiLCJjX2ZpbGVTcGVjIiwiR2V0TWVkaWFDbGlwRmlsZSIsIkdldEZpbGVOYW1lIiwiZ2V0RmlsZVNpemUiLCJmaWxlQnVmZmVyIiwidTgiLCJnZXRGbGFncyIsInNldEZsYWdzIiwiZmllbGROYW1lc0FyciIsIk51bWJlciIsImdldFVSTCIsInNldFVSTCIsIkdldFVSTCIsIlNldFVSTCIsInVyaSIsImdldFVSSSIsInNldFVSSSIsInVyaU9iaiIsIkdldFVSSSIsIlNldFVSSSIsIkFubm90IiwicmVjdEluZm8iLCJyZWN0TGVmdCIsInJlY3RSaWdodCIsInJlY3RUb3AiLCJyZWN0Qm90dG9tIiwiYm9yZGVySW5mbyIsIkdldEJvcmRlckluZm8iLCJkYXNoZXMiLCJib3JkZXJXaWR0aCIsImJvcmRlckNvbG9yIiwiR2V0Qm9yZGVyQ29sb3IiLCJtb2RpZmllZERhdGVUaW1lIiwibW9kaWZpZWRUaW1lc3RhbXAiLCJHZXRNb2RpZmllZERhdGVUaW1lIiwiSXNWYWxpZCIsIlRvVVRDVGltZSIsIlVUQyIsInllYXIiLCJtb250aCIsImRheSIsImhvdXIiLCJtaW51dGUiLCJzZWNvbmQiLCJtaWxsaXNlY29uZHMiLCJ0eXBlQWxpYXMiLCJyZWN0SXNFbXB0eSIsImlzTWFya3VwIiwiSXNNYXJrdXAiLCJjb250ZW50IiwiR2V0Q29udGVudCIsImNsb3VkSW50ZW5zaXR5IiwiY2xvdWRfaW50ZW5zaXR5IiwiZGFzaFBoYXNlIiwiZGFzaF9waGFzZSIsImdldFN1bW1hcnkiLCJpZ25vcmVJRCIsInNldFVuaXF1ZUlkIiwic2V0Q29udGVudCIsIlNldENvbnRlbnQiLCJzZXRCb3JkZXJDb2xvciIsIklzR3JvdXBlZCIsImdyb3VwRWxlbWVudHMiLCJHZXRHcm91cEVsZW1lbnRzIiwibWFya3VwIiwiU2V0Qm9yZGVyQ29sb3IiLCJpc1N1Y2Nlc3MiLCJzZXRSZWN0IiwiTW92ZSIsIm1vdmUiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0VG9wIiwiUmVjdE9wZXJhdG9yIiwib24iLCJleHRyYWN0IiwibW92ZVRvIiwic2V0Qm9yZGVyU3R5bGUiLCJzdHlsZVBhcmFtIiwiQm9yZGVySW5mb1N0eWxlIiwiQk9SREVSX1NUWUxFIiwiREFTSEVEIiwiZV9EYXNoZWQiLCJkYXNocyIsIkZsb2F0QXJyYXkiLCJTZXRTaXplIiwiZWxlSW5kZXgiLCJTZXRBdCIsIkJFVkVMRUQiLCJlX0JldmVsZWQiLCJTT0xJRCIsImVfU29saWQiLCJDTE9VRFkiLCJlX0Nsb3VkeSIsIlNldEJvcmRlckluZm8iLCJzZXRCb3JkZXJXaWR0aCIsImdzZGsiLCJzZXRNb2RpZmllZERhdGVUaW1lIiwiZGF0ZVRpbWUiLCJUb0RhdGVUaW1lIiwiU2V0TW9kaWZpZWREYXRlVGltZSIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsIm1pbGxpIiwiZ2V0TWlsbGlzZWNvbmRzIiwiaG91clRpbWVab25lT2Zmc2V0IiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJtaW51dGVUaW1lWm9uZU9mZnNldCIsIkRhdGVUaW1lIiwiaW50ZW5zaXR5IiwiY29udGVudHMiLCJkaWN0cyIsIlNldEF0U3RyaW5nIiwiZV9TcXVpZ2dseSIsIlNxdWlnZ2x5IiwiZV9TdHJpa2VPdXQiLCJTdHJpa2VPdXQiLCJlX1VuZGVybGluZSIsIlVuZGVybGluZSIsImVfTGluZSIsIkxpbmUiLCJlX1BvbHlMaW5lIiwiUG9seUxpbmUiLCJlX0ZpbGVBdHRhY2htZW50IiwiRmlsZUF0dGFjaG1lbnQiLCJlX05vdGUiLCJOb3RlIiwiZV9DaXJjbGUiLCJDaXJjbGUiLCJlX0NhcmV0IiwiQ2FyZXQiLCJlX1BvbHlnb24iLCJQb2x5Z29uIiwiZV9GcmVlVGV4dCIsIkZyZWVUZXh0IiwiZV9TcXVhcmUiLCJTcXVhcmUiLCJlX0luayIsIkluayIsImVfU3RhbXAiLCJTdGFtcCIsImVfTGluayIsIkxpbmsiLCJlX1NjcmVlbiIsIlNjcmVlbiIsImVfV2lkZ2V0IiwiV2lkZ2V0IiwiZV9Qb3B1cCIsIlBvcHVwIiwiZV9SZWRhY3QiLCJSZWRhY3QiLCJtb3ZlUmVjdEJ5Q2hhckluZGV4IiwibmV3QW5ub3RSZWN0IiwiYW5ub3RXaWR0aCIsImFubm90SGVpZ2h0IiwiYmFzZUpzb24iLCJpbm5lclJlY3QiLCJHZXRJbm5lclJlY3QiLCJpc1JlcGxhY2UiLCJpbnRlbnQiLCJzdWJqZWN0IiwiX3JvdGF0ZSIsImFwIiwiU2V0QXRNYXRyaXgiLCJncm91cEVsZW1lbnRzQ291bnQiLCJyZXBsYWNlVHlwZXMiLCJNYXJrdXBBbm5vdCIsIl9jYWxjdWxhdGVSZWN0RGlmZmVyIiwic3VidHJhY3QiLCJzZXRJbm5lclJlY3QiLCJTZXRJbm5lclJlY3QiLCJnZXRJbm5lclJlY3QiLCJ0b1BsYWluT2JqZWN0IiwiZmlsbENvbG9yIiwiR2V0RmlsbENvbG9yIiwic2V0RmlsbENvbG9yIiwiX3NldEZpbGxDb2xvciIsInNldEljb25OYW1lIiwiaWNvbk5hbWUiLCJTZXRJY29uTmFtZSIsInNldEZpbGUiLCJJbnRlbnRzIiwiRlJFRVRFWFRfQ0FMTE9VVCIsImNhbGxvdXRMaW5lRW5kaW5nU3R5bGUiLCJHZXRDYWxsb3V0TGluZUVuZGluZ1N0eWxlIiwiY2FsbG91dExpbmVQb2ludHMiLCJHZXRDYWxsb3V0TGluZVBvaW50cyIsInBvaW50cyIsImp1c3RpZmljYXRpb24iLCJkZWZhdWx0QXBwZWFyYW5jZSIsImZvbnRKc29uIiwiZmFtaWx5TmFtZSIsIkdldEZhbWlseU5hbWUiLCJiYXNlTmFtZSIsIkdldEJhc2VGb250TmFtZSIsImFzY2VudCIsIkdldEFzY2VudCIsImRlc2NlbnQiLCJHZXREZXNjZW50IiwiSXNJdGFsaWMiLCJJc0JvbGQiLCJuYW1lS2V5Iiwic3R5bGVzIiwiR2V0U3R5bGVzIiwiQ2hhcnNldCIsImVfQ2hhcnNldERlZmF1bHQiLCJHZXRGb250VHlwZSIsIkZvbnRUeXBlcyIsImVfRm9udFR5cGVDSURGb250IiwiSXNFbWJlZGRlZCIsImlzRW1iZWRkZWQiLCJJc1N0YW5kYXJkRm9udCIsImlzU3RhbmRhcmQiLCJzdGFuZGFyZElkIiwiR2V0U3RhbmRhcmQxNEZvbnQiLCJnZXRGb250TWF0Y2giLCJzdHlsZUZpbGxDb2xvciIsInNldENhbGxvdXRMaW5lRW5kaW5nU3R5bGUiLCJlbmRpbmdTdHlsZSIsIlNldENhbGxvdXRMaW5lRW5kaW5nU3R5bGUiLCJzZXRDYWxsb3V0TGluZVBvaW50cyIsInBvaW50RkFycmF5IiwiUG9pbnRGQXJyYXkiLCJTZXRDYWxsb3V0TGluZVBvaW50cyIsInNldERlZmF1bHRBcCIsImRlZmF1bHRGb250IiwiRm9udCIsIm5ld0RlZmF1bHRBcCIsImdldFdvZmZCbG9iIiwiZ2V0V29mZiIsIlBERkZvbnRNZ3IiLCJHZXRXb2ZmRGF0YSIsImpyIiwiSGFzS2V5IiwiaXNBcmVhIiwiVGV4dE1hcmt1cEFubm90IiwiaW5rTGlzdFBhdGgiLCJHZXRJbmtMaXN0IiwiaW5rTGlzdCIsIkdldFBvaW50Q291bnQiLCJHZXRQb2ludCIsIkdldFBvaW50VHlwZSIsInNldElua0xpc3QiLCJwYXRoIiwiUGF0aCIsImlua1BvaW50IiwiTW92ZVRvIiwiTGluZVRvIiwiU2V0SW5rTGlzdCIsImNhbGN1bGF0ZUxlbnRoIiwibWVhc3VyZVJhdGlvIiwiR2V0TWVhc3VyZVJhdGlvIiwibWVhc3VyZVVuaXQiLCJHZXRNZWFzdXJlVW5pdCIsIkdldEVuZFBvaW50IiwiR2V0U3RhcnRQb2ludCIsImRlbHRhWCIsImRlbHRhWSIsInNxcnQiLCJ0cmFuc1VuaXQiLCJsZWZ0TGVuZ3RoSW5QdCIsInRvRml4ZWQiLCJlbmFibGVDYXB0aW9uIiwiZW5hYmxlIiwiRW5hYmxlQ2FwdGlvbiIsIlJlbW92ZVByb3BlcnR5IiwiU2V0U3R5bGVGaWxsQ29sb3IiLCJzZXRDYXB0aW9uT2Zmc2V0Iiwic2V0Q2FwdGlvblBvc2l0aW9uVHlwZSIsImNhcF9wb3NpdGlvbiIsInNldEVuZFBvaW50IiwiU2V0RW5kUG9pbnQiLCJzZXRMZWFkZXJMaW5lRXh0ZW5zaW9uTGVuZ3RoIiwiZXh0ZW5zaW9uX2xlbmd0aCIsInNldExlYWRlckxpbmVMZW5ndGgiLCJTZXRMZWFkZXJMaW5lTGVuZ3RoIiwic2V0TGVhZGVyTGluZU9mZnNldCIsInNldExpbmVFbmRTdHlsZSIsImVuZGluZ19zdHlsZSIsImVudW1UeXBlIiwiRW5kaW5nU3R5bGUiLCJTZXRMaW5lRW5kU3R5bGUiLCJzZXRMaW5lU3RhcnRTdHlsZSIsIlNldExpbmVTdGFydFN0eWxlIiwic2V0TWVhc3VyZUNvbnZlcnNpb25GYWN0b3IiLCJtZWFzdXJlX3R5cGUiLCJmYWN0b3IiLCJzZXRNZWFzdXJlUmF0aW8iLCJyYXRpbyIsInNldE1lYXN1cmVVbml0IiwidW5pdCIsInNldFN0YXJ0UG9pbnQiLCJTZXRTdGFydFBvaW50Iiwic3RhcnRTdHlsZSIsImVuZFN0eWxlIiwiTGluZUVuZGluZ05hbWUiLCJtZWFzdXJlIiwiU2V0TWVhc3VyZUNvbnZlcnNpb25GYWN0b3IiLCJTZXRNZWFzdXJlVW5pdCIsIlNldE1lYXN1cmVSYXRpbyIsIm1hcmt1cEFubm90SnNvbiIsIkdldENhcHRpb25PZmZzZXQiLCJjYXBQb3MiLCJHZXRDYXB0aW9uUG9zaXRpb25UeXBlIiwibGVhZGVyTGluZUV4dGVuc2lvbkxlbmd0aCIsIkdldExlYWRlckxpbmVFeHRlbnNpb25MZW5ndGgiLCJsZWFkZXJMaW5lTGVuZ3RoIiwiR2V0TGVhZGVyTGluZUxlbmd0aCIsImxlYWRlckxpbmVPZmZzZXQiLCJHZXRMZWFkZXJMaW5lT2Zmc2V0IiwiR2V0TGluZUVuZFN0eWxlIiwiR2V0TGluZVN0YXJ0U3R5bGUiLCJtZWFzdXJlQ29udmVyc2lvbkZhY3RvciIsIkdldE1lYXN1cmVDb252ZXJzaW9uRmFjdG9yIiwiR2V0U3R5bGVGaWxsQ29sb3IiLCJoYXNDYXB0aW9uIiwiSGFzQ2FwdGlvbiIsImxpbmVKc29uIiwiY2FwdGlvbk9mZnNldCIsInN0ciIsImhpZ2hsaWdodGluZ01vZGUiLCJHZXRIaWdobGlnaHRpbmdNb2RlIiwic2V0SGlnaGxpZ2h0aW5nTW9kZSIsIkhpZ2hsaWdodGluZ01vZGUiLCJtb2RlQXJyIiwiZV9IaWdobGlnaHRpbmdOb25lIiwiZV9IaWdobGlnaHRpbmdJbnZlcnQiLCJlX0hpZ2hsaWdodGluZ091dGxpbmUiLCJlX0hpZ2hsaWdodGluZ1B1c2giLCJlX0hpZ2hsaWdodGluZ1RvZ2dsZSIsIlNldEhpZ2hsaWdodGluZ01vZGUiLCJzZXRBY3Rpb24iLCJTZXRBY3Rpb24iLCJiaW5kIiwiR2V0SW50ZW50IiwicG9wdXBTdW1tYXJ5IiwicG9wdXAiLCJHZXRQb3B1cCIsImdyb3VwRWxlbWVudHNTdW1tYXJ5IiwiZ3JvdXBIZWFkZXJTdW1tYXJ5IiwiaXNHcm91cGVkIiwiaXNHcm91cEhlYWRlciIsImdyb3VwSGVhZGVyIiwiR2V0R3JvdXBIZWFkZXIiLCJyZXBsaWVzU3VtbWFyeSIsInJlcGx5Q291bnQiLCJHZXRSZXBseUNvdW50IiwicmVwbHlOb3RlIiwiR2V0UmVwbHkiLCJzdW1tYXJ5IiwibWFya2VkU3RhdGVzU3VtbWFyeSIsInJldmlld1N0YXRlc1N1bW1hcnkiLCJTdGF0ZU1vZGVsIiwiZV9TdGF0ZU1vZGVsTWFya2VkIiwiZV9TdGF0ZU1vZGVsUmV2aWV3IiwibWFya2VkU3RhdGVDb3VudCIsIkdldFN0YXRlQW5ub3RDb3VudCIsIm1hcmtlZFN0YXRlTm90ZSIsIkdldFN0YXRlQW5ub3QiLCJyZXZpZXdTdGF0ZUNvdW50IiwicmV2aWV3U3RhdGVOb3RlIiwiY3JlYXRlRGF0ZVRpbWUiLCJHZXRDcmVhdGlvbkRhdGVUaW1lIiwiY3JlYXRpb25UaW1lc3RhbXAiLCJSVE9iaiIsIlJUIiwiSVJUIiwiR2V0T3BhY2l0eSIsIkdldFN1YmplY3QiLCJzZXRPcGFjaXR5IiwiZ2V0U2hvdWxkTW9kaWZ5QW5ub3RzIiwiU2V0T3BhY2l0eSIsImdldEpyQW5ub3RBcnJheUlkcyIsInNldFN1YmplY3QiLCJTZXRTdWJqZWN0Iiwic2V0VGl0bGUiLCJzZXRDcmVhdGVEYXRlVGltZSIsIlNldENyZWF0aW9uRGF0ZVRpbWUiLCJhZGRSZXBseSIsInJlcGx5QW5ub3QiLCJBZGRSZXBseSIsImN1cnJlbnRVc2VyTmFtZSIsImFkZFJldmlld1N0YXRlIiwiTUFSS1VQX0FOTk9UQVRJT05fU1RBVEUiLCJBQ0NFUFRFRCIsIkNBTkNFTExFRCIsIkNPTVBMRVRFRCIsIk5PTkUiLCJSRUpFQ1RFRCIsIl9hZGRTdGF0ZSIsImFkZE1hcmtlZFN0YXRlIiwiTUFSS0VEIiwiVU5NQVJLRUQiLCJzdGF0ZU1vZGVsIiwic3RhdGVBbm5vdCIsIkFkZFN0YXRlQW5ub3QiLCJjb252ZXJ0VG9FbmdpbmVTdGF0ZVZhbHVlIiwicmVtb3ZlQWxsU3RhdGVBbm5vdHMiLCJSZW1vdmVBbGxTdGF0ZUFubm90cyIsInN0YXRlTmFtZSIsIk1hcmt1cFN0YXRlIiwiZV9TdGF0ZUFjY2VwdGVkIiwiZV9TdGF0ZUNhbmNlbGxlZCIsImVfU3RhdGVDb21wbGV0ZWQiLCJlX1N0YXRlTm9uZSIsImVfU3RhdGVSZWplY3RlZCIsImVfU3RhdGVVbm1hcmtlZCIsImVfU3RhdGVNYXJrZWQiLCJyZW1vdmVkSWRzIiwicmVtb3ZlUmVsYXRpdmVzIiwibWFya3VwSWQiLCJqckFubm90IiwiZ1JlbW92ZWRJZHMiLCJhcHBseSIsInJlbW92ZWRJZCIsInBvcHVwSWQiLCJyZXBseUlkcyIsIlJlbW92ZUFsbFJlcGxpZXMiLCJtYXJrZWRTdGF0ZXNJZHMiLCJyZXZpZXdTdGF0ZXNJZHMiLCJzZXRJbnRlbnQiLCJTZXRJbnRlbnQiLCJTZXRQb3B1cCIsIlNldEZpbGxDb2xvciIsImZpbHRlclR5cGUiLCJfc2V0Qm9yZGVyU3R5bGUiLCJzZXRPcGVuU3RhdHVzIiwiaXNPcGVuIiwiU2V0T3BlblN0YXR1cyIsInNldFN0YXRlTmFtZSIsIklzU3RhdGVBbm5vdCIsIm5ld1N0YXRlTmFtZSIsIkdldFN0YXRlTW9kZWwiLCJTZXRTdGF0ZSIsImJhc2ljSW5mbyIsIkdldEljb25OYW1lIiwiaXNTdGF0ZUFubm90IiwiR2V0U3RhdGUiLCJzdGF0ZSIsIkdldE9wZW5TdGF0dXMiLCJ1cGRhdGVWZXJ0ZXhlcyIsInZlcnRleGVzIiwiR2V0VmVydGV4ZXMiLCJTZXRWZXJ0ZXhlcyIsInNldFZlcnRleGVzIiwiZW5naW5lVmVydGV4ZXMiLCJqc29uVmVydGV4ZXMiLCJwb2x5TGluZUpzb24iLCJib3JkZXJTdHlsZSIsImJvcmRlclN0eWxlUGFyYW0iLCJvcGVuU3RhdHVzIiwic2V0UmVkYWN0QXBwbHlGaWxsQ29sb3IiLCJTZXRBcHBseUZpbGxDb2xvciIsInF1YWRQb2ludHMiLCJnZXRRdWFkUG9pbnRzQXJyYXkiLCJhcHBseUZpbGxDb2xvciIsIkdldEFwcGx5RmlsbENvbG9yIiwicXVhZFBvaW50Q291bnQiLCJ0ZXh0QXJyIiwicXVhZFBvaW50IiwicmVjdFRleHQiLCJHZXRUZXh0SW5SZWN0IiwidGVzdCIsInN0YXJ0UXVhZFBvaW50Iiwic3RhcnRSYWRpYW4iLCJhdGFuMiIsInN0YXJ0TWF0cml4IiwiUEkiLCJwb3ciLCJmeCIsImEiLCJmeSIsImIiLCJmIiwic3RhcnRDaGFySW5mbyIsImVuZFF1YWRQb2ludCIsImVuZFJhZGlhbiIsImVuZE1hdHJpeCIsImVuZENoYXJJbmZvIiwiY29udGludW91c1RleHQiLCJjX2RpY3QiLCJjX3F1YWRfcG9pbnRzIiwiY19hcnJheSIsInF1YWRQb2ludHNDb3VudCIsIkdldEZsb2F0IiwidXBkYXRlUXVhZFBvaW50c0J5Q2hhckluZGV4IiwiY19wZGZfYXJyYXkiLCJQREZBcnJheSIsInF1YWRQb2ludEFycmF5IiwibGVmdFRvcCIsInJpZ2h0VG9wIiwibGVmdEJvdHRvbSIsInJpZ2h0Qm90dG9tIiwiZmlyc3RRdWFkIiwic2Vjb25kUXVhZCIsInRoaXJkUXVhZCIsImZvdXJ0aFF1YWQiLCJBZGRGbG9hdCIsImdldE9wYWNpdHkiLCJnZXRUaXRsZSIsIm11bHRpQnVmZmVyIiwic2V0TXVsdGlNZWRpYSIsInNldEltYWdlIiwiY19hY3Rpb24iLCJjX3JlbmRpdGlvbl9hY3Rpb24iLCJTZXRPcGVyYXRpb25UeXBlIiwiT3BlcmF0aW9uVHlwZSIsImVfT3BUeXBlQXNzb2NpYXRlIiwiU2V0U2NyZWVuQW5ub3QiLCJSZW5kaXRpb24iLCJTZXRSZW5kaXRpb25OYW1lIiwiU2V0TWVkaWFDbGlwTmFtZSIsImNfZmlsZV9zcGVjIiwiU2V0RmlsZU5hbWUiLCJTZXRNZWRpYUNsaXBGaWxlIiwiU2V0TWVkaWFDbGlwQ29udGVudFR5cGUiLCJJbnNlcnRSZW5kaXRpb24iLCJTZXRJbWFnZSIsInJvdGF0aW9uVHlwZSIsImljb25Qcm92aWRlciIsInNldEljb25DYXRhbG9nIiwiaWNvbkNhdGFnb3J5IiwiaWNvbiIsInNldEFubm90QVBCaXRtYXAiLCJvcmlSb3RhdGUiLCJUZXh0TWFya3VwIiwiR2V0UXVhZFBvaW50cyIsInF1YWRQb2ludEFyciIsImZpcnN0IiwidGhpcmQiLCJmb3VydGgiLCJXaWR0aCIsIkhlaWdodCIsImNvb3JkcyIsImVuZ2luZVdpZGdldCIsInVwZGF0ZU1LUHJvcGVydHkiLCJzdHJNSyIsIm1rIiwiUERGRGljdGlvbmFyeSIsIlNldEF0UmVmZXJlbmNlIiwiU2V0TUtCb3JkZXJDb2xvciIsIlNldE1LQmFja2dyb3VuZENvbG9yIiwiU2V0TUtOb3JtYWxDYXB0aW9uIiwiU2V0TUtEb3duQ2FwdGlvbiIsIlNldE1LUm9sbG92ZXJDYXB0aW9uIiwic2V0QVMiLCJBUyIsIndpZGdldERpY3Rpb25hcnkiLCJhc1N0ciIsIkNyZWF0ZUZyb21OYW1lIiwiYW5ub3RKc29uIiwiZW5naW5lQWN0aW9uIiwiQXBTdGF0ZXMiLCJBcFN0YXRlIiwibm9ybWFsSWNvbiIsInJvbGxvdmVySWNvbiIsImRvd25JY29uIiwiTlJlZiIsIk5TdHJlYW0iLCJORGljdCIsIk1vdmVOZXh0IiwiR2V0S2V5IiwiSGFzTUtFbnRyeSIsIk1LRW50cnkiLCJlX01LRW50cnlCYWNrZ3JvdW5kQ29sb3IiLCJHZXRNS0JhY2tncm91bmRDb2xvciIsIkdldE1LQm9yZGVyQ29sb3IiLCJlX01LRW50cnlCb3JkZXJDb2xvciIsImRvd25DYXB0aW9uIiwiR2V0TUtEb3duQ2FwdGlvbiIsImNhcHRpb25SZWxhdGlvbiIsIkdldE1LSWNvbkNhcHRpb25SZWxhdGlvbiIsImljb25GaXQiLCJHZXRNS0ljb25GaXQiLCJub3JtYWxDYXB0aW9uIiwiR2V0TUtOb3JtYWxDYXB0aW9uIiwicm9sbG92ZXJDYXB0aW9uIiwiR2V0TUtSb2xsb3ZlckNhcHRpb24iLCJHZXRNS1JvdGF0aW9uIiwiZmllbGRUeXBlIiwiY29udHJvbEluZGV4IiwiZml0Qm91bmRzIiwiZml0X2JvdW5kcyIsImhvcml6b250YWxGcmFjdGlvbiIsImhvcml6b250YWxfZnJhY3Rpb24iLCJpc1Byb3BvcnRpb25hbFNjYWxpbmciLCJpc19wcm9wb3J0aW9uYWxfc2NhbGluZyIsInNjYWxlV2F5VHlwZSIsInNjYWxlX3dheV90eXBlIiwidmVydGljYWxGcmFjdGlvbiIsInZlcnRpY2FsX2ZyYWN0aW9uIiwiTUtCb3JkZXJDb2xvciIsImdldEVuZ2luZUFubm90VHlwZSIsImNhcmV0IiwiZnJlZXRleHQiLCJmaWxlYXR0YWNobWVudCIsImluayIsImxpbmUiLCJsaW5rIiwiY2lyY2xlIiwic3F1YXJlIiwicG9seWdvbiIsInBvbHlsaW5lIiwic291bmQiLCJlX1NvdW5kIiwic3F1aWdnbHkiLCJzdGFtcCIsInN0cmlrZW91dCIsInVuZGVybGluZSIsInJlZGFjdCIsInBzaW5rIiwiZV9QU0luayIsIm1vdmllIiwiZV9Nb3ZpZSIsInNjcmVlbiIsInByaW50ZXJtYXJrIiwiZV9QcmludGVyTWFyayIsInRyYXBuZXQiLCJlX1RyYXBOZXQiLCJlX1dhdGVybWFyayIsImVfM0QiLCJlX1Vua25vd25UeXBlIiwiQ3JlYXRlRml0QkJveCIsIkNyZWF0ZUZpdEJIb3J6IiwiQ3JlYXRlRml0SG9yeiIsIkNyZWF0ZUZpdFBhZ2UiLCJDcmVhdGVGaXRSZWN0IiwiQ3JlYXRlRml0VmVydCIsImNyZWF0ZUZyb21QREZBcnJheSIsIkNyZWF0ZUZyb21QREZBcnJheSIsInBkZkFycmF5Iiwiem9vbUZhY3RvciIsImdldFRvcCIsImdldEJvdHRvbSIsImdldExlZnQiLCJnZXRSaWdodCIsImdldFpvb21GYWN0b3IiLCJ6b29tTW9kZSIsImdldFpvb21Nb2RlIiwiR2V0Qm90dG9tIiwiR2V0UmlnaHQiLCJnZXREZXN0QXJyYXkiLCJHZXREZXN0QXJyYXkiLCJHZXRab29tRmFjdG9yIiwiR2V0Wm9vbU1vZGUiLCJFbWJlZCIsInBhcmVudCIsImRlc2NyaXB0aW9uIiwiZ2V0RGVzY3JpcHRpb24iLCJnZXREaWN0IiwiZmlsZURhdGEiLCJnZXRGaWxlRGF0YSIsImdldEZpbGVOYW1lIiwic3VidHlwZSIsImdldFN1YnR5cGUiLCJndEFzc29jaXRlRmlsZVJlbGF0aW9uc2hpcCIsIkdldEFzc29jaXRlRmlsZVJlbGF0aW9uc2hpcCIsImdldENoZWNrc3VtIiwiY2hlY2tzdW0iLCJHZXRDaGVja3N1bSIsImdldENyZWF0aW9uRGF0ZVRpbWUiLCJjcmVhdGVUaW1lIiwiZGVzIiwiR2V0RGVzY3JpcHRpb24iLCJHZXRGaWxlRGF0YSIsImdldE1vZGlmaWVkRGF0ZVRpbWUiLCJtb2RpZmllZFRpbWUiLCJHZXRTdWJ0eXBlIiwic2V0QXNzb2NpdGVGaWxlUmVsYXRpb25zaGlwIiwiU2V0QXNzb2NpdGVGaWxlUmVsYXRpb25zaGlwIiwic2V0Q2hlY2tzdW0iLCJTZXRDaGVja3N1bSIsInNldENyZWF0aW9uRGF0ZVRpbWUiLCJzZXREZXNjcmlwdGlvbiIsIlNldERlc2NyaXB0aW9uIiwic2V0U3VidHlwZSIsIlNldFN1YnR5cGUiLCJFeHBvcnRUb0ZpbGVTdHJlYW0iLCJibXAiLCJHZXRGcmFtZUJpdG1hcCIsInBvc2l0aW9uVHlwZSIsIlBvc2l0aW9uIiwiZV9Qb3NUb3BMZWZ0IiwiZV9Qb3NUb3BDZW50ZXIiLCJlX1Bvc1RvcFJpZ2h0IiwiZV9Qb3NDZW50ZXJMZWZ0IiwiZV9Qb3NDZW50ZXIiLCJlX1Bvc0NlbnRlclJpZ2h0IiwiZV9Qb3NCb3R0b21MZWZ0IiwiZV9Qb3NCb3R0b21DZW50ZXIiLCJlX1Bvc0JvdHRvbVJpZ2h0IiwiZmxhZ3NUeXBlIiwiV2F0ZXJtYXJrU2V0dGluZ3NGbGFncyIsImVfRmxhZ0FTUGFnZUNvbnRlbnRzIiwiZV9GbGFnQVNBbm5vdCIsImVfRmxhZ09uVG9wIiwiZV9GbGFnTm9QcmludCIsImVfRmxhZ0ludmlzaWJsZSIsImZvbnRUeXBlIiwiU3RhbmRhcmRJRCIsImVfU3RkSURDb3VyaWVyIiwiZV9TdGRJRENvdXJpZXJCIiwiZV9TdGRJRENvdXJpZXJCSSIsImVfU3RkSURDb3VyaWVySSIsImVfU3RkSURIZWx2ZXRpY2EiLCJlX1N0ZElESGVsdmV0aWNhQiIsImVfU3RkSURIZWx2ZXRpY2FCSSIsImVfU3RkSURIZWx2ZXRpY2FJIiwiZV9TdGRJRFRpbWVzIiwiZV9TdGRJRFRpbWVzQiIsImVfU3RkSURUaW1lc0JJIiwiZV9TdGRJRFRpbWVzSSIsImVfU3RkSURTeW1ib2wiLCJlX1N0ZElEWmFwZkRpbmdiYXRzIiwiZm9udFN0eWxlVHlwZSIsIkZvbnRTdHlsZSIsImVfRm9udFN0eWxlTm9ybWFsIiwiZV9Gb250U3R5bGVVbmRlcmxpbmUiLCJhbGlnbm1lbnRUeXBlIiwiQWxpZ25tZW50IiwiZV9BbGlnbm1lbnRMZWZ0IiwiZV9BbGlnbm1lbnRDZW50ZXIiLCJlX0FsaWdubWVudFJpZ2h0IiwiciIsInQiLCJyZXF1aXJlIiwidSIsInAiLCJjYWxsIiwidG9CeXRlQXJyYXkiLCJmcm9tQnl0ZUFycmF5IiwibG9va3VwIiwicmV2TG9va3VwIiwiQXJyIiwibGVuIiwiZ2V0TGVucyIsImI2NCIsInZhbGlkTGVuIiwicGxhY2VIb2xkZXJzTGVuIiwibGVucyIsIl9ieXRlTGVuZ3RoIiwiYXJyIiwiY3VyQnl0ZSIsInRyaXBsZXRUb0Jhc2U2NCIsIm51bSIsImVuY29kZUNodW5rIiwidWludDgiLCJvdXRwdXQiLCJleHRyYUJ5dGVzIiwicGFydHMiLCJtYXhDaHVua0xlbmd0aCIsImxlbjIiLCJCUk9UTElfUkVBRF9TSVpFIiwiQlJPVExJX0lCVUZfU0laRSIsIkJST1RMSV9JQlVGX01BU0siLCJrQml0TWFzayIsIlVpbnQzMkFycmF5IiwiQnJvdGxpQml0UmVhZGVyIiwiaW5wdXQiLCJidWZfIiwiaW5wdXRfIiwicmVzZXQiLCJSRUFEX1NJWkUiLCJJQlVGX01BU0siLCJwcm90b3R5cGUiLCJidWZfcHRyXyIsInZhbF8iLCJwb3NfIiwiYml0X3Bvc18iLCJiaXRfZW5kX3Bvc18iLCJlb3NfIiwicmVhZE1vcmVJbnB1dCIsImRzdCIsImJ5dGVzX3JlYWQiLCJyZWFkIiwiZmlsbEJpdFdpbmRvdyIsInJlYWRCaXRzIiwibl9iaXRzIiwidmFsIiwiQ09OVEVYVF9MU0I2IiwiQ09OVEVYVF9NU0I2IiwiQ09OVEVYVF9VVEY4IiwiQ09OVEVYVF9TSUdORUQiLCJsb29rdXBPZmZzZXRzIiwiVWludDE2QXJyYXkiLCJCcm90bGlJbnB1dCIsIkJyb3RsaU91dHB1dCIsIkJyb3RsaURpY3Rpb25hcnkiLCJIdWZmbWFuQ29kZSIsIkJyb3RsaUJ1aWxkSHVmZm1hblRhYmxlIiwiQ29udGV4dCIsIlByZWZpeCIsIlRyYW5zZm9ybSIsImtEZWZhdWx0Q29kZUxlbmd0aCIsImtDb2RlTGVuZ3RoUmVwZWF0Q29kZSIsImtOdW1MaXRlcmFsQ29kZXMiLCJrTnVtSW5zZXJ0QW5kQ29weUNvZGVzIiwia051bUJsb2NrTGVuZ3RoQ29kZXMiLCJrTGl0ZXJhbENvbnRleHRCaXRzIiwia0Rpc3RhbmNlQ29udGV4dEJpdHMiLCJIVUZGTUFOX1RBQkxFX0JJVFMiLCJIVUZGTUFOX1RBQkxFX01BU0siLCJIVUZGTUFOX01BWF9UQUJMRV9TSVpFIiwiQ09ERV9MRU5HVEhfQ09ERVMiLCJrQ29kZUxlbmd0aENvZGVPcmRlciIsIk5VTV9ESVNUQU5DRV9TSE9SVF9DT0RFUyIsImtEaXN0YW5jZVNob3J0Q29kZUluZGV4T2Zmc2V0Iiwia0Rpc3RhbmNlU2hvcnRDb2RlVmFsdWVPZmZzZXQiLCJJbnQ4QXJyYXkiLCJrTWF4SHVmZm1hblRhYmxlU2l6ZSIsIkRlY29kZVdpbmRvd0JpdHMiLCJiciIsIkRlY29kZVZhckxlblVpbnQ4IiwibmJpdHMiLCJNZXRhQmxvY2tMZW5ndGgiLCJtZXRhX2Jsb2NrX2xlbmd0aCIsImlucHV0X2VuZCIsImlzX3VuY29tcHJlc3NlZCIsImlzX21ldGFkYXRhIiwiRGVjb2RlTWV0YUJsb2NrTGVuZ3RoIiwib3V0Iiwic2l6ZV9uaWJibGVzIiwic2l6ZV9ieXRlcyIsIm5leHRfYnl0ZSIsIm5leHRfbmliYmxlIiwiUmVhZFN5bWJvbCIsInRhYmxlIiwic3RhcnRfaW5kZXgiLCJiaXRzIiwiUmVhZEh1ZmZtYW5Db2RlTGVuZ3RocyIsImNvZGVfbGVuZ3RoX2NvZGVfbGVuZ3RocyIsIm51bV9zeW1ib2xzIiwiY29kZV9sZW5ndGhzIiwic3ltYm9sIiwicHJldl9jb2RlX2xlbiIsInJlcGVhdCIsInJlcGVhdF9jb2RlX2xlbiIsInNwYWNlIiwiY29kZV9sZW4iLCJleHRyYV9iaXRzIiwib2xkX3JlcGVhdCIsInJlcGVhdF9kZWx0YSIsIm5ld19sZW4iLCJSZWFkSHVmZm1hbkNvZGUiLCJhbHBoYWJldF9zaXplIiwidGFibGVzIiwidGFibGVfc2l6ZSIsInNpbXBsZV9jb2RlX29yX3NraXAiLCJtYXhfYml0c19jb3VudGVyIiwibWF4X2JpdHMiLCJzeW1ib2xzIiwiSW50MzJBcnJheSIsIm51bV9jb2RlcyIsImh1ZmYiLCJjb2RlX2xlbl9pZHgiLCJ2IiwiUmVhZEJsb2NrTGVuZ3RoIiwia0Jsb2NrTGVuZ3RoUHJlZml4Q29kZSIsIlRyYW5zbGF0ZVNob3J0Q29kZXMiLCJyaW5nYnVmZmVyIiwiTW92ZVRvRnJvbnQiLCJJbnZlcnNlTW92ZVRvRnJvbnRUcmFuc2Zvcm0iLCJ2X2xlbiIsIm10ZiIsIkh1ZmZtYW5UcmVlR3JvdXAiLCJudW1faHRyZWVzIiwiY29kZXMiLCJodHJlZXMiLCJkZWNvZGUiLCJuZXh0IiwiRGVjb2RlQ29udGV4dE1hcCIsImNvbnRleHRfbWFwX3NpemUiLCJjb250ZXh0X21hcCIsInVzZV9ybGVfZm9yX3plcm9zIiwibWF4X3J1bl9sZW5ndGhfcHJlZml4IiwicmVwcyIsIkRlY29kZUJsb2NrVHlwZSIsIm1heF9ibG9ja190eXBlIiwidHJlZXMiLCJ0cmVlX3R5cGUiLCJibG9ja190eXBlcyIsInJpbmdidWZmZXJzIiwiaW5kZXhlcyIsInR5cGVfY29kZSIsImJsb2NrX3R5cGUiLCJDb3B5VW5jb21wcmVzc2VkQmxvY2tUb091dHB1dCIsInJpbmdidWZmZXJfbWFzayIsInJiX3NpemUiLCJyYl9wb3MiLCJicl9wb3MiLCJuYnl0ZXMiLCJ3cml0ZSIsInRhaWwiLCJKdW1wVG9CeXRlQm91bmRhcnkiLCJuZXdfYml0X3BvcyIsInBhZF9iaXRzIiwiQnJvdGxpRGVjb21wcmVzc2VkU2l6ZSIsIkJyb3RsaURlY29tcHJlc3NCdWZmZXIiLCJvdXRwdXRfc2l6ZSIsIm91dHB1dF9idWZmZXIiLCJCcm90bGlEZWNvbXByZXNzIiwic3ViYXJyYXkiLCJ3aW5kb3dfYml0cyIsIm1heF9iYWNrd2FyZF9kaXN0YW5jZSIsIm1heF9kaXN0YW5jZSIsInJpbmdidWZmZXJfc2l6ZSIsInJpbmdidWZmZXJfZW5kIiwiZGlzdF9yYiIsImRpc3RfcmJfaWR4IiwicHJldl9ieXRlMSIsInByZXZfYnl0ZTIiLCJoZ3JvdXAiLCJibG9ja190eXBlX3RyZWVzIiwiYmxvY2tfbGVuX3RyZWVzIiwia1JpbmdCdWZmZXJXcml0ZUFoZWFkU2xhY2siLCJtYXhEaWN0aW9uYXJ5V29yZExlbmd0aCIsIm1ldGFfYmxvY2tfcmVtYWluaW5nX2xlbiIsImJsb2NrX2xlbmd0aCIsIm51bV9ibG9ja190eXBlcyIsImJsb2NrX3R5cGVfcmIiLCJibG9ja190eXBlX3JiX2luZGV4IiwiZGlzdGFuY2VfcG9zdGZpeF9iaXRzIiwibnVtX2RpcmVjdF9kaXN0YW5jZV9jb2RlcyIsImRpc3RhbmNlX3Bvc3RmaXhfbWFzayIsIm51bV9kaXN0YW5jZV9jb2RlcyIsImNvbnRleHRfbW9kZXMiLCJudW1fbGl0ZXJhbF9odHJlZXMiLCJkaXN0X2NvbnRleHRfbWFwIiwibnVtX2Rpc3RfaHRyZWVzIiwiY29udGV4dF9vZmZzZXQiLCJjb250ZXh0X21hcF9zbGljZSIsImxpdGVyYWxfaHRyZWVfaW5kZXgiLCJkaXN0X2NvbnRleHRfb2Zmc2V0IiwiZGlzdF9jb250ZXh0X21hcF9zbGljZSIsImRpc3RfaHRyZWVfaW5kZXgiLCJjb250ZXh0X2xvb2t1cF9vZmZzZXQxIiwiY29udGV4dF9sb29rdXBfb2Zmc2V0MiIsImNvbnRleHRfbW9kZSIsImh0cmVlX2NvbW1hbmQiLCJfb3V0IiwiX28xIiwiX28yIiwiY21kX2NvZGUiLCJyYW5nZV9pZHgiLCJpbnNlcnRfY29kZSIsImNvcHlfY29kZSIsImluc2VydF9sZW5ndGgiLCJjb3B5X2xlbmd0aCIsImRpc3RhbmNlX2NvZGUiLCJkaXN0YW5jZSIsImNvbnRleHQiLCJjb3B5X2RzdCIsImtJbnNlcnRSYW5nZUx1dCIsImtDb3B5UmFuZ2VMdXQiLCJrSW5zZXJ0TGVuZ3RoUHJlZml4Q29kZSIsImtDb3B5TGVuZ3RoUHJlZml4Q29kZSIsInBvc3RmaXgiLCJtaW5EaWN0aW9uYXJ5V29yZExlbmd0aCIsIm9mZnNldHNCeUxlbmd0aCIsIndvcmRfaWQiLCJzaGlmdCIsInNpemVCaXRzQnlMZW5ndGgiLCJtYXNrIiwid29yZF9pZHgiLCJ0cmFuc2Zvcm1faWR4Iiwia051bVRyYW5zZm9ybXMiLCJ0cmFuc2Zvcm1EaWN0aW9uYXJ5V29yZCIsIl94IiwiaW5pdCIsImJhc2U2NCIsImZzIiwiY29tcHJlc3NlZCIsImRpY3Rpb25hcnkiLCJNQVhfTEVOR1RIIiwiR2V0TmV4dEtleSIsInN0ZXAiLCJSZXBsaWNhdGVWYWx1ZSIsIk5leHRUYWJsZUJpdFNpemUiLCJyb290X2JpdHMiLCJyb290X3RhYmxlIiwiY29kZV9sZW5ndGhzX3NpemUiLCJzdGFydF90YWJsZSIsImxvdyIsInRhYmxlX2JpdHMiLCJ0b3RhbF9zaXplIiwic29ydGVkIiwiUHJlZml4Q29kZVJhbmdlIiwiYnVmIiwia0lkZW50aXR5Iiwia09taXRMYXN0MSIsImtPbWl0TGFzdDIiLCJrT21pdExhc3QzIiwia09taXRMYXN0NCIsImtPbWl0TGFzdDUiLCJrT21pdExhc3Q2Iiwia09taXRMYXN0NyIsImtPbWl0TGFzdDgiLCJrT21pdExhc3Q5Iiwia1VwcGVyY2FzZUZpcnN0Iiwia1VwcGVyY2FzZUFsbCIsImtPbWl0Rmlyc3QxIiwia09taXRGaXJzdDIiLCJrT21pdEZpcnN0MyIsImtPbWl0Rmlyc3Q0Iiwia09taXRGaXJzdDUiLCJrT21pdEZpcnN0NiIsImtPbWl0Rmlyc3Q3Iiwia09taXRGaXJzdDgiLCJrT21pdEZpcnN0OSIsInByZWZpeCIsInRyYW5zZm9ybSIsInN1ZmZpeCIsImtUcmFuc2Zvcm1zIiwiVG9VcHBlckNhc2UiLCJ3b3JkIiwic2tpcCIsInN0YXJ0X2lkeCIsInVwcGVyY2FzZSIsInByZWZpeF9wb3MiLCJzdWZmaXhfcG9zIiwiY3VzdG9tRW5jcnlwdERhdGEiLCJjdXN0b21TZWN1cml0eUhhbmRsZXIiLCJjdXN0b21TZWN1cml0eUNhbGxiYWNrIiwiaW5pdFNlY3VyaXR5SGFuZGxlciIsIkN1c3RvbUVuY3J5cHREYXRhIiwiQ3VzdG9tU2VjdXJpdHlIYW5kbGVyIiwiQ3VzdG9tU2VjdXJpdHlDYWxsYmFjayIsIkpTQ3JlYXRlQ29udGV4dCIsInN1YmZpbHRlciIsImVuY3J5cHRfaW5mbyIsIkpTUmVsZWFzZUNvbnRleHQiLCJKU0dldFVzZXJQZXJtaXNzaW9ucyIsIkpTSXNPd25lciIsIkpTR2V0Q2lwaGVyIiwiSlNHZXRFbmNyeXB0S2V5IiwiSlNHZXREZWNyeXB0ZWRTaXplIiwiSlNTdGFydERlY3J5cHRvciIsIm9ial9udW0iLCJnZW5fbnVtIiwiSlNEZWNyeXB0RGF0YSIsImRlY3J5cHRvciIsImVuY3J5cHRlZF9kYXRhIiwiZW5jcnlwdGVkX2RhdGFfbGVuIiwiSlNGaW5pc2hEZWNyeXB0b3IiLCJKU0dldEVuY3J5cHRlZFNpemUiLCJzcmNfZGF0YSIsInNyY19kYXRhX2xlbiIsIkpTRW5jcnlwdERhdGEiLCJvdXRfZHN0X2J1ZmZlciIsIm91dF9kc3RfYnVmZmVyX2xlbiIsImdldEN1c3RvbVNlY3VyaXR5Q2FsbGJhY2siLCJnZXRDdXN0b21TZWN1cml0eUhhbmRsZXIiLCJmb250TWFwIiwiY2hhclNldCIsImJvbGQiLCJib2xkSXRhbGljIiwicmVndWxhciIsInRoaW4iLCJsaWdodCIsIm5vcm1hbCIsIm1lZGl1bSIsImJsYWNrIiwibW9ub1JlZ3VsYXIiLCJtb25vQm9sZCIsInNlcmlmIiwic2VyaWZCb2xkIiwiZm9udE1hcENhY2hlIiwiZm9udE1hdGNoTWFwQ2FjaGUiLCJmb250QnVmZmVyQ2FjaGUiLCJnZXRDYWNoZUtleSIsImNhY2hlS2V5IiwiYWRqdXN0Rm9udE5hbWUiLCJmb250TWF0Y2giLCJtYXRjaEZvbnROYW1lIiwiaXNNYXRjaEZvbnROYW1lIiwibWF0Y2hTZXJpZiIsIm1hdGNoRml4ZWRQaXRjaCIsIm1hdGNoUmVndWxhciIsImZvbnRNYXRjaDIiLCJtYXRjaFdlaWdodCIsIm1hdGNoQm9sZCIsIm1hdGNoQm9sZEl0YWxpYyIsIm1hdGNoSXRhbGljIiwiZm9udE1hcE5hbWUiLCJmb250TWFwTmFtZXMiLCJmb250RmlsZU5hbWUiLCJjaGVja0JvbGRIZWF2eSIsImdldEZvbnRCdWZmZXJTeW5jIiwiZm9udEJhc2VVcmwiLCJnZXRDaGFyc2V0RnJvbU5hbWUiLCJGb3JtWE9iamVjdCIsImdyYXBoaWNPYmplY3QiLCJncmFwaGljc09iamVjdCIsIkdldEZvcm1YT2JqZWN0IiwibWFuYWdlciIsIkdPcyIsIkdldEdyYXBoaWNzT2JqZWN0cyIsIkNvbnRhaW5zIiwib2JqVHlwZSIsImZvcm1YTWF0cml4IiwiR2V0TWF0cml4IiwiVHJhbnNmb3JtUmVjdCIsImdyYXBoaWNzT2JqZWN0cyIsImNoaWRyZW4iLCJHcmFwaGljc09iamVjdCIsImNsaXBQYXRoc0pTT04iLCJjbGlwUGF0aENvdW50IiwiR2V0Q2xpcFBhdGhDb3VudCIsImNsaXBQYXRoIiwiR2V0Q2xpcFBhdGgiLCJjbGlwRmlsbE1vZGUiLCJHZXRDbGlwUGF0aEZpbGxNb2RlIiwiY2xpcFBhdGhKc29uIiwicG9pbnRJbmRleCIsImJsZW5kTW9kZSIsIkdldEJsZW5kTW9kZSIsImNsaXBUZXh0T2JqZWN0Q291bnQiLCJHZXRDbGlwVGV4dE9iamVjdENvdW50Iiwic3Ryb2tlQ29sb3IiLCJHZXRTdHJva2VDb2xvciIsImdyYXBoaWNTdGF0ZSIsIkdldEdyYXBoU3RhdGUiLCJjbGlwUGF0aHMiLCJncmFwaFN0YXRlIiwibGluZUNhcCIsImxpbmVfY2FwIiwibGluZUpvaW4iLCJsaW5lX2pvaW4iLCJsaW5lV2lkdGgiLCJsaW5lX3dpZHRoIiwibGluZUxpbWl0IiwibGluZV9saW1pdCIsInNldE1hdHJpeCIsIm9yaVJlY3QiLCJzeCIsInN5IiwiU2NhbGUiLCJTZXRNYXRyaXgiLCJyZW5kZXIiLCJvYmplY3RNYXRyaXgiLCJmbGlwQml0bWFwIiwiRmxpcCIsInVwZGF0ZUdyYXBoU3RhdGUiLCJwcm9wcmVydHkiLCJleHRyYVBhcmFtIiwiU2V0R3JhcGhTdGF0ZSIsInJlc2V0Q29udGVudCIsIm9yaUNvbG9yIiwiYWxwaGEiLCJTZXRTdHJva2VDb2xvciIsIlNldEZpbGxPcGFjaXR5IiwiU2V0U3Ryb2tlT3BhY2l0eSIsIlJlbW92ZUdyYXBoaWNzT2JqZWN0IiwiZV9UeXBlVGV4dCIsIlRleHRPYmplY3QiLCJQYXRoT2JqZWN0IiwiSW1hZ2VPYmplY3QiLCJlX1R5cGVGb3JtWE9iamVjdCIsImltYWdlT2JqZWN0IiwiR2V0SW1hZ2VPYmplY3QiLCJyYWRpYW4iLCJjZW50ZXIiLCJSb3RhdGVBdCIsIlBkZlBhZ2UiLCJncmFwaGljc01hbmFnZXIiLCJHZXRMYXN0R3JhcGhpY3NPYmplY3RQb3NpdGlvbiIsIkluc2VydEdyYXBoaWNzT2JqZWN0IiwiR2V0UGF0aE9iamVjdCIsIkdldFBhdGhEYXRhIiwicGF0aExpc3QiLCJwYXRoSW5mbyIsImZpbGxNb2RlIiwiR2V0RmlsbE1vZGUiLCJzdHJva2VTdGF0ZSIsIkdldFN0cm9rZVN0YXRlIiwibmVlZFN0cm9rZSIsIlNldFN0cm9rZVN0YXRlIiwiU2V0RmlsbE1vZGUiLCJGaWxsTW9kZSIsImVfRmlsbE1vZGVOb25lIiwiZV9GaWxsTW9kZVdpbmRpbmciLCJ0b3JhbmNlIiwiY3VycmVudFBvaW50IiwiZHgiLCJkeSIsInBlcmNlbnRhZ2UiLCJwYXJhbnRNYXRyaXgiLCJDb25jYXQiLCJiZXppZXJQb2ludCIsIlRyYW5zZm9ybVBvaW50IiwiYWJzIiwibGluZVBvaW50IiwiZ2V0UG9pbnRzTGVuZ3RoIiwiY2VpbCIsImJlemllclAiLCJjYWxjdWxhdGVCZXppZXJQb2ludEZvckN1YmljIiwicGF0aE9iamVjdCIsInBhdGhEYXRhIiwiYmV6aWVyUG9pbnRzIiwiQ3ViaWNCZXppZXJUbyIsIkNsb3NlRmlndXJlIiwiU2V0UGF0aERhdGEiLCJwMSIsInAyIiwicDAiLCJwMyIsIkdldFRleHRPYmplY3QiLCJ0ZXh0T2JqZWN0Iiwib3JpZ2luUG9zaXRpb24iLCJjaGFyc3BhY2UiLCJ3b3Jkc3BhY2UiLCJ0ZXh0bWF0cml4IiwidGV4dG1vZGUiLCJNb2RlIiwiZV9DaGFyc2V0QU5TSSIsInRleHRTdGF0ZSIsIkdldFRleHRTdGF0ZSIsImZvbnRfc2l6ZSIsIm9yaWdpbl9wb3NpdGlvbiIsIlNldFRleHRTdGF0ZSIsIlNldFRleHQiLCJ0ZXh0SW5mbyIsIkdldENoYXJzZXQiLCJHZXRUZXh0IiwiY2hhclNwYWNlIiwiR2V0TWF0cml4QSIsIkdldE1hdHJpeEIiLCJHZXRNYXRyaXhDIiwiR2V0TWF0cml4RCIsIm1vZGUiLCJ3b3JkU3BhY2UiLCJzZXRUZXh0IiwiY2hhciIsInNldEl0YWxpYyIsIm5ld0ZvbnQiLCJuZXdTdGFuZGFyZElkIiwic3R5bGVJdGFsaWMiLCJTdHlsZXMiLCJlX1N0eWxlSXRhbGljIiwic2V0Qm9sZCIsInN0eWxlQm9sZCIsImVfU3R5bGVzQm9sZCIsInNldEZvbnRTaXplIiwic2V0U3RhbmRhcmRGb250Iiwic2V0Rm9udEJ5TmFtZSIsIkdyYXBoaWNzT2JqZWN0RmF0b3J5IiwiZ2V0R3JhcGhpY09iamVjdHNJbmZvIiwib2JqZWN0TGlzdCIsInNldEdyYXBoaWNPYmplY3RQcm9wZXJ0eSIsIm9iamVjdEluZGV4IiwicHJvcGVydHlLZXkiLCJwcm9wZXJ0eVZhbHVlIiwiV2ViU0RLSWNvbnMiLCJkb2NzTWFwIiwiZm9ybXNNYXAiLCJpY29uQ2F0YWxvZyIsIl9lbmFibGUiLCJzZXBlcmF0b3IiLCJ0aW1lRm9ybWF0Iiwic2V0SWNvbnMiLCJKU09OIiwicGFyc2UiLCJhZGRJY29uIiwiYW5ub3RUeXBlIiwiY2F0YWxvZyIsImNhdGFnb3J5Iiwic3RyVXJsIiwicmVtb3ZlSWNvbiIsInNldER5bmFtaWNJbmZvRm9ybXVsYSIsImZpbGVJbmZvIiwic2V0QW5ub3RJY29uUHJvdmlkZXJDYWxsYmFjayIsImdldEVuZ2luZUljb25Qcm92aWRlciIsInNldEZpZWxkVmFsdWUiLCJpY29uRG9jIiwiZm9ybWF0RGF0ZVRpbWUiLCJJY29uUHJvdmlkZXJDYWxsYmFjayIsImRvY0luZGV4IiwiR2V0UHJvdmlkZXJJRCIsIkdldFByb3ZpZGVyVmVyc2lvbiIsInZhbHVlT2YiLCJIYXNJY29uIiwiYW5ub3RfdHlwZSIsImljb25fbmFtZSIsImpyTmFtZSIsInN0ckFubm90VHlwZSIsIkNhbkNoYW5nZUNvbG9yIiwiR2V0SWNvbiIsIkdldFNoYWRpbmdDb2xvciIsInJlZmVyZW5jZWRfY29sb3IiLCJzaGFkaW5nX2luZGV4IiwiZmlyc3RfY29sb3IiLCJzZWNvbmRfY29sb3IiLCJHZXREaXNwbGF5V2lkdGgiLCJHZXREaXNwbGF5SGVpZ2h0IiwiV2VlayIsImZvcm1hdFN0ciIsImdldFllYXIiLCJnZXREYXkiLCJ3ZWJTREtJY29ucyIsImdldEljb25Qcm92aWRlciIsInBkZk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwicHJvZ3Jlc3NpdmVDb3VudGluZSIsInByb2dyZXNzaXZlIiwiY29udGludWVTdGF0ZSIsImZpbnNoZWRTdGF0ZSIsIkNvbnRpbnVlIiwicHJvZ3Jlc3NpdmVDb250aW51ZSIsIkRlZmF1bHRBUCIsImVuZ2luZURBIiwiQ29uc3RydWN0b3IiLCJvZmZzZXRSaWdodCIsIm9mZnNldEJvdHRvbSIsIkNvbW1vblJlY3RPcGVyYXRvciIsImdldEVuZ2luZVJlY3RGIiwiUmVjdERpZmZlciIsIlJlY3QiLCJCb3VuZGFyeSIsIm1pbnVlbmQiLCJzdWJ0cmFoZW5kIiwiZXhwYW5kT2Zmc2V0IiwiaW5uZXIiLCJvdXRlciIsImNvcHlUbyIsImZyb20iLCJkZXN0IiwibW92ZUxlZnQiLCJtb3ZlVG9wIiwic2hyaW5rIiwiYWRkIiwiZXhwYW5kIiwiem9vbSIsIm9yaWdpbmgiLCJvcmlnaW52IiwibmV3V2lkdGgiLCJuZXdIZWlnaHQiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsImJvdW5kYXJ5IiwiY29udmVydEZyb21OdW1iZXJUb0hleCIsImNvbnZlcnRGcm9tTnVtYmVyVG9SR0JBIiwiY29sb3JDb252ZXJ0b3IiLCJzdGFuZGFyZENvbG9yQXNBUkdCTnVtYmVyIiwiVHlwZUVycm9yIiwiaGV4IiwiZyIsIm91dFR5cGUiLCJSIiwiRyIsIkIiLCJjb21wb25lbnRzIiwiRkYwMDAwMDAiLCJjb2xvclZhbHVlIiwidHJpbSIsIlVOREVSTElORSIsIklOU0VUIiwiUE9JTlRfVFlQRSIsIk1PVkVfVE8iLCJMSU5FX1RPIiwiTElORV9UT19DTE9TRV9GSUdVUkUiLCJCRVpJRVJfVE8iLCJCRVpJRVJfVE9fQ0xPU0VfRklHVVJFIiwiTElORV9BUlJPVyIsIkxJTkVfRElNRU5TSU9OIiwiUE9MWUdPTl9DTE9VRCIsIlBPTFlHT05fRElNRU5TSU9OIiwiUE9MWUxJTkVfRElNRU5TSU9OIiwiRlJFRVRFWFRfVFlQRVdSSVRFUiIsIlNUUklLRU9VVF9URVhURURJVCIsIkxpbmVFbmRpbmdTdHlsZSIsImtleXMiLCJBbm5vdEZsYWdzTmFtZSIsIlBERkRvY1Blcm1pc3Npb24iLCJQcmludExvd1F1YWxpdHkiLCJNb2RpZnlEb2N1bWVudCIsIkV4dHJhY3QiLCJBbm5vdEZvcm0iLCJGaWxsRm9ybSIsIkV4dHJhY3RBY2Nlc3MiLCJBc3NlbWJsZSIsIlByaW50SGlnaFF1YWxpdHkiLCJjcmVhdGVEZWZlcnJlZCIsImdldFVuaXF1ZUlkIiwidW5pcXVlUHJlZml4IiwiZ3VpZCIsInJhbmRvbSIsIkFwcGVuZGVyIiwicHJpbnQiLCJsZXZlbCIsIkNvbXBsZXhMYXlvdXQiLCJmb3JtYXQiLCJtZXNzYWdlcyIsInN0YWNrIiwicmVhbFRyYWNlIiwidHJhY2VzdGFjayIsImxldmVsQ29sb3IiLCJsZXZlbFRleHQiLCJtc2ciLCJMRVZFTF9ERUJVRyIsIkxFVkVMX0lORk8iLCJMRVZFTF9XQVJOIiwiTEVWRUxfRVJST1IiLCJDb25zb2xlQXBwZW5kZXIiLCJpdGVtIiwicGFyYW1zIiwiY29uZmlnIiwiTG9nZ2VyIiwiYXBwZW5kZXIiLCJsYXlvdXQiLCJtaW5MZXZlbCIsImxvZ09mZiIsInRvZ2dsZSIsInNldExldmVsIiwiZG9Mb2ciLCJOb0xvZ2dlciIsImxvZ2dlclN0b3JhZ2UiLCJ0b2dnbGVMb2dnZXIiLCJjcmVhdGVMb2dnZXIiLCJhcHBlbmRlcnMiLCJsb2dMYXlvdXQiLCJTaW1wbGVMYXlvdXQiLCJsb2dMZXZlbCIsImxvZ0FwcGVuZGVycyIsIldlYnNvY2tldEFwcGVuZGVyIiwiTXVsdGlwbGVBcHBlbmRlciIsInByb2Nlc3MiLCJub3RJbXBsZW1lbnRlZCIsImNfdGV4dFNlYXJjaENhY2hlIiwiRE9DX0lTX05VTEwiLCJwZGZKUkRlZmVycmVkIiwicGRmSlJQcm9taXNlIiwianJFbmdpbmVJc0xvYWRlZCIsImpyRW5naW5lSXNSZWFkeSIsImRlc3Ryb3lBcnJheUJ1ZmZlckRvY01hcCIsImZ1bmN0aW9uTWFwIiwiX2dldFBERkRvY0J5SWQiLCJ3b3JrZXJSZXNvbHZlIiwid29ya2VyUmVqZWN0IiwiZ3JhcGhpY3NNb2R1bGUiLCJfZ2V0UGFnZUJ5SWQiLCJiYWNrTWFwIiwiYXN5bmNDYWxsQ2FjaGUiLCJjYWNoZSIsImNhbGxzIiwiZ3Nka09iakNhY2hlIiwicmFuZ2VNYXAiLCJyYW5nZURvY01hcCIsIm9ubWVzc2FnZSIsImV2ZW50IiwiYmFja0lkIiwiZm4iLCJleGVjR1NESyIsIm1lc3NhZ2UiLCJwZGZKciIsImN1cnJlbnQiLCJPYmoiLCJuZXh0S2V5IiwidGhhdCIsImdldE9iakZyb21DYWNoZSIsInJlbW92ZU9iakZyb21DYWNoZSIsInBhcnNlUnF1ZXN0UGFyYW1zIiwic2V0T2JqVG9DYWNoZSIsInBhcmFtc0luZm8iLCJwYXJhbSIsInBhcmFtSW5mbyIsImlzT2JqZWN0IiwiZW51bU5hbWUiLCJnZXRFbnVtT2JqIiwiZW51bU9iaiIsInRyYW5zZmVyIiwicG9zdE1lc3NhZ2UiLCJ3b3JrZXJDb250aW51ZSIsImNhbGxJZCIsIndvcmtlckNvbnRpbnVlRW5kIiwiZGVzdHJveUlkIiwiaW5pdEpSRW5naW5lIiwibGljZW5zZVNOIiwibGljZW5zZUtleSIsImFnZW50Iiwid2FzbUVuYWJsZWQiLCJpc1NhZmFyaSIsInBhcnNlRmxvYXQiLCJXZWJBc3NlbWJseSIsImltcG9ydFNjcmlwdHMiLCJHU0RLIiwiZ2V0UERGRG9jQnlGaWxlIiwiX2dldEZpbGVTaXplIiwiZmlsZVN5bmNSZWFkZXIiLCJfZ2V0RmlsZVN5bmNSZWFkZXIiLCJwZGZEb2NJZCIsImdldFBERkRvY0J5QXJyYXlCdWZmZXIiLCJwYXJzZVBERkRvY0J5UGFzc3dvcmQiLCJpbml0RGF0YSIsIl9wZGZEb2MiLCJnZXRQREZEb2NJbmZvQnlJZCIsImdldFBhZ2VJbmZvQnlJbmRleCIsImdldERvY1Blcm1pc3Npb24iLCJnZXRQYWdlV2lkdGgiLCJkb2NJZCIsImdldFBhZ2VIZWlnaHQiLCJnZXRQYWdlSW1hZ2VEYXRhIiwiaW1hZ2VEYXRhIiwicGRmanIiLCJjbGVhck9iamVjdEZyb21DYWNoZSIsImRlc3Ryb3lBcnJheUJ1ZmZlckNhbGxiYWNrIiwiZ2V0Q2h1bmsiLCJnZXRJbWFnZURhdGFXaXRob3V0QW5ub3RCeVRpbGUiLCJnZXRBbm5vdCIsImdldFBhZ2VBbm5vdElETGlzdCIsImdldFBhZ2VCaXRtYXAiLCJ1cGRhdGVBbm5vdFF1YWRQb2ludHNCeUNoYXJJbmRleCIsInNldEFubm90Q29udGVudCIsInNldEFubm90Qm9yZGVyQ29sb3IiLCJzZXRBbm5vdE9wYWNpdHkiLCJtb2RpZmllZElkcyIsInNldEFubm90Um90YXRpb24iLCJyZW1vdmVBbm5vdCIsImFubm90QWRkUmVwbHkiLCJzZXRBbm5vdFJlY3QiLCJnZXRBbm5vdElubmVyUmVjdCIsIm1vdmVBbm5vdFRvIiwic2V0QW5ub3RJbm5lclJlY3QiLCJnZXRQREZEb2NTdHJlYW0iLCJzZXRBbm5vdEJvcmRlclN0eWxlIiwic2V0QW5ub3RCb3JkZXJXaWR0aCIsInNldEFubm90RmlsbENvbG9yIiwic2V0QW5ub3RJY29uTmFtZSIsImdldEZpbGVhdHRhY2htZW50U3RyZWFtIiwic2V0QW5ub3RFbmRpbmdTdHlsZSIsImlzQmVnaW5uaW5nIiwiZW5hYmxlTGluZUNhcHRpb24iLCJzZXRMaW5lU3RhcnRQb2ludCIsInNldExpbmVFbmRQb2ludCIsInNldEFubm90TGVhZGVyTGluZUxlbmd0aCIsInVwZGF0ZUFubm90VmVydGV4ZXMiLCJzZXRBbm5vdFZlcnRleGVzIiwiaW1wb3J0RnJvbUZERkZpbGUiLCJhZGRBbm5vdFJldmlld1N0YXRlIiwiYWRkQW5ub3RNYXJrZWRTdGF0ZSIsInJlYXNvbiIsInN0YXRlQW5ub3RJZCIsInNldE5vdGVPcGVuU3RhdHVzIiwic2V0QW5ub3RGbGFnIiwibGF5ZXJJZCIsInBia0lkIiwiYmtJZCIsInRleHRTZWFyY2giLCJ0ZXh0U2VhcmNoRmluZE5leHQiLCJiRmluZCIsIkZpbmROZXh0IiwiX2dldFRleHRTZWFyY2hNYXRjaCIsInRleHRTZWFyY2hGaW5kUHJldiIsIkZpbmRQcmV2IiwiY19yZWN0cyIsIkdldE1hdGNoUmVjdHMiLCJHZXRNYXRjaFBhZ2VJbmRleCIsIkdldE1hdGNoU3RhcnRDaGFySW5kZXgiLCJHZXRNYXRjaEVuZENoYXJJbmRleCIsInNlbnRlbmNlU3RhcnRJbmRleCIsIkdldE1hdGNoU2VudGVuY2VTdGFydEluZGV4Iiwic2VudGVuY2UiLCJHZXRNYXRjaFNlbnRlbmNlIiwidGV4dFNlYXJjaERlc3Ryb3kiLCJzZXRQb3B1cE9wZW5TdGF0dXMiLCJzZXREb2NPcGVuQWN0aW9uIiwic2V0RG9jQWN0aW9uRGF0YSIsIm1vdmVDYXJldFJlY3RCeUNoYXJJbmRleCIsInNldEFubm90SW50ZW50IiwidXBkYXRlUGFnZUluZm8iLCJzZXRQYWdlUm90YXRpb24iLCJvd25lclBhc3N3b3JkIiwiYWRkUGFnZUltYWdlIiwicmVjdHMiLCJyZWRhY3RBcHBseSIsImdldEFjdGlvbkZpbGVTdHJlYW0iLCJnZXRQREZEb2NJZEJ5SHR0cFJhbmdlUmVxdWVzdCIsInNpemVQcm9taXNlIiwic2l6ZURlZmVycmVkIiwidXNlciIsImhlYWRlcnMiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwiY29udGVudFJhbmdlIiwibGFzdEluZGV4IiwibGFzdEluZGV4T2YiLCJ0b3RhbFNpemUiLCJmaWxlUmVhZGVyQnlTeW5jSHR0cFJhbmdlIiwiY2h1bmtTaXplIiwic3luY0h0dHBSZXF1ZXN0QXJyYXlCdWZmZXIiLCJ1SW50OEFycmF5IiwiYnVmZmVyTGVuZ3RoIiwicmVtb3ZlUGFnZUFsbEFubm90IiwiZ2V0QW5ub3RXb2ZmIiwid29mZiIsIndvcmtlck9iaiIsImV4dGVuZHNXb3JrZXJBUEkiLCJmb3JtQVBJSGFuZGxlciIsImdldERvY0J5SUQiLCJqclByb21pc2UiLCJzeW5jTG9hZEZvcm0iLCJlbmdpbmVQcm9taXNlIiwiZm9ybUpzb24iLCJmb3JtRmlsbGVyRXZlbnQiLCJ1cGRhdGVGaWVsZCIsImZpZWxkSnNvbiIsInNldFdpZGdldEFTIiwib2JqZWN0Q2FjaGVNYXAiLCJwdXNoT2JqZWN0VG9DYWNoZSIsIm1hcDEiLCJtYXAyIiwiZ2V0T2JqZWN0RnJvbUNhY2hlIiwiZXh0ZW5kc0dyYXBoaWNBUEkiLCJncmFwaGljT2JqZWN0QVBJIiwiZ2V0UGFnZUJ5SUQiLCJzZXRHcmFwaGljc09iamVjdE1hdHJpeCIsImZvY3VzZWRPYmplY3QiLCJnZXRHcmFwaGljc09iamVjdEJpdG1hcCIsInNldEdyYXBoaWNzT2JqZWN0Qm9yZGVyU3R5bGUiLCJzZXRHcmFwaGljc09iamVjdEJvcmRlcldpZHRoIiwic2V0R3JhcGhpY3NPYmplY3RCb3JkZXJDb2xvciIsInNldEdyYXBoaWNzT2JqZWN0RmlsbENvbG9yIiwic2V0R3JhcGhpY3NPYmplY3RPcGFjaXR5IiwiYWRkR3JhcGhpY3NPYmplY3QiLCJncmFwaGljcyIsInNldEltYWdlT2JqZWN0T3BhY2l0eSIsInJlbW92ZUdyYXBoaWNzT2JqZWN0Iiwic2V0SW1hZ2VPYmplY3RSb3RhdGlvbiIsInNldFRleHRPYmplY3RDaGFyIiwic2V0VGV4dE9iamVjdEl0YWxpYyIsInNldFRleHRPYmplY3RCb2xkIiwic2V0VGV4dE9iamVjdEZvbnRTaXplIiwic2V0VGV4dE9iamVjdFN0YW5kYXJkRm9udCIsInNldFRleHRPYmplY3RGb250QnlOYW1lIiwiZ2V0VGV4dE9iamVjdFdvZmYiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxPO0FDVkE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxrREFBMEMsZ0NBQWdDO0FBQzFFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZ0VBQXdELGtCQUFrQjtBQUMxRTtBQUNBLHlEQUFpRCxjQUFjO0FBQy9EOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBeUMsaUNBQWlDO0FBQzFFLHdIQUFnSCxtQkFBbUIsRUFBRTtBQUNySTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1DQUEyQiwwQkFBMEIsRUFBRTtBQUN2RCx5Q0FBaUMsZUFBZTtBQUNoRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4REFBc0QsK0RBQStEOztBQUVySDtBQUNBOzs7QUFHQTtBQUNBOzs7Ozs7Ozs7Ozs7O0FDbEZBLDhDQUFhOztBQUViLG1CQUFPLENBQUMsb0RBQWM7O0FBRXRCLG1CQUFPLENBQUMsOEdBQTZCOztBQUVyQyxtQkFBTyxDQUFDLDRFQUEwQjs7QUFFbEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUMsRTs7Ozs7Ozs7Ozs7O0FDM0JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkLEtBQUs7QUFDTCxjQUFjO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQ7QUFDekQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQSx3Q0FBd0MsV0FBVztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsU0FBUztBQUNUO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxvQ0FBb0MsY0FBYztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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LG9HQUFtQztBQUMzQyxtQkFBTyxDQUFDLDBGQUE4QjtBQUN0QyxtQkFBTyxDQUFDLDhGQUFnQztBQUN4QyxtQkFBTyxDQUFDLGdHQUFpQztBQUN6QyxtQkFBTyxDQUFDLHdGQUE2QjtBQUNyQyxtQkFBTyxDQUFDLDBHQUFzQztBQUM5QyxtQkFBTyxDQUFDLDRHQUF1QztBQUMvQyxtQkFBTyxDQUFDLDRHQUF1QztBQUMvQyxtQkFBTyxDQUFDLGtHQUFrQztBQUMxQyxtQkFBTyxDQUFDLDhGQUFnQztBQUN4QyxtQkFBTyxDQUFDLGtGQUEwQjtBQUNsQyxtQkFBTyxDQUFDLGtGQUEwQjtBQUNsQyxtQkFBTyxDQUFDLGtGQUEwQjtBQUNsQyxtQkFBTyxDQUFDLGdGQUF5QjtBQUNqQyxtQkFBTyxDQUFDLGtGQUEwQjtBQUNsQyxtQkFBTyxDQUFDLGdGQUF5QjtBQUNqQyxtQkFBTyxDQUFDLGtGQUEwQjtBQUNsQyxtQkFBTyxDQUFDLG9GQUEyQjtBQUNuQyxtQkFBTyxDQUFDLGtGQUEwQjtBQUNsQyxtQkFBTyxDQUFDLGdGQUF5QjtBQUNqQyxtQkFBTyxDQUFDLGtGQUEwQjtBQUNsQyxtQkFBTyxDQUFDLGtGQUEwQjtBQUNsQyxtQkFBTyxDQUFDLGdGQUF5QjtBQUNqQyxtQkFBTyxDQUFDLGdGQUF5QjtBQUNqQyxtQkFBTyxDQUFDLGdGQUF5QjtBQUNqQyxtQkFBTyxDQUFDLGdGQUF5QjtBQUNqQyxtQkFBTyxDQUFDLGtGQUEwQjtBQUNsQyxtQkFBTyxDQUFDLDBHQUFzQztBQUM5QyxtQkFBTyxDQUFDLGtGQUEwQjtBQUNsQyxtQkFBTyxDQUFDLG9GQUEyQjtBQUNuQyxtQkFBTyxDQUFDLDRGQUErQjtBQUN2QyxtQkFBTyxDQUFDLHNHQUFvQztBQUM1QyxtQkFBTyxDQUFDLDhGQUFnQztBQUN4QyxtQkFBTyxDQUFDLDRGQUErQjtBQUN2QyxtQkFBTyxDQUFDLHdGQUE2QjtBQUNyQyxtQkFBTyxDQUFDLGtHQUFrQztBQUMxQyxtQkFBTyxDQUFDLHdGQUE2QjtBQUNyQyxtQkFBTyxDQUFDLGtGQUEwQjtBQUNsQyxtQkFBTyxDQUFDLHNGQUE0QjtBQUNwQyxtQkFBTyxDQUFDLG9GQUEyQjtBQUNuQyxtQkFBTyxDQUFDLHNGQUE0QjtBQUNwQyxtQkFBTyxDQUFDLDhGQUFnQztBQUN4QyxtQkFBTyxDQUFDLDRGQUErQjtBQUN2QyxtQkFBTyxDQUFDLDBGQUE4QjtBQUN0QyxtQkFBTyxDQUFDLG9GQUEyQjtBQUNuQyxtQkFBTyxDQUFDLHNGQUE0QjtBQUNwQyxtQkFBTyxDQUFDLHdGQUE2QjtBQUNyQyxtQkFBTyxDQUFDLGtGQUEwQjtBQUNsQyxtQkFBTyxDQUFDLGtGQUEwQjtBQUNsQyxtQkFBTyxDQUFDLDhFQUF3QjtBQUNoQyxtQkFBTyxDQUFDLHNGQUE0QjtBQUNwQyxtQkFBTyxDQUFDLGtHQUFrQztBQUMxQyxtQkFBTyxDQUFDLDBGQUE4QjtBQUN0QyxtQkFBTyxDQUFDLGdHQUFpQztBQUN6QyxtQkFBTyxDQUFDLDBGQUE4QjtBQUN0QyxtQkFBTyxDQUFDLGtGQUEwQjtBQUNsQyxtQkFBTyxDQUFDLDhFQUF3QjtBQUNoQyxtQkFBTyxDQUFDLGtGQUEwQjtBQUNsQyxtQkFBTyxDQUFDLG9GQUEyQjtBQUNuQyxtQkFBTyxDQUFDLGtGQUEwQjtBQUNsQyxtQkFBTyxDQUFDLDBGQUE4QjtBQUN0QyxtQkFBTyxDQUFDLGdGQUF5QjtBQUNqQyxtQkFBTyxDQUFDLHNGQUE0QjtBQUNwQyxtQkFBTyxDQUFDLGtGQUEwQjtBQUNsQyxtQkFBTyxDQUFDLG9GQUEyQjtBQUNuQyxtQkFBTyxDQUFDLHNGQUE0QjtBQUNwQyxtQkFBTyxDQUFDLGtHQUFrQztBQUMxQyxtQkFBTyxDQUFDLDBGQUE4QjtBQUN0QyxtQkFBTyxDQUFDLG9HQUFtQztBQUMzQyxtQkFBTyxDQUFDLGdHQUFpQztBQUN6QyxtQkFBTyxDQUFDLGtGQUEwQjtBQUNsQyxtQkFBTyxDQUFDLGtGQUEwQjtBQUNsQyxtQkFBTyxDQUFDLDhGQUFnQztBQUN4QyxtQkFBTyxDQUFDLHdGQUE2QjtBQUNyQyxtQkFBTyxDQUFDLDBGQUE4QjtBQUN0QyxtQkFBTyxDQUFD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QUFhO0FBQUEsUUFBTGpLLEVBQUssVUFBTEEsRUFBSzs7QUFDckQsUUFBSStpRixnQkFBZ0JMLG1CQUFtQmhILEtBQW5CLEVBQTBCenhFLE1BQTFCLEVBQWtDakssRUFBbEMsQ0FBcEI7QUFDQSxRQUFJK2lGLGFBQUosRUFBbUI7QUFDZixZQUFJdEIsT0FBT3NCLGNBQWMxMkMsT0FBZCxFQUFYO0FBQ0EsWUFBSXd0QyxXQUFXLEVBQWY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFPNkgsVUFBVXI5RSxPQUFWLENBQWtCMjFFLE1BQWxCLEVBQTBCeUgsSUFBMUIsRUFBZ0M1SCxRQUFoQyxDQUFQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNIO0FBQ0QsV0FBTzZILFVBQVVqcUUsTUFBVixDQUFpQnVpRSxNQUFqQixDQUFQO0FBQ0g7QUFDRDRJLGlCQUFpQnFCLGlCQUFqQixHQUFxQ0EsaUJBQXJDOztrQkFFZXRCLGlCIiwiZmlsZSI6IldlYlBERkpSV29ya2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIHtcblx0XHR2YXIgYSA9IGZhY3RvcnkoKTtcblx0XHRmb3IodmFyIGkgaW4gYSkgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyA/IGV4cG9ydHMgOiByb290KVtpXSA9IGFbaV07XG5cdH1cbn0pKHNlbGYsIGZ1bmN0aW9uKCkge1xucmV0dXJuICIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBcIi4vc3JjL3dlYi1wZGYtanIvV2ViUERGSlJXb3JrZXIuanNcIik7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxucmVxdWlyZShcImNvcmUtanMvc2hpbVwiKTtcblxucmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZVwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vcmVnZXhwL2VzY2FwZVwiKTtcblxuaWYgKGdsb2JhbC5fYmFiZWxQb2x5ZmlsbCkge1xuICB0aHJvdyBuZXcgRXJyb3IoXCJvbmx5IG9uZSBpbnN0YW5jZSBvZiBiYWJlbC1wb2x5ZmlsbCBpcyBhbGxvd2VkXCIpO1xufVxuZ2xvYmFsLl9iYWJlbFBvbHlmaWxsID0gdHJ1ZTtcblxudmFyIERFRklORV9QUk9QRVJUWSA9IFwiZGVmaW5lUHJvcGVydHlcIjtcbmZ1bmN0aW9uIGRlZmluZShPLCBrZXksIHZhbHVlKSB7XG4gIE9ba2V5XSB8fCBPYmplY3RbREVGSU5FX1BST1BFUlRZXShPLCBrZXksIHtcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgdmFsdWU6IHZhbHVlXG4gIH0pO1xufVxuXG5kZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgXCJwYWRMZWZ0XCIsIFwiXCIucGFkU3RhcnQpO1xuZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIFwicGFkUmlnaHRcIiwgXCJcIi5wYWRFbmQpO1xuXG5cInBvcCxyZXZlcnNlLHNoaWZ0LGtleXMsdmFsdWVzLGVudHJpZXMsaW5kZXhPZixldmVyeSxzb21lLGZvckVhY2gsbWFwLGZpbHRlcixmaW5kLGZpbmRJbmRleCxpbmNsdWRlcyxqb2luLHNsaWNlLGNvbmNhdCxwdXNoLHNwbGljZSx1bnNoaWZ0LHNvcnQsbGFzdEluZGV4T2YscmVkdWNlLHJlZHVjZVJpZ2h0LGNvcHlXaXRoaW4sZmlsbFwiLnNwbGl0KFwiLFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgW11ba2V5XSAmJiBkZWZpbmUoQXJyYXksIGtleSwgRnVuY3Rpb24uY2FsbC5iaW5kKFtdW2tleV0pKTtcbn0pOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIGh0dHBzOi8vcmF3LmdpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvbWFzdGVyL0xJQ0VOU0UgZmlsZS4gQW5cbiAqIGFkZGl0aW9uYWwgZ3JhbnQgb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpblxuICogdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbiEoZnVuY3Rpb24oZ2xvYmFsKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgdmFyIGluTW9kdWxlID0gdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIjtcbiAgdmFyIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lO1xuICBpZiAocnVudGltZSkge1xuICAgIGlmIChpbk1vZHVsZSkge1xuICAgICAgLy8gSWYgcmVnZW5lcmF0b3JSdW50aW1lIGlzIGRlZmluZWQgZ2xvYmFsbHkgYW5kIHdlJ3JlIGluIGEgbW9kdWxlLFxuICAgICAgLy8gbWFrZSB0aGUgZXhwb3J0cyBvYmplY3QgaWRlbnRpY2FsIHRvIHJlZ2VuZXJhdG9yUnVudGltZS5cbiAgICAgIG1vZHVsZS5leHBvcnRzID0gcnVudGltZTtcbiAgICB9XG4gICAgLy8gRG9uJ3QgYm90aGVyIGV2YWx1YXRpbmcgdGhlIHJlc3Qgb2YgdGhpcyBmaWxlIGlmIHRoZSBydW50aW1lIHdhc1xuICAgIC8vIGFscmVhZHkgZGVmaW5lZCBnbG9iYWxseS5cbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBEZWZpbmUgdGhlIHJ1bnRpbWUgZ2xvYmFsbHkgKGFzIGV4cGVjdGVkIGJ5IGdlbmVyYXRlZCBjb2RlKSBhcyBlaXRoZXJcbiAgLy8gbW9kdWxlLmV4cG9ydHMgKGlmIHdlJ3JlIGluIGEgbW9kdWxlKSBvciBhIG5ldywgZW1wdHkgb2JqZWN0LlxuICBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZSA9IGluTW9kdWxlID8gbW9kdWxlLmV4cG9ydHMgOiB7fTtcblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBydW50aW1lLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt0b1N0cmluZ1RhZ1N5bWJvbF0gPVxuICAgIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIHJ1bnRpbWUubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkge1xuICAgICAgICBnZW5GdW5bdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBydW50aW1lLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi4gSWYgdGhlIFByb21pc2UgaXMgcmVqZWN0ZWQsIGhvd2V2ZXIsIHRoZVxuICAgICAgICAgIC8vIHJlc3VsdCBmb3IgdGhpcyBpdGVyYXRpb24gd2lsbCBiZSByZWplY3RlZCB3aXRoIHRoZSBzYW1lXG4gICAgICAgICAgLy8gcmVhc29uLiBOb3RlIHRoYXQgcmVqZWN0aW9ucyBvZiB5aWVsZGVkIFByb21pc2VzIGFyZSBub3RcbiAgICAgICAgICAvLyB0aHJvd24gYmFjayBpbnRvIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIGFzIGlzIHRoZSBjYXNlXG4gICAgICAgICAgLy8gd2hlbiBhbiBhd2FpdGVkIFByb21pc2UgaXMgcmVqZWN0ZWQuIFRoaXMgZGlmZmVyZW5jZSBpblxuICAgICAgICAgIC8vIGJlaGF2aW9yIGJldHdlZW4geWllbGQgYW5kIGF3YWl0IGlzIGltcG9ydGFudCwgYmVjYXVzZSBpdFxuICAgICAgICAgIC8vIGFsbG93cyB0aGUgY29uc3VtZXIgdG8gZGVjaWRlIHdoYXQgdG8gZG8gd2l0aCB0aGUgeWllbGRlZFxuICAgICAgICAgIC8vIHJlamVjdGlvbiAoc3dhbGxvdyBpdCBhbmQgY29udGludWUsIG1hbnVhbGx5IC50aHJvdyBpdCBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgZ2VuZXJhdG9yLCBhYmFuZG9uIGl0ZXJhdGlvbiwgd2hhdGV2ZXIpLiBXaXRoXG4gICAgICAgICAgLy8gYXdhaXQsIGJ5IGNvbnRyYXN0LCB0aGVyZSBpcyBubyBvcHBvcnR1bml0eSB0byBleGFtaW5lIHRoZVxuICAgICAgICAgIC8vIHJlamVjdGlvbiByZWFzb24gb3V0c2lkZSB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uLCBzbyB0aGVcbiAgICAgICAgICAvLyBvbmx5IG9wdGlvbiBpcyB0byB0aHJvdyBpdCBmcm9tIHRoZSBhd2FpdCBleHByZXNzaW9uLCBhbmRcbiAgICAgICAgICAvLyBsZXQgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiBoYW5kbGUgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZ2xvYmFsLnByb2Nlc3MgPT09IFwib2JqZWN0XCIgJiYgZ2xvYmFsLnByb2Nlc3MuZG9tYWluKSB7XG4gICAgICBpbnZva2UgPSBnbG9iYWwucHJvY2Vzcy5kb21haW4uYmluZChpbnZva2UpO1xuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIHJ1bnRpbWUuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIHJ1bnRpbWUuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KVxuICAgICk7XG5cbiAgICByZXR1cm4gcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIEdwW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yXCI7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgcnVudGltZS5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIHJ1bnRpbWUudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG59KShcbiAgLy8gQW1vbmcgdGhlIHZhcmlvdXMgdHJpY2tzIGZvciBvYnRhaW5pbmcgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbFxuICAvLyBvYmplY3QsIHRoaXMgc2VlbXMgdG8gYmUgdGhlIG1vc3QgcmVsaWFibGUgdGVjaG5pcXVlIHRoYXQgZG9lcyBub3RcbiAgLy8gdXNlIGluZGlyZWN0IGV2YWwgKHdoaWNoIHZpb2xhdGVzIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5KS5cbiAgdHlwZW9mIGdsb2JhbCA9PT0gXCJvYmplY3RcIiA/IGdsb2JhbCA6XG4gIHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIgPyB3aW5kb3cgOlxuICB0eXBlb2Ygc2VsZiA9PT0gXCJvYmplY3RcIiA/IHNlbGYgOiB0aGlzXG4pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9jb3JlLnJlZ2V4cC5lc2NhcGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlJlZ0V4cC5lc2NhcGU7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgbXNnKSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ251bWJlcicgJiYgY29mKGl0KSAhPSAnTnVtYmVyJykgdGhyb3cgVHlwZUVycm9yKG1zZyk7XG4gIHJldHVybiAraXQ7XG59O1xuIiwiLy8gMjIuMS4zLjMxIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxudmFyIFVOU0NPUEFCTEVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbmlmIChBcnJheVByb3RvW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHJlcXVpcmUoJy4vX2hpZGUnKShBcnJheVByb3RvLCBVTlNDT1BBQkxFUywge30pO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4gLy8gYEFkdmFuY2VTdHJpbmdJbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hZHZhbmNlc3RyaW5naW5kZXhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFMsIGluZGV4LCB1bmljb2RlKSB7XG4gIHJldHVybiBpbmRleCArICh1bmljb2RlID8gYXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSwgZm9yYmlkZGVuRmllbGQpIHtcbiAgaWYgKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKG5hbWUgKyAnOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gMjIuMS4zLjMgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgZW5kID0gdGhpcy5sZW5ndGgpXG4ndXNlIHN0cmljdCc7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gW10uY29weVdpdGhpbiB8fCBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldCAvKiA9IDAgKi8sIHN0YXJ0IC8qID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgdG8gPSB0b0Fic29sdXRlSW5kZXgodGFyZ2V0LCBsZW4pO1xuICB2YXIgZnJvbSA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgdmFyIGVuZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgY291bnQgPSBNYXRoLm1pbigoZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pKSAtIGZyb20sIGxlbiAtIHRvKTtcbiAgdmFyIGluYyA9IDE7XG4gIGlmIChmcm9tIDwgdG8gJiYgdG8gPCBmcm9tICsgY291bnQpIHtcbiAgICBpbmMgPSAtMTtcbiAgICBmcm9tICs9IGNvdW50IC0gMTtcbiAgICB0byArPSBjb3VudCAtIDE7XG4gIH1cbiAgd2hpbGUgKGNvdW50LS0gPiAwKSB7XG4gICAgaWYgKGZyb20gaW4gTykgT1t0b10gPSBPW2Zyb21dO1xuICAgIGVsc2UgZGVsZXRlIE9bdG9dO1xuICAgIHRvICs9IGluYztcbiAgICBmcm9tICs9IGluYztcbiAgfSByZXR1cm4gTztcbn07XG4iLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0ID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgbGVuZ3RoKTtcbiAgdmFyIGVuZCA9IGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgZW5kUG9zID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpO1xuICB3aGlsZSAoZW5kUG9zID4gaW5kZXgpIE9baW5kZXgrK10gPSB2YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXIsIElURVJBVE9SKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yT2YoaXRlciwgZmFsc2UsIHJlc3VsdC5wdXNoLCByZXN1bHQsIElURVJBVE9SKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mXG4vLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlc1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykge1xuICAgICAgaWYgKE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcbiIsIi8vIDAgLT4gQXJyYXkjZm9yRWFjaFxuLy8gMSAtPiBBcnJheSNtYXBcbi8vIDIgLT4gQXJyYXkjZmlsdGVyXG4vLyAzIC0+IEFycmF5I3NvbWVcbi8vIDQgLT4gQXJyYXkjZXZlcnlcbi8vIDUgLT4gQXJyYXkjZmluZFxuLy8gNiAtPiBBcnJheSNmaW5kSW5kZXhcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhc2MgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVFlQRSwgJGNyZWF0ZSkge1xuICB2YXIgSVNfTUFQID0gVFlQRSA9PSAxO1xuICB2YXIgSVNfRklMVEVSID0gVFlQRSA9PSAyO1xuICB2YXIgSVNfU09NRSA9IFRZUEUgPT0gMztcbiAgdmFyIElTX0VWRVJZID0gVFlQRSA9PSA0O1xuICB2YXIgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNjtcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHZhciBjcmVhdGUgPSAkY3JlYXRlIHx8IGFzYztcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCkge1xuICAgIHZhciBPID0gdG9PYmplY3QoJHRoaXMpO1xuICAgIHZhciBzZWxmID0gSU9iamVjdChPKTtcbiAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCB0aGF0LCAzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbCwgcmVzO1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgdmFsID0gc2VsZltpbmRleF07XG4gICAgICByZXMgPSBmKHZhbCwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgcmVzdWx0W2luZGV4XSA9IHJlczsgICAvLyBtYXBcbiAgICAgICAgZWxzZSBpZiAocmVzKSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsOyAgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcmVzdWx0LnB1c2godmFsKTsgICAgICAgIC8vIGZpbHRlclxuICAgICAgICB9IGVsc2UgaWYgKElTX0VWRVJZKSByZXR1cm4gZmFsc2U7IC8vIGV2ZXJ5XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiByZXN1bHQ7XG4gIH07XG59O1xuIiwidmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgY2FsbGJhY2tmbiwgYUxlbiwgbWVtbywgaXNSaWdodCkge1xuICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7XG4gIHZhciBPID0gdG9PYmplY3QodGhhdCk7XG4gIHZhciBzZWxmID0gSU9iamVjdChPKTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIGluZGV4ID0gaXNSaWdodCA/IGxlbmd0aCAtIDEgOiAwO1xuICB2YXIgaSA9IGlzUmlnaHQgPyAtMSA6IDE7XG4gIGlmIChhTGVuIDwgMikgZm9yICg7Oykge1xuICAgIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgICBtZW1vID0gc2VsZltpbmRleF07XG4gICAgICBpbmRleCArPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGluZGV4ICs9IGk7XG4gICAgaWYgKGlzUmlnaHQgPyBpbmRleCA8IDAgOiBsZW5ndGggPD0gaW5kZXgpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgIH1cbiAgfVxuICBmb3IgKDtpc1JpZ2h0ID8gaW5kZXggPj0gMCA6IGxlbmd0aCA+IGluZGV4OyBpbmRleCArPSBpKSBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgIG1lbW8gPSBjYWxsYmFja2ZuKG1lbW8sIHNlbGZbaW5kZXhdLCBpbmRleCwgTyk7XG4gIH1cbiAgcmV0dXJuIG1lbW87XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsKSB7XG4gIHZhciBDO1xuICBpZiAoaXNBcnJheShvcmlnaW5hbCkpIHtcbiAgICBDID0gb3JpZ2luYWwuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGlmIChpc09iamVjdChDKSkge1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQztcbn07XG4iLCIvLyA5LjQuMi4zIEFycmF5U3BlY2llc0NyZWF0ZShvcmlnaW5hbEFycmF5LCBsZW5ndGgpXG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCwgbGVuZ3RoKSB7XG4gIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihvcmlnaW5hbCkpKGxlbmd0aCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGludm9rZSA9IHJlcXVpcmUoJy4vX2ludm9rZScpO1xudmFyIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcbnZhciBmYWN0b3JpZXMgPSB7fTtcblxudmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uIChGLCBsZW4sIGFyZ3MpIHtcbiAgaWYgKCEobGVuIGluIGZhY3RvcmllcykpIHtcbiAgICBmb3IgKHZhciBuID0gW10sIGkgPSAwOyBpIDwgbGVuOyBpKyspIG5baV0gPSAnYVsnICsgaSArICddJztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICBmYWN0b3JpZXNbbGVuXSA9IEZ1bmN0aW9uKCdGLGEnLCAncmV0dXJuIG5ldyBGKCcgKyBuLmpvaW4oJywnKSArICcpJyk7XG4gIH0gcmV0dXJuIGZhY3Rvcmllc1tsZW5dKEYsIGFyZ3MpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5iaW5kIHx8IGZ1bmN0aW9uIGJpbmQodGhhdCAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgdmFyIGZuID0gYUZ1bmN0aW9uKHRoaXMpO1xuICB2YXIgcGFydEFyZ3MgPSBhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgdmFyIGJvdW5kID0gZnVuY3Rpb24gKC8qIGFyZ3MuLi4gKi8pIHtcbiAgICB2YXIgYXJncyA9IHBhcnRBcmdzLmNvbmNhdChhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBib3VuZCA/IGNvbnN0cnVjdChmbiwgYXJncy5sZW5ndGgsIGFyZ3MpIDogaW52b2tlKGZuLCBhcmdzLCB0aGF0KTtcbiAgfTtcbiAgaWYgKGlzT2JqZWN0KGZuLnByb3RvdHlwZSkpIGJvdW5kLnByb3RvdHlwZSA9IGZuLnByb3RvdHlwZTtcbiAgcmV0dXJuIGJvdW5kO1xufTtcbiIsIi8vIGdldHRpbmcgdGFnIGZyb20gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIEFSRyA9IGNvZihmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgVCwgQjtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKFQgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRBRykpID09ICdzdHJpbmcnID8gVFxuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQVJHID8gY29mKE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKEIgPSBjb2YoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCO1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciAkaXRlckRlZmluZSA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuL19zZXQtc3BlY2llcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBmYXN0S2V5ID0gcmVxdWlyZSgnLi9fbWV0YScpLmZhc3RLZXk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgU0laRSA9IERFU0NSSVBUT1JTID8gJ19zJyA6ICdzaXplJztcblxudmFyIGdldEVudHJ5ID0gZnVuY3Rpb24gKHRoYXQsIGtleSkge1xuICAvLyBmYXN0IGNhc2VcbiAgdmFyIGluZGV4ID0gZmFzdEtleShrZXkpO1xuICB2YXIgZW50cnk7XG4gIGlmIChpbmRleCAhPT0gJ0YnKSByZXR1cm4gdGhhdC5faVtpbmRleF07XG4gIC8vIGZyb3plbiBvYmplY3QgY2FzZVxuICBmb3IgKGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubikge1xuICAgIGlmIChlbnRyeS5rID09IGtleSkgcmV0dXJuIGVudHJ5O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAgICAgICAgIC8vIGNvbGxlY3Rpb24gdHlwZVxuICAgICAgdGhhdC5faSA9IGNyZWF0ZShudWxsKTsgLy8gaW5kZXhcbiAgICAgIHRoYXQuX2YgPSB1bmRlZmluZWQ7ICAgIC8vIGZpcnN0IGVudHJ5XG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAgICAvLyBsYXN0IGVudHJ5XG4gICAgICB0aGF0W1NJWkVdID0gMDsgICAgICAgICAvLyBzaXplXG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgfSk7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjEuMy4xIE1hcC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgLy8gMjMuMi4zLjIgU2V0LnByb3RvdHlwZS5jbGVhcigpXG4gICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICAgIGZvciAodmFyIHRoYXQgPSB2YWxpZGF0ZSh0aGlzLCBOQU1FKSwgZGF0YSA9IHRoYXQuX2ksIGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubikge1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmIChlbnRyeS5wKSBlbnRyeS5wID0gZW50cnkucC5uID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGRlbGV0ZSBkYXRhW2VudHJ5LmldO1xuICAgICAgICB9XG4gICAgICAgIHRoYXQuX2YgPSB0aGF0Ll9sID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGF0W1NJWkVdID0gMDtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuMyBNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy4yLjMuNCBTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSk7XG4gICAgICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgIHZhciBuZXh0ID0gZW50cnkubjtcbiAgICAgICAgICB2YXIgcHJldiA9IGVudHJ5LnA7XG4gICAgICAgICAgZGVsZXRlIHRoYXQuX2lbZW50cnkuaV07XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYgKHByZXYpIHByZXYubiA9IG5leHQ7XG4gICAgICAgICAgaWYgKG5leHQpIG5leHQucCA9IHByZXY7XG4gICAgICAgICAgaWYgKHRoYXQuX2YgPT0gZW50cnkpIHRoYXQuX2YgPSBuZXh0O1xuICAgICAgICAgIGlmICh0aGF0Ll9sID09IGVudHJ5KSB0aGF0Ll9sID0gcHJldjtcbiAgICAgICAgICB0aGF0W1NJWkVdLS07XG4gICAgICAgIH0gcmV0dXJuICEhZW50cnk7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMi4zLjYgU2V0LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICAvLyAyMy4xLjMuNSBNYXAucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICAgICAgdmFsaWRhdGUodGhpcywgTkFNRSk7XG4gICAgICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAzKTtcbiAgICAgICAgdmFyIGVudHJ5O1xuICAgICAgICB3aGlsZSAoZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGlzLl9mKSB7XG4gICAgICAgICAgZihlbnRyeS52LCBlbnRyeS5rLCB0aGlzKTtcbiAgICAgICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucikgZW50cnkgPSBlbnRyeS5wO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjcgTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuMi4zLjcgU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuICEhZ2V0RW50cnkodmFsaWRhdGUodGhpcywgTkFNRSksIGtleSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKERFU0NSSVBUT1JTKSBkUChDLnByb3RvdHlwZSwgJ3NpemUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlKHRoaXMsIE5BTUUpW1NJWkVdO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICB2YXIgcHJldiwgaW5kZXg7XG4gICAgLy8gY2hhbmdlIGV4aXN0aW5nIGVudHJ5XG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICBlbnRyeS52ID0gdmFsdWU7XG4gICAgLy8gY3JlYXRlIG5ldyBlbnRyeVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGF0Ll9sID0gZW50cnkgPSB7XG4gICAgICAgIGk6IGluZGV4ID0gZmFzdEtleShrZXksIHRydWUpLCAvLyA8LSBpbmRleFxuICAgICAgICBrOiBrZXksICAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0ga2V5XG4gICAgICAgIHY6IHZhbHVlLCAgICAgICAgICAgICAgICAgICAgICAvLyA8LSB2YWx1ZVxuICAgICAgICBwOiBwcmV2ID0gdGhhdC5fbCwgICAgICAgICAgICAgLy8gPC0gcHJldmlvdXMgZW50cnlcbiAgICAgICAgbjogdW5kZWZpbmVkLCAgICAgICAgICAgICAgICAgIC8vIDwtIG5leHQgZW50cnlcbiAgICAgICAgcjogZmFsc2UgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHJlbW92ZWRcbiAgICAgIH07XG4gICAgICBpZiAoIXRoYXQuX2YpIHRoYXQuX2YgPSBlbnRyeTtcbiAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBlbnRyeTtcbiAgICAgIHRoYXRbU0laRV0rKztcbiAgICAgIC8vIGFkZCB0byBpbmRleFxuICAgICAgaWYgKGluZGV4ICE9PSAnRicpIHRoYXQuX2lbaW5kZXhdID0gZW50cnk7XG4gICAgfSByZXR1cm4gdGhhdDtcbiAgfSxcbiAgZ2V0RW50cnk6IGdldEVudHJ5LFxuICBzZXRTdHJvbmc6IGZ1bmN0aW9uIChDLCBOQU1FLCBJU19NQVApIHtcbiAgICAvLyBhZGQgLmtleXMsIC52YWx1ZXMsIC5lbnRyaWVzLCBbQEBpdGVyYXRvcl1cbiAgICAvLyAyMy4xLjMuNCwgMjMuMS4zLjgsIDIzLjEuMy4xMSwgMjMuMS4zLjEyLCAyMy4yLjMuNSwgMjMuMi4zLjgsIDIzLjIuMy4xMCwgMjMuMi4zLjExXG4gICAgJGl0ZXJEZWZpbmUoQywgTkFNRSwgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gICAgICB0aGlzLl90ID0gdmFsaWRhdGUoaXRlcmF0ZWQsIE5BTUUpOyAvLyB0YXJnZXRcbiAgICAgIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAgICAgIC8vIGtpbmRcbiAgICAgIHRoaXMuX2wgPSB1bmRlZmluZWQ7ICAgICAgICAgICAgICAgIC8vIHByZXZpb3VzXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdmFyIGtpbmQgPSB0aGF0Ll9rO1xuICAgICAgdmFyIGVudHJ5ID0gdGhhdC5fbDtcbiAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIGVudHJ5ID0gZW50cnkucDtcbiAgICAgIC8vIGdldCBuZXh0IGVudHJ5XG4gICAgICBpZiAoIXRoYXQuX3QgfHwgISh0aGF0Ll9sID0gZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGF0Ll90Ll9mKSkge1xuICAgICAgICAvLyBvciBmaW5pc2ggdGhlIGl0ZXJhdGlvblxuICAgICAgICB0aGF0Ll90ID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gc3RlcCgxKTtcbiAgICAgIH1cbiAgICAgIC8vIHJldHVybiBzdGVwIGJ5IGtpbmRcbiAgICAgIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgZW50cnkuayk7XG4gICAgICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgZW50cnkudik7XG4gICAgICByZXR1cm4gc3RlcCgwLCBbZW50cnkuaywgZW50cnkudl0pO1xuICAgIH0sIElTX01BUCA/ICdlbnRyaWVzJyA6ICd2YWx1ZXMnLCAhSVNfTUFQLCB0cnVlKTtcblxuICAgIC8vIGFkZCBbQEBzcGVjaWVzXSwgMjMuMS4yLjIsIDIzLjIuMi4yXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcbiAgfVxufTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIGZyb20gPSByZXF1aXJlKCcuL19hcnJheS1mcm9tLWl0ZXJhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgaWYgKGNsYXNzb2YodGhpcykgIT0gTkFNRSkgdGhyb3cgVHlwZUVycm9yKE5BTUUgKyBcIiN0b0pTT04gaXNuJ3QgZ2VuZXJpY1wiKTtcbiAgICByZXR1cm4gZnJvbSh0aGlzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBnZXRXZWFrID0gcmVxdWlyZSgnLi9fbWV0YScpLmdldFdlYWs7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG52YXIgJGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIGFycmF5RmluZCA9IGNyZWF0ZUFycmF5TWV0aG9kKDUpO1xudmFyIGFycmF5RmluZEluZGV4ID0gY3JlYXRlQXJyYXlNZXRob2QoNik7XG52YXIgaWQgPSAwO1xuXG4vLyBmYWxsYmFjayBmb3IgdW5jYXVnaHQgZnJvemVuIGtleXNcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKHRoYXQpIHtcbiAgcmV0dXJuIHRoYXQuX2wgfHwgKHRoYXQuX2wgPSBuZXcgVW5jYXVnaHRGcm96ZW5TdG9yZSgpKTtcbn07XG52YXIgVW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5hID0gW107XG59O1xudmFyIGZpbmRVbmNhdWdodEZyb3plbiA9IGZ1bmN0aW9uIChzdG9yZSwga2V5KSB7XG4gIHJldHVybiBhcnJheUZpbmQoc3RvcmUuYSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gIH0pO1xufTtcblVuY2F1Z2h0RnJvemVuU3RvcmUucHJvdG90eXBlID0ge1xuICBnZXQ6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIHJldHVybiBlbnRyeVsxXTtcbiAgfSxcbiAgaGFzOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICEhZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIGVudHJ5WzFdID0gdmFsdWU7XG4gICAgZWxzZSB0aGlzLmEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9LFxuICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBpbmRleCA9IGFycmF5RmluZEluZGV4KHRoaXMuYSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgICB9KTtcbiAgICBpZiAofmluZGV4KSB0aGlzLmEuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gISF+aW5kZXg7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xuICAgICAgdGhhdC5fdCA9IE5BTUU7ICAgICAgLy8gY29sbGVjdGlvbiB0eXBlXG4gICAgICB0aGF0Ll9pID0gaWQrKzsgICAgICAvLyBjb2xsZWN0aW9uIGlkXG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAvLyBsZWFrIHN0b3JlIGZvciB1bmNhdWdodCBmcm96ZW4gb2JqZWN0c1xuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4zLjMuMiBXZWFrTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuNC4zLjMgV2Vha1NldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgTkFNRSkpWydkZWxldGUnXShrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpICYmIGRlbGV0ZSBkYXRhW3RoaXMuX2ldO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjMuMy40IFdlYWtNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy40LjMuNCBXZWFrU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgTkFNRSkpLmhhcyhrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIGRhdGEgPSBnZXRXZWFrKGFuT2JqZWN0KGtleSksIHRydWUpO1xuICAgIGlmIChkYXRhID09PSB0cnVlKSB1bmNhdWdodEZyb3plblN0b3JlKHRoYXQpLnNldChrZXksIHZhbHVlKTtcbiAgICBlbHNlIGRhdGFbdGhhdC5faV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhhdDtcbiAgfSxcbiAgdWZzdG9yZTogdW5jYXVnaHRGcm96ZW5TdG9yZVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRpdGVyRGV0ZWN0ID0gcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUsIHdyYXBwZXIsIG1ldGhvZHMsIGNvbW1vbiwgSVNfTUFQLCBJU19XRUFLKSB7XG4gIHZhciBCYXNlID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgQyA9IEJhc2U7XG4gIHZhciBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCc7XG4gIHZhciBwcm90byA9IEMgJiYgQy5wcm90b3R5cGU7XG4gIHZhciBPID0ge307XG4gIHZhciBmaXhNZXRob2QgPSBmdW5jdGlvbiAoS0VZKSB7XG4gICAgdmFyIGZuID0gcHJvdG9bS0VZXTtcbiAgICByZWRlZmluZShwcm90bywgS0VZLFxuICAgICAgS0VZID09ICdkZWxldGUnID8gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdoYXMnID8gZnVuY3Rpb24gaGFzKGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdnZXQnID8gZnVuY3Rpb24gZ2V0KGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gdW5kZWZpbmVkIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnYWRkJyA/IGZ1bmN0aW9uIGFkZChhKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTsgcmV0dXJuIHRoaXM7IH1cbiAgICAgICAgOiBmdW5jdGlvbiBzZXQoYSwgYikgeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSwgYik7IHJldHVybiB0aGlzOyB9XG4gICAgKTtcbiAgfTtcbiAgaWYgKHR5cGVvZiBDICE9ICdmdW5jdGlvbicgfHwgIShJU19XRUFLIHx8IHByb3RvLmZvckVhY2ggJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgQygpLmVudHJpZXMoKS5uZXh0KCk7XG4gIH0pKSkge1xuICAgIC8vIGNyZWF0ZSBjb2xsZWN0aW9uIGNvbnN0cnVjdG9yXG4gICAgQyA9IGNvbW1vbi5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gICAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQygpO1xuICAgIC8vIGVhcmx5IGltcGxlbWVudGF0aW9ucyBub3Qgc3VwcG9ydHMgY2hhaW5pbmdcbiAgICB2YXIgSEFTTlRfQ0hBSU5JTkcgPSBpbnN0YW5jZVtBRERFUl0oSVNfV0VBSyA/IHt9IDogLTAsIDEpICE9IGluc3RhbmNlO1xuICAgIC8vIFY4IH4gIENocm9taXVtIDQwLSB3ZWFrLWNvbGxlY3Rpb25zIHRocm93cyBvbiBwcmltaXRpdmVzLCBidXQgc2hvdWxkIHJldHVybiBmYWxzZVxuICAgIHZhciBUSFJPV1NfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgaW5zdGFuY2UuaGFzKDEpOyB9KTtcbiAgICAvLyBtb3N0IGVhcmx5IGltcGxlbWVudGF0aW9ucyBkb2Vzbid0IHN1cHBvcnRzIGl0ZXJhYmxlcywgbW9zdCBtb2Rlcm4gLSBub3QgY2xvc2UgaXQgY29ycmVjdGx5XG4gICAgdmFyIEFDQ0VQVF9JVEVSQUJMRVMgPSAkaXRlckRldGVjdChmdW5jdGlvbiAoaXRlcikgeyBuZXcgQyhpdGVyKTsgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgLy8gZm9yIGVhcmx5IGltcGxlbWVudGF0aW9ucyAtMCBhbmQgKzAgbm90IHRoZSBzYW1lXG4gICAgdmFyIEJVR0dZX1pFUk8gPSAhSVNfV0VBSyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBWOCB+IENocm9taXVtIDQyLSBmYWlscyBvbmx5IHdpdGggNSsgZWxlbWVudHNcbiAgICAgIHZhciAkaW5zdGFuY2UgPSBuZXcgQygpO1xuICAgICAgdmFyIGluZGV4ID0gNTtcbiAgICAgIHdoaWxlIChpbmRleC0tKSAkaW5zdGFuY2VbQURERVJdKGluZGV4LCBpbmRleCk7XG4gICAgICByZXR1cm4gISRpbnN0YW5jZS5oYXMoLTApO1xuICAgIH0pO1xuICAgIGlmICghQUNDRVBUX0lURVJBQkxFUykge1xuICAgICAgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRhcmdldCwgaXRlcmFibGUpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0YXJnZXQsIEMsIE5BTUUpO1xuICAgICAgICB2YXIgdGhhdCA9IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKCksIHRhcmdldCwgQyk7XG4gICAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICAgICAgcmV0dXJuIHRoYXQ7XG4gICAgICB9KTtcbiAgICAgIEMucHJvdG90eXBlID0gcHJvdG87XG4gICAgICBwcm90by5jb25zdHJ1Y3RvciA9IEM7XG4gICAgfVxuICAgIGlmIChUSFJPV1NfT05fUFJJTUlUSVZFUyB8fCBCVUdHWV9aRVJPKSB7XG4gICAgICBmaXhNZXRob2QoJ2RlbGV0ZScpO1xuICAgICAgZml4TWV0aG9kKCdoYXMnKTtcbiAgICAgIElTX01BUCAmJiBmaXhNZXRob2QoJ2dldCcpO1xuICAgIH1cbiAgICBpZiAoQlVHR1lfWkVSTyB8fCBIQVNOVF9DSEFJTklORykgZml4TWV0aG9kKEFEREVSKTtcbiAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIHNob3VsZCBub3QgY29udGFpbnMgLmNsZWFyIG1ldGhvZFxuICAgIGlmIChJU19XRUFLICYmIHByb3RvLmNsZWFyKSBkZWxldGUgcHJvdG8uY2xlYXI7XG4gIH1cblxuICBzZXRUb1N0cmluZ1RhZyhDLCBOQU1FKTtcblxuICBPW05BTUVdID0gQztcbiAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQyAhPSBCYXNlKSwgTyk7XG5cbiAgaWYgKCFJU19XRUFLKSBjb21tb24uc2V0U3Ryb25nKEMsIE5BTUUsIElTX01BUCk7XG5cbiAgcmV0dXJuIEM7XG59O1xuIiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNi45JyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGluZGV4LCB2YWx1ZSkge1xuICBpZiAoaW5kZXggaW4gb2JqZWN0KSAkZGVmaW5lUHJvcGVydHkuZihvYmplY3QsIGluZGV4LCBjcmVhdGVEZXNjKDAsIHZhbHVlKSk7XG4gIGVsc2Ugb2JqZWN0W2luZGV4XSA9IHZhbHVlO1xufTtcbiIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpXG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGdldFRpbWUgPSBEYXRlLnByb3RvdHlwZS5nZXRUaW1lO1xudmFyICR0b0lTT1N0cmluZyA9IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nO1xuXG52YXIgbHogPSBmdW5jdGlvbiAobnVtKSB7XG4gIHJldHVybiBudW0gPiA5ID8gbnVtIDogJzAnICsgbnVtO1xufTtcblxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG5tb2R1bGUuZXhwb3J0cyA9IChmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkdG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZSgtNWUxMyAtIDEpKSAhPSAnMDM4NS0wNy0yNVQwNzowNjozOS45OTlaJztcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICR0b0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKE5hTikpO1xufSkpID8gZnVuY3Rpb24gdG9JU09TdHJpbmcoKSB7XG4gIGlmICghaXNGaW5pdGUoZ2V0VGltZS5jYWxsKHRoaXMpKSkgdGhyb3cgUmFuZ2VFcnJvcignSW52YWxpZCB0aW1lIHZhbHVlJyk7XG4gIHZhciBkID0gdGhpcztcbiAgdmFyIHkgPSBkLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIHZhciBtID0gZC5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgdmFyIHMgPSB5IDwgMCA/ICctJyA6IHkgPiA5OTk5ID8gJysnIDogJyc7XG4gIHJldHVybiBzICsgKCcwMDAwMCcgKyBNYXRoLmFicyh5KSkuc2xpY2UocyA/IC02IDogLTQpICtcbiAgICAnLScgKyBseihkLmdldFVUQ01vbnRoKCkgKyAxKSArICctJyArIGx6KGQuZ2V0VVRDRGF0ZSgpKSArXG4gICAgJ1QnICsgbHooZC5nZXRVVENIb3VycygpKSArICc6JyArIGx6KGQuZ2V0VVRDTWludXRlcygpKSArXG4gICAgJzonICsgbHooZC5nZXRVVENTZWNvbmRzKCkpICsgJy4nICsgKG0gPiA5OSA/IG0gOiAnMCcgKyBseihtKSkgKyAnWic7XG59IDogJHRvSVNPU3RyaW5nO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBOVU1CRVIgPSAnbnVtYmVyJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaGludCkge1xuICBpZiAoaGludCAhPT0gJ3N0cmluZycgJiYgaGludCAhPT0gTlVNQkVSICYmIGhpbnQgIT09ICdkZWZhdWx0JykgdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgaGludCcpO1xuICByZXR1cm4gdG9QcmltaXRpdmUoYW5PYmplY3QodGhpcyksIGhpbnQgIT0gTlVNQkVSKTtcbn07XG4iLCIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsIi8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gKFxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xuKS5zcGxpdCgnLCcpO1xuIiwiLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHNcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcmVzdWx0ID0gZ2V0S2V5cyhpdCk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICBpZiAoZ2V0U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdCk7XG4gICAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChzeW1ib2xzLmxlbmd0aCA+IGkpIGlmIChpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgdGFyZ2V0ID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIHx8IChnbG9iYWxbbmFtZV0gPSB7fSkgOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdO1xuICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pO1xuICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV0gfHwgKGV4cG9ydHNbUFJPVE9UWVBFXSA9IHt9KTtcbiAgdmFyIGtleSwgb3duLCBvdXQsIGV4cDtcbiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IChvd24gPyB0YXJnZXQgOiBzb3VyY2UpW2tleV07XG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICBleHAgPSBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgaWYgKHRhcmdldCkgcmVkZWZpbmUodGFyZ2V0LCBrZXksIG91dCwgdHlwZSAmICRleHBvcnQuVSk7XG4gICAgLy8gZXhwb3J0XG4gICAgaWYgKGV4cG9ydHNba2V5XSAhPSBvdXQpIGhpZGUoZXhwb3J0cywga2V5LCBleHApO1xuICAgIGlmIChJU19QUk9UTyAmJiBleHBQcm90b1trZXldICE9IG91dCkgZXhwUHJvdG9ba2V5XSA9IG91dDtcbiAgfVxufTtcbmdsb2JhbC5jb3JlID0gY29yZTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcbiIsInZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciByZSA9IC8uLztcbiAgdHJ5IHtcbiAgICAnLy4vJ1tLRVldKHJlKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRyeSB7XG4gICAgICByZVtNQVRDSF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiAhJy8uLydbS0VZXShyZSk7XG4gICAgfSBjYXRjaCAoZikgeyAvKiBlbXB0eSAqLyB9XG4gIH0gcmV0dXJuIHRydWU7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi9lczYucmVnZXhwLmV4ZWMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMnKTtcblxudmFyIFNQRUNJRVMgPSB3a3MoJ3NwZWNpZXMnKTtcblxudmFyIFJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gI3JlcGxhY2UgbmVlZHMgYnVpbHQtaW4gc3VwcG9ydCBmb3IgbmFtZWQgZ3JvdXBzLlxuICAvLyAjbWF0Y2ggd29ya3MgZmluZSBiZWNhdXNlIGl0IGp1c3QgcmV0dXJuIHRoZSBleGVjIHJlc3VsdHMsIGV2ZW4gaWYgaXQgaGFzXG4gIC8vIGEgXCJncm9wc1wiIHByb3BlcnR5LlxuICB2YXIgcmUgPSAvLi87XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHJlc3VsdC5ncm91cHMgPSB7IGE6ICc3JyB9O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHJldHVybiAnJy5yZXBsYWNlKHJlLCAnJDxhPicpICE9PSAnNyc7XG59KTtcblxudmFyIFNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQyA9IChmdW5jdGlvbiAoKSB7XG4gIC8vIENocm9tZSA1MSBoYXMgYSBidWdneSBcInNwbGl0XCIgaW1wbGVtZW50YXRpb24gd2hlbiBSZWdFeHAjZXhlYyAhPT0gbmF0aXZlRXhlY1xuICB2YXIgcmUgPSAvKD86KS87XG4gIHZhciBvcmlnaW5hbEV4ZWMgPSByZS5leGVjO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gb3JpZ2luYWxFeGVjLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gIHZhciByZXN1bHQgPSAnYWInLnNwbGl0KHJlKTtcbiAgcmV0dXJuIHJlc3VsdC5sZW5ndGggPT09IDIgJiYgcmVzdWx0WzBdID09PSAnYScgJiYgcmVzdWx0WzFdID09PSAnYic7XG59KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGxlbmd0aCwgZXhlYykge1xuICB2YXIgU1lNQk9MID0gd2tzKEtFWSk7XG5cbiAgdmFyIERFTEVHQVRFU19UT19TWU1CT0wgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN0cmluZyBtZXRob2RzIGNhbGwgc3ltYm9sLW5hbWVkIFJlZ0VwIG1ldGhvZHNcbiAgICB2YXIgTyA9IHt9O1xuICAgIE9bU1lNQk9MXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH07XG4gICAgcmV0dXJuICcnW0tFWV0oTykgIT0gNztcbiAgfSk7XG5cbiAgdmFyIERFTEVHQVRFU19UT19FWEVDID0gREVMRUdBVEVTX1RPX1NZTUJPTCA/ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gU3ltYm9sLW5hbWVkIFJlZ0V4cCBtZXRob2RzIGNhbGwgLmV4ZWNcbiAgICB2YXIgZXhlY0NhbGxlZCA9IGZhbHNlO1xuICAgIHZhciByZSA9IC9hLztcbiAgICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyBleGVjQ2FsbGVkID0gdHJ1ZTsgcmV0dXJuIG51bGw7IH07XG4gICAgaWYgKEtFWSA9PT0gJ3NwbGl0Jykge1xuICAgICAgLy8gUmVnRXhwW0BAc3BsaXRdIGRvZXNuJ3QgY2FsbCB0aGUgcmVnZXgncyBleGVjIG1ldGhvZCwgYnV0IGZpcnN0IGNyZWF0ZXNcbiAgICAgIC8vIGEgbmV3IG9uZS4gV2UgbmVlZCB0byByZXR1cm4gdGhlIHBhdGNoZWQgcmVnZXggd2hlbiBjcmVhdGluZyB0aGUgbmV3IG9uZS5cbiAgICAgIHJlLmNvbnN0cnVjdG9yID0ge307XG4gICAgICByZS5jb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlOyB9O1xuICAgIH1cbiAgICByZVtTWU1CT0xdKCcnKTtcbiAgICByZXR1cm4gIWV4ZWNDYWxsZWQ7XG4gIH0pIDogdW5kZWZpbmVkO1xuXG4gIGlmIChcbiAgICAhREVMRUdBVEVTX1RPX1NZTUJPTCB8fFxuICAgICFERUxFR0FURVNfVE9fRVhFQyB8fFxuICAgIChLRVkgPT09ICdyZXBsYWNlJyAmJiAhUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMpIHx8XG4gICAgKEtFWSA9PT0gJ3NwbGl0JyAmJiAhU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDKVxuICApIHtcbiAgICB2YXIgbmF0aXZlUmVnRXhwTWV0aG9kID0gLy4vW1NZTUJPTF07XG4gICAgdmFyIGZucyA9IGV4ZWMoXG4gICAgICBkZWZpbmVkLFxuICAgICAgU1lNQk9MLFxuICAgICAgJydbS0VZXSxcbiAgICAgIGZ1bmN0aW9uIG1heWJlQ2FsbE5hdGl2ZShuYXRpdmVNZXRob2QsIHJlZ2V4cCwgc3RyLCBhcmcyLCBmb3JjZVN0cmluZ01ldGhvZCkge1xuICAgICAgICBpZiAocmVnZXhwLmV4ZWMgPT09IHJlZ2V4cEV4ZWMpIHtcbiAgICAgICAgICBpZiAoREVMRUdBVEVTX1RPX1NZTUJPTCAmJiAhZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgICAgIC8vIFRoZSBuYXRpdmUgU3RyaW5nIG1ldGhvZCBhbHJlYWR5IGRlbGVnYXRlcyB0byBAQG1ldGhvZCAodGhpc1xuICAgICAgICAgICAgLy8gcG9seWZpbGxlZCBmdW5jdGlvbiksIGxlYXNpbmcgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICAgICAgICAgICAgLy8gV2UgYXZvaWQgaXQgYnkgZGlyZWN0bHkgY2FsbGluZyB0aGUgbmF0aXZlIEBAbWV0aG9kIG1ldGhvZC5cbiAgICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVSZWdFeHBNZXRob2QuY2FsbChyZWdleHAsIHN0ciwgYXJnMikgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZU1ldGhvZC5jYWxsKHN0ciwgcmVnZXhwLCBhcmcyKSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGRvbmU6IGZhbHNlIH07XG4gICAgICB9XG4gICAgKTtcbiAgICB2YXIgc3RyZm4gPSBmbnNbMF07XG4gICAgdmFyIHJ4Zm4gPSBmbnNbMV07XG5cbiAgICByZWRlZmluZShTdHJpbmcucHJvdG90eXBlLCBLRVksIHN0cmZuKTtcbiAgICBoaWRlKFJlZ0V4cC5wcm90b3R5cGUsIFNZTUJPTCwgbGVuZ3RoID09IDJcbiAgICAgIC8vIDIxLjIuNS44IFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXShzdHJpbmcsIHJlcGxhY2VWYWx1ZSlcbiAgICAgIC8vIDIxLjIuNS4xMSBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdKHN0cmluZywgbGltaXQpXG4gICAgICA/IGZ1bmN0aW9uIChzdHJpbmcsIGFyZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcywgYXJnKTsgfVxuICAgICAgLy8gMjEuMi41LjYgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXShzdHJpbmcpXG4gICAgICAvLyAyMS4yLjUuOSBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXShzdHJpbmcpXG4gICAgICA6IGZ1bmN0aW9uIChzdHJpbmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMpOyB9XG4gICAgKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICh0aGF0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcbiAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtRmxhdHRlbkludG9BcnJheVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBJU19DT05DQVRfU1BSRUFEQUJMRSA9IHJlcXVpcmUoJy4vX3drcycpKCdpc0NvbmNhdFNwcmVhZGFibGUnKTtcblxuZnVuY3Rpb24gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBzb3VyY2UsIHNvdXJjZUxlbiwgc3RhcnQsIGRlcHRoLCBtYXBwZXIsIHRoaXNBcmcpIHtcbiAgdmFyIHRhcmdldEluZGV4ID0gc3RhcnQ7XG4gIHZhciBzb3VyY2VJbmRleCA9IDA7XG4gIHZhciBtYXBGbiA9IG1hcHBlciA/IGN0eChtYXBwZXIsIHRoaXNBcmcsIDMpIDogZmFsc2U7XG4gIHZhciBlbGVtZW50LCBzcHJlYWRhYmxlO1xuXG4gIHdoaWxlIChzb3VyY2VJbmRleCA8IHNvdXJjZUxlbikge1xuICAgIGlmIChzb3VyY2VJbmRleCBpbiBzb3VyY2UpIHtcbiAgICAgIGVsZW1lbnQgPSBtYXBGbiA/IG1hcEZuKHNvdXJjZVtzb3VyY2VJbmRleF0sIHNvdXJjZUluZGV4LCBvcmlnaW5hbCkgOiBzb3VyY2Vbc291cmNlSW5kZXhdO1xuXG4gICAgICBzcHJlYWRhYmxlID0gZmFsc2U7XG4gICAgICBpZiAoaXNPYmplY3QoZWxlbWVudCkpIHtcbiAgICAgICAgc3ByZWFkYWJsZSA9IGVsZW1lbnRbSVNfQ09OQ0FUX1NQUkVBREFCTEVdO1xuICAgICAgICBzcHJlYWRhYmxlID0gc3ByZWFkYWJsZSAhPT0gdW5kZWZpbmVkID8gISFzcHJlYWRhYmxlIDogaXNBcnJheShlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNwcmVhZGFibGUgJiYgZGVwdGggPiAwKSB7XG4gICAgICAgIHRhcmdldEluZGV4ID0gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBlbGVtZW50LCB0b0xlbmd0aChlbGVtZW50Lmxlbmd0aCksIHRhcmdldEluZGV4LCBkZXB0aCAtIDEpIC0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0YXJnZXRJbmRleCA+PSAweDFmZmZmZmZmZmZmZmZmKSB0aHJvdyBUeXBlRXJyb3IoKTtcbiAgICAgICAgdGFyZ2V0W3RhcmdldEluZGV4XSA9IGVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIHRhcmdldEluZGV4Kys7XG4gICAgfVxuICAgIHNvdXJjZUluZGV4Kys7XG4gIH1cbiAgcmV0dXJuIHRhcmdldEluZGV4O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZsYXR0ZW5JbnRvQXJyYXk7XG4iLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIEJSRUFLID0ge307XG52YXIgUkVUVVJOID0ge307XG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBlbnRyaWVzLCBmbiwgdGhhdCwgSVRFUkFUT1IpIHtcbiAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcmFibGU7IH0gOiBnZXRJdGVyRm4oaXRlcmFibGUpO1xuICB2YXIgZiA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgc3RlcCwgaXRlcmF0b3IsIHJlc3VsdDtcbiAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuICBpZiAoaXNBcnJheUl0ZXIoaXRlckZuKSkgZm9yIChsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgIHJlc3VsdCA9IGVudHJpZXMgPyBmKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKSA6IGYoaXRlcmFibGVbaW5kZXhdKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTspIHtcbiAgICByZXN1bHQgPSBjYWxsKGl0ZXJhdG9yLCBmLCBzdGVwLnZhbHVlLCBlbnRyaWVzKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbmV4cG9ydHMuQlJFQUsgPSBCUkVBSztcbmV4cG9ydHMuUkVUVVJOID0gUkVUVVJOO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnbmF0aXZlLWZ1bmN0aW9uLXRvLXN0cmluZycsIEZ1bmN0aW9uLnRvU3RyaW5nKTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmICh0eXBlb2YgX19nID09ICdudW1iZXInKSBfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJ2YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbm1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuIiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgdGFyZ2V0LCBDKSB7XG4gIHZhciBTID0gdGFyZ2V0LmNvbnN0cnVjdG9yO1xuICB2YXIgUDtcbiAgaWYgKFMgIT09IEMgJiYgdHlwZW9mIFMgPT0gJ2Z1bmN0aW9uJyAmJiAoUCA9IFMucHJvdG90eXBlKSAhPT0gQy5wcm90b3R5cGUgJiYgaXNPYmplY3QoUCkgJiYgc2V0UHJvdG90eXBlT2YpIHtcbiAgICBzZXRQcm90b3R5cGVPZih0aGF0LCBQKTtcbiAgfSByZXR1cm4gdGhhdDtcbn07XG4iLCIvLyBmYXN0IGFwcGx5LCBodHRwOi8vanNwZXJmLmxua2l0LmNvbS9mYXN0LWFwcGx5LzVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCBhcmdzLCB0aGF0KSB7XG4gIHZhciB1biA9IHRoYXQgPT09IHVuZGVmaW5lZDtcbiAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIHVuID8gZm4oKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0KTtcbiAgICBjYXNlIDE6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICBjYXNlIDQ6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICB9IHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmdzKTtcbn07XG4iLCIvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuIiwiLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCIvLyA3LjIuMiBJc0FycmF5KGFyZ3VtZW50KVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcbiIsIi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0ludGVnZXIoaXQpIHtcbiAgcmV0dXJuICFpc09iamVjdChpdCkgJiYgaXNGaW5pdGUoaXQpICYmIGZsb29yKGl0KSA9PT0gaXQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCIvLyA3LjIuOCBJc1JlZ0V4cChhcmd1bWVudClcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgaXNSZWdFeHA7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjb2YoaXQpID09ICdSZWdFeHAnKTtcbn07XG4iLCIvLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW50cmllcyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZiAocmV0ICE9PSB1bmRlZmluZWQpIGFuT2JqZWN0KHJldC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgdGhyb3cgZTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyICRpdGVyQ3JlYXRlID0gcmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBCVUdHWSA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKTsgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxudmFyIEZGX0lURVJBVE9SID0gJ0BAaXRlcmF0b3InO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQmFzZSwgTkFNRSwgQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgdmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChraW5kKSB7XG4gICAgaWYgKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKSByZXR1cm4gcHJvdG9ba2luZF07XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgfTtcbiAgdmFyIFRBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgdmFyIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFUztcbiAgdmFyIFZBTFVFU19CVUcgPSBmYWxzZTtcbiAgdmFyIHByb3RvID0gQmFzZS5wcm90b3R5cGU7XG4gIHZhciAkbmF0aXZlID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdO1xuICB2YXIgJGRlZmF1bHQgPSAkbmF0aXZlIHx8IGdldE1ldGhvZChERUZBVUxUKTtcbiAgdmFyICRlbnRyaWVzID0gREVGQVVMVCA/ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKSA6IHVuZGVmaW5lZDtcbiAgdmFyICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlO1xuICB2YXIgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTtcbiAgLy8gRml4IG5hdGl2ZVxuICBpZiAoJGFueU5hdGl2ZSkge1xuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoJGFueU5hdGl2ZS5jYWxsKG5ldyBCYXNlKCkpKTtcbiAgICBpZiAoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgSXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XG4gICAgICAvLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXNcbiAgICAgIGlmICghTElCUkFSWSAmJiB0eXBlb2YgSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIGhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICB9XG4gIH1cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZiAoREVGX1ZBTFVFUyAmJiAkbmF0aXZlICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgVkFMVUVTX0JVRyA9IHRydWU7XG4gICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XG4gIH1cbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSkge1xuICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gIH1cbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gPSByZXR1cm5UaGlzO1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiAkZW50cmllc1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChrZXkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKCEoa2V5IGluIHByb3RvKSkgcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpO1xuICB9XG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsInZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7XG4gIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uICgpIHsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBza2lwQ2xvc2luZykge1xuICBpZiAoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gWzddO1xuICAgIHZhciBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHsgZG9uZTogc2FmZSA9IHRydWUgfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcjsgfTtcbiAgICBleGVjKGFycik7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gc2FmZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkb25lLCB2YWx1ZSkge1xuICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZSB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwiLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwbTEgPSBNYXRoLmV4cG0xO1xubW9kdWxlLmV4cG9ydHMgPSAoISRleHBtMVxuICAvLyBPbGQgRkYgYnVnXG4gIHx8ICRleHBtMSgxMCkgPiAyMjAyNS40NjU3OTQ4MDY3MTkgfHwgJGV4cG0xKDEwKSA8IDIyMDI1LjQ2NTc5NDgwNjcxNjUxNjhcbiAgLy8gVG9yIEJyb3dzZXIgYnVnXG4gIHx8ICRleHBtMSgtMmUtMTcpICE9IC0yZS0xN1xuKSA/IGZ1bmN0aW9uIGV4cG0xKHgpIHtcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogeCA+IC0xZS02ICYmIHggPCAxZS02ID8geCArIHggKiB4IC8gMiA6IE1hdGguZXhwKHgpIC0gMTtcbn0gOiAkZXhwbTE7XG4iLCIvLyAyMC4yLjIuMTYgTWF0aC5mcm91bmQoeClcbnZhciBzaWduID0gcmVxdWlyZSgnLi9fbWF0aC1zaWduJyk7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgRVBTSUxPTiA9IHBvdygyLCAtNTIpO1xudmFyIEVQU0lMT04zMiA9IHBvdygyLCAtMjMpO1xudmFyIE1BWDMyID0gcG93KDIsIDEyNykgKiAoMiAtIEVQU0lMT04zMik7XG52YXIgTUlOMzIgPSBwb3coMiwgLTEyNik7XG5cbnZhciByb3VuZFRpZXNUb0V2ZW4gPSBmdW5jdGlvbiAobikge1xuICByZXR1cm4gbiArIDEgLyBFUFNJTE9OIC0gMSAvIEVQU0lMT047XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguZnJvdW5kIHx8IGZ1bmN0aW9uIGZyb3VuZCh4KSB7XG4gIHZhciAkYWJzID0gTWF0aC5hYnMoeCk7XG4gIHZhciAkc2lnbiA9IHNpZ24oeCk7XG4gIHZhciBhLCByZXN1bHQ7XG4gIGlmICgkYWJzIDwgTUlOMzIpIHJldHVybiAkc2lnbiAqIHJvdW5kVGllc1RvRXZlbigkYWJzIC8gTUlOMzIgLyBFUFNJTE9OMzIpICogTUlOMzIgKiBFUFNJTE9OMzI7XG4gIGEgPSAoMSArIEVQU0lMT04zMiAvIEVQU0lMT04pICogJGFicztcbiAgcmVzdWx0ID0gYSAtIChhIC0gJGFicyk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgaWYgKHJlc3VsdCA+IE1BWDMyIHx8IHJlc3VsdCAhPSByZXN1bHQpIHJldHVybiAkc2lnbiAqIEluZmluaXR5O1xuICByZXR1cm4gJHNpZ24gKiByZXN1bHQ7XG59O1xuIiwiLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5sb2cxcCB8fCBmdW5jdGlvbiBsb2cxcCh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA+IC0xZS04ICYmIHggPCAxZS04ID8geCAtIHggKiB4IC8gMiA6IE1hdGgubG9nKDEgKyB4KTtcbn07XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguc2NhbGUgfHwgZnVuY3Rpb24gc2NhbGUoeCwgaW5Mb3csIGluSGlnaCwgb3V0TG93LCBvdXRIaWdoKSB7XG4gIGlmIChcbiAgICBhcmd1bWVudHMubGVuZ3RoID09PSAwXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCB4ICE9IHhcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IGluTG93ICE9IGluTG93XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCBpbkhpZ2ggIT0gaW5IaWdoXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCBvdXRMb3cgIT0gb3V0TG93XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCBvdXRIaWdoICE9IG91dEhpZ2hcbiAgKSByZXR1cm4gTmFOO1xuICBpZiAoeCA9PT0gSW5maW5pdHkgfHwgeCA9PT0gLUluZmluaXR5KSByZXR1cm4geDtcbiAgcmV0dXJuICh4IC0gaW5Mb3cpICogKG91dEhpZ2ggLSBvdXRMb3cpIC8gKGluSGlnaCAtIGluTG93KSArIG91dExvdztcbn07XG4iLCIvLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguc2lnbiB8fCBmdW5jdGlvbiBzaWduKHgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICByZXR1cm4gKHggPSAreCkgPT0gMCB8fCB4ICE9IHggPyB4IDogeCA8IDAgPyAtMSA6IDE7XG59O1xuIiwidmFyIE1FVEEgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgc2V0RGVzYyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaWQgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBzZXREZXNjKGl0LCBNRVRBLCB7IHZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpIHNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiBNRVRBLFxuICBORUVEOiBmYWxzZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2VhazogZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuIiwidmFyIE1hcCA9IHJlcXVpcmUoJy4vZXM2Lm1hcCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnbWV0YWRhdGEnKTtcbnZhciBzdG9yZSA9IHNoYXJlZC5zdG9yZSB8fCAoc2hhcmVkLnN0b3JlID0gbmV3IChyZXF1aXJlKCcuL2VzNi53ZWFrLW1hcCcpKSgpKTtcblxudmFyIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAgPSBmdW5jdGlvbiAodGFyZ2V0LCB0YXJnZXRLZXksIGNyZWF0ZSkge1xuICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBzdG9yZS5nZXQodGFyZ2V0KTtcbiAgaWYgKCF0YXJnZXRNZXRhZGF0YSkge1xuICAgIGlmICghY3JlYXRlKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIHN0b3JlLnNldCh0YXJnZXQsIHRhcmdldE1ldGFkYXRhID0gbmV3IE1hcCgpKTtcbiAgfVxuICB2YXIga2V5TWV0YWRhdGEgPSB0YXJnZXRNZXRhZGF0YS5nZXQodGFyZ2V0S2V5KTtcbiAgaWYgKCFrZXlNZXRhZGF0YSkge1xuICAgIGlmICghY3JlYXRlKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIHRhcmdldE1ldGFkYXRhLnNldCh0YXJnZXRLZXksIGtleU1ldGFkYXRhID0gbmV3IE1hcCgpKTtcbiAgfSByZXR1cm4ga2V5TWV0YWRhdGE7XG59O1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBmYWxzZSk7XG4gIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBtZXRhZGF0YU1hcC5oYXMoTWV0YWRhdGFLZXkpO1xufTtcbnZhciBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgZmFsc2UpO1xuICByZXR1cm4gbWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IG1ldGFkYXRhTWFwLmdldChNZXRhZGF0YUtleSk7XG59O1xudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUsIE8sIFApIHtcbiAgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCB0cnVlKS5zZXQoTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUpO1xufTtcbnZhciBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHRhcmdldEtleSkge1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKHRhcmdldCwgdGFyZ2V0S2V5LCBmYWxzZSk7XG4gIHZhciBrZXlzID0gW107XG4gIGlmIChtZXRhZGF0YU1hcCkgbWV0YWRhdGFNYXAuZm9yRWFjaChmdW5jdGlvbiAoXywga2V5KSB7IGtleXMucHVzaChrZXkpOyB9KTtcbiAgcmV0dXJuIGtleXM7XG59O1xudmFyIHRvTWV0YUtleSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xudmFyIGV4cCA9IGZ1bmN0aW9uIChPKSB7XG4gICRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIE8pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHN0b3JlOiBzdG9yZSxcbiAgbWFwOiBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwLFxuICBoYXM6IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEsXG4gIGdldDogb3JkaW5hcnlHZXRPd25NZXRhZGF0YSxcbiAgc2V0OiBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhLFxuICBrZXlzOiBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyxcbiAga2V5OiB0b01ldGFLZXksXG4gIGV4cDogZXhwXG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIG1hY3JvdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQ7XG52YXIgT2JzZXJ2ZXIgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlO1xudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBoZWFkLCBsYXN0LCBub3RpZnk7XG5cbiAgdmFyIGZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJlbnQsIGZuO1xuICAgIGlmIChpc05vZGUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSkgcGFyZW50LmV4aXQoKTtcbiAgICB3aGlsZSAoaGVhZCkge1xuICAgICAgZm4gPSBoZWFkLmZuO1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChoZWFkKSBub3RpZnkoKTtcbiAgICAgICAgZWxzZSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0gbGFzdCA9IHVuZGVmaW5lZDtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQuZW50ZXIoKTtcbiAgfTtcblxuICAvLyBOb2RlLmpzXG4gIGlmIChpc05vZGUpIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgICB9O1xuICAvLyBicm93c2VycyB3aXRoIE11dGF0aW9uT2JzZXJ2ZXIsIGV4Y2VwdCBpT1MgU2FmYXJpIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzMzOVxuICB9IGVsc2UgaWYgKE9ic2VydmVyICYmICEoZ2xvYmFsLm5hdmlnYXRvciAmJiBnbG9iYWwubmF2aWdhdG9yLnN0YW5kYWxvbmUpKSB7XG4gICAgdmFyIHRvZ2dsZSA9IHRydWU7XG4gICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgbmV3IE9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBub2RlLmRhdGEgPSB0b2dnbGUgPSAhdG9nZ2xlO1xuICAgIH07XG4gIC8vIGVudmlyb25tZW50cyB3aXRoIG1heWJlIG5vbi1jb21wbGV0ZWx5IGNvcnJlY3QsIGJ1dCBleGlzdGVudCBQcm9taXNlXG4gIH0gZWxzZSBpZiAoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpIHtcbiAgICAvLyBQcm9taXNlLnJlc29sdmUgd2l0aG91dCBhbiBhcmd1bWVudCB0aHJvd3MgYW4gZXJyb3IgaW4gTEcgV2ViT1MgMlxuICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvbWlzZS50aGVuKGZsdXNoKTtcbiAgICB9O1xuICAvLyBmb3Igb3RoZXIgZW52aXJvbm1lbnRzIC0gbWFjcm90YXNrIGJhc2VkIG9uOlxuICAvLyAtIHNldEltbWVkaWF0ZVxuICAvLyAtIE1lc3NhZ2VDaGFubmVsXG4gIC8vIC0gd2luZG93LnBvc3RNZXNzYWdcbiAgLy8gLSBvbnJlYWR5c3RhdGVjaGFuZ2VcbiAgLy8gLSBzZXRUaW1lb3V0XG4gIH0gZWxzZSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gc3RyYW5nZSBJRSArIHdlYnBhY2sgZGV2IHNlcnZlciBidWcgLSB1c2UgLmNhbGwoZ2xvYmFsKVxuICAgICAgbWFjcm90YXNrLmNhbGwoZ2xvYmFsLCBmbHVzaCk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZm4pIHtcbiAgICB2YXIgdGFzayA9IHsgZm46IGZuLCBuZXh0OiB1bmRlZmluZWQgfTtcbiAgICBpZiAobGFzdCkgbGFzdC5uZXh0ID0gdGFzaztcbiAgICBpZiAoIWhlYWQpIHtcbiAgICAgIGhlYWQgPSB0YXNrO1xuICAgICAgbm90aWZ5KCk7XG4gICAgfSBsYXN0ID0gdGFzaztcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyNS40LjEuNSBOZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcblxuZnVuY3Rpb24gUHJvbWlzZUNhcGFiaWxpdHkoQykge1xuICB2YXIgcmVzb2x2ZSwgcmVqZWN0O1xuICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbiAoJCRyZXNvbHZlLCAkJHJlamVjdCkge1xuICAgIGlmIChyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICByZXNvbHZlID0gJCRyZXNvbHZlO1xuICAgIHJlamVjdCA9ICQkcmVqZWN0O1xuICB9KTtcbiAgdGhpcy5yZXNvbHZlID0gYUZ1bmN0aW9uKHJlc29sdmUpO1xuICB0aGlzLnJlamVjdCA9IGFGdW5jdGlvbihyZWplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gKEMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjIuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlLCAuLi4pXG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgJGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG5cbi8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxubW9kdWxlLmV4cG9ydHMgPSAhJGFzc2lnbiB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgdmFyIEEgPSB7fTtcbiAgdmFyIEIgPSB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBTID0gU3ltYm9sKCk7XG4gIHZhciBLID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgQVtTXSA9IDc7XG4gIEsuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGspIHsgQltrXSA9IGs7IH0pO1xuICByZXR1cm4gJGFzc2lnbih7fSwgQSlbU10gIT0gNyB8fCBPYmplY3Qua2V5cygkYXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gSztcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdmFyIFQgPSB0b09iamVjdCh0YXJnZXQpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDE7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICB2YXIgaXNFbnVtID0gcElFLmY7XG4gIHdoaWxlIChhTGVuID4gaW5kZXgpIHtcbiAgICB2YXIgUyA9IElPYmplY3QoYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICB2YXIga2V5cyA9IGdldFN5bWJvbHMgPyBnZXRLZXlzKFMpLmNvbmNhdChnZXRTeW1ib2xzKFMpKSA6IGdldEtleXMoUyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBqID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBqKSB7XG4gICAgICBrZXkgPSBrZXlzW2orK107XG4gICAgICBpZiAoIURFU0NSSVBUT1JTIHx8IGlzRW51bS5jYWxsKFMsIGtleSkpIFRba2V5XSA9IFNba2V5XTtcbiAgICB9XG4gIH0gcmV0dXJuIFQ7XG59IDogJGFzc2lnbjtcbiIsIi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZFBzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIEVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnaWZyYW1lJyk7XG4gIHZhciBpID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB2YXIgbHQgPSAnPCc7XG4gIHZhciBndCA9ICc+JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgcmVxdWlyZSgnLi9faHRtbCcpLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmxcbiAgLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDtcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlIChpLS0pIGRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbaV1dO1xuICByZXR1cm4gY3JlYXRlRGljdCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eSgpO1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBnZXRLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpID0gMDtcbiAgdmFyIFA7XG4gIHdoaWxlIChsZW5ndGggPiBpKSBkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xuICByZXR1cm4gTztcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBGb3JjZWQgcmVwbGFjZW1lbnQgcHJvdG90eXBlIGFjY2Vzc29ycyBtZXRob2RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKSB8fCAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHZhciBLID0gTWF0aC5yYW5kb20oKTtcbiAgLy8gSW4gRkYgdGhyb3dzIG9ubHkgZGVmaW5lIG1ldGhvZHNcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmLCBuby11c2VsZXNzLWNhbGxcbiAgX19kZWZpbmVTZXR0ZXJfXy5jYWxsKG51bGwsIEssIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG4gIGRlbGV0ZSByZXF1aXJlKCcuL19nbG9iYWwnKVtLXTtcbn0pO1xuIiwidmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiBnT1BOKGl0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpO1xufTtcbiIsIi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsIi8vIG1vc3QgT2JqZWN0IG1ldGhvZHMgYnkgRVM2IHNob3VsZCBhY2NlcHQgcHJpbWl0aXZlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgZXhlYykge1xuICB2YXIgZm4gPSAoY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV07XG4gIHZhciBleHAgPSB7fTtcbiAgZXhwW0tFWV0gPSBleGVjKGZuKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IGZuKDEpOyB9KSwgJ09iamVjdCcsIGV4cCk7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgaXNFbnVtID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpc0VudHJpZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KGl0KTtcbiAgICB2YXIga2V5cyA9IGdldEtleXMoTyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaSkge1xuICAgICAga2V5ID0ga2V5c1tpKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBpc0VudW0uY2FsbChPLCBrZXkpKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGlzRW50cmllcyA/IFtrZXksIE9ba2V5XV0gOiBPW2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufTtcbiIsIi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIFJlZmxlY3QgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBSZWZsZWN0ICYmIFJlZmxlY3Qub3duS2V5cyB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KSB7XG4gIHZhciBrZXlzID0gZ09QTi5mKGFuT2JqZWN0KGl0KSk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICByZXR1cm4gZ2V0U3ltYm9scyA/IGtleXMuY29uY2F0KGdldFN5bWJvbHMoaXQpKSA6IGtleXM7XG59O1xuIiwidmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VGbG9hdDtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcblxubW9kdWxlLmV4cG9ydHMgPSAxIC8gJHBhcnNlRmxvYXQocmVxdWlyZSgnLi9fc3RyaW5nLXdzJykgKyAnLTAnKSAhPT0gLUluZmluaXR5ID8gZnVuY3Rpb24gcGFyc2VGbG9hdChzdHIpIHtcbiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKTtcbiAgdmFyIHJlc3VsdCA9ICRwYXJzZUZsb2F0KHN0cmluZyk7XG4gIHJldHVybiByZXN1bHQgPT09IDAgJiYgc3RyaW5nLmNoYXJBdCgwKSA9PSAnLScgPyAtMCA6IHJlc3VsdDtcbn0gOiAkcGFyc2VGbG9hdDtcbiIsInZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wYXJzZUludDtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcbnZhciB3cyA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpO1xudmFyIGhleCA9IC9eWy0rXT8wW3hYXS87XG5cbm1vZHVsZS5leHBvcnRzID0gJHBhcnNlSW50KHdzICsgJzA4JykgIT09IDggfHwgJHBhcnNlSW50KHdzICsgJzB4MTYnKSAhPT0gMjIgPyBmdW5jdGlvbiBwYXJzZUludChzdHIsIHJhZGl4KSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHJldHVybiAkcGFyc2VJbnQoc3RyaW5nLCAocmFkaXggPj4+IDApIHx8IChoZXgudGVzdChzdHJpbmcpID8gMTYgOiAxMCkpO1xufSA6ICRwYXJzZUludDtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlOiBmYWxzZSwgdjogZXhlYygpIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4geyBlOiB0cnVlLCB2OiBlIH07XG4gIH1cbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDLCB4KSB7XG4gIGFuT2JqZWN0KEMpO1xuICBpZiAoaXNPYmplY3QoeCkgJiYgeC5jb25zdHJ1Y3RvciA9PT0gQykgcmV0dXJuIHg7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYoQyk7XG4gIHZhciByZXNvbHZlID0gcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgcmVzb2x2ZSh4KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgc2FmZSkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSByZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIHNhZmUpO1xuICByZXR1cm4gdGFyZ2V0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFNSQyA9IHJlcXVpcmUoJy4vX3VpZCcpKCdzcmMnKTtcbnZhciAkdG9TdHJpbmcgPSByZXF1aXJlKCcuL19mdW5jdGlvbi10by1zdHJpbmcnKTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyIFRQTCA9ICgnJyArICR0b1N0cmluZykuc3BsaXQoVE9fU1RSSU5HKTtcblxucmVxdWlyZSgnLi9fY29yZScpLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuICR0b1N0cmluZy5jYWxsKGl0KTtcbn07XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbCwgc2FmZSkge1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWwgPT0gJ2Z1bmN0aW9uJztcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsICduYW1lJykgfHwgaGlkZSh2YWwsICduYW1lJywga2V5KTtcbiAgaWYgKE9ba2V5XSA9PT0gdmFsKSByZXR1cm47XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCBTUkMpIHx8IGhpZGUodmFsLCBTUkMsIE9ba2V5XSA/ICcnICsgT1trZXldIDogVFBMLmpvaW4oU3RyaW5nKGtleSkpKTtcbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIGlmICghc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH0gZWxzZSBpZiAoT1trZXldKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2Uge1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgdGhpc1tTUkNdIHx8ICR0b1N0cmluZy5jYWxsKHRoaXMpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIGJ1aWx0aW5FeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xuXG4gLy8gYFJlZ0V4cEV4ZWNgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwZXhlY1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUiwgUykge1xuICB2YXIgZXhlYyA9IFIuZXhlYztcbiAgaWYgKHR5cGVvZiBleGVjID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHJlc3VsdCA9IGV4ZWMuY2FsbChSLCBTKTtcbiAgICBpZiAodHlwZW9mIHJlc3VsdCAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZ0V4cCBleGVjIG1ldGhvZCByZXR1cm5lZCBzb21ldGhpbmcgb3RoZXIgdGhhbiBhbiBPYmplY3Qgb3IgbnVsbCcpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGlmIChjbGFzc29mKFIpICE9PSAnUmVnRXhwJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZ0V4cCNleGVjIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgcmVjZWl2ZXInKTtcbiAgfVxuICByZXR1cm4gYnVpbHRpbkV4ZWMuY2FsbChSLCBTKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWdleHBGbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG5cbnZhciBuYXRpdmVFeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xuLy8gVGhpcyBhbHdheXMgcmVmZXJzIHRvIHRoZSBuYXRpdmUgaW1wbGVtZW50YXRpb24sIGJlY2F1c2UgdGhlXG4vLyBTdHJpbmcjcmVwbGFjZSBwb2x5ZmlsbCB1c2VzIC4vZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYy5qcyxcbi8vIHdoaWNoIGxvYWRzIHRoaXMgZmlsZSBiZWZvcmUgcGF0Y2hpbmcgdGhlIG1ldGhvZC5cbnZhciBuYXRpdmVSZXBsYWNlID0gU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlO1xuXG52YXIgcGF0Y2hlZEV4ZWMgPSBuYXRpdmVFeGVjO1xuXG52YXIgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xuXG52YXIgVVBEQVRFU19MQVNUX0lOREVYX1dST05HID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlMSA9IC9hLyxcbiAgICAgIHJlMiA9IC9iKi9nO1xuICBuYXRpdmVFeGVjLmNhbGwocmUxLCAnYScpO1xuICBuYXRpdmVFeGVjLmNhbGwocmUyLCAnYScpO1xuICByZXR1cm4gcmUxW0xBU1RfSU5ERVhdICE9PSAwIHx8IHJlMltMQVNUX0lOREVYXSAhPT0gMDtcbn0pKCk7XG5cbi8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwLCBjb3BpZWQgZnJvbSBlczUtc2hpbSdzIFN0cmluZyNzcGxpdCBwYXRjaC5cbnZhciBOUENHX0lOQ0xVREVEID0gLygpPz8vLmV4ZWMoJycpWzFdICE9PSB1bmRlZmluZWQ7XG5cbnZhciBQQVRDSCA9IFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyB8fCBOUENHX0lOQ0xVREVEO1xuXG5pZiAoUEFUQ0gpIHtcbiAgcGF0Y2hlZEV4ZWMgPSBmdW5jdGlvbiBleGVjKHN0cikge1xuICAgIHZhciByZSA9IHRoaXM7XG4gICAgdmFyIGxhc3RJbmRleCwgcmVDb3B5LCBtYXRjaCwgaTtcblxuICAgIGlmIChOUENHX0lOQ0xVREVEKSB7XG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeJyArIHJlLnNvdXJjZSArICckKD8hXFxcXHMpJywgcmVnZXhwRmxhZ3MuY2FsbChyZSkpO1xuICAgIH1cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HKSBsYXN0SW5kZXggPSByZVtMQVNUX0lOREVYXTtcblxuICAgIG1hdGNoID0gbmF0aXZlRXhlYy5jYWxsKHJlLCBzdHIpO1xuXG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyAmJiBtYXRjaCkge1xuICAgICAgcmVbTEFTVF9JTkRFWF0gPSByZS5nbG9iYWwgPyBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCA6IGxhc3RJbmRleDtcbiAgICB9XG4gICAgaWYgKE5QQ0dfSU5DTFVERUQgJiYgbWF0Y2ggJiYgbWF0Y2gubGVuZ3RoID4gMSkge1xuICAgICAgLy8gRml4IGJyb3dzZXJzIHdob3NlIGBleGVjYCBtZXRob2RzIGRvbid0IGNvbnNpc3RlbnRseSByZXR1cm4gYHVuZGVmaW5lZGBcbiAgICAgIC8vIGZvciBOUENHLCBsaWtlIElFOC4gTk9URTogVGhpcyBkb2Vzbicgd29yayBmb3IgLyguPyk/L1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvb3AtZnVuY1xuICAgICAgbmF0aXZlUmVwbGFjZS5jYWxsKG1hdGNoWzBdLCByZUNvcHksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAyOyBpKyspIHtcbiAgICAgICAgICBpZiAoYXJndW1lbnRzW2ldID09PSB1bmRlZmluZWQpIG1hdGNoW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2g7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGF0Y2hlZEV4ZWM7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyZWdFeHAsIHJlcGxhY2UpIHtcbiAgdmFyIHJlcGxhY2VyID0gcmVwbGFjZSA9PT0gT2JqZWN0KHJlcGxhY2UpID8gZnVuY3Rpb24gKHBhcnQpIHtcbiAgICByZXR1cm4gcmVwbGFjZVtwYXJ0XTtcbiAgfSA6IHJlcGxhY2U7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gU3RyaW5nKGl0KS5yZXBsYWNlKHJlZ0V4cCwgcmVwbGFjZXIpO1xuICB9O1xufTtcbiIsIi8vIDcuMi45IFNhbWVWYWx1ZSh4LCB5KVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuaXMgfHwgZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiB4ID09PSB5ID8geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHkgOiB4ICE9IHggJiYgeSAhPSB5O1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTExFQ1RJT04pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsIENPTExFQ1RJT04sIHsgZnJvbTogZnVuY3Rpb24gZnJvbShzb3VyY2UgLyogLCBtYXBGbiwgdGhpc0FyZyAqLykge1xuICAgIHZhciBtYXBGbiA9IGFyZ3VtZW50c1sxXTtcbiAgICB2YXIgbWFwcGluZywgQSwgbiwgY2I7XG4gICAgYUZ1bmN0aW9uKHRoaXMpO1xuICAgIG1hcHBpbmcgPSBtYXBGbiAhPT0gdW5kZWZpbmVkO1xuICAgIGlmIChtYXBwaW5nKSBhRnVuY3Rpb24obWFwRm4pO1xuICAgIGlmIChzb3VyY2UgPT0gdW5kZWZpbmVkKSByZXR1cm4gbmV3IHRoaXMoKTtcbiAgICBBID0gW107XG4gICAgaWYgKG1hcHBpbmcpIHtcbiAgICAgIG4gPSAwO1xuICAgICAgY2IgPSBjdHgobWFwRm4sIGFyZ3VtZW50c1syXSwgMik7XG4gICAgICBmb3JPZihzb3VyY2UsIGZhbHNlLCBmdW5jdGlvbiAobmV4dEl0ZW0pIHtcbiAgICAgICAgQS5wdXNoKGNiKG5leHRJdGVtLCBuKyspKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3JPZihzb3VyY2UsIGZhbHNlLCBBLnB1c2gsIEEpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IHRoaXMoQSk7XG4gIH0gfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09MTEVDVElPTikge1xuICAkZXhwb3J0KCRleHBvcnQuUywgQ09MTEVDVElPTiwgeyBvZjogZnVuY3Rpb24gb2YoKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIEEgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoLS0pIEFbbGVuZ3RoXSA9IGFyZ3VtZW50c1tsZW5ndGhdO1xuICAgIHJldHVybiBuZXcgdGhpcyhBKTtcbiAgfSB9KTtcbn07XG4iLCIvLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGNoZWNrID0gZnVuY3Rpb24gKE8sIHByb3RvKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBpZiAoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCkgdGhyb3cgVHlwZUVycm9yKHByb3RvICsgXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpO1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZnVuY3Rpb24gKHRlc3QsIGJ1Z2d5LCBzZXQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNldCA9IHJlcXVpcmUoJy4vX2N0eCcpKEZ1bmN0aW9uLmNhbGwsIHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTtcbiAgICAgICAgc2V0KHRlc3QsIFtdKTtcbiAgICAgICAgYnVnZ3kgPSAhKHRlc3QgaW5zdGFuY2VvZiBBcnJheSk7XG4gICAgICB9IGNhdGNoIChlKSB7IGJ1Z2d5ID0gdHJ1ZTsgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgICAgIGNoZWNrKE8sIHByb3RvKTtcbiAgICAgICAgaWYgKGJ1Z2d5KSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgICAgICBlbHNlIHNldChPLCBwcm90byk7XG4gICAgICAgIHJldHVybiBPO1xuICAgICAgfTtcbiAgICB9KHt9LCBmYWxzZSkgOiB1bmRlZmluZWQpLFxuICBjaGVjazogY2hlY2tcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSkge1xuICB2YXIgQyA9IGdsb2JhbFtLRVldO1xuICBpZiAoREVTQ1JJUFRPUlMgJiYgQyAmJiAhQ1tTUEVDSUVTXSkgZFAuZihDLCBTUEVDSUVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfVxuICB9KTtcbn07XG4iLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIHRhZywgc3RhdCkge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSkgZGVmKGl0LCBUQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pO1xufTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgna2V5cycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBzaGFyZWRba2V5XSB8fCAoc2hhcmVkW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuIiwidmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xufSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICB2ZXJzaW9uOiBjb3JlLnZlcnNpb24sXG4gIG1vZGU6IHJlcXVpcmUoJy4vX2xpYnJhcnknKSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDE5IERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xufSk7XG4iLCIvLyA3LjMuMjAgU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3RvcilcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIEQpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gRCA6IGFGdW5jdGlvbihTKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtZXRob2QsIGFyZykge1xuICByZXR1cm4gISFtZXRob2QgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNhbGxcbiAgICBhcmcgPyBtZXRob2QuY2FsbChudWxsLCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIDEpIDogbWV0aG9kLmNhbGwobnVsbCk7XG4gIH0pO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBwb3MpIHtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgICB2YXIgaSA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBsID0gcy5sZW5ndGg7XG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGkgPCAwIHx8IGkgPj0gbCkgcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG4iLCIvLyBoZWxwZXIgZm9yIFN0cmluZyN7c3RhcnRzV2l0aCwgZW5kc1dpdGgsIGluY2x1ZGVzfVxudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgc2VhcmNoU3RyaW5nLCBOQU1FKSB7XG4gIGlmIChpc1JlZ0V4cChzZWFyY2hTdHJpbmcpKSB0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZyMnICsgTkFNRSArIFwiIGRvZXNuJ3QgYWNjZXB0IHJlZ2V4IVwiKTtcbiAgcmV0dXJuIFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbn07XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIHF1b3QgPSAvXCIvZztcbi8vIEIuMi4zLjIuMSBDcmVhdGVIVE1MKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKVxudmFyIGNyZWF0ZUhUTUwgPSBmdW5jdGlvbiAoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgdmFyIFMgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTtcbiAgdmFyIHAxID0gJzwnICsgdGFnO1xuICBpZiAoYXR0cmlidXRlICE9PSAnJykgcDEgKz0gJyAnICsgYXR0cmlidXRlICsgJz1cIicgKyBTdHJpbmcodmFsdWUpLnJlcGxhY2UocXVvdCwgJyZxdW90OycpICsgJ1wiJztcbiAgcmV0dXJuIHAxICsgJz4nICsgUyArICc8LycgKyB0YWcgKyAnPic7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSwgZXhlYykge1xuICB2YXIgTyA9IHt9O1xuICBPW05BTUVdID0gZXhlYyhjcmVhdGVIVE1MKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRlc3QgPSAnJ1tOQU1FXSgnXCInKTtcbiAgICByZXR1cm4gdGVzdCAhPT0gdGVzdC50b0xvd2VyQ2FzZSgpIHx8IHRlc3Quc3BsaXQoJ1wiJykubGVuZ3RoID4gMztcbiAgfSksICdTdHJpbmcnLCBPKTtcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIG1heExlbmd0aCwgZmlsbFN0cmluZywgbGVmdCkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgdmFyIHN0cmluZ0xlbmd0aCA9IFMubGVuZ3RoO1xuICB2YXIgZmlsbFN0ciA9IGZpbGxTdHJpbmcgPT09IHVuZGVmaW5lZCA/ICcgJyA6IFN0cmluZyhmaWxsU3RyaW5nKTtcbiAgdmFyIGludE1heExlbmd0aCA9IHRvTGVuZ3RoKG1heExlbmd0aCk7XG4gIGlmIChpbnRNYXhMZW5ndGggPD0gc3RyaW5nTGVuZ3RoIHx8IGZpbGxTdHIgPT0gJycpIHJldHVybiBTO1xuICB2YXIgZmlsbExlbiA9IGludE1heExlbmd0aCAtIHN0cmluZ0xlbmd0aDtcbiAgdmFyIHN0cmluZ0ZpbGxlciA9IHJlcGVhdC5jYWxsKGZpbGxTdHIsIE1hdGguY2VpbChmaWxsTGVuIC8gZmlsbFN0ci5sZW5ndGgpKTtcbiAgaWYgKHN0cmluZ0ZpbGxlci5sZW5ndGggPiBmaWxsTGVuKSBzdHJpbmdGaWxsZXIgPSBzdHJpbmdGaWxsZXIuc2xpY2UoMCwgZmlsbExlbik7XG4gIHJldHVybiBsZWZ0ID8gc3RyaW5nRmlsbGVyICsgUyA6IFMgKyBzdHJpbmdGaWxsZXI7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlcGVhdChjb3VudCkge1xuICB2YXIgc3RyID0gU3RyaW5nKGRlZmluZWQodGhpcykpO1xuICB2YXIgcmVzID0gJyc7XG4gIHZhciBuID0gdG9JbnRlZ2VyKGNvdW50KTtcbiAgaWYgKG4gPCAwIHx8IG4gPT0gSW5maW5pdHkpIHRocm93IFJhbmdlRXJyb3IoXCJDb3VudCBjYW4ndCBiZSBuZWdhdGl2ZVwiKTtcbiAgZm9yICg7biA+IDA7IChuID4+Pj0gMSkgJiYgKHN0ciArPSBzdHIpKSBpZiAobiAmIDEpIHJlcyArPSBzdHI7XG4gIHJldHVybiByZXM7XG59O1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzcGFjZXMgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKTtcbnZhciBzcGFjZSA9ICdbJyArIHNwYWNlcyArICddJztcbnZhciBub24gPSAnXFx1MjAwYlxcdTAwODUnO1xudmFyIGx0cmltID0gUmVnRXhwKCdeJyArIHNwYWNlICsgc3BhY2UgKyAnKicpO1xudmFyIHJ0cmltID0gUmVnRXhwKHNwYWNlICsgc3BhY2UgKyAnKiQnKTtcblxudmFyIGV4cG9ydGVyID0gZnVuY3Rpb24gKEtFWSwgZXhlYywgQUxJQVMpIHtcbiAgdmFyIGV4cCA9IHt9O1xuICB2YXIgRk9SQ0UgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhc3BhY2VzW0tFWV0oKSB8fCBub25bS0VZXSgpICE9IG5vbjtcbiAgfSk7XG4gIHZhciBmbiA9IGV4cFtLRVldID0gRk9SQ0UgPyBleGVjKHRyaW0pIDogc3BhY2VzW0tFWV07XG4gIGlmIChBTElBUykgZXhwW0FMSUFTXSA9IGZuO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFLCAnU3RyaW5nJywgZXhwKTtcbn07XG5cbi8vIDEgLT4gU3RyaW5nI3RyaW1MZWZ0XG4vLyAyIC0+IFN0cmluZyN0cmltUmlnaHRcbi8vIDMgLT4gU3RyaW5nI3RyaW1cbnZhciB0cmltID0gZXhwb3J0ZXIudHJpbSA9IGZ1bmN0aW9uIChzdHJpbmcsIFRZUEUpIHtcbiAgc3RyaW5nID0gU3RyaW5nKGRlZmluZWQoc3RyaW5nKSk7XG4gIGlmIChUWVBFICYgMSkgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UobHRyaW0sICcnKTtcbiAgaWYgKFRZUEUgJiAyKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShydHJpbSwgJycpO1xuICByZXR1cm4gc3RyaW5nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0gJ1xceDA5XFx4MEFcXHgwQlxceDBDXFx4MERcXHgyMFxceEEwXFx1MTY4MFxcdTE4MEVcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzJyArXG4gICdcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOFxcdTIwMjlcXHVGRUZGJztcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi9faHRtbCcpO1xudmFyIGNlbCA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgc2V0VGFzayA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG52YXIgY2xlYXJUYXNrID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsO1xudmFyIERpc3BhdGNoID0gZ2xvYmFsLkRpc3BhdGNoO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG52YXIgcnVuID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaWQgPSArdGhpcztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICBpZiAocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBydW4uY2FsbChldmVudC5kYXRhKTtcbn07XG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZiAoIXNldFRhc2sgfHwgIWNsZWFyVGFzaykge1xuICBzZXRUYXNrID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICB2YXIgaSA9IDE7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgIGludm9rZSh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhclRhc2sgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkge1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZiAocmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBjdHgocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgJyonKTtcbiAgICB9O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjZWwoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2VsKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuLmNhbGwoaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBzZXRUaW1lb3V0KGN0eChydW4sIGlkLCAxKSwgMCk7XG4gICAgfTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0VGFzayxcbiAgY2xlYXI6IGNsZWFyVGFza1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59O1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9pbmRleFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09PSB1bmRlZmluZWQpIHJldHVybiAwO1xuICB2YXIgbnVtYmVyID0gdG9JbnRlZ2VyKGl0KTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKG51bWJlcik7XG4gIGlmIChudW1iZXIgIT09IGxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3JvbmcgbGVuZ3RoIScpO1xuICByZXR1cm4gbGVuZ3RoO1xufTtcbiIsIi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuIiwiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsIi8vIDcuMS4xNSBUb0xlbmd0aFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwiLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSkge1xuICB2YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbiAgdmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xuICB2YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuICB2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuICB2YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbiAgdmFyICRidWZmZXIgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKTtcbiAgdmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xuICB2YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG4gIHZhciBwcm9wZXJ0eURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG4gIHZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xuICB2YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbiAgdmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbiAgdmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG4gIHZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbiAgdmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG4gIHZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuICB2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG4gIHZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xuICB2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbiAgdmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG4gIHZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbiAgdmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbiAgdmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuICB2YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbiAgdmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG4gIHZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbiAgdmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xuICB2YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG4gIHZhciBjcmVhdGVBcnJheUluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKTtcbiAgdmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbiAgdmFyIEFycmF5SXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbiAgdmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xuICB2YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xuICB2YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XG4gIHZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG4gIHZhciBhcnJheUNvcHlXaXRoaW4gPSByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpO1xuICB2YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG4gIHZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG4gIHZhciBkUCA9ICREUC5mO1xuICB2YXIgZ09QRCA9ICRHT1BELmY7XG4gIHZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG4gIHZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuICB2YXIgVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5O1xuICB2YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbiAgdmFyIFNIQVJFRF9CVUZGRVIgPSAnU2hhcmVkJyArIEFSUkFZX0JVRkZFUjtcbiAgdmFyIEJZVEVTX1BFUl9FTEVNRU5UID0gJ0JZVEVTX1BFUl9FTEVNRU5UJztcbiAgdmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuICB2YXIgQXJyYXlQcm90byA9IEFycmF5W1BST1RPVFlQRV07XG4gIHZhciAkQXJyYXlCdWZmZXIgPSAkYnVmZmVyLkFycmF5QnVmZmVyO1xuICB2YXIgJERhdGFWaWV3ID0gJGJ1ZmZlci5EYXRhVmlldztcbiAgdmFyIGFycmF5Rm9yRWFjaCA9IGNyZWF0ZUFycmF5TWV0aG9kKDApO1xuICB2YXIgYXJyYXlGaWx0ZXIgPSBjcmVhdGVBcnJheU1ldGhvZCgyKTtcbiAgdmFyIGFycmF5U29tZSA9IGNyZWF0ZUFycmF5TWV0aG9kKDMpO1xuICB2YXIgYXJyYXlFdmVyeSA9IGNyZWF0ZUFycmF5TWV0aG9kKDQpO1xuICB2YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XG4gIHZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xuICB2YXIgYXJyYXlJbmNsdWRlcyA9IGNyZWF0ZUFycmF5SW5jbHVkZXModHJ1ZSk7XG4gIHZhciBhcnJheUluZGV4T2YgPSBjcmVhdGVBcnJheUluY2x1ZGVzKGZhbHNlKTtcbiAgdmFyIGFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvcnMudmFsdWVzO1xuICB2YXIgYXJyYXlLZXlzID0gQXJyYXlJdGVyYXRvcnMua2V5cztcbiAgdmFyIGFycmF5RW50cmllcyA9IEFycmF5SXRlcmF0b3JzLmVudHJpZXM7XG4gIHZhciBhcnJheUxhc3RJbmRleE9mID0gQXJyYXlQcm90by5sYXN0SW5kZXhPZjtcbiAgdmFyIGFycmF5UmVkdWNlID0gQXJyYXlQcm90by5yZWR1Y2U7XG4gIHZhciBhcnJheVJlZHVjZVJpZ2h0ID0gQXJyYXlQcm90by5yZWR1Y2VSaWdodDtcbiAgdmFyIGFycmF5Sm9pbiA9IEFycmF5UHJvdG8uam9pbjtcbiAgdmFyIGFycmF5U29ydCA9IEFycmF5UHJvdG8uc29ydDtcbiAgdmFyIGFycmF5U2xpY2UgPSBBcnJheVByb3RvLnNsaWNlO1xuICB2YXIgYXJyYXlUb1N0cmluZyA9IEFycmF5UHJvdG8udG9TdHJpbmc7XG4gIHZhciBhcnJheVRvTG9jYWxlU3RyaW5nID0gQXJyYXlQcm90by50b0xvY2FsZVN0cmluZztcbiAgdmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xuICB2YXIgVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xuICB2YXIgVFlQRURfQ09OU1RSVUNUT1IgPSB1aWQoJ3R5cGVkX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBERUZfQ09OU1RSVUNUT1IgPSB1aWQoJ2RlZl9jb25zdHJ1Y3RvcicpO1xuICB2YXIgQUxMX0NPTlNUUlVDVE9SUyA9ICR0eXBlZC5DT05TVFI7XG4gIHZhciBUWVBFRF9BUlJBWSA9ICR0eXBlZC5UWVBFRDtcbiAgdmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbiAgdmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJztcblxuICB2YXIgJG1hcCA9IGNyZWF0ZUFycmF5TWV0aG9kKDEsIGZ1bmN0aW9uIChPLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gYWxsb2NhdGUoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxlbmd0aCk7XG4gIH0pO1xuXG4gIHZhciBMSVRUTEVfRU5ESUFOID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShuZXcgVWludDE2QXJyYXkoWzFdKS5idWZmZXIpWzBdID09PSAxO1xuICB9KTtcblxuICB2YXIgRk9SQ0VEX1NFVCA9ICEhVWludDhBcnJheSAmJiAhIVVpbnQ4QXJyYXlbUFJPVE9UWVBFXS5zZXQgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBVaW50OEFycmF5KDEpLnNldCh7fSk7XG4gIH0pO1xuXG4gIHZhciB0b09mZnNldCA9IGZ1bmN0aW9uIChpdCwgQllURVMpIHtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGl0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIHJldHVybiBvZmZzZXQ7XG4gIH07XG5cbiAgdmFyIHZhbGlkYXRlID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgaWYgKGlzT2JqZWN0KGl0KSAmJiBUWVBFRF9BUlJBWSBpbiBpdCkgcmV0dXJuIGl0O1xuICAgIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgdHlwZWQgYXJyYXkhJyk7XG4gIH07XG5cbiAgdmFyIGFsbG9jYXRlID0gZnVuY3Rpb24gKEMsIGxlbmd0aCkge1xuICAgIGlmICghKGlzT2JqZWN0KEMpICYmIFRZUEVEX0NPTlNUUlVDVE9SIGluIEMpKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0l0IGlzIG5vdCBhIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yIScpO1xuICAgIH0gcmV0dXJuIG5ldyBDKGxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHNwZWNpZXNGcm9tTGlzdCA9IGZ1bmN0aW9uIChPLCBsaXN0KSB7XG4gICAgcmV0dXJuIGZyb21MaXN0KHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsaXN0KTtcbiAgfTtcblxuICB2YXIgZnJvbUxpc3QgPSBmdW5jdGlvbiAoQywgbGlzdCkge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZShDLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKGl0LCBrZXksIGludGVybmFsKSB7XG4gICAgZFAoaXQsIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RbaW50ZXJuYWxdOyB9IH0pO1xuICB9O1xuXG4gIHZhciAkZnJvbSA9IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwZm4sIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHNvdXJjZSk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBpLCBsZW5ndGgsIHZhbHVlcywgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhaXNBcnJheUl0ZXIoaXRlckZuKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCB2YWx1ZXMgPSBbXSwgaSA9IDA7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaSsrKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKHN0ZXAudmFsdWUpO1xuICAgICAgfSBPID0gdmFsdWVzO1xuICAgIH1cbiAgICBpZiAobWFwcGluZyAmJiBhTGVuID4gMikgbWFwZm4gPSBjdHgobWFwZm4sIGFyZ3VtZW50c1syXSwgMik7XG4gICAgZm9yIChpID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpLCByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpOyBsZW5ndGggPiBpOyBpKyspIHtcbiAgICAgIHJlc3VsdFtpXSA9IG1hcHBpbmcgPyBtYXBmbihPW2ldLCBpKSA6IE9baV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyICRvZiA9IGZ1bmN0aW9uIG9mKC8qIC4uLml0ZW1zICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBhcmd1bWVudHNbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBpT1MgU2FmYXJpIDYueCBmYWlscyBoZXJlXG4gIHZhciBUT19MT0NBTEVfQlVHID0gISFVaW50OEFycmF5ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb0xvY2FsZVN0cmluZy5jYWxsKG5ldyBVaW50OEFycmF5KDEpKTsgfSk7XG5cbiAgdmFyICR0b0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvTG9jYWxlU3RyaW5nKCkge1xuICAgIHJldHVybiBhcnJheVRvTG9jYWxlU3RyaW5nLmFwcGx5KFRPX0xPQ0FMRV9CVUcgPyBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcykpIDogdmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgdmFyIHByb3RvID0ge1xuICAgIGNvcHlXaXRoaW46IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCAvKiAsIGVuZCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5Q29weVdpdGhpbi5jYWxsKHZhbGlkYXRlKHRoaXMpLCB0YXJnZXQsIHN0YXJ0LCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUV2ZXJ5KHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaWxsOiBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQsIGVuZCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlGaWxsLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlGaWx0ZXIodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sXG4gICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSk7XG4gICAgfSxcbiAgICBmaW5kOiBmdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUZpbmQodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZEluZGV4KHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIGFycmF5Rm9yRWFjaCh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmRleE9mKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5SW5jbHVkZXModmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUpvaW4uYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlMYXN0SW5kZXhPZi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIG1hcDogZnVuY3Rpb24gbWFwKG1hcGZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuICRtYXAodmFsaWRhdGUodGhpcyksIG1hcGZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZS5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZVJpZ2h0LmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBsZW5ndGggPSB2YWxpZGF0ZSh0aGF0KS5sZW5ndGg7XG4gICAgICB2YXIgbWlkZGxlID0gTWF0aC5mbG9vcihsZW5ndGggLyAyKTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgdmFsdWU7XG4gICAgICB3aGlsZSAoaW5kZXggPCBtaWRkbGUpIHtcbiAgICAgICAgdmFsdWUgPSB0aGF0W2luZGV4XTtcbiAgICAgICAgdGhhdFtpbmRleCsrXSA9IHRoYXRbLS1sZW5ndGhdO1xuICAgICAgICB0aGF0W2xlbmd0aF0gPSB2YWx1ZTtcbiAgICAgIH0gcmV0dXJuIHRoYXQ7XG4gICAgfSxcbiAgICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb21lKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgICAgcmV0dXJuIGFycmF5U29ydC5jYWxsKHZhbGlkYXRlKHRoaXMpLCBjb21wYXJlZm4pO1xuICAgIH0sXG4gICAgc3ViYXJyYXk6IGZ1bmN0aW9uIHN1YmFycmF5KGJlZ2luLCBlbmQpIHtcbiAgICAgIHZhciBPID0gdmFsaWRhdGUodGhpcyk7XG4gICAgICB2YXIgbGVuZ3RoID0gTy5sZW5ndGg7XG4gICAgICB2YXIgJGJlZ2luID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW5ndGgpO1xuICAgICAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSkpKFxuICAgICAgICBPLmJ1ZmZlcixcbiAgICAgICAgTy5ieXRlT2Zmc2V0ICsgJGJlZ2luICogTy5CWVRFU19QRVJfRUxFTUVOVCxcbiAgICAgICAgdG9MZW5ndGgoKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKSkgLSAkYmVnaW4pXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICB2YXIgJHNsaWNlID0gZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpLCBzdGFydCwgZW5kKSk7XG4gIH07XG5cbiAgdmFyICRzZXQgPSBmdW5jdGlvbiBzZXQoYXJyYXlMaWtlIC8qICwgb2Zmc2V0ICovKSB7XG4gICAgdmFsaWRhdGUodGhpcyk7XG4gICAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50c1sxXSwgMSk7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgIHZhciBzcmMgPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aChzcmMubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGlmIChsZW4gKyBvZmZzZXQgPiBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB3aGlsZSAoaW5kZXggPCBsZW4pIHRoaXNbb2Zmc2V0ICsgaW5kZXhdID0gc3JjW2luZGV4KytdO1xuICB9O1xuXG4gIHZhciAkaXRlcmF0b3JzID0ge1xuICAgIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlFbnRyaWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAga2V5czogZnVuY3Rpb24ga2V5cygpIHtcbiAgICAgIHJldHVybiBhcnJheUtleXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgICAgIHJldHVybiBhcnJheVZhbHVlcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzVEFJbmRleCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc09iamVjdCh0YXJnZXQpXG4gICAgICAmJiB0YXJnZXRbVFlQRURfQVJSQVldXG4gICAgICAmJiB0eXBlb2Yga2V5ICE9ICdzeW1ib2wnXG4gICAgICAmJiBrZXkgaW4gdGFyZ2V0XG4gICAgICAmJiBTdHJpbmcoK2tleSkgPT0gU3RyaW5nKGtleSk7XG4gIH07XG4gIHZhciAkZ2V0RGVzYyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgPyBwcm9wZXJ0eURlc2MoMiwgdGFyZ2V0W2tleV0pXG4gICAgICA6IGdPUEQodGFyZ2V0LCBrZXkpO1xuICB9O1xuICB2YXIgJHNldERlc2MgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIGlmIChpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgJiYgaXNPYmplY3QoZGVzYylcbiAgICAgICYmIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnZ2V0JylcbiAgICAgICYmICFoYXMoZGVzYywgJ3NldCcpXG4gICAgICAvLyBUT0RPOiBhZGQgdmFsaWRhdGlvbiBkZXNjcmlwdG9yIHcvbyBjYWxsaW5nIGFjY2Vzc29yc1xuICAgICAgJiYgIWRlc2MuY29uZmlndXJhYmxlXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnd3JpdGFibGUnKSB8fCBkZXNjLndyaXRhYmxlKVxuICAgICAgJiYgKCFoYXMoZGVzYywgJ2VudW1lcmFibGUnKSB8fCBkZXNjLmVudW1lcmFibGUpXG4gICAgKSB7XG4gICAgICB0YXJnZXRba2V5XSA9IGRlc2MudmFsdWU7XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH0gcmV0dXJuIGRQKHRhcmdldCwga2V5LCBkZXNjKTtcbiAgfTtcblxuICBpZiAoIUFMTF9DT05TVFJVQ1RPUlMpIHtcbiAgICAkR09QRC5mID0gJGdldERlc2M7XG4gICAgJERQLmYgPSAkc2V0RGVzYztcbiAgfVxuXG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIUFMTF9DT05TVFJVQ1RPUlMsICdPYmplY3QnLCB7XG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0RGVzYyxcbiAgICBkZWZpbmVQcm9wZXJ0eTogJHNldERlc2NcbiAgfSk7XG5cbiAgaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb1N0cmluZy5jYWxsKHt9KTsgfSkpIHtcbiAgICBhcnJheVRvU3RyaW5nID0gYXJyYXlUb0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRoaXMpO1xuICAgIH07XG4gIH1cblxuICB2YXIgJFR5cGVkQXJyYXlQcm90b3R5cGUkID0gcmVkZWZpbmVBbGwoe30sIHByb3RvKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAkaXRlcmF0b3JzKTtcbiAgaGlkZSgkVHlwZWRBcnJheVByb3RvdHlwZSQsIElURVJBVE9SLCAkaXRlcmF0b3JzLnZhbHVlcyk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwge1xuICAgIHNsaWNlOiAkc2xpY2UsXG4gICAgc2V0OiAkc2V0LFxuICAgIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiAoKSB7IC8qIG5vb3AgKi8gfSxcbiAgICB0b1N0cmluZzogYXJyYXlUb1N0cmluZyxcbiAgICB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nXG4gIH0pO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnVmZmVyJywgJ2InKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVPZmZzZXQnLCAnbycpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZUxlbmd0aCcsICdsJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdsZW5ndGgnLCAnZScpO1xuICBkUCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIFRBRywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tUWVBFRF9BUlJBWV07IH1cbiAgfSk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgQllURVMsIHdyYXBwZXIsIENMQU1QRUQpIHtcbiAgICBDTEFNUEVEID0gISFDTEFNUEVEO1xuICAgIHZhciBOQU1FID0gS0VZICsgKENMQU1QRUQgPyAnQ2xhbXBlZCcgOiAnJykgKyAnQXJyYXknO1xuICAgIHZhciBHRVRURVIgPSAnZ2V0JyArIEtFWTtcbiAgICB2YXIgU0VUVEVSID0gJ3NldCcgKyBLRVk7XG4gICAgdmFyIFR5cGVkQXJyYXkgPSBnbG9iYWxbTkFNRV07XG4gICAgdmFyIEJhc2UgPSBUeXBlZEFycmF5IHx8IHt9O1xuICAgIHZhciBUQUMgPSBUeXBlZEFycmF5ICYmIGdldFByb3RvdHlwZU9mKFR5cGVkQXJyYXkpO1xuICAgIHZhciBGT1JDRUQgPSAhVHlwZWRBcnJheSB8fCAhJHR5cGVkLkFCVjtcbiAgICB2YXIgTyA9IHt9O1xuICAgIHZhciBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheSAmJiBUeXBlZEFycmF5W1BST1RPVFlQRV07XG4gICAgdmFyIGdldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgcmV0dXJuIGRhdGEudltHRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIGlmIChDTEFNUEVEKSB2YWx1ZSA9ICh2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpKSA8IDAgPyAwIDogdmFsdWUgPiAweGZmID8gMHhmZiA6IHZhbHVlICYgMHhmZjtcbiAgICAgIGRhdGEudltTRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIHZhbHVlLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBhZGRFbGVtZW50ID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICBkUCh0aGF0LCBpbmRleCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0dGVyKHRoaXMsIGluZGV4KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gc2V0dGVyKHRoaXMsIGluZGV4LCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FLCAnX2QnKTtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICAgIHZhciBidWZmZXIsIGJ5dGVMZW5ndGgsIGxlbmd0aCwga2xhc3M7XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgICAgICBsZW5ndGggPSB0b0luZGV4KGRhdGEpO1xuICAgICAgICAgIGJ5dGVMZW5ndGggPSBsZW5ndGggKiBCWVRFUztcbiAgICAgICAgICBidWZmZXIgPSBuZXcgJEFycmF5QnVmZmVyKGJ5dGVMZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcbiAgICAgICAgICBidWZmZXIgPSBkYXRhO1xuICAgICAgICAgIG9mZnNldCA9IHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKTtcbiAgICAgICAgICB2YXIgJGxlbiA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBpZiAoJGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoJGxlbiAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gJGxlbiAtIG9mZnNldDtcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoIDwgMCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gdG9MZW5ndGgoJGxlbmd0aCkgKiBCWVRFUztcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoICsgb2Zmc2V0ID4gJGxlbikgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGggPSBieXRlTGVuZ3RoIC8gQllURVM7XG4gICAgICAgIH0gZWxzZSBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkge1xuICAgICAgICAgIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBoaWRlKHRoYXQsICdfZCcsIHtcbiAgICAgICAgICBiOiBidWZmZXIsXG4gICAgICAgICAgbzogb2Zmc2V0LFxuICAgICAgICAgIGw6IGJ5dGVMZW5ndGgsXG4gICAgICAgICAgZTogbGVuZ3RoLFxuICAgICAgICAgIHY6IG5ldyAkRGF0YVZpZXcoYnVmZmVyKVxuICAgICAgICB9KTtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSBhZGRFbGVtZW50KHRoYXQsIGluZGV4KyspO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gY3JlYXRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCk7XG4gICAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIFR5cGVkQXJyYXkpO1xuICAgIH0gZWxzZSBpZiAoIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIFR5cGVkQXJyYXkoMSk7XG4gICAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9KSB8fCAhJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShudWxsKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShpdGVyKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9LCB0cnVlKSkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FKTtcbiAgICAgICAgdmFyIGtsYXNzO1xuICAgICAgICAvLyBgd3NgIG1vZHVsZSBidWcsIHRlbXBvcmFyaWx5IHJlbW92ZSB2YWxpZGF0aW9uIGxlbmd0aCBmb3IgVWludDhBcnJheVxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2Vic29ja2V0cy93cy9wdWxsLzY0NVxuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSByZXR1cm4gbmV3IEJhc2UodG9JbmRleChkYXRhKSk7XG4gICAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKSB7XG4gICAgICAgICAgcmV0dXJuICRsZW5ndGggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyksICRsZW5ndGgpXG4gICAgICAgICAgICA6ICRvZmZzZXQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSlcbiAgICAgICAgICAgICAgOiBuZXcgQmFzZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgIH0pO1xuICAgICAgYXJyYXlGb3JFYWNoKFRBQyAhPT0gRnVuY3Rpb24ucHJvdG90eXBlID8gZ09QTihCYXNlKS5jb25jYXQoZ09QTihUQUMpKSA6IGdPUE4oQmFzZSksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIFR5cGVkQXJyYXkpKSBoaWRlKFR5cGVkQXJyYXksIGtleSwgQmFzZVtrZXldKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gVHlwZWRBcnJheVByb3RvdHlwZTtcbiAgICAgIGlmICghTElCUkFSWSkgVHlwZWRBcnJheVByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFR5cGVkQXJyYXk7XG4gICAgfVxuICAgIHZhciAkbmF0aXZlSXRlcmF0b3IgPSBUeXBlZEFycmF5UHJvdG90eXBlW0lURVJBVE9SXTtcbiAgICB2YXIgQ09SUkVDVF9JVEVSX05BTUUgPSAhISRuYXRpdmVJdGVyYXRvclxuICAgICAgJiYgKCRuYXRpdmVJdGVyYXRvci5uYW1lID09ICd2YWx1ZXMnIHx8ICRuYXRpdmVJdGVyYXRvci5uYW1lID09IHVuZGVmaW5lZCk7XG4gICAgdmFyICRpdGVyYXRvciA9ICRpdGVyYXRvcnMudmFsdWVzO1xuICAgIGhpZGUoVHlwZWRBcnJheSwgVFlQRURfQ09OU1RSVUNUT1IsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVFlQRURfQVJSQVksIE5BTUUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBERUZfQ09OU1RSVUNUT1IsIFR5cGVkQXJyYXkpO1xuXG4gICAgaWYgKENMQU1QRUQgPyBuZXcgVHlwZWRBcnJheSgxKVtUQUddICE9IE5BTUUgOiAhKFRBRyBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSkge1xuICAgICAgZFAoVHlwZWRBcnJheVByb3RvdHlwZSwgVEFHLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gTkFNRTsgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgT1tOQU1FXSA9IFR5cGVkQXJyYXk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChUeXBlZEFycmF5ICE9IEJhc2UpLCBPKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TLCBOQU1FLCB7XG4gICAgICBCWVRFU19QRVJfRUxFTUVOVDogQllURVNcbiAgICB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBCYXNlLm9mLmNhbGwoVHlwZWRBcnJheSwgMSk7IH0pLCBOQU1FLCB7XG4gICAgICBmcm9tOiAkZnJvbSxcbiAgICAgIG9mOiAkb2ZcbiAgICB9KTtcblxuICAgIGlmICghKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIEJZVEVTX1BFUl9FTEVNRU5ULCBCWVRFUyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCwgTkFNRSwgcHJvdG8pO1xuXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0VEX1NFVCwgTkFNRSwgeyBzZXQ6ICRzZXQgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFDT1JSRUNUX0lURVJfTkFNRSwgTkFNRSwgJGl0ZXJhdG9ycyk7XG5cbiAgICBpZiAoIUxJQlJBUlkgJiYgVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyAhPSBhcnJheVRvU3RyaW5nKSBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nID0gYXJyYXlUb1N0cmluZztcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMSkuc2xpY2UoKTtcbiAgICB9KSwgTkFNRSwgeyBzbGljZTogJHNsaWNlIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFsxLCAyXS50b0xvY2FsZVN0cmluZygpICE9IG5ldyBUeXBlZEFycmF5KFsxLCAyXSkudG9Mb2NhbGVTdHJpbmcoKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZS50b0xvY2FsZVN0cmluZy5jYWxsKFsxLCAyXSk7XG4gICAgfSkpLCBOQU1FLCB7IHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmcgfSk7XG5cbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBDT1JSRUNUX0lURVJfTkFNRSA/ICRuYXRpdmVJdGVyYXRvciA6ICRpdGVyYXRvcjtcbiAgICBpZiAoIUxJQlJBUlkgJiYgIUNPUlJFQ1RfSVRFUl9OQU1FKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIElURVJBVE9SLCAkaXRlcmF0b3IpO1xuICB9O1xufSBlbHNlIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG52YXIgREFUQV9WSUVXID0gJ0RhdGFWaWV3JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoISc7XG52YXIgV1JPTkdfSU5ERVggPSAnV3JvbmcgaW5kZXghJztcbnZhciAkQXJyYXlCdWZmZXIgPSBnbG9iYWxbQVJSQVlfQlVGRkVSXTtcbnZhciAkRGF0YVZpZXcgPSBnbG9iYWxbREFUQV9WSUVXXTtcbnZhciBNYXRoID0gZ2xvYmFsLk1hdGg7XG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvdy1yZXN0cmljdGVkLW5hbWVzXG52YXIgSW5maW5pdHkgPSBnbG9iYWwuSW5maW5pdHk7XG52YXIgQmFzZUJ1ZmZlciA9ICRBcnJheUJ1ZmZlcjtcbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgTE4yID0gTWF0aC5MTjI7XG52YXIgQlVGRkVSID0gJ2J1ZmZlcic7XG52YXIgQllURV9MRU5HVEggPSAnYnl0ZUxlbmd0aCc7XG52YXIgQllURV9PRkZTRVQgPSAnYnl0ZU9mZnNldCc7XG52YXIgJEJVRkZFUiA9IERFU0NSSVBUT1JTID8gJ19iJyA6IEJVRkZFUjtcbnZhciAkTEVOR1RIID0gREVTQ1JJUFRPUlMgPyAnX2wnIDogQllURV9MRU5HVEg7XG52YXIgJE9GRlNFVCA9IERFU0NSSVBUT1JTID8gJ19vJyA6IEJZVEVfT0ZGU0VUO1xuXG4vLyBJRUVFNzU0IGNvbnZlcnNpb25zIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaWVlZTc1NFxuZnVuY3Rpb24gcGFja0lFRUU3NTQodmFsdWUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KG5CeXRlcyk7XG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgcnQgPSBtTGVuID09PSAyMyA/IHBvdygyLCAtMjQpIC0gcG93KDIsIC03NykgOiAwO1xuICB2YXIgaSA9IDA7XG4gIHZhciBzID0gdmFsdWUgPCAwIHx8IHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDAgPyAxIDogMDtcbiAgdmFyIGUsIG0sIGM7XG4gIHZhbHVlID0gYWJzKHZhbHVlKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAodmFsdWUgIT0gdmFsdWUgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIG0gPSB2YWx1ZSAhPSB2YWx1ZSA/IDEgOiAwO1xuICAgIGUgPSBlTWF4O1xuICB9IGVsc2Uge1xuICAgIGUgPSBmbG9vcihsb2codmFsdWUpIC8gTE4yKTtcbiAgICBpZiAodmFsdWUgKiAoYyA9IHBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tO1xuICAgICAgYyAqPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gYztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBwb3coMiwgMSAtIGVCaWFzKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKys7XG4gICAgICBjIC89IDI7XG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDA7XG4gICAgICBlID0gZU1heDtcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IGUgKyBlQmlhcztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogcG93KDIsIGVCaWFzIC0gMSkgKiBwb3coMiwgbUxlbik7XG4gICAgICBlID0gMDtcbiAgICB9XG4gIH1cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW2krK10gPSBtICYgMjU1LCBtIC89IDI1NiwgbUxlbiAtPSA4KTtcbiAgZSA9IGUgPDwgbUxlbiB8IG07XG4gIGVMZW4gKz0gbUxlbjtcbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbaSsrXSA9IGUgJiAyNTUsIGUgLz0gMjU2LCBlTGVuIC09IDgpO1xuICBidWZmZXJbLS1pXSB8PSBzICogMTI4O1xuICByZXR1cm4gYnVmZmVyO1xufVxuZnVuY3Rpb24gdW5wYWNrSUVFRTc1NChidWZmZXIsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIG5CaXRzID0gZUxlbiAtIDc7XG4gIHZhciBpID0gbkJ5dGVzIC0gMTtcbiAgdmFyIHMgPSBidWZmZXJbaS0tXTtcbiAgdmFyIGUgPSBzICYgMTI3O1xuICB2YXIgbTtcbiAgcyA+Pj0gNztcbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIG0gPSBlICYgKDEgPDwgLW5CaXRzKSAtIDE7XG4gIGUgPj49IC1uQml0cztcbiAgbkJpdHMgKz0gbUxlbjtcbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhcztcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiBzID8gLUluZmluaXR5IDogSW5maW5pdHk7XG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBwb3coMiwgbUxlbik7XG4gICAgZSA9IGUgLSBlQmlhcztcbiAgfSByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIHBvdygyLCBlIC0gbUxlbik7XG59XG5cbmZ1bmN0aW9uIHVucGFja0kzMihieXRlcykge1xuICByZXR1cm4gYnl0ZXNbM10gPDwgMjQgfCBieXRlc1syXSA8PCAxNiB8IGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbn1cbmZ1bmN0aW9uIHBhY2tJOChpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTE2KGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTMyKGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZiwgaXQgPj4gMTYgJiAweGZmLCBpdCA+PiAyNCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0Y2NChpdCkge1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDUyLCA4KTtcbn1cbmZ1bmN0aW9uIHBhY2tGMzIoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCAyMywgNCk7XG59XG5cbmZ1bmN0aW9uIGFkZEdldHRlcihDLCBrZXksIGludGVybmFsKSB7XG4gIGRQKENbUFJPVE9UWVBFXSwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tpbnRlcm5hbF07IH0gfSk7XG59XG5cbmZ1bmN0aW9uIGdldCh2aWV3LCBieXRlcywgaW5kZXgsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleDtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChudW1JbmRleCk7XG4gIGlmIChpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2I7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXTtcbiAgdmFyIHBhY2sgPSBzdG9yZS5zbGljZShzdGFydCwgc3RhcnQgKyBieXRlcyk7XG4gIHJldHVybiBpc0xpdHRsZUVuZGlhbiA/IHBhY2sgOiBwYWNrLnJldmVyc2UoKTtcbn1cbmZ1bmN0aW9uIHNldCh2aWV3LCBieXRlcywgaW5kZXgsIGNvbnZlcnNpb24sIHZhbHVlLCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gY29udmVyc2lvbigrdmFsdWUpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzOyBpKyspIHN0b3JlW3N0YXJ0ICsgaV0gPSBwYWNrW2lzTGl0dGxlRW5kaWFuID8gaSA6IGJ5dGVzIC0gaSAtIDFdO1xufVxuXG5pZiAoISR0eXBlZC5BQlYpIHtcbiAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0b0luZGV4KGxlbmd0aCk7XG4gICAgdGhpcy5fYiA9IGFycmF5RmlsbC5jYWxsKG5ldyBBcnJheShieXRlTGVuZ3RoKSwgMCk7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkRGF0YVZpZXcsIERBVEFfVklFVyk7XG4gICAgYW5JbnN0YW5jZShidWZmZXIsICRBcnJheUJ1ZmZlciwgREFUQV9WSUVXKTtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYnVmZmVyWyRMRU5HVEhdO1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoYnl0ZU9mZnNldCk7XG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPT09IHVuZGVmaW5lZCA/IGJ1ZmZlckxlbmd0aCAtIG9mZnNldCA6IHRvTGVuZ3RoKGJ5dGVMZW5ndGgpO1xuICAgIGlmIChvZmZzZXQgKyBieXRlTGVuZ3RoID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgdGhpc1skQlVGRkVSXSA9IGJ1ZmZlcjtcbiAgICB0aGlzWyRPRkZTRVRdID0gb2Zmc2V0O1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIGFkZEdldHRlcigkQXJyYXlCdWZmZXIsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCVUZGRVIsICdfYicpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX09GRlNFVCwgJ19vJyk7XG4gIH1cblxuICByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIGdldEludDg6IGZ1bmN0aW9uIGdldEludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXSA8PCAyNCA+PiAyNDtcbiAgICB9LFxuICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MTY6IGZ1bmN0aW9uIGdldEludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIChieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF0pIDw8IDE2ID4+IDE2O1xuICAgIH0sXG4gICAgZ2V0VWludDE2OiBmdW5jdGlvbiBnZXRVaW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpO1xuICAgIH0sXG4gICAgZ2V0VWludDMyOiBmdW5jdGlvbiBnZXRVaW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSkgPj4+IDA7XG4gICAgfSxcbiAgICBnZXRGbG9hdDMyOiBmdW5jdGlvbiBnZXRGbG9hdDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCAyMywgNCk7XG4gICAgfSxcbiAgICBnZXRGbG9hdDY0OiBmdW5jdGlvbiBnZXRGbG9hdDY0KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCA1MiwgOCk7XG4gICAgfSxcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldEludDE2OiBmdW5jdGlvbiBzZXRJbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDE2OiBmdW5jdGlvbiBzZXRVaW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDMyOiBmdW5jdGlvbiBzZXRVaW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0MzI6IGZ1bmN0aW9uIHNldEZsb2F0MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrRjMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0NjQ6IGZ1bmN0aW9uIHNldEZsb2F0NjQoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRjY0LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgJEFycmF5QnVmZmVyKDEpO1xuICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICB9KSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKE5hTik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgcmV0dXJuICRBcnJheUJ1ZmZlci5uYW1lICE9IEFSUkFZX0JVRkZFUjtcbiAgfSkpIHtcbiAgICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyKTtcbiAgICAgIHJldHVybiBuZXcgQmFzZUJ1ZmZlcih0b0luZGV4KGxlbmd0aCkpO1xuICAgIH07XG4gICAgdmFyIEFycmF5QnVmZmVyUHJvdG8gPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXSA9IEJhc2VCdWZmZXJbUFJPVE9UWVBFXTtcbiAgICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlQnVmZmVyKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOykge1xuICAgICAgaWYgKCEoKGtleSA9IGtleXNbaisrXSkgaW4gJEFycmF5QnVmZmVyKSkgaGlkZSgkQXJyYXlCdWZmZXIsIGtleSwgQmFzZUJ1ZmZlcltrZXldKTtcbiAgICB9XG4gICAgaWYgKCFMSUJSQVJZKSBBcnJheUJ1ZmZlclByb3RvLmNvbnN0cnVjdG9yID0gJEFycmF5QnVmZmVyO1xuICB9XG4gIC8vIGlPUyBTYWZhcmkgNy54IGJ1Z1xuICB2YXIgdmlldyA9IG5ldyAkRGF0YVZpZXcobmV3ICRBcnJheUJ1ZmZlcigyKSk7XG4gIHZhciAkc2V0SW50OCA9ICREYXRhVmlld1tQUk9UT1RZUEVdLnNldEludDg7XG4gIHZpZXcuc2V0SW50OCgwLCAyMTQ3NDgzNjQ4KTtcbiAgdmlldy5zZXRJbnQ4KDEsIDIxNDc0ODM2NDkpO1xuICBpZiAodmlldy5nZXRJbnQ4KDApIHx8ICF2aWV3LmdldEludDgoMSkpIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH1cbiAgfSwgdHJ1ZSk7XG59XG5zZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG5zZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7XG5oaWRlKCREYXRhVmlld1tQUk9UT1RZUEVdLCAkdHlwZWQuVklFVywgdHJ1ZSk7XG5leHBvcnRzW0FSUkFZX0JVRkZFUl0gPSAkQXJyYXlCdWZmZXI7XG5leHBvcnRzW0RBVEFfVklFV10gPSAkRGF0YVZpZXc7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBUWVBFRCA9IHVpZCgndHlwZWRfYXJyYXknKTtcbnZhciBWSUVXID0gdWlkKCd2aWV3Jyk7XG52YXIgQUJWID0gISEoZ2xvYmFsLkFycmF5QnVmZmVyICYmIGdsb2JhbC5EYXRhVmlldyk7XG52YXIgQ09OU1RSID0gQUJWO1xudmFyIGkgPSAwO1xudmFyIGwgPSA5O1xudmFyIFR5cGVkO1xuXG52YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9ycyA9IChcbiAgJ0ludDhBcnJheSxVaW50OEFycmF5LFVpbnQ4Q2xhbXBlZEFycmF5LEludDE2QXJyYXksVWludDE2QXJyYXksSW50MzJBcnJheSxVaW50MzJBcnJheSxGbG9hdDMyQXJyYXksRmxvYXQ2NEFycmF5J1xuKS5zcGxpdCgnLCcpO1xuXG53aGlsZSAoaSA8IGwpIHtcbiAgaWYgKFR5cGVkID0gZ2xvYmFsW1R5cGVkQXJyYXlDb25zdHJ1Y3RvcnNbaSsrXV0pIHtcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVFlQRUQsIHRydWUpO1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgfSBlbHNlIENPTlNUUiA9IGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQUJWOiBBQlYsXG4gIENPTlNUUjogQ09OU1RSLFxuICBUWVBFRDogVFlQRUQsXG4gIFZJRVc6IFZJRVdcbn07XG4iLCJ2YXIgaWQgPSAwO1xudmFyIHB4ID0gTWF0aC5yYW5kb20oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBuYXZpZ2F0b3IgPSBnbG9iYWwubmF2aWdhdG9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50IHx8ICcnO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgVFlQRSkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSB8fCBpdC5fdCAhPT0gVFlQRSkgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyICRTeW1ib2wgPSBjb3JlLlN5bWJvbCB8fCAoY29yZS5TeW1ib2wgPSBMSUJSQVJZID8ge30gOiBnbG9iYWwuU3ltYm9sIHx8IHt9KTtcbiAgaWYgKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpIGRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHsgdmFsdWU6IHdrc0V4dC5mKG5hbWUpIH0pO1xufTtcbiIsImV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX3drcycpO1xuIiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ3drcycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlN5bWJvbDtcbnZhciBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xuXG52YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuXG4kZXhwb3J0cy5zdG9yZSA9IHN0b3JlO1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vYmVuamFtaW5nci9SZXhFeHAuZXNjYXBlXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRyZSA9IHJlcXVpcmUoJy4vX3JlcGxhY2VyJykoL1tcXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVnRXhwJywgeyBlc2NhcGU6IGZ1bmN0aW9uIGVzY2FwZShpdCkgeyByZXR1cm4gJHJlKGl0KTsgfSB9KTtcbiIsIi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHsgY29weVdpdGhpbjogcmVxdWlyZSgnLi9fYXJyYXktY29weS13aXRoaW4nKSB9KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2NvcHlXaXRoaW4nKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGV2ZXJ5ID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZXZlcnksIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy41IC8gMTUuNC40LjE2IEFycmF5LnByb3RvdHlwZS5ldmVyeShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGV2ZXJ5KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiLy8gMjIuMS4zLjYgQXJyYXkucHJvdG90eXBlLmZpbGwodmFsdWUsIHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5JywgeyBmaWxsOiByZXF1aXJlKCcuL19hcnJheS1maWxsJykgfSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmaWxsJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaWx0ZXIgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMik7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5maWx0ZXIsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy43IC8gMTUuNC40LjIwIEFycmF5LnByb3RvdHlwZS5maWx0ZXIoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZpbHRlcih0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy45IEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXgocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmluZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg2KTtcbnZhciBLRVkgPSAnZmluZEluZGV4JztcbnZhciBmb3JjZWQgPSB0cnVlO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChLRVkgaW4gW10pIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24gKCkgeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoS0VZKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy44IEFycmF5LnByb3RvdHlwZS5maW5kKHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNSk7XG52YXIgS0VZID0gJ2ZpbmQnO1xudmFyIGZvcmNlZCA9IHRydWU7XG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEtFWSBpbiBbXSkgQXJyYXkoMSlbS0VZXShmdW5jdGlvbiAoKSB7IGZvcmNlZCA9IGZhbHNlOyB9KTtcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZm9yY2VkLCAnQXJyYXknLCB7XG4gIGZpbmQ6IGZ1bmN0aW9uIGZpbmQoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApO1xudmFyIFNUUklDVCA9IHJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5mb3JFYWNoLCB0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhU1RSSUNULCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMCAvIDE1LjQuNC4xOCBBcnJheS5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmb3JFYWNoKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKTtcbnZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikgeyBBcnJheS5mcm9tKGl0ZXIpOyB9KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMSBBcnJheS5mcm9tKGFycmF5TGlrZSwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gIGZyb206IGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlIC8qICwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gICAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5O1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbWFwZm4gPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gICAgaWYgKG1hcHBpbmcpIG1hcGZuID0gY3R4KG1hcGZuLCBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCwgMik7XG4gICAgLy8gaWYgb2JqZWN0IGlzbid0IGl0ZXJhYmxlIG9yIGl0J3MgYXJyYXkgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIHNpbXBsZSBjYXNlXG4gICAgaWYgKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIShDID09IEFycmF5ICYmIGlzQXJyYXlJdGVyKGl0ZXJGbikpKSB7XG4gICAgICBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHJlc3VsdCA9IG5ldyBDKCk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gY2FsbChpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpIDogc3RlcC52YWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICAgIGZvciAocmVzdWx0ID0gbmV3IEMobGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciAkbmF0aXZlID0gW10uaW5kZXhPZjtcbnZhciBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0uaW5kZXhPZigxLCAtMCkgPCAwO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChORUdBVElWRV9aRVJPIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJG5hdGl2ZSkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMSAvIDE1LjQuNC4xNCBBcnJheS5wcm90b3R5cGUuaW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXG4gIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gTkVHQVRJVkVfWkVST1xuICAgICAgLy8gY29udmVydCAtMCB0byArMFxuICAgICAgPyAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMFxuICAgICAgOiAkaW5kZXhPZih0aGlzLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIi8vIDIyLjEuMi4yIC8gMTUuNC4zLjIgQXJyYXkuaXNBcnJheShhcmcpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0FycmF5JywgeyBpc0FycmF5OiByZXF1aXJlKCcuL19pcy1hcnJheScpIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIga2luZCA9IHRoaXMuX2s7XG4gIHZhciBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYgKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKSB7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUuam9pbihzZXBhcmF0b3IpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUpvaW4gPSBbXS5qb2luO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2Ugc3RyaW5nc1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAocmVxdWlyZSgnLi9faW9iamVjdCcpICE9IE9iamVjdCB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKGFycmF5Sm9pbikpLCAnQXJyYXknLCB7XG4gIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XG4gICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRvSU9iamVjdCh0aGlzKSwgc2VwYXJhdG9yID09PSB1bmRlZmluZWQgPyAnLCcgOiBzZXBhcmF0b3IpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyICRuYXRpdmUgPSBbXS5sYXN0SW5kZXhPZjtcbnZhciBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0ubGFzdEluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTQgLyAxNS40LjQuMTUgQXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSBAWyotMV0gKi8pIHtcbiAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgaWYgKE5FR0FUSVZFX1pFUk8pIHJldHVybiAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMDtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSBpbmRleCA9IE1hdGgubWluKGluZGV4LCB0b0ludGVnZXIoYXJndW1lbnRzWzFdKSk7XG4gICAgaWYgKGluZGV4IDwgMCkgaW5kZXggPSBsZW5ndGggKyBpbmRleDtcbiAgICBmb3IgKDtpbmRleCA+PSAwOyBpbmRleC0tKSBpZiAoaW5kZXggaW4gTykgaWYgKE9baW5kZXhdID09PSBzZWFyY2hFbGVtZW50KSByZXR1cm4gaW5kZXggfHwgMDtcbiAgICByZXR1cm4gLTE7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkbWFwID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDEpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ubWFwLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTUgLyAxNS40LjQuMTkgQXJyYXkucHJvdG90eXBlLm1hcChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkbWFwKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4vLyBXZWJLaXQgQXJyYXkub2YgaXNuJ3QgZ2VuZXJpY1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShBcnJheS5vZi5jYWxsKEYpIGluc3RhbmNlb2YgRik7XG59KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMyBBcnJheS5vZiggLi4uaXRlbXMpXG4gIG9mOiBmdW5jdGlvbiBvZigvKiAuLi5hcmdzICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyAodHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheSkoYUxlbik7XG4gICAgd2hpbGUgKGFMZW4gPiBpbmRleCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICByZXN1bHQubGVuZ3RoID0gYUxlbjtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5LXJlZHVjZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlUmlnaHQsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOSAvIDE1LjQuNC4yMiBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHQoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxuICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgdHJ1ZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2UsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOCAvIDE1LjQuNC4yMSBBcnJheS5wcm90b3R5cGUucmVkdWNlKGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgZmFsc2UpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4vX2h0bWwnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYXJyYXlTbGljZSA9IFtdLnNsaWNlO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZ3MgYW5kIERPTSBvYmplY3RzXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICBpZiAoaHRtbCkgYXJyYXlTbGljZS5jYWxsKGh0bWwpO1xufSksICdBcnJheScsIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKGJlZ2luLCBlbmQpIHtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhpcy5sZW5ndGgpO1xuICAgIHZhciBrbGFzcyA9IGNvZih0aGlzKTtcbiAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZDtcbiAgICBpZiAoa2xhc3MgPT0gJ0FycmF5JykgcmV0dXJuIGFycmF5U2xpY2UuY2FsbCh0aGlzLCBiZWdpbiwgZW5kKTtcbiAgICB2YXIgc3RhcnQgPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbik7XG4gICAgdmFyIHVwVG8gPSB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pO1xuICAgIHZhciBzaXplID0gdG9MZW5ndGgodXBUbyAtIHN0YXJ0KTtcbiAgICB2YXIgY2xvbmVkID0gbmV3IEFycmF5KHNpemUpO1xuICAgIHZhciBpID0gMDtcbiAgICBmb3IgKDsgaSA8IHNpemU7IGkrKykgY2xvbmVkW2ldID0ga2xhc3MgPT0gJ1N0cmluZydcbiAgICAgID8gdGhpcy5jaGFyQXQoc3RhcnQgKyBpKVxuICAgICAgOiB0aGlzW3N0YXJ0ICsgaV07XG4gICAgcmV0dXJuIGNsb25lZDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRzb21lID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uc29tZSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjIzIC8gMTUuNC40LjE3IEFycmF5LnByb3RvdHlwZS5zb21lKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJHNvbWUodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkc29ydCA9IFtdLnNvcnQ7XG52YXIgdGVzdCA9IFsxLCAyLCAzXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTgtXG4gIHRlc3Quc29ydCh1bmRlZmluZWQpO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggYnVnXG4gIHRlc3Quc29ydChudWxsKTtcbiAgLy8gT2xkIFdlYktpdFxufSkgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkc29ydCkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yNSBBcnJheS5wcm90b3R5cGUuc29ydChjb21wYXJlZm4pXG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgcmV0dXJuIGNvbXBhcmVmbiA9PT0gdW5kZWZpbmVkXG4gICAgICA/ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcykpXG4gICAgICA6ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcyksIGFGdW5jdGlvbihjb21wYXJlZm4pKTtcbiAgfVxufSk7XG4iLCJyZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdBcnJheScpO1xuIiwiLy8gMjAuMy4zLjEgLyAxNS45LjQuNCBEYXRlLm5vdygpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0RhdGUnLCB7IG5vdzogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7IH0gfSk7XG4iLCIvLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lTT1N0cmluZyA9IHJlcXVpcmUoJy4vX2RhdGUtdG8taXNvLXN0cmluZycpO1xuXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nICE9PSB0b0lTT1N0cmluZyksICdEYXRlJywge1xuICB0b0lTT1N0cmluZzogdG9JU09TdHJpbmdcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuZXcgRGF0ZShOYU4pLnRvSlNPTigpICE9PSBudWxsXG4gICAgfHwgRGF0ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoeyB0b0lTT1N0cmluZzogZnVuY3Rpb24gKCkgeyByZXR1cm4gMTsgfSB9KSAhPT0gMTtcbn0pLCAnRGF0ZScsIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKGtleSkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHB2ID0gdG9QcmltaXRpdmUoTyk7XG4gICAgcmV0dXJuIHR5cGVvZiBwdiA9PSAnbnVtYmVyJyAmJiAhaXNGaW5pdGUocHYpID8gbnVsbCA6IE8udG9JU09TdHJpbmcoKTtcbiAgfVxufSk7XG4iLCJ2YXIgVE9fUFJJTUlUSVZFID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvUHJpbWl0aXZlJyk7XG52YXIgcHJvdG8gPSBEYXRlLnByb3RvdHlwZTtcblxuaWYgKCEoVE9fUFJJTUlUSVZFIGluIHByb3RvKSkgcmVxdWlyZSgnLi9faGlkZScpKHByb3RvLCBUT19QUklNSVRJVkUsIHJlcXVpcmUoJy4vX2RhdGUtdG8tcHJpbWl0aXZlJykpO1xuIiwidmFyIERhdGVQcm90byA9IERhdGUucHJvdG90eXBlO1xudmFyIElOVkFMSURfREFURSA9ICdJbnZhbGlkIERhdGUnO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gRGF0ZVByb3RvW1RPX1NUUklOR107XG52YXIgZ2V0VGltZSA9IERhdGVQcm90by5nZXRUaW1lO1xuaWYgKG5ldyBEYXRlKE5hTikgKyAnJyAhPSBJTlZBTElEX0RBVEUpIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShEYXRlUHJvdG8sIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIHZhbHVlID0gZ2V0VGltZS5jYWxsKHRoaXMpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gJHRvU3RyaW5nLmNhbGwodGhpcykgOiBJTlZBTElEX0RBVEU7XG4gIH0pO1xufVxuIiwiLy8gMTkuMi4zLjIgLyAxNS4zLjQuNSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCh0aGlzQXJnLCBhcmdzLi4uKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdGdW5jdGlvbicsIHsgYmluZDogcmVxdWlyZSgnLi9fYmluZCcpIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSEFTX0lOU1RBTkNFID0gcmVxdWlyZSgnLi9fd2tzJykoJ2hhc0luc3RhbmNlJyk7XG52YXIgRnVuY3Rpb25Qcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbi8vIDE5LjIuMy42IEZ1bmN0aW9uLnByb3RvdHlwZVtAQGhhc0luc3RhbmNlXShWKVxuaWYgKCEoSEFTX0lOU1RBTkNFIGluIEZ1bmN0aW9uUHJvdG8pKSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mKEZ1bmN0aW9uUHJvdG8sIEhBU19JTlNUQU5DRSwgeyB2YWx1ZTogZnVuY3Rpb24gKE8pIHtcbiAgaWYgKHR5cGVvZiB0aGlzICE9ICdmdW5jdGlvbicgfHwgIWlzT2JqZWN0KE8pKSByZXR1cm4gZmFsc2U7XG4gIGlmICghaXNPYmplY3QodGhpcy5wcm90b3R5cGUpKSByZXR1cm4gTyBpbnN0YW5jZW9mIHRoaXM7XG4gIC8vIGZvciBlbnZpcm9ubWVudCB3L28gbmF0aXZlIGBAQGhhc0luc3RhbmNlYCBsb2dpYyBlbm91Z2ggYGluc3RhbmNlb2ZgLCBidXQgYWRkIHRoaXM6XG4gIHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpIGlmICh0aGlzLnByb3RvdHlwZSA9PT0gTykgcmV0dXJuIHRydWU7XG4gIHJldHVybiBmYWxzZTtcbn0gfSk7XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIEZQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBuYW1lUkUgPSAvXlxccypmdW5jdGlvbiAoW14gKF0qKS87XG52YXIgTkFNRSA9ICduYW1lJztcblxuLy8gMTkuMi40LjIgbmFtZVxuTkFNRSBpbiBGUHJvdG8gfHwgcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiBkUChGUHJvdG8sIE5BTUUsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuICgnJyArIHRoaXMpLm1hdGNoKG5hbWVSRSlbMV07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBNQVAgPSAnTWFwJztcblxuLy8gMjMuMSBNYXAgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoTUFQLCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBNYXAoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4xLjMuNiBNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIHZhciBlbnRyeSA9IHN0cm9uZy5nZXRFbnRyeSh2YWxpZGF0ZSh0aGlzLCBNQVApLCBrZXkpO1xuICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS52O1xuICB9LFxuICAvLyAyMy4xLjMuOSBNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodmFsaWRhdGUodGhpcywgTUFQKSwga2V5ID09PSAwID8gMCA6IGtleSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcsIHRydWUpO1xuIiwiLy8gMjAuMi4yLjMgTWF0aC5hY29zaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBsb2cxcCA9IHJlcXVpcmUoJy4vX21hdGgtbG9nMXAnKTtcbnZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xudmFyICRhY29zaCA9IE1hdGguYWNvc2g7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYWNvc2hcbiAgLy8gVjggYnVnOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzUwOVxuICAmJiBNYXRoLmZsb29yKCRhY29zaChOdW1iZXIuTUFYX1ZBTFVFKSkgPT0gNzEwXG4gIC8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hY29zaChJbmZpbml0eSkgLT4gTmFOXG4gICYmICRhY29zaChJbmZpbml0eSkgPT0gSW5maW5pdHlcbiksICdNYXRoJywge1xuICBhY29zaDogZnVuY3Rpb24gYWNvc2goeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA8IDEgPyBOYU4gOiB4ID4gOTQ5MDYyNjUuNjI0MjUxNTZcbiAgICAgID8gTWF0aC5sb2coeCkgKyBNYXRoLkxOMlxuICAgICAgOiBsb2cxcCh4IC0gMSArIHNxcnQoeCAtIDEpICogc3FydCh4ICsgMSkpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi41IE1hdGguYXNpbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGFzaW5oID0gTWF0aC5hc2luaDtcblxuZnVuY3Rpb24gYXNpbmgoeCkge1xuICByZXR1cm4gIWlzRmluaXRlKHggPSAreCkgfHwgeCA9PSAwID8geCA6IHggPCAwID8gLWFzaW5oKC14KSA6IE1hdGgubG9nKHggKyBNYXRoLnNxcnQoeCAqIHggKyAxKSk7XG59XG5cbi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hc2luaCgwKSAtPiAtMFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhc2luaCAmJiAxIC8gJGFzaW5oKDApID4gMCksICdNYXRoJywgeyBhc2luaDogYXNpbmggfSk7XG4iLCIvLyAyMC4yLjIuNyBNYXRoLmF0YW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhdGFuaCA9IE1hdGguYXRhbmg7XG5cbi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hdGFuaCgtMCkgLT4gMFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhdGFuaCAmJiAxIC8gJGF0YW5oKC0wKSA8IDApLCAnTWF0aCcsIHtcbiAgYXRhbmg6IGZ1bmN0aW9uIGF0YW5oKHgpIHtcbiAgICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiBNYXRoLmxvZygoMSArIHgpIC8gKDEgLSB4KSkgLyAyO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi45IE1hdGguY2JydCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzaWduID0gcmVxdWlyZSgnLi9fbWF0aC1zaWduJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2JydDogZnVuY3Rpb24gY2JydCh4KSB7XG4gICAgcmV0dXJuIHNpZ24oeCA9ICt4KSAqIE1hdGgucG93KE1hdGguYWJzKHgpLCAxIC8gMyk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjExIE1hdGguY2x6MzIoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2x6MzI6IGZ1bmN0aW9uIGNsejMyKHgpIHtcbiAgICByZXR1cm4gKHggPj4+PSAwKSA/IDMxIC0gTWF0aC5mbG9vcihNYXRoLmxvZyh4ICsgMC41KSAqIE1hdGguTE9HMkUpIDogMzI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjEyIE1hdGguY29zaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjb3NoOiBmdW5jdGlvbiBjb3NoKHgpIHtcbiAgICByZXR1cm4gKGV4cCh4ID0gK3gpICsgZXhwKC14KSkgLyAyO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoJGV4cG0xICE9IE1hdGguZXhwbTEpLCAnTWF0aCcsIHsgZXhwbTE6ICRleHBtMSB9KTtcbiIsIi8vIDIwLjIuMi4xNiBNYXRoLmZyb3VuZCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBmcm91bmQ6IHJlcXVpcmUoJy4vX21hdGgtZnJvdW5kJykgfSk7XG4iLCIvLyAyMC4yLjIuMTcgTWF0aC5oeXBvdChbdmFsdWUxWywgdmFsdWUyWywg4oCmIF1dXSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYWJzID0gTWF0aC5hYnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaHlwb3Q6IGZ1bmN0aW9uIGh5cG90KHZhbHVlMSwgdmFsdWUyKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgc3VtID0gMDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBsYXJnID0gMDtcbiAgICB2YXIgYXJnLCBkaXY7XG4gICAgd2hpbGUgKGkgPCBhTGVuKSB7XG4gICAgICBhcmcgPSBhYnMoYXJndW1lbnRzW2krK10pO1xuICAgICAgaWYgKGxhcmcgPCBhcmcpIHtcbiAgICAgICAgZGl2ID0gbGFyZyAvIGFyZztcbiAgICAgICAgc3VtID0gc3VtICogZGl2ICogZGl2ICsgMTtcbiAgICAgICAgbGFyZyA9IGFyZztcbiAgICAgIH0gZWxzZSBpZiAoYXJnID4gMCkge1xuICAgICAgICBkaXYgPSBhcmcgLyBsYXJnO1xuICAgICAgICBzdW0gKz0gZGl2ICogZGl2O1xuICAgICAgfSBlbHNlIHN1bSArPSBhcmc7XG4gICAgfVxuICAgIHJldHVybiBsYXJnID09PSBJbmZpbml0eSA/IEluZmluaXR5IDogbGFyZyAqIE1hdGguc3FydChzdW0pO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xOCBNYXRoLmltdWwoeCwgeSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGltdWwgPSBNYXRoLmltdWw7XG5cbi8vIHNvbWUgV2ViS2l0IHZlcnNpb25zIGZhaWxzIHdpdGggYmlnIG51bWJlcnMsIHNvbWUgaGFzIHdyb25nIGFyaXR5XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJGltdWwoMHhmZmZmZmZmZiwgNSkgIT0gLTUgfHwgJGltdWwubGVuZ3RoICE9IDI7XG59KSwgJ01hdGgnLCB7XG4gIGltdWw6IGZ1bmN0aW9uIGltdWwoeCwgeSkge1xuICAgIHZhciBVSU5UMTYgPSAweGZmZmY7XG4gICAgdmFyIHhuID0gK3g7XG4gICAgdmFyIHluID0gK3k7XG4gICAgdmFyIHhsID0gVUlOVDE2ICYgeG47XG4gICAgdmFyIHlsID0gVUlOVDE2ICYgeW47XG4gICAgcmV0dXJuIDAgfCB4bCAqIHlsICsgKChVSU5UMTYgJiB4biA+Pj4gMTYpICogeWwgKyB4bCAqIChVSU5UMTYgJiB5biA+Pj4gMTYpIDw8IDE2ID4+PiAwKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMjEgTWF0aC5sb2cxMCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBsb2cxMDogZnVuY3Rpb24gbG9nMTAoeCkge1xuICAgIHJldHVybiBNYXRoLmxvZyh4KSAqIE1hdGguTE9HMTBFO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGxvZzFwOiByZXF1aXJlKCcuL19tYXRoLWxvZzFwJykgfSk7XG4iLCIvLyAyMC4yLjIuMjIgTWF0aC5sb2cyKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzI6IGZ1bmN0aW9uIGxvZzIoeCkge1xuICAgIHJldHVybiBNYXRoLmxvZyh4KSAvIE1hdGguTE4yO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgc2lnbjogcmVxdWlyZSgnLi9fbWF0aC1zaWduJykgfSk7XG4iLCIvLyAyMC4yLjIuMzAgTWF0aC5zaW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4vLyBWOCBuZWFyIENocm9taXVtIDM4IGhhcyBhIHByb2JsZW0gd2l0aCB2ZXJ5IHNtYWxsIG51bWJlcnNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhTWF0aC5zaW5oKC0yZS0xNykgIT0gLTJlLTE3O1xufSksICdNYXRoJywge1xuICBzaW5oOiBmdW5jdGlvbiBzaW5oKHgpIHtcbiAgICByZXR1cm4gTWF0aC5hYnMoeCA9ICt4KSA8IDFcbiAgICAgID8gKGV4cG0xKHgpIC0gZXhwbTEoLXgpKSAvIDJcbiAgICAgIDogKGV4cCh4IC0gMSkgLSBleHAoLXggLSAxKSkgKiAoTWF0aC5FIC8gMik7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjMzIE1hdGgudGFuaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0YW5oOiBmdW5jdGlvbiB0YW5oKHgpIHtcbiAgICB2YXIgYSA9IGV4cG0xKHggPSAreCk7XG4gICAgdmFyIGIgPSBleHBtMSgteCk7XG4gICAgcmV0dXJuIGEgPT0gSW5maW5pdHkgPyAxIDogYiA9PSBJbmZpbml0eSA/IC0xIDogKGEgLSBiKSAvIChleHAoeCkgKyBleHAoLXgpKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMzQgTWF0aC50cnVuYyh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0cnVuYzogZnVuY3Rpb24gdHJ1bmMoaXQpIHtcbiAgICByZXR1cm4gKGl0ID4gMCA/IE1hdGguZmxvb3IgOiBNYXRoLmNlaWwpKGl0KTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcbnZhciBOVU1CRVIgPSAnTnVtYmVyJztcbnZhciAkTnVtYmVyID0gZ2xvYmFsW05VTUJFUl07XG52YXIgQmFzZSA9ICROdW1iZXI7XG52YXIgcHJvdG8gPSAkTnVtYmVyLnByb3RvdHlwZTtcbi8vIE9wZXJhIH4xMiBoYXMgYnJva2VuIE9iamVjdCN0b1N0cmluZ1xudmFyIEJST0tFTl9DT0YgPSBjb2YocmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpKHByb3RvKSkgPT0gTlVNQkVSO1xudmFyIFRSSU0gPSAndHJpbScgaW4gU3RyaW5nLnByb3RvdHlwZTtcblxuLy8gNy4xLjMgVG9OdW1iZXIoYXJndW1lbnQpXG52YXIgdG9OdW1iZXIgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdmFyIGl0ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsIGZhbHNlKTtcbiAgaWYgKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyAmJiBpdC5sZW5ndGggPiAyKSB7XG4gICAgaXQgPSBUUklNID8gaXQudHJpbSgpIDogJHRyaW0oaXQsIDMpO1xuICAgIHZhciBmaXJzdCA9IGl0LmNoYXJDb2RlQXQoMCk7XG4gICAgdmFyIHRoaXJkLCByYWRpeCwgbWF4Q29kZTtcbiAgICBpZiAoZmlyc3QgPT09IDQzIHx8IGZpcnN0ID09PSA0NSkge1xuICAgICAgdGhpcmQgPSBpdC5jaGFyQ29kZUF0KDIpO1xuICAgICAgaWYgKHRoaXJkID09PSA4OCB8fCB0aGlyZCA9PT0gMTIwKSByZXR1cm4gTmFOOyAvLyBOdW1iZXIoJysweDEnKSBzaG91bGQgYmUgTmFOLCBvbGQgVjggZml4XG4gICAgfSBlbHNlIGlmIChmaXJzdCA9PT0gNDgpIHtcbiAgICAgIHN3aXRjaCAoaXQuY2hhckNvZGVBdCgxKSkge1xuICAgICAgICBjYXNlIDY2OiBjYXNlIDk4OiByYWRpeCA9IDI7IG1heENvZGUgPSA0OTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wYlswMV0rJC9pXG4gICAgICAgIGNhc2UgNzk6IGNhc2UgMTExOiByYWRpeCA9IDg7IG1heENvZGUgPSA1NTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wb1swLTddKyQvaVxuICAgICAgICBkZWZhdWx0OiByZXR1cm4gK2l0O1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgZGlnaXRzID0gaXQuc2xpY2UoMiksIGkgPSAwLCBsID0gZGlnaXRzLmxlbmd0aCwgY29kZTsgaSA8IGw7IGkrKykge1xuICAgICAgICBjb2RlID0gZGlnaXRzLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIC8vIHBhcnNlSW50IHBhcnNlcyBhIHN0cmluZyB0byBhIGZpcnN0IHVuYXZhaWxhYmxlIHN5bWJvbFxuICAgICAgICAvLyBidXQgVG9OdW1iZXIgc2hvdWxkIHJldHVybiBOYU4gaWYgYSBzdHJpbmcgY29udGFpbnMgdW5hdmFpbGFibGUgc3ltYm9sc1xuICAgICAgICBpZiAoY29kZSA8IDQ4IHx8IGNvZGUgPiBtYXhDb2RlKSByZXR1cm4gTmFOO1xuICAgICAgfSByZXR1cm4gcGFyc2VJbnQoZGlnaXRzLCByYWRpeCk7XG4gICAgfVxuICB9IHJldHVybiAraXQ7XG59O1xuXG5pZiAoISROdW1iZXIoJyAwbzEnKSB8fCAhJE51bWJlcignMGIxJykgfHwgJE51bWJlcignKzB4MScpKSB7XG4gICROdW1iZXIgPSBmdW5jdGlvbiBOdW1iZXIodmFsdWUpIHtcbiAgICB2YXIgaXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMSA/IDAgOiB2YWx1ZTtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgcmV0dXJuIHRoYXQgaW5zdGFuY2VvZiAkTnVtYmVyXG4gICAgICAvLyBjaGVjayBvbiAxLi5jb25zdHJ1Y3Rvcihmb28pIGNhc2VcbiAgICAgICYmIChCUk9LRU5fQ09GID8gZmFpbHMoZnVuY3Rpb24gKCkgeyBwcm90by52YWx1ZU9mLmNhbGwodGhhdCk7IH0pIDogY29mKHRoYXQpICE9IE5VTUJFUilcbiAgICAgICAgPyBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSh0b051bWJlcihpdCkpLCB0aGF0LCAkTnVtYmVyKSA6IHRvTnVtYmVyKGl0KTtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BOKEJhc2UpIDogKFxuICAgIC8vIEVTMzpcbiAgICAnTUFYX1ZBTFVFLE1JTl9WQUxVRSxOYU4sTkVHQVRJVkVfSU5GSU5JVFksUE9TSVRJVkVfSU5GSU5JVFksJyArXG4gICAgLy8gRVM2IChpbiBjYXNlLCBpZiBtb2R1bGVzIHdpdGggRVM2IE51bWJlciBzdGF0aWNzIHJlcXVpcmVkIGJlZm9yZSk6XG4gICAgJ0VQU0lMT04saXNGaW5pdGUsaXNJbnRlZ2VyLGlzTmFOLGlzU2FmZUludGVnZXIsTUFYX1NBRkVfSU5URUdFUiwnICtcbiAgICAnTUlOX1NBRkVfSU5URUdFUixwYXJzZUZsb2F0LHBhcnNlSW50LGlzSW50ZWdlcidcbiAgKS5zcGxpdCgnLCcpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7IGorKykge1xuICAgIGlmIChoYXMoQmFzZSwga2V5ID0ga2V5c1tqXSkgJiYgIWhhcygkTnVtYmVyLCBrZXkpKSB7XG4gICAgICBkUCgkTnVtYmVyLCBrZXksIGdPUEQoQmFzZSwga2V5KSk7XG4gICAgfVxuICB9XG4gICROdW1iZXIucHJvdG90eXBlID0gcHJvdG87XG4gIHByb3RvLmNvbnN0cnVjdG9yID0gJE51bWJlcjtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsIE5VTUJFUiwgJE51bWJlcik7XG59XG4iLCIvLyAyMC4xLjIuMSBOdW1iZXIuRVBTSUxPTlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IEVQU0lMT046IE1hdGgucG93KDIsIC01MikgfSk7XG4iLCIvLyAyMC4xLjIuMiBOdW1iZXIuaXNGaW5pdGUobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBfaXNGaW5pdGUgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5pc0Zpbml0ZTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzRmluaXRlOiBmdW5jdGlvbiBpc0Zpbml0ZShpdCkge1xuICAgIHJldHVybiB0eXBlb2YgaXQgPT0gJ251bWJlcicgJiYgX2lzRmluaXRlKGl0KTtcbiAgfVxufSk7XG4iLCIvLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBpc0ludGVnZXI6IHJlcXVpcmUoJy4vX2lzLWludGVnZXInKSB9KTtcbiIsIi8vIDIwLjEuMi40IE51bWJlci5pc05hTihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNOYU46IGZ1bmN0aW9uIGlzTmFOKG51bWJlcikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICByZXR1cm4gbnVtYmVyICE9IG51bWJlcjtcbiAgfVxufSk7XG4iLCIvLyAyMC4xLjIuNSBOdW1iZXIuaXNTYWZlSW50ZWdlcihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzSW50ZWdlciA9IHJlcXVpcmUoJy4vX2lzLWludGVnZXInKTtcbnZhciBhYnMgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzU2FmZUludGVnZXI6IGZ1bmN0aW9uIGlzU2FmZUludGVnZXIobnVtYmVyKSB7XG4gICAgcmV0dXJuIGlzSW50ZWdlcihudW1iZXIpICYmIGFicyhudW1iZXIpIDw9IDB4MWZmZmZmZmZmZmZmZmY7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjYgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBNQVhfU0FGRV9JTlRFR0VSOiAweDFmZmZmZmZmZmZmZmZmIH0pO1xuIiwiLy8gMjAuMS4yLjEwIE51bWJlci5NSU5fU0FGRV9JTlRFR0VSXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgTUlOX1NBRkVfSU5URUdFUjogLTB4MWZmZmZmZmZmZmZmZmYgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fcGFyc2UtZmxvYXQnKTtcbi8vIDIwLjEuMi4xMiBOdW1iZXIucGFyc2VGbG9hdChzdHJpbmcpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksICdOdW1iZXInLCB7IHBhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0IH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19wYXJzZS1pbnQnKTtcbi8vIDIwLjEuMi4xMyBOdW1iZXIucGFyc2VJbnQoc3RyaW5nLCByYWRpeClcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE51bWJlci5wYXJzZUludCAhPSAkcGFyc2VJbnQpLCAnTnVtYmVyJywgeyBwYXJzZUludDogJHBhcnNlSW50IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgYU51bWJlclZhbHVlID0gcmVxdWlyZSgnLi9fYS1udW1iZXItdmFsdWUnKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0Jyk7XG52YXIgJHRvRml4ZWQgPSAxLjAudG9GaXhlZDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgZGF0YSA9IFswLCAwLCAwLCAwLCAwLCAwXTtcbnZhciBFUlJPUiA9ICdOdW1iZXIudG9GaXhlZDogaW5jb3JyZWN0IGludm9jYXRpb24hJztcbnZhciBaRVJPID0gJzAnO1xuXG52YXIgbXVsdGlwbHkgPSBmdW5jdGlvbiAobiwgYykge1xuICB2YXIgaSA9IC0xO1xuICB2YXIgYzIgPSBjO1xuICB3aGlsZSAoKytpIDwgNikge1xuICAgIGMyICs9IG4gKiBkYXRhW2ldO1xuICAgIGRhdGFbaV0gPSBjMiAlIDFlNztcbiAgICBjMiA9IGZsb29yKGMyIC8gMWU3KTtcbiAgfVxufTtcbnZhciBkaXZpZGUgPSBmdW5jdGlvbiAobikge1xuICB2YXIgaSA9IDY7XG4gIHZhciBjID0gMDtcbiAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgYyArPSBkYXRhW2ldO1xuICAgIGRhdGFbaV0gPSBmbG9vcihjIC8gbik7XG4gICAgYyA9IChjICUgbikgKiAxZTc7XG4gIH1cbn07XG52YXIgbnVtVG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpID0gNjtcbiAgdmFyIHMgPSAnJztcbiAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgaWYgKHMgIT09ICcnIHx8IGkgPT09IDAgfHwgZGF0YVtpXSAhPT0gMCkge1xuICAgICAgdmFyIHQgPSBTdHJpbmcoZGF0YVtpXSk7XG4gICAgICBzID0gcyA9PT0gJycgPyB0IDogcyArIHJlcGVhdC5jYWxsKFpFUk8sIDcgLSB0Lmxlbmd0aCkgKyB0O1xuICAgIH1cbiAgfSByZXR1cm4gcztcbn07XG52YXIgcG93ID0gZnVuY3Rpb24gKHgsIG4sIGFjYykge1xuICByZXR1cm4gbiA9PT0gMCA/IGFjYyA6IG4gJSAyID09PSAxID8gcG93KHgsIG4gLSAxLCBhY2MgKiB4KSA6IHBvdyh4ICogeCwgbiAvIDIsIGFjYyk7XG59O1xudmFyIGxvZyA9IGZ1bmN0aW9uICh4KSB7XG4gIHZhciBuID0gMDtcbiAgdmFyIHgyID0geDtcbiAgd2hpbGUgKHgyID49IDQwOTYpIHtcbiAgICBuICs9IDEyO1xuICAgIHgyIC89IDQwOTY7XG4gIH1cbiAgd2hpbGUgKHgyID49IDIpIHtcbiAgICBuICs9IDE7XG4gICAgeDIgLz0gMjtcbiAgfSByZXR1cm4gbjtcbn07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCEhJHRvRml4ZWQgJiYgKFxuICAwLjAwMDA4LnRvRml4ZWQoMykgIT09ICcwLjAwMCcgfHxcbiAgMC45LnRvRml4ZWQoMCkgIT09ICcxJyB8fFxuICAxLjI1NS50b0ZpeGVkKDIpICE9PSAnMS4yNScgfHxcbiAgMTAwMDAwMDAwMDAwMDAwMDEyOC4wLnRvRml4ZWQoMCkgIT09ICcxMDAwMDAwMDAwMDAwMDAwMTI4J1xuKSB8fCAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gICR0b0ZpeGVkLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b0ZpeGVkOiBmdW5jdGlvbiB0b0ZpeGVkKGZyYWN0aW9uRGlnaXRzKSB7XG4gICAgdmFyIHggPSBhTnVtYmVyVmFsdWUodGhpcywgRVJST1IpO1xuICAgIHZhciBmID0gdG9JbnRlZ2VyKGZyYWN0aW9uRGlnaXRzKTtcbiAgICB2YXIgcyA9ICcnO1xuICAgIHZhciBtID0gWkVSTztcbiAgICB2YXIgZSwgeiwgaiwgaztcbiAgICBpZiAoZiA8IDAgfHwgZiA+IDIwKSB0aHJvdyBSYW5nZUVycm9yKEVSUk9SKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKHggIT0geCkgcmV0dXJuICdOYU4nO1xuICAgIGlmICh4IDw9IC0xZTIxIHx8IHggPj0gMWUyMSkgcmV0dXJuIFN0cmluZyh4KTtcbiAgICBpZiAoeCA8IDApIHtcbiAgICAgIHMgPSAnLSc7XG4gICAgICB4ID0gLXg7XG4gICAgfVxuICAgIGlmICh4ID4gMWUtMjEpIHtcbiAgICAgIGUgPSBsb2coeCAqIHBvdygyLCA2OSwgMSkpIC0gNjk7XG4gICAgICB6ID0gZSA8IDAgPyB4ICogcG93KDIsIC1lLCAxKSA6IHggLyBwb3coMiwgZSwgMSk7XG4gICAgICB6ICo9IDB4MTAwMDAwMDAwMDAwMDA7XG4gICAgICBlID0gNTIgLSBlO1xuICAgICAgaWYgKGUgPiAwKSB7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBqID0gZjtcbiAgICAgICAgd2hpbGUgKGogPj0gNykge1xuICAgICAgICAgIG11bHRpcGx5KDFlNywgMCk7XG4gICAgICAgICAgaiAtPSA3O1xuICAgICAgICB9XG4gICAgICAgIG11bHRpcGx5KHBvdygxMCwgaiwgMSksIDApO1xuICAgICAgICBqID0gZSAtIDE7XG4gICAgICAgIHdoaWxlIChqID49IDIzKSB7XG4gICAgICAgICAgZGl2aWRlKDEgPDwgMjMpO1xuICAgICAgICAgIGogLT0gMjM7XG4gICAgICAgIH1cbiAgICAgICAgZGl2aWRlKDEgPDwgaik7XG4gICAgICAgIG11bHRpcGx5KDEsIDEpO1xuICAgICAgICBkaXZpZGUoMik7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIG11bHRpcGx5KDEgPDwgLWUsIDApO1xuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKSArIHJlcGVhdC5jYWxsKFpFUk8sIGYpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZiA+IDApIHtcbiAgICAgIGsgPSBtLmxlbmd0aDtcbiAgICAgIG0gPSBzICsgKGsgPD0gZiA/ICcwLicgKyByZXBlYXQuY2FsbChaRVJPLCBmIC0gaykgKyBtIDogbS5zbGljZSgwLCBrIC0gZikgKyAnLicgKyBtLnNsaWNlKGsgLSBmKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSBzICsgbTtcbiAgICB9IHJldHVybiBtO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBhTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuL19hLW51bWJlci12YWx1ZScpO1xudmFyICR0b1ByZWNpc2lvbiA9IDEuMC50b1ByZWNpc2lvbjtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gSUU3LVxuICByZXR1cm4gJHRvUHJlY2lzaW9uLmNhbGwoMSwgdW5kZWZpbmVkKSAhPT0gJzEnO1xufSkgfHwgISRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gICR0b1ByZWNpc2lvbi5jYWxsKHt9KTtcbn0pKSwgJ051bWJlcicsIHtcbiAgdG9QcmVjaXNpb246IGZ1bmN0aW9uIHRvUHJlY2lzaW9uKHByZWNpc2lvbikge1xuICAgIHZhciB0aGF0ID0gYU51bWJlclZhbHVlKHRoaXMsICdOdW1iZXIjdG9QcmVjaXNpb246IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICAgIHJldHVybiBwcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQpIDogJHRvUHJlY2lzaW9uLmNhbGwodGhhdCwgcHJlY2lzaW9uKTtcbiAgfVxufSk7XG4iLCIvLyAxOS4xLjMuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYsICdPYmplY3QnLCB7IGFzc2lnbjogcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGNyZWF0ZTogcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4zIC8gMTUuMi4zLjcgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnRpZXM6IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKSB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydHk6IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYgfSk7XG4iLCIvLyAxOS4xLjIuNSBPYmplY3QuZnJlZXplKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2ZyZWV6ZScsIGZ1bmN0aW9uICgkZnJlZXplKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmcmVlemUoaXQpIHtcbiAgICByZXR1cm4gJGZyZWV6ZSAmJiBpc09iamVjdChpdCkgPyAkZnJlZXplKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0b0lPYmplY3QoaXQpLCBrZXkpO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eU5hbWVzJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0JykuZjtcbn0pO1xuIiwiLy8gMTkuMS4yLjkgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciAkZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0UHJvdG90eXBlT2YnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCkge1xuICAgIHJldHVybiAkZ2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjExIE9iamVjdC5pc0V4dGVuc2libGUoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRXh0ZW5zaWJsZScsIGZ1bmN0aW9uICgkaXNFeHRlbnNpYmxlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc0V4dGVuc2libGUoaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUoaXQpIDogdHJ1ZSA6IGZhbHNlO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTIgT2JqZWN0LmlzRnJvemVuKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc0Zyb3plbicsIGZ1bmN0aW9uICgkaXNGcm96ZW4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRnJvemVuKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0Zyb3plbiA/ICRpc0Zyb3plbihpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xMyBPYmplY3QuaXNTZWFsZWQoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzU2VhbGVkJywgZnVuY3Rpb24gKCRpc1NlYWxlZCkge1xuICByZXR1cm4gZnVuY3Rpb24gaXNTZWFsZWQoaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzU2VhbGVkID8gJGlzU2VhbGVkKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4zLjEwIE9iamVjdC5pcyh2YWx1ZTEsIHZhbHVlMilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgaXM6IHJlcXVpcmUoJy4vX3NhbWUtdmFsdWUnKSB9KTtcbiIsIi8vIDE5LjEuMi4xNCBPYmplY3Qua2V5cyhPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2tleXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBrZXlzKGl0KSB7XG4gICAgcmV0dXJuICRrZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xNSBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgncHJldmVudEV4dGVuc2lvbnMnLCBmdW5jdGlvbiAoJHByZXZlbnRFeHRlbnNpb25zKSB7XG4gIHJldHVybiBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyhpdCkge1xuICAgIHJldHVybiAkcHJldmVudEV4dGVuc2lvbnMgJiYgaXNPYmplY3QoaXQpID8gJHByZXZlbnRFeHRlbnNpb25zKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTcgT2JqZWN0LnNlYWwoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnc2VhbCcsIGZ1bmN0aW9uICgkc2VhbCkge1xuICByZXR1cm4gZnVuY3Rpb24gc2VhbChpdCkge1xuICAgIHJldHVybiAkc2VhbCAmJiBpc09iamVjdChpdCkgPyAkc2VhbChtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4zLjE5IE9iamVjdC5zZXRQcm90b3R5cGVPZihPLCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgc2V0UHJvdG90eXBlT2Y6IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldCB9KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgdGVzdCA9IHt9O1xudGVzdFtyZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKV0gPSAneic7XG5pZiAodGVzdCArICcnICE9ICdbb2JqZWN0IHpdJykge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbiAgfSwgdHJ1ZSk7XG59XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fcGFyc2UtZmxvYXQnKTtcbi8vIDE4LjIuNCBwYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCB7IHBhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0IH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19wYXJzZS1pbnQnKTtcbi8vIDE4LjIuNSBwYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgeyBwYXJzZUludDogJHBhcnNlSW50IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQ7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi9fcGVyZm9ybScpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4vX3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIFBST01JU0UgPSAnUHJvbWlzZSc7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnM7XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52OCB8fCAnJztcbnZhciAkUHJvbWlzZSA9IGdsb2JhbFtQUk9NSVNFXTtcbnZhciBpc05vZGUgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJztcbnZhciBlbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBJbnRlcm5hbCwgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5LCBPd25Qcm9taXNlQ2FwYWJpbGl0eSwgV3JhcHBlcjtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY7XG5cbnZhciBVU0VfTkFUSVZFID0gISFmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gICAgdmFyIHByb21pc2UgPSAkUHJvbWlzZS5yZXNvbHZlKDEpO1xuICAgIHZhciBGYWtlUHJvbWlzZSA9IChwcm9taXNlLmNvbnN0cnVjdG9yID0ge30pW3JlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyldID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgICAgIGV4ZWMoZW1wdHksIGVtcHR5KTtcbiAgICB9O1xuICAgIC8vIHVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3RcbiAgICByZXR1cm4gKGlzTm9kZSB8fCB0eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50ID09ICdmdW5jdGlvbicpXG4gICAgICAmJiBwcm9taXNlLnRoZW4oZW1wdHkpIGluc3RhbmNlb2YgRmFrZVByb21pc2VcbiAgICAgIC8vIHY4IDYuNiAoTm9kZSAxMCBhbmQgQ2hyb21lIDY2KSBoYXZlIGEgYnVnIHdpdGggcmVzb2x2aW5nIGN1c3RvbSB0aGVuYWJsZXNcbiAgICAgIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTgzMDU2NVxuICAgICAgLy8gd2UgY2FuJ3QgZGV0ZWN0IGl0IHN5bmNocm9ub3VzbHksIHNvIGp1c3QgY2hlY2sgdmVyc2lvbnNcbiAgICAgICYmIHY4LmluZGV4T2YoJzYuNicpICE9PSAwXG4gICAgICAmJiB1c2VyQWdlbnQuaW5kZXhPZignQ2hyb21lLzY2JykgPT09IC0xO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn0oKTtcblxuLy8gaGVscGVyc1xudmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTtcbn07XG52YXIgbm90aWZ5ID0gZnVuY3Rpb24gKHByb21pc2UsIGlzUmVqZWN0KSB7XG4gIGlmIChwcm9taXNlLl9uKSByZXR1cm47XG4gIHByb21pc2UuX24gPSB0cnVlO1xuICB2YXIgY2hhaW4gPSBwcm9taXNlLl9jO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIG9rID0gcHJvbWlzZS5fcyA9PSAxO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcnVuID0gZnVuY3Rpb24gKHJlYWN0aW9uKSB7XG4gICAgICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsO1xuICAgICAgdmFyIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlO1xuICAgICAgdmFyIHJlamVjdCA9IHJlYWN0aW9uLnJlamVjdDtcbiAgICAgIHZhciBkb21haW4gPSByZWFjdGlvbi5kb21haW47XG4gICAgICB2YXIgcmVzdWx0LCB0aGVuLCBleGl0ZWQ7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgIGlmICghb2spIHtcbiAgICAgICAgICAgIGlmIChwcm9taXNlLl9oID09IDIpIG9uSGFuZGxlVW5oYW5kbGVkKHByb21pc2UpO1xuICAgICAgICAgICAgcHJvbWlzZS5faCA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChoYW5kbGVyID09PSB0cnVlKSByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChkb21haW4pIGRvbWFpbi5lbnRlcigpO1xuICAgICAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7IC8vIG1heSB0aHJvd1xuICAgICAgICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgICAgICAgICBkb21haW4uZXhpdCgpO1xuICAgICAgICAgICAgICBleGl0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKSB7XG4gICAgICAgICAgICByZWplY3QoVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhlbiA9IGlzVGhlbmFibGUocmVzdWx0KSkge1xuICAgICAgICAgICAgdGhlbi5jYWxsKHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9IGVsc2UgcmVqZWN0KHZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGRvbWFpbiAmJiAhZXhpdGVkKSBkb21haW4uZXhpdCgpO1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoID4gaSkgcnVuKGNoYWluW2krK10pOyAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxuICAgIHByb21pc2UuX2MgPSBbXTtcbiAgICBwcm9taXNlLl9uID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFwcm9taXNlLl9oKSBvblVuaGFuZGxlZChwcm9taXNlKTtcbiAgfSk7XG59O1xudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIHVuaGFuZGxlZCA9IGlzVW5oYW5kbGVkKHByb21pc2UpO1xuICAgIHZhciByZXN1bHQsIGhhbmRsZXIsIGNvbnNvbGU7XG4gICAgaWYgKHVuaGFuZGxlZCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpc05vZGUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uKSB7XG4gICAgICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogdmFsdWUgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoKGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZSkgJiYgY29uc29sZS5lcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgcHJvbWlzZS5faCA9IGlzTm9kZSB8fCBpc1VuaGFuZGxlZChwcm9taXNlKSA/IDIgOiAxO1xuICAgIH0gcHJvbWlzZS5fYSA9IHVuZGVmaW5lZDtcbiAgICBpZiAodW5oYW5kbGVkICYmIHJlc3VsdC5lKSB0aHJvdyByZXN1bHQudjtcbiAgfSk7XG59O1xudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgcmV0dXJuIHByb21pc2UuX2ggIT09IDEgJiYgKHByb21pc2UuX2EgfHwgcHJvbWlzZS5fYykubGVuZ3RoID09PSAwO1xufTtcbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFuZGxlcjtcbiAgICBpZiAoaXNOb2RlKSB7XG4gICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTtcbiAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub25yZWplY3Rpb25oYW5kbGVkKSB7XG4gICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiBwcm9taXNlLl92IH0pO1xuICAgIH1cbiAgfSk7XG59O1xudmFyICRyZWplY3QgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgcHJvbWlzZS5fcyA9IDI7XG4gIGlmICghcHJvbWlzZS5fYSkgcHJvbWlzZS5fYSA9IHByb21pc2UuX2Muc2xpY2UoKTtcbiAgbm90aWZ5KHByb21pc2UsIHRydWUpO1xufTtcbnZhciAkcmVzb2x2ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIHZhciB0aGVuO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHRyeSB7XG4gICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB0aHJvdyBUeXBlRXJyb3IoXCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZlwiKTtcbiAgICBpZiAodGhlbiA9IGlzVGhlbmFibGUodmFsdWUpKSB7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9OyAvLyB3cmFwXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLCBjdHgoJHJlc29sdmUsIHdyYXBwZXIsIDEpLCBjdHgoJHJlamVjdCwgd3JhcHBlciwgMSkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgJHJlamVjdC5jYWxsKHdyYXBwZXIsIGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICAgICAgcHJvbWlzZS5fcyA9IDE7XG4gICAgICBub3RpZnkocHJvbWlzZSwgZmFsc2UpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgICRyZWplY3QuY2FsbCh7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfSwgZSk7IC8vIHdyYXBcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmICghVVNFX05BVElWRSkge1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICAkUHJvbWlzZSA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICRQcm9taXNlLCBQUk9NSVNFLCAnX2gnKTtcbiAgICBhRnVuY3Rpb24oZXhlY3V0b3IpO1xuICAgIEludGVybmFsLmNhbGwodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGN0eCgkcmVzb2x2ZSwgdGhpcywgMSksIGN0eCgkcmVqZWN0LCB0aGlzLCAxKSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAkcmVqZWN0LmNhbGwodGhpcywgZXJyKTtcbiAgICB9XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICBJbnRlcm5hbCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICB0aGlzLl9jID0gW107ICAgICAgICAgICAgIC8vIDwtIGF3YWl0aW5nIHJlYWN0aW9uc1xuICAgIHRoaXMuX2EgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gY2hlY2tlZCBpbiBpc1VuaGFuZGxlZCByZWFjdGlvbnNcbiAgICB0aGlzLl9zID0gMDsgICAgICAgICAgICAgIC8vIDwtIHN0YXRlXG4gICAgdGhpcy5fZCA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBkb25lXG4gICAgdGhpcy5fdiA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSB2YWx1ZVxuICAgIHRoaXMuX2ggPSAwOyAgICAgICAgICAgICAgLy8gPC0gcmVqZWN0aW9uIHN0YXRlLCAwIC0gZGVmYXVsdCwgMSAtIGhhbmRsZWQsIDIgLSB1bmhhbmRsZWRcbiAgICB0aGlzLl9uID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIG5vdGlmeVxuICB9O1xuICBJbnRlcm5hbC5wcm90b3R5cGUgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKSgkUHJvbWlzZS5wcm90b3R5cGUsIHtcbiAgICAvLyAyNS40LjUuMyBQcm9taXNlLnByb3RvdHlwZS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKVxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciByZWFjdGlvbiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkUHJvbWlzZSkpO1xuICAgICAgcmVhY3Rpb24ub2sgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBpc05vZGUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2MucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fYSkgdGhpcy5fYS5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9zKSBub3RpZnkodGhpcywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyAyNS40LjUuMSBQcm9taXNlLnByb3RvdHlwZS5jYXRjaChvblJlamVjdGVkKVxuICAgICdjYXRjaCc6IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XG4gICAgfVxuICB9KTtcbiAgT3duUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgSW50ZXJuYWwoKTtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGN0eCgkcmVzb2x2ZSwgcHJvbWlzZSwgMSk7XG4gICAgdGhpcy5yZWplY3QgPSBjdHgoJHJlamVjdCwgcHJvbWlzZSwgMSk7XG4gIH07XG4gIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gICAgcmV0dXJuIEMgPT09ICRQcm9taXNlIHx8IEMgPT09IFdyYXBwZXJcbiAgICAgID8gbmV3IE93blByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICA6IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBQcm9taXNlOiAkUHJvbWlzZSB9KTtcbnJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJykoJFByb21pc2UsIFBST01JU0UpO1xucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShQUk9NSVNFKTtcbldyYXBwZXIgPSByZXF1aXJlKCcuL19jb3JlJylbUFJPTUlTRV07XG5cbi8vIHN0YXRpY3NcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjUgUHJvbWlzZS5yZWplY3QocilcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcyk7XG4gICAgdmFyICQkcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgJCRyZWplY3Qocik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChMSUJSQVJZIHx8ICFVU0VfTkFUSVZFKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNiBQcm9taXNlLnJlc29sdmUoeClcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG4gICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKExJQlJBUlkgJiYgdGhpcyA9PT0gV3JhcHBlciA/ICRQcm9taXNlIDogdGhpcywgeCk7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKFVTRV9OQVRJVkUgJiYgcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikge1xuICAkUHJvbWlzZS5hbGwoaXRlcilbJ2NhdGNoJ10oZW1wdHkpO1xufSkpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC4xIFByb21pc2UuYWxsKGl0ZXJhYmxlKVxuICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHZhciAkaW5kZXggPSBpbmRleCsrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbJGluZGV4XSA9IHZhbHVlO1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9LFxuICAvLyAyNS40LjQuNCBQcm9taXNlLnJhY2UoaXRlcmFibGUpXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjEgUmVmbGVjdC5hcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgckFwcGx5ID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmFwcGx5O1xudmFyIGZBcHBseSA9IEZ1bmN0aW9uLmFwcGx5O1xuLy8gTVMgRWRnZSBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgckFwcGx5KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGFwcGx5OiBmdW5jdGlvbiBhcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdCkge1xuICAgIHZhciBUID0gYUZ1bmN0aW9uKHRhcmdldCk7XG4gICAgdmFyIEwgPSBhbk9iamVjdChhcmd1bWVudHNMaXN0KTtcbiAgICByZXR1cm4gckFwcGx5ID8gckFwcGx5KFQsIHRoaXNBcmd1bWVudCwgTCkgOiBmQXBwbHkuY2FsbChULCB0aGlzQXJndW1lbnQsIEwpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMiBSZWZsZWN0LmNvbnN0cnVjdCh0YXJnZXQsIGFyZ3VtZW50c0xpc3QgWywgbmV3VGFyZ2V0XSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL19iaW5kJyk7XG52YXIgckNvbnN0cnVjdCA9IChyZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0IHx8IHt9KS5jb25zdHJ1Y3Q7XG5cbi8vIE1TIEVkZ2Ugc3VwcG9ydHMgb25seSAyIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuLy8gRkYgTmlnaHRseSBzZXRzIHRoaXJkIGFyZ3VtZW50IGFzIGBuZXcudGFyZ2V0YCwgYnV0IGRvZXMgbm90IGNyZWF0ZSBgdGhpc2AgZnJvbSBpdFxudmFyIE5FV19UQVJHRVRfQlVHID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKHJDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCBbXSwgRikgaW5zdGFuY2VvZiBGKTtcbn0pO1xudmFyIEFSR1NfQlVHID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgckNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE5FV19UQVJHRVRfQlVHIHx8IEFSR1NfQlVHKSwgJ1JlZmxlY3QnLCB7XG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gY29uc3RydWN0KFRhcmdldCwgYXJncyAvKiAsIG5ld1RhcmdldCAqLykge1xuICAgIGFGdW5jdGlvbihUYXJnZXQpO1xuICAgIGFuT2JqZWN0KGFyZ3MpO1xuICAgIHZhciBuZXdUYXJnZXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IFRhcmdldCA6IGFGdW5jdGlvbihhcmd1bWVudHNbMl0pO1xuICAgIGlmIChBUkdTX0JVRyAmJiAhTkVXX1RBUkdFVF9CVUcpIHJldHVybiByQ29uc3RydWN0KFRhcmdldCwgYXJncywgbmV3VGFyZ2V0KTtcbiAgICBpZiAoVGFyZ2V0ID09IG5ld1RhcmdldCkge1xuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBvcHRpbWl6YXRpb24gZm9yIDAtNCBhcmd1bWVudHNcbiAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IFRhcmdldCgpO1xuICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0pO1xuICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgfVxuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBsb3Qgb2YgYXJndW1lbnRzIGNhc2VcbiAgICAgIHZhciAkYXJncyA9IFtudWxsXTtcbiAgICAgICRhcmdzLnB1c2guYXBwbHkoJGFyZ3MsIGFyZ3MpO1xuICAgICAgcmV0dXJuIG5ldyAoYmluZC5hcHBseShUYXJnZXQsICRhcmdzKSkoKTtcbiAgICB9XG4gICAgLy8gd2l0aCBhbHRlcmVkIG5ld1RhcmdldCwgbm90IHN1cHBvcnQgYnVpbHQtaW4gY29uc3RydWN0b3JzXG4gICAgdmFyIHByb3RvID0gbmV3VGFyZ2V0LnByb3RvdHlwZTtcbiAgICB2YXIgaW5zdGFuY2UgPSBjcmVhdGUoaXNPYmplY3QocHJvdG8pID8gcHJvdG8gOiBPYmplY3QucHJvdG90eXBlKTtcbiAgICB2YXIgcmVzdWx0ID0gRnVuY3Rpb24uYXBwbHkuY2FsbChUYXJnZXQsIGluc3RhbmNlLCBhcmdzKTtcbiAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IGluc3RhbmNlO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMyBSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpXG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuXG4vLyBNUyBFZGdlIGhhcyBicm9rZW4gUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSAtIHRocm93aW5nIGluc3RlYWQgb2YgcmV0dXJuaW5nIGZhbHNlXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShkUC5mKHt9LCAxLCB7IHZhbHVlOiAxIH0pLCAxLCB7IHZhbHVlOiAyIH0pO1xufSksICdSZWZsZWN0Jywge1xuICBkZWZpbmVQcm9wZXJ0eTogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcykge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcHJvcGVydHlLZXkgPSB0b1ByaW1pdGl2ZShwcm9wZXJ0eUtleSwgdHJ1ZSk7XG4gICAgYW5PYmplY3QoYXR0cmlidXRlcyk7XG4gICAgdHJ5IHtcbiAgICAgIGRQLmYodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDI2LjEuNCBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBkZWxldGVQcm9wZXJ0eTogZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHZhciBkZXNjID0gZ09QRChhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gICAgcmV0dXJuIGRlc2MgJiYgIWRlc2MuY29uZmlndXJhYmxlID8gZmFsc2UgOiBkZWxldGUgdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyNi4xLjUgUmVmbGVjdC5lbnVtZXJhdGUodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIEVudW1lcmF0ZSA9IGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gYW5PYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB2YXIga2V5cyA9IHRoaXMuX2sgPSBbXTsgICAgICAvLyBrZXlzXG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIGl0ZXJhdGVkKSBrZXlzLnB1c2goa2V5KTtcbn07XG5yZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpKEVudW1lcmF0ZSwgJ09iamVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSB0aGlzO1xuICB2YXIga2V5cyA9IHRoYXQuX2s7XG4gIHZhciBrZXk7XG4gIGRvIHtcbiAgICBpZiAodGhhdC5faSA+PSBrZXlzLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9IHdoaWxlICghKChrZXkgPSBrZXlzW3RoYXQuX2krK10pIGluIHRoYXQuX3QpKTtcbiAgcmV0dXJuIHsgdmFsdWU6IGtleSwgZG9uZTogZmFsc2UgfTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGVudW1lcmF0ZTogZnVuY3Rpb24gZW51bWVyYXRlKHRhcmdldCkge1xuICAgIHJldHVybiBuZXcgRW51bWVyYXRlKHRhcmdldCk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS43IFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuOCBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZ2V0UHJvdG8gPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBnZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSB7XG4gICAgcmV0dXJuIGdldFByb3RvKGFuT2JqZWN0KHRhcmdldCkpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuNiBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3BlcnR5S2V5IFssIHJlY2VpdmVyXSlcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG5mdW5jdGlvbiBnZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSAvKiAsIHJlY2VpdmVyICovKSB7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdGFyZ2V0IDogYXJndW1lbnRzWzJdO1xuICB2YXIgZGVzYywgcHJvdG87XG4gIGlmIChhbk9iamVjdCh0YXJnZXQpID09PSByZWNlaXZlcikgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIGlmIChkZXNjID0gZ09QRC5mKHRhcmdldCwgcHJvcGVydHlLZXkpKSByZXR1cm4gaGFzKGRlc2MsICd2YWx1ZScpXG4gICAgPyBkZXNjLnZhbHVlXG4gICAgOiBkZXNjLmdldCAhPT0gdW5kZWZpbmVkXG4gICAgICA/IGRlc2MuZ2V0LmNhbGwocmVjZWl2ZXIpXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgaWYgKGlzT2JqZWN0KHByb3RvID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHJldHVybiBnZXQocHJvdG8sIHByb3BlcnR5S2V5LCByZWNlaXZlcik7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgZ2V0OiBnZXQgfSk7XG4iLCIvLyAyNi4xLjkgUmVmbGVjdC5oYXModGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaGFzOiBmdW5jdGlvbiBoYXModGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBwcm9wZXJ0eUtleSBpbiB0YXJnZXQ7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xMCBSZWZsZWN0LmlzRXh0ZW5zaWJsZSh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaXNFeHRlbnNpYmxlOiBmdW5jdGlvbiBpc0V4dGVuc2libGUodGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICByZXR1cm4gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUodGFyZ2V0KSA6IHRydWU7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xMSBSZWZsZWN0Lm93bktleXModGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBvd25LZXlzOiByZXF1aXJlKCcuL19vd24ta2V5cycpIH0pO1xuIiwiLy8gMjYuMS4xMiBSZWZsZWN0LnByZXZlbnRFeHRlbnNpb25zKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkcHJldmVudEV4dGVuc2lvbnMgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgdHJ5IHtcbiAgICAgIGlmICgkcHJldmVudEV4dGVuc2lvbnMpICRwcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iLCIvLyAyNi4xLjE0IFJlZmxlY3Quc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgc2V0UHJvdG8gPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKTtcblxuaWYgKHNldFByb3RvKSAkZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIHNldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKSB7XG4gICAgc2V0UHJvdG8uY2hlY2sodGFyZ2V0LCBwcm90byk7XG4gICAgdHJ5IHtcbiAgICAgIHNldFByb3RvLnNldCh0YXJnZXQsIHByb3RvKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xMyBSZWZsZWN0LnNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIFssIHJlY2VpdmVyXSlcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxuZnVuY3Rpb24gc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgLyogLCByZWNlaXZlciAqLykge1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgNCA/IHRhcmdldCA6IGFyZ3VtZW50c1szXTtcbiAgdmFyIG93bkRlc2MgPSBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICB2YXIgZXhpc3RpbmdEZXNjcmlwdG9yLCBwcm90bztcbiAgaWYgKCFvd25EZXNjKSB7XG4gICAgaWYgKGlzT2JqZWN0KHByb3RvID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHtcbiAgICAgIHJldHVybiBzZXQocHJvdG8sIHByb3BlcnR5S2V5LCBWLCByZWNlaXZlcik7XG4gICAgfVxuICAgIG93bkRlc2MgPSBjcmVhdGVEZXNjKDApO1xuICB9XG4gIGlmIChoYXMob3duRGVzYywgJ3ZhbHVlJykpIHtcbiAgICBpZiAob3duRGVzYy53cml0YWJsZSA9PT0gZmFsc2UgfHwgIWlzT2JqZWN0KHJlY2VpdmVyKSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChleGlzdGluZ0Rlc2NyaXB0b3IgPSBnT1BELmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5KSkge1xuICAgICAgaWYgKGV4aXN0aW5nRGVzY3JpcHRvci5nZXQgfHwgZXhpc3RpbmdEZXNjcmlwdG9yLnNldCB8fCBleGlzdGluZ0Rlc2NyaXB0b3Iud3JpdGFibGUgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG4gICAgICBleGlzdGluZ0Rlc2NyaXB0b3IudmFsdWUgPSBWO1xuICAgICAgZFAuZihyZWNlaXZlciwgcHJvcGVydHlLZXksIGV4aXN0aW5nRGVzY3JpcHRvcik7XG4gICAgfSBlbHNlIGRQLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBjcmVhdGVEZXNjKDAsIFYpKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gb3duRGVzYy5zZXQgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogKG93bkRlc2Muc2V0LmNhbGwocmVjZWl2ZXIsIFYpLCB0cnVlKTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBzZXQ6IHNldCB9KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyICRmbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG52YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG52YXIgQmFzZSA9ICRSZWdFeHA7XG52YXIgcHJvdG8gPSAkUmVnRXhwLnByb3RvdHlwZTtcbnZhciByZTEgPSAvYS9nO1xudmFyIHJlMiA9IC9hL2c7XG4vLyBcIm5ld1wiIGNyZWF0ZXMgYSBuZXcgb2JqZWN0LCBvbGQgd2Via2l0IGJ1Z2d5IGhlcmVcbnZhciBDT1JSRUNUX05FVyA9IG5ldyAkUmVnRXhwKHJlMSkgIT09IHJlMTtcblxuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgKCFDT1JSRUNUX05FVyB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmUyW3JlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpXSA9IGZhbHNlO1xuICAvLyBSZWdFeHAgY29uc3RydWN0b3IgY2FuIGFsdGVyIGZsYWdzIGFuZCBJc1JlZ0V4cCB3b3JrcyBjb3JyZWN0IHdpdGggQEBtYXRjaFxuICByZXR1cm4gJFJlZ0V4cChyZTEpICE9IHJlMSB8fCAkUmVnRXhwKHJlMikgPT0gcmUyIHx8ICRSZWdFeHAocmUxLCAnaScpICE9ICcvYS9pJztcbn0pKSkge1xuICAkUmVnRXhwID0gZnVuY3Rpb24gUmVnRXhwKHAsIGYpIHtcbiAgICB2YXIgdGlSRSA9IHRoaXMgaW5zdGFuY2VvZiAkUmVnRXhwO1xuICAgIHZhciBwaVJFID0gaXNSZWdFeHAocCk7XG4gICAgdmFyIGZpVSA9IGYgPT09IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gIXRpUkUgJiYgcGlSRSAmJiBwLmNvbnN0cnVjdG9yID09PSAkUmVnRXhwICYmIGZpVSA/IHBcbiAgICAgIDogaW5oZXJpdElmUmVxdWlyZWQoQ09SUkVDVF9ORVdcbiAgICAgICAgPyBuZXcgQmFzZShwaVJFICYmICFmaVUgPyBwLnNvdXJjZSA6IHAsIGYpXG4gICAgICAgIDogQmFzZSgocGlSRSA9IHAgaW5zdGFuY2VvZiAkUmVnRXhwKSA/IHAuc291cmNlIDogcCwgcGlSRSAmJiBmaVUgPyAkZmxhZ3MuY2FsbChwKSA6IGYpXG4gICAgICAsIHRpUkUgPyB0aGlzIDogcHJvdG8sICRSZWdFeHApO1xuICB9O1xuICB2YXIgcHJveHkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAga2V5IGluICRSZWdFeHAgfHwgZFAoJFJlZ0V4cCwga2V5LCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEJhc2Vba2V5XTsgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gKGl0KSB7IEJhc2Vba2V5XSA9IGl0OyB9XG4gICAgfSk7XG4gIH07XG4gIGZvciAodmFyIGtleXMgPSBnT1BOKEJhc2UpLCBpID0gMDsga2V5cy5sZW5ndGggPiBpOykgcHJveHkoa2V5c1tpKytdKTtcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkUmVnRXhwO1xuICAkUmVnRXhwLnByb3RvdHlwZSA9IHByb3RvO1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKGdsb2JhbCwgJ1JlZ0V4cCcsICRSZWdFeHApO1xufVxuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdSZWdFeHAnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMnKTtcbnJlcXVpcmUoJy4vX2V4cG9ydCcpKHtcbiAgdGFyZ2V0OiAnUmVnRXhwJyxcbiAgcHJvdG86IHRydWUsXG4gIGZvcmNlZDogcmVnZXhwRXhlYyAhPT0gLy4vLmV4ZWNcbn0sIHtcbiAgZXhlYzogcmVnZXhwRXhlY1xufSk7XG4iLCIvLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFncygpXG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAvLi9nLmZsYWdzICE9ICdnJykgcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZihSZWdFeHAucHJvdG90eXBlLCAnZmxhZ3MnLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiByZXF1aXJlKCcuL19mbGFncycpXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuL19hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xuXG4vLyBAQG1hdGNoIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ21hdGNoJywgMSwgZnVuY3Rpb24gKGRlZmluZWQsIE1BVENILCAkbWF0Y2gsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLm1hdGNoYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLm1hdGNoXG4gICAgZnVuY3Rpb24gbWF0Y2gocmVnZXhwKSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW01BVENIXTtcbiAgICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW01BVENIXShTdHJpbmcoTykpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBtYXRjaFxuICAgIGZ1bmN0aW9uIChyZWdleHApIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoJG1hdGNoLCByZWdleHAsIHRoaXMpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgaWYgKCFyeC5nbG9iYWwpIHJldHVybiByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIEEgPSBbXTtcbiAgICAgIHZhciBuID0gMDtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICB3aGlsZSAoKHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpKSAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgbWF0Y2hTdHIgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgQVtuXSA9IG1hdGNoU3RyO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgICBuKys7XG4gICAgICB9XG4gICAgICByZXR1cm4gbiA9PT0gMCA/IG51bGwgOiBBO1xuICAgIH1cbiAgXTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vX2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTID0gL1xcJChbJCZgJ118XFxkXFxkP3w8W14+XSo+KS9nO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEID0gL1xcJChbJCZgJ118XFxkXFxkPykvZztcblxudmFyIG1heWJlVG9TdHJpbmcgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xuXG4vLyBAQHJlcGxhY2UgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgncmVwbGFjZScsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBSRVBMQUNFLCAkcmVwbGFjZSwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUucmVwbGFjZWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlXG4gICAgZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgZm4gPSBzZWFyY2hWYWx1ZSA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZWFyY2hWYWx1ZVtSRVBMQUNFXTtcbiAgICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gZm4uY2FsbChzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKVxuICAgICAgICA6ICRyZXBsYWNlLmNhbGwoU3RyaW5nKE8pLCBzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEByZXBsYWNlXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKCRyZXBsYWNlLCByZWdleHAsIHRoaXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIHZhciBmdW5jdGlvbmFsUmVwbGFjZSA9IHR5cGVvZiByZXBsYWNlVmFsdWUgPT09ICdmdW5jdGlvbic7XG4gICAgICBpZiAoIWZ1bmN0aW9uYWxSZXBsYWNlKSByZXBsYWNlVmFsdWUgPSBTdHJpbmcocmVwbGFjZVZhbHVlKTtcbiAgICAgIHZhciBnbG9iYWwgPSByeC5nbG9iYWw7XG4gICAgICBpZiAoZ2xvYmFsKSB7XG4gICAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsKSBicmVhaztcbiAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XG4gICAgICAgIGlmICghZ2xvYmFsKSBicmVhaztcbiAgICAgICAgdmFyIG1hdGNoU3RyID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICB9XG4gICAgICB2YXIgYWNjdW11bGF0ZWRSZXN1bHQgPSAnJztcbiAgICAgIHZhciBuZXh0U291cmNlUG9zaXRpb24gPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdHNbaV07XG4gICAgICAgIHZhciBtYXRjaGVkID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IG1heChtaW4odG9JbnRlZ2VyKHJlc3VsdC5pbmRleCksIFMubGVuZ3RoKSwgMCk7XG4gICAgICAgIHZhciBjYXB0dXJlcyA9IFtdO1xuICAgICAgICAvLyBOT1RFOiBUaGlzIGlzIGVxdWl2YWxlbnQgdG9cbiAgICAgICAgLy8gICBjYXB0dXJlcyA9IHJlc3VsdC5zbGljZSgxKS5tYXAobWF5YmVUb1N0cmluZylcbiAgICAgICAgLy8gYnV0IGZvciBzb21lIHJlYXNvbiBgbmF0aXZlU2xpY2UuY2FsbChyZXN1bHQsIDEsIHJlc3VsdC5sZW5ndGgpYCAoY2FsbGVkIGluXG4gICAgICAgIC8vIHRoZSBzbGljZSBwb2x5ZmlsbCB3aGVuIHNsaWNpbmcgbmF0aXZlIGFycmF5cykgXCJkb2Vzbid0IHdvcmtcIiBpbiBzYWZhcmkgOSBhbmRcbiAgICAgICAgLy8gY2F1c2VzIGEgY3Jhc2ggKGh0dHBzOi8vcGFzdGViaW4uY29tL04yMVF6ZVFBKSB3aGVuIHRyeWluZyB0byBkZWJ1ZyBpdC5cbiAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCByZXN1bHQubGVuZ3RoOyBqKyspIGNhcHR1cmVzLnB1c2gobWF5YmVUb1N0cmluZyhyZXN1bHRbal0pKTtcbiAgICAgICAgdmFyIG5hbWVkQ2FwdHVyZXMgPSByZXN1bHQuZ3JvdXBzO1xuICAgICAgICBpZiAoZnVuY3Rpb25hbFJlcGxhY2UpIHtcbiAgICAgICAgICB2YXIgcmVwbGFjZXJBcmdzID0gW21hdGNoZWRdLmNvbmNhdChjYXB0dXJlcywgcG9zaXRpb24sIFMpO1xuICAgICAgICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHJlcGxhY2VyQXJncy5wdXNoKG5hbWVkQ2FwdHVyZXMpO1xuICAgICAgICAgIHZhciByZXBsYWNlbWVudCA9IFN0cmluZyhyZXBsYWNlVmFsdWUuYXBwbHkodW5kZWZpbmVkLCByZXBsYWNlckFyZ3MpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXBsYWNlbWVudCA9IGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBTLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvc2l0aW9uID49IG5leHRTb3VyY2VQb3NpdGlvbikge1xuICAgICAgICAgIGFjY3VtdWxhdGVkUmVzdWx0ICs9IFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uLCBwb3NpdGlvbikgKyByZXBsYWNlbWVudDtcbiAgICAgICAgICBuZXh0U291cmNlUG9zaXRpb24gPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjdW11bGF0ZWRSZXN1bHQgKyBTLnNsaWNlKG5leHRTb3VyY2VQb3NpdGlvbik7XG4gICAgfVxuICBdO1xuXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZ2V0c3Vic3RpdHV0aW9uXG4gIGZ1bmN0aW9uIGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBzdHIsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZW1lbnQpIHtcbiAgICB2YXIgdGFpbFBvcyA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgdmFyIG0gPSBjYXB0dXJlcy5sZW5ndGg7XG4gICAgdmFyIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRDtcbiAgICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBuYW1lZENhcHR1cmVzID0gdG9PYmplY3QobmFtZWRDYXB0dXJlcyk7XG4gICAgICBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFM7XG4gICAgfVxuICAgIHJldHVybiAkcmVwbGFjZS5jYWxsKHJlcGxhY2VtZW50LCBzeW1ib2xzLCBmdW5jdGlvbiAobWF0Y2gsIGNoKSB7XG4gICAgICB2YXIgY2FwdHVyZTtcbiAgICAgIHN3aXRjaCAoY2guY2hhckF0KDApKSB7XG4gICAgICAgIGNhc2UgJyQnOiByZXR1cm4gJyQnO1xuICAgICAgICBjYXNlICcmJzogcmV0dXJuIG1hdGNoZWQ7XG4gICAgICAgIGNhc2UgJ2AnOiByZXR1cm4gc3RyLnNsaWNlKDAsIHBvc2l0aW9uKTtcbiAgICAgICAgY2FzZSBcIidcIjogcmV0dXJuIHN0ci5zbGljZSh0YWlsUG9zKTtcbiAgICAgICAgY2FzZSAnPCc6XG4gICAgICAgICAgY2FwdHVyZSA9IG5hbWVkQ2FwdHVyZXNbY2guc2xpY2UoMSwgLTEpXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDogLy8gXFxkXFxkP1xuICAgICAgICAgIHZhciBuID0gK2NoO1xuICAgICAgICAgIGlmIChuID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgaWYgKG4gPiBtKSB7XG4gICAgICAgICAgICB2YXIgZiA9IGZsb29yKG4gLyAxMCk7XG4gICAgICAgICAgICBpZiAoZiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgICAgaWYgKGYgPD0gbSkgcmV0dXJuIGNhcHR1cmVzW2YgLSAxXSA9PT0gdW5kZWZpbmVkID8gY2guY2hhckF0KDEpIDogY2FwdHVyZXNbZiAtIDFdICsgY2guY2hhckF0KDEpO1xuICAgICAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXB0dXJlID0gY2FwdHVyZXNbbiAtIDFdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNhcHR1cmUgPT09IHVuZGVmaW5lZCA/ICcnIDogY2FwdHVyZTtcbiAgICB9KTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHNhbWVWYWx1ZSA9IHJlcXVpcmUoJy4vX3NhbWUtdmFsdWUnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcblxuLy8gQEBzZWFyY2ggbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc2VhcmNoJywgMSwgZnVuY3Rpb24gKGRlZmluZWQsIFNFQVJDSCwgJHNlYXJjaCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUuc2VhcmNoYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNlYXJjaFxuICAgIGZ1bmN0aW9uIHNlYXJjaChyZWdleHApIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbU0VBUkNIXTtcbiAgICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW1NFQVJDSF0oU3RyaW5nKE8pKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHNlYXJjaFxuICAgIGZ1bmN0aW9uIChyZWdleHApIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoJHNlYXJjaCwgcmVnZXhwLCB0aGlzKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIHZhciBwcmV2aW91c0xhc3RJbmRleCA9IHJ4Lmxhc3RJbmRleDtcbiAgICAgIGlmICghc2FtZVZhbHVlKHByZXZpb3VzTGFzdEluZGV4LCAwKSkgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciByZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgIGlmICghc2FtZVZhbHVlKHJ4Lmxhc3RJbmRleCwgcHJldmlvdXNMYXN0SW5kZXgpKSByeC5sYXN0SW5kZXggPSBwcmV2aW91c0xhc3RJbmRleDtcbiAgICAgIHJldHVybiByZXN1bHQgPT09IG51bGwgPyAtMSA6IHJlc3VsdC5pbmRleDtcbiAgICB9XG4gIF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9fYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNhbGxSZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJG1pbiA9IE1hdGgubWluO1xudmFyICRwdXNoID0gW10ucHVzaDtcbnZhciAkU1BMSVQgPSAnc3BsaXQnO1xudmFyIExFTkdUSCA9ICdsZW5ndGgnO1xudmFyIExBU1RfSU5ERVggPSAnbGFzdEluZGV4JztcbnZhciBNQVhfVUlOVDMyID0gMHhmZmZmZmZmZjtcblxuLy8gYmFiZWwtbWluaWZ5IHRyYW5zcGlsZXMgUmVnRXhwKCd4JywgJ3knKSAtPiAveC95IGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3JcbnZhciBTVVBQT1JUU19ZID0gIWZhaWxzKGZ1bmN0aW9uICgpIHsgUmVnRXhwKE1BWF9VSU5UMzIsICd5Jyk7IH0pO1xuXG4vLyBAQHNwbGl0IGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NwbGl0JywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFNQTElULCAkc3BsaXQsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICB2YXIgaW50ZXJuYWxTcGxpdDtcbiAgaWYgKFxuICAgICdhYmJjJ1skU1BMSVRdKC8oYikqLylbMV0gPT0gJ2MnIHx8XG4gICAgJ3Rlc3QnWyRTUExJVF0oLyg/OikvLCAtMSlbTEVOR1RIXSAhPSA0IHx8XG4gICAgJ2FiJ1skU1BMSVRdKC8oPzphYikqLylbTEVOR1RIXSAhPSAyIHx8XG4gICAgJy4nWyRTUExJVF0oLyguPykoLj8pLylbTEVOR1RIXSAhPSA0IHx8XG4gICAgJy4nWyRTUExJVF0oLygpKCkvKVtMRU5HVEhdID4gMSB8fFxuICAgICcnWyRTUExJVF0oLy4/LylbTEVOR1RIXVxuICApIHtcbiAgICAvLyBiYXNlZCBvbiBlczUtc2hpbSBpbXBsZW1lbnRhdGlvbiwgbmVlZCB0byByZXdvcmsgaXRcbiAgICBpbnRlcm5hbFNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBzdHJpbmcgPSBTdHJpbmcodGhpcyk7XG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDApIHJldHVybiBbXTtcbiAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XG4gICAgICBpZiAoIWlzUmVnRXhwKHNlcGFyYXRvcikpIHJldHVybiAkc3BsaXQuY2FsbChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgICAgdmFyIG91dHB1dCA9IFtdO1xuICAgICAgdmFyIGZsYWdzID0gKHNlcGFyYXRvci5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnN0aWNreSA/ICd5JyA6ICcnKTtcbiAgICAgIHZhciBsYXN0TGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBzcGxpdExpbWl0ID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9VSU5UMzIgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIC8vIE1ha2UgYGdsb2JhbGAgYW5kIGF2b2lkIGBsYXN0SW5kZXhgIGlzc3VlcyBieSB3b3JraW5nIHdpdGggYSBjb3B5XG4gICAgICB2YXIgc2VwYXJhdG9yQ29weSA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgZmxhZ3MgKyAnZycpO1xuICAgICAgdmFyIG1hdGNoLCBsYXN0SW5kZXgsIGxhc3RMZW5ndGg7XG4gICAgICB3aGlsZSAobWF0Y2ggPSByZWdleHBFeGVjLmNhbGwoc2VwYXJhdG9yQ29weSwgc3RyaW5nKSkge1xuICAgICAgICBsYXN0SW5kZXggPSBzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdO1xuICAgICAgICBpZiAobGFzdEluZGV4ID4gbGFzdExhc3RJbmRleCkge1xuICAgICAgICAgIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpO1xuICAgICAgICAgIGlmIChtYXRjaFtMRU5HVEhdID4gMSAmJiBtYXRjaC5pbmRleCA8IHN0cmluZ1tMRU5HVEhdKSAkcHVzaC5hcHBseShvdXRwdXQsIG1hdGNoLnNsaWNlKDEpKTtcbiAgICAgICAgICBsYXN0TGVuZ3RoID0gbWF0Y2hbMF1bTEVOR1RIXTtcbiAgICAgICAgICBsYXN0TGFzdEluZGV4ID0gbGFzdEluZGV4O1xuICAgICAgICAgIGlmIChvdXRwdXRbTEVOR1RIXSA+PSBzcGxpdExpbWl0KSBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSA9PT0gbWF0Y2guaW5kZXgpIHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0rKzsgLy8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgfVxuICAgICAgaWYgKGxhc3RMYXN0SW5kZXggPT09IHN0cmluZ1tMRU5HVEhdKSB7XG4gICAgICAgIGlmIChsYXN0TGVuZ3RoIHx8ICFzZXBhcmF0b3JDb3B5LnRlc3QoJycpKSBvdXRwdXQucHVzaCgnJyk7XG4gICAgICB9IGVsc2Ugb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgpKTtcbiAgICAgIHJldHVybiBvdXRwdXRbTEVOR1RIXSA+IHNwbGl0TGltaXQgPyBvdXRwdXQuc2xpY2UoMCwgc3BsaXRMaW1pdCkgOiBvdXRwdXQ7XG4gICAgfTtcbiAgLy8gQ2hha3JhLCBWOFxuICB9IGVsc2UgaWYgKCcwJ1skU1BMSVRdKHVuZGVmaW5lZCwgMClbTEVOR1RIXSkge1xuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgcmV0dXJuIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwID8gW10gOiAkc3BsaXQuY2FsbCh0aGlzLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGludGVybmFsU3BsaXQgPSAkc3BsaXQ7XG4gIH1cblxuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnNwbGl0YCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNwbGl0XG4gICAgZnVuY3Rpb24gc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIHNwbGl0dGVyID0gc2VwYXJhdG9yID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlcGFyYXRvcltTUExJVF07XG4gICAgICByZXR1cm4gc3BsaXR0ZXIgIT09IHVuZGVmaW5lZFxuICAgICAgICA/IHNwbGl0dGVyLmNhbGwoc2VwYXJhdG9yLCBPLCBsaW1pdClcbiAgICAgICAgOiBpbnRlcm5hbFNwbGl0LmNhbGwoU3RyaW5nKE8pLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc3BsaXRcbiAgICAvL1xuICAgIC8vIE5PVEU6IFRoaXMgY2Fubm90IGJlIHByb3Blcmx5IHBvbHlmaWxsZWQgaW4gZW5naW5lcyB0aGF0IGRvbid0IHN1cHBvcnRcbiAgICAvLyB0aGUgJ3knIGZsYWcuXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCwgbGltaXQpIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoaW50ZXJuYWxTcGxpdCwgcmVnZXhwLCB0aGlzLCBsaW1pdCwgaW50ZXJuYWxTcGxpdCAhPT0gJHNwbGl0KTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IocngsIFJlZ0V4cCk7XG5cbiAgICAgIHZhciB1bmljb2RlTWF0Y2hpbmcgPSByeC51bmljb2RlO1xuICAgICAgdmFyIGZsYWdzID0gKHJ4Lmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJ4Lm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAocngudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoU1VQUE9SVFNfWSA/ICd5JyA6ICdnJyk7XG5cbiAgICAgIC8vIF4oPyArIHJ4ICsgKSBpcyBuZWVkZWQsIGluIGNvbWJpbmF0aW9uIHdpdGggc29tZSBTIHNsaWNpbmcsIHRvXG4gICAgICAvLyBzaW11bGF0ZSB0aGUgJ3knIGZsYWcuXG4gICAgICB2YXIgc3BsaXR0ZXIgPSBuZXcgQyhTVVBQT1JUU19ZID8gcnggOiAnXig/OicgKyByeC5zb3VyY2UgKyAnKScsIGZsYWdzKTtcbiAgICAgIHZhciBsaW0gPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX1VJTlQzMiA6IGxpbWl0ID4+PiAwO1xuICAgICAgaWYgKGxpbSA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgaWYgKFMubGVuZ3RoID09PSAwKSByZXR1cm4gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFMpID09PSBudWxsID8gW1NdIDogW107XG4gICAgICB2YXIgcCA9IDA7XG4gICAgICB2YXIgcSA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgd2hpbGUgKHEgPCBTLmxlbmd0aCkge1xuICAgICAgICBzcGxpdHRlci5sYXN0SW5kZXggPSBTVVBQT1JUU19ZID8gcSA6IDA7XG4gICAgICAgIHZhciB6ID0gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFNVUFBPUlRTX1kgPyBTIDogUy5zbGljZShxKSk7XG4gICAgICAgIHZhciBlO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgeiA9PT0gbnVsbCB8fFxuICAgICAgICAgIChlID0gJG1pbih0b0xlbmd0aChzcGxpdHRlci5sYXN0SW5kZXggKyAoU1VQUE9SVFNfWSA/IDAgOiBxKSksIFMubGVuZ3RoKSkgPT09IHBcbiAgICAgICAgKSB7XG4gICAgICAgICAgcSA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCBxLCB1bmljb2RlTWF0Y2hpbmcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIEEucHVzaChTLnNsaWNlKHAsIHEpKTtcbiAgICAgICAgICBpZiAoQS5sZW5ndGggPT09IGxpbSkgcmV0dXJuIEE7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gei5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgIEEucHVzaCh6W2ldKTtcbiAgICAgICAgICAgIGlmIChBLmxlbmd0aCA9PT0gbGltKSByZXR1cm4gQTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcSA9IHAgPSBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBBLnB1c2goUy5zbGljZShwKSk7XG4gICAgICByZXR1cm4gQTtcbiAgICB9XG4gIF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5mbGFncycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSAvLi9bVE9fU1RSSU5HXTtcblxudmFyIGRlZmluZSA9IGZ1bmN0aW9uIChmbikge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKFJlZ0V4cC5wcm90b3R5cGUsIFRPX1NUUklORywgZm4sIHRydWUpO1xufTtcblxuLy8gMjEuMi41LjE0IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcoKVxuaWYgKHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkgeyByZXR1cm4gJHRvU3RyaW5nLmNhbGwoeyBzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJyB9KSAhPSAnL2EvYic7IH0pKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHJldHVybiAnLycuY29uY2F0KFIuc291cmNlLCAnLycsXG4gICAgICAnZmxhZ3MnIGluIFIgPyBSLmZsYWdzIDogIURFU0NSSVBUT1JTICYmIFIgaW5zdGFuY2VvZiBSZWdFeHAgPyAkZmxhZ3MuY2FsbChSKSA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuLy8gRkY0NC0gUmVnRXhwI3RvU3RyaW5nIGhhcyBhIHdyb25nIG5hbWVcbn0gZWxzZSBpZiAoJHRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJHRvU3RyaW5nLmNhbGwodGhpcyk7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgU0VUID0gJ1NldCc7XG5cbi8vIDIzLjIgU2V0IE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFNFVCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gU2V0KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMi4zLjEgU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodmFsaWRhdGUodGhpcywgU0VUKSwgdmFsdWUgPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMiBTdHJpbmcucHJvdG90eXBlLmFuY2hvcihuYW1lKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYW5jaG9yJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGFuY2hvcihuYW1lKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnbmFtZScsIG5hbWUpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4zIFN0cmluZy5wcm90b3R5cGUuYmlnKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JpZycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBiaWcoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JpZycsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjQgU3RyaW5nLnByb3RvdHlwZS5ibGluaygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdibGluaycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBibGluaygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmxpbmsnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy41IFN0cmluZy5wcm90b3R5cGUuYm9sZCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdib2xkJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJvbGQoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2InLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKGZhbHNlKTtcbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMyBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0KHBvcylcbiAgY29kZVBvaW50QXQ6IGZ1bmN0aW9uIGNvZGVQb2ludEF0KHBvcykge1xuICAgIHJldHVybiAkYXQodGhpcywgcG9zKTtcbiAgfVxufSk7XG4iLCIvLyAyMS4xLjMuNiBTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoKHNlYXJjaFN0cmluZyBbLCBlbmRQb3NpdGlvbl0pXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgRU5EU19XSVRIID0gJ2VuZHNXaXRoJztcbnZhciAkZW5kc1dpdGggPSAnJ1tFTkRTX1dJVEhdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKEVORFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIGVuZHNXaXRoOiBmdW5jdGlvbiBlbmRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBlbmRQb3NpdGlvbiA9IEBsZW5ndGggKi8pIHtcbiAgICB2YXIgdGhhdCA9IGNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBFTkRTX1dJVEgpO1xuICAgIHZhciBlbmRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0aGF0Lmxlbmd0aCk7XG4gICAgdmFyIGVuZCA9IGVuZFBvc2l0aW9uID09PSB1bmRlZmluZWQgPyBsZW4gOiBNYXRoLm1pbih0b0xlbmd0aChlbmRQb3NpdGlvbiksIGxlbik7XG4gICAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiAkZW5kc1dpdGhcbiAgICAgID8gJGVuZHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBlbmQpXG4gICAgICA6IHRoYXQuc2xpY2UoZW5kIC0gc2VhcmNoLmxlbmd0aCwgZW5kKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjYgU3RyaW5nLnByb3RvdHlwZS5maXhlZCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmaXhlZCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmaXhlZCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAndHQnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy43IFN0cmluZy5wcm90b3R5cGUuZm9udGNvbG9yKGNvbG9yKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udGNvbG9yJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRjb2xvcihjb2xvcikge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ2NvbG9yJywgY29sb3IpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy44IFN0cmluZy5wcm90b3R5cGUuZm9udHNpemUoc2l6ZSlcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZvbnRzaXplJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRzaXplKHNpemUpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdzaXplJywgc2l6ZSk7XG4gIH07XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xudmFyICRmcm9tQ29kZVBvaW50ID0gU3RyaW5nLmZyb21Db2RlUG9pbnQ7XG5cbi8vIGxlbmd0aCBzaG91bGQgYmUgMSwgb2xkIEZGIHByb2JsZW1cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCEhJGZyb21Db2RlUG9pbnQgJiYgJGZyb21Db2RlUG9pbnQubGVuZ3RoICE9IDEpLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuMiBTdHJpbmcuZnJvbUNvZGVQb2ludCguLi5jb2RlUG9pbnRzKVxuICBmcm9tQ29kZVBvaW50OiBmdW5jdGlvbiBmcm9tQ29kZVBvaW50KHgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciByZXMgPSBbXTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBjb2RlO1xuICAgIHdoaWxlIChhTGVuID4gaSkge1xuICAgICAgY29kZSA9ICthcmd1bWVudHNbaSsrXTtcbiAgICAgIGlmICh0b0Fic29sdXRlSW5kZXgoY29kZSwgMHgxMGZmZmYpICE9PSBjb2RlKSB0aHJvdyBSYW5nZUVycm9yKGNvZGUgKyAnIGlzIG5vdCBhIHZhbGlkIGNvZGUgcG9pbnQnKTtcbiAgICAgIHJlcy5wdXNoKGNvZGUgPCAweDEwMDAwXG4gICAgICAgID8gZnJvbUNoYXJDb2RlKGNvZGUpXG4gICAgICAgIDogZnJvbUNoYXJDb2RlKCgoY29kZSAtPSAweDEwMDAwKSA+PiAxMCkgKyAweGQ4MDAsIGNvZGUgJSAweDQwMCArIDB4ZGMwMClcbiAgICAgICk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTtcbiIsIi8vIDIxLjEuMy43IFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXMoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbiA9IDApXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIElOQ0xVREVTID0gJ2luY2x1ZGVzJztcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShJTkNMVURFUyksICdTdHJpbmcnLCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICByZXR1cm4gISF+Y29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIElOQ0xVREVTKVxuICAgICAgLmluZGV4T2Yoc2VhcmNoU3RyaW5nLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuOSBTdHJpbmcucHJvdG90eXBlLml0YWxpY3MoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnaXRhbGljcycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpdGFsaWNzKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdpJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4vLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gU3RyaW5nKGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4vLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGluZGV4ID0gdGhpcy5faTtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gTy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHsgdmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZSB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMCBTdHJpbmcucHJvdG90eXBlLmxpbmsodXJsKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnbGluaycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBsaW5rKHVybCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ2hyZWYnLCB1cmwpO1xuICB9O1xufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjQgU3RyaW5nLnJhdyhjYWxsU2l0ZSwgLi4uc3Vic3RpdHV0aW9ucylcbiAgcmF3OiBmdW5jdGlvbiByYXcoY2FsbFNpdGUpIHtcbiAgICB2YXIgdHBsID0gdG9JT2JqZWN0KGNhbGxTaXRlLnJhdyk7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRwbC5sZW5ndGgpO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzID0gW107XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChsZW4gPiBpKSB7XG4gICAgICByZXMucHVzaChTdHJpbmcodHBsW2krK10pKTtcbiAgICAgIGlmIChpIDwgYUxlbikgcmVzLnB1c2goU3RyaW5nKGFyZ3VtZW50c1tpXSkpO1xuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjEzIFN0cmluZy5wcm90b3R5cGUucmVwZWF0KGNvdW50KVxuICByZXBlYXQ6IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMSBTdHJpbmcucHJvdG90eXBlLnNtYWxsKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3NtYWxsJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNtYWxsKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzbWFsbCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIi8vIDIxLjEuMy4xOCBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIFssIHBvc2l0aW9uIF0pXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgU1RBUlRTX1dJVEggPSAnc3RhcnRzV2l0aCc7XG52YXIgJHN0YXJ0c1dpdGggPSAnJ1tTVEFSVFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoU1RBUlRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBzdGFydHNXaXRoOiBmdW5jdGlvbiBzdGFydHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIFNUQVJUU19XSVRIKTtcbiAgICB2YXIgaW5kZXggPSB0b0xlbmd0aChNYXRoLm1pbihhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdGhhdC5sZW5ndGgpKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRzdGFydHNXaXRoXG4gICAgICA/ICRzdGFydHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBpbmRleClcbiAgICAgIDogdGhhdC5zbGljZShpbmRleCwgaW5kZXggKyBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEyIFN0cmluZy5wcm90b3R5cGUuc3RyaWtlKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N0cmlrZScsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdHJpa2UoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N0cmlrZScsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEzIFN0cmluZy5wcm90b3R5cGUuc3ViKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N1YicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdWIoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1YicsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjE0IFN0cmluZy5wcm90b3R5cGUuc3VwKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N1cCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdXAoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1cCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIxLjEuMy4yNSBTdHJpbmcucHJvdG90eXBlLnRyaW0oKVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbScsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbSgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBNRVRBID0gcmVxdWlyZSgnLi9fbWV0YScpLktFWTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgd2tzRGVmaW5lID0gcmVxdWlyZSgnLi9fd2tzLWRlZmluZScpO1xudmFyIGVudW1LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1rZXlzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBfY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdPUE5FeHQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKTtcbnZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgJEdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BEID0gJEdPUEQuZjtcbnZhciBkUCA9ICREUC5mO1xudmFyIGdPUE4gPSBnT1BORXh0LmY7XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJEpTT04gPSBnbG9iYWwuSlNPTjtcbnZhciBfc3RyaW5naWZ5ID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIEhJRERFTiA9IHdrcygnX2hpZGRlbicpO1xudmFyIFRPX1BSSU1JVElWRSA9IHdrcygndG9QcmltaXRpdmUnKTtcbnZhciBpc0VudW0gPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9QU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgVVNFX05BVElWRSA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbicgJiYgISEkR09QUy5mO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIHNldHRlciA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2MgPSBERVNDUklQVE9SUyAmJiAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkUCh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoaXQsIGtleSwgRCkge1xuICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTtcbiAgaWYgKHByb3RvRGVzYykgZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gIGRQKGl0LCBrZXksIEQpO1xuICBpZiAocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bykgZFAoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcbn0gOiBkUDtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHN5bS5fayA9IHRhZztcbiAgcmV0dXJuIHN5bTtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKSB7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8pICRkZWZpbmVQcm9wZXJ0eShPUFN5bWJvbHMsIGtleSwgRCk7XG4gIGFuT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgYW5PYmplY3QoRCk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghRC5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhpdCwgSElEREVOKSkgZFAoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pIGl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9IF9jcmVhdGUoRCwgeyBlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xuICB9IHJldHVybiBkUChpdCwga2V5LCBEKTtcbn07XG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKSB7XG4gIGFuT2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbCA9IGtleXMubGVuZ3RoO1xuICB2YXIga2V5O1xuICB3aGlsZSAobCA+IGkpICRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pO1xuICByZXR1cm4gaXQ7XG59O1xudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApIHtcbiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApO1xufTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpIHtcbiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcbn07XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gIGl0ID0gdG9JT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7XG4gIGlmIChEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIEQuZW51bWVyYWJsZSA9IHRydWU7XG4gIHJldHVybiBEO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgdmFyIG5hbWVzID0gZ09QTih0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gIHZhciBJU19PUCA9IGl0ID09PSBPYmplY3RQcm90bztcbiAgdmFyIG5hbWVzID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIChJU19PUCA/IGhhcyhPYmplY3RQcm90bywga2V5KSA6IHRydWUpKSByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcbmlmICghVVNFX05BVElWRSkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7XG4gICAgdmFyIHRhZyA9IHVpZChhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyICRzZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90bykgJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIHNldHRlcikgc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiAkc2V0IH0pO1xuICAgIHJldHVybiB3cmFwKHRhZyk7XG4gIH07XG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2s7XG4gIH0pO1xuXG4gICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkRFAuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICAkR09QUy5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICBpZiAoREVTQ1JJUFRPUlMgJiYgIXJlcXVpcmUoJy4vX2xpYnJhcnknKSkge1xuICAgIHJlZGVmaW5lKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpO1xuICB9XG5cbiAgd2tzRXh0LmYgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiB3cmFwKHdrcyhuYW1lKSk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgU3ltYm9sOiAkU3ltYm9sIH0pO1xuXG5mb3IgKHZhciBlczZTeW1ib2xzID0gKFxuICAvLyAxOS40LjIuMiwgMTkuNC4yLjMsIDE5LjQuMi40LCAxOS40LjIuNiwgMTkuNC4yLjgsIDE5LjQuMi45LCAxOS40LjIuMTAsIDE5LjQuMi4xMSwgMTkuNC4yLjEyLCAxOS40LjIuMTMsIDE5LjQuMi4xNFxuICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMnXG4pLnNwbGl0KCcsJyksIGogPSAwOyBlczZTeW1ib2xzLmxlbmd0aCA+IGo7KXdrcyhlczZTeW1ib2xzW2orK10pO1xuXG5mb3IgKHZhciB3ZWxsS25vd25TeW1ib2xzID0gJGtleXMod2tzLnN0b3JlKSwgayA9IDA7IHdlbGxLbm93blN5bWJvbHMubGVuZ3RoID4gazspIHdrc0RlZmluZSh3ZWxsS25vd25TeW1ib2xzW2srK10pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnU3ltYm9sJywge1xuICAvLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSlcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gaGFzKFN5bWJvbFJlZ2lzdHJ5LCBrZXkgKz0gJycpXG4gICAgICA/IFN5bWJvbFJlZ2lzdHJ5W2tleV1cbiAgICAgIDogU3ltYm9sUmVnaXN0cnlba2V5XSA9ICRTeW1ib2woa2V5KTtcbiAgfSxcbiAgLy8gMTkuNC4yLjUgU3ltYm9sLmtleUZvcihzeW0pXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKHN5bSkge1xuICAgIGlmICghaXNTeW1ib2woc3ltKSkgdGhyb3cgVHlwZUVycm9yKHN5bSArICcgaXMgbm90IGEgc3ltYm9sIScpO1xuICAgIGZvciAodmFyIGtleSBpbiBTeW1ib2xSZWdpc3RyeSkgaWYgKFN5bWJvbFJlZ2lzdHJ5W2tleV0gPT09IHN5bSkgcmV0dXJuIGtleTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSBmYWxzZTsgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdPYmplY3QnLCB7XG4gIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyBDaHJvbWUgMzggYW5kIDM5IGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBmYWlscyBvbiBwcmltaXRpdmVzXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNDQzXG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9ICRmYWlscyhmdW5jdGlvbiAoKSB7ICRHT1BTLmYoMSk7IH0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIEZBSUxTX09OX1BSSU1JVElWRVMsICdPYmplY3QnLCB7XG4gIGdldE93blByb3BlcnR5U3ltYm9sczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gICAgcmV0dXJuICRHT1BTLmYodG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG5cbi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxuJEpTT04gJiYgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoIVVTRV9OQVRJVkUgfHwgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFMgPSAkU3ltYm9sKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoeyBhOiBTIH0pICE9ICd7fScgfHwgX3N0cmluZ2lmeShPYmplY3QoUykpICE9ICd7fSc7XG59KSksICdKU09OJywge1xuICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCkge1xuICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICB2YXIgaSA9IDE7XG4gICAgdmFyIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgICRyZXBsYWNlciA9IHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiAkcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpO1xuICB9XG59KTtcblxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgcmVxdWlyZSgnLi9faGlkZScpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xudmFyIGJ1ZmZlciA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgQXJyYXlCdWZmZXIgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5BcnJheUJ1ZmZlcjtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgJEFycmF5QnVmZmVyID0gYnVmZmVyLkFycmF5QnVmZmVyO1xudmFyICREYXRhVmlldyA9IGJ1ZmZlci5EYXRhVmlldztcbnZhciAkaXNWaWV3ID0gJHR5cGVkLkFCViAmJiBBcnJheUJ1ZmZlci5pc1ZpZXc7XG52YXIgJHNsaWNlID0gJEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZTtcbnZhciBWSUVXID0gJHR5cGVkLlZJRVc7XG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQXJyYXlCdWZmZXIgIT09ICRBcnJheUJ1ZmZlciksIHsgQXJyYXlCdWZmZXI6ICRBcnJheUJ1ZmZlciB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhJHR5cGVkLkNPTlNUUiwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuMy4xIEFycmF5QnVmZmVyLmlzVmlldyhhcmcpXG4gIGlzVmlldzogZnVuY3Rpb24gaXNWaWV3KGl0KSB7XG4gICAgcmV0dXJuICRpc1ZpZXcgJiYgJGlzVmlldyhpdCkgfHwgaXNPYmplY3QoaXQpICYmIFZJRVcgaW4gaXQ7XG4gIH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuVSArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIW5ldyAkQXJyYXlCdWZmZXIoMikuc2xpY2UoMSwgdW5kZWZpbmVkKS5ieXRlTGVuZ3RoO1xufSksIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjQuMyBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2Uoc3RhcnQsIGVuZClcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICBpZiAoJHNsaWNlICE9PSB1bmRlZmluZWQgJiYgZW5kID09PSB1bmRlZmluZWQpIHJldHVybiAkc2xpY2UuY2FsbChhbk9iamVjdCh0aGlzKSwgc3RhcnQpOyAvLyBGRiBmaXhcbiAgICB2YXIgbGVuID0gYW5PYmplY3QodGhpcykuYnl0ZUxlbmd0aDtcbiAgICB2YXIgZmlyc3QgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gICAgdmFyIGZpbiA9IHRvQWJzb2x1dGVJbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZCwgbGVuKTtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJEFycmF5QnVmZmVyKSkodG9MZW5ndGgoZmluIC0gZmlyc3QpKTtcbiAgICB2YXIgdmlld1MgPSBuZXcgJERhdGFWaWV3KHRoaXMpO1xuICAgIHZhciB2aWV3VCA9IG5ldyAkRGF0YVZpZXcocmVzdWx0KTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHdoaWxlIChmaXJzdCA8IGZpbikge1xuICAgICAgdmlld1Quc2V0VWludDgoaW5kZXgrKywgdmlld1MuZ2V0VWludDgoZmlyc3QrKykpO1xuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoQVJSQVlfQlVGRkVSKTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL190eXBlZCcpLkFCViwge1xuICBEYXRhVmlldzogcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJykuRGF0YVZpZXdcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnRmxvYXQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBGbG9hdDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnRmxvYXQ2NCcsIDgsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBGbG9hdDY0QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50MTYnLCAyLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQxNicsIDIsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OENsYW1wZWRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSwgdHJ1ZSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgZWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJyk7XG52YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgTkFUSVZFX1dFQUtfTUFQID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIElTX0lFMTEgPSAhZ2xvYmFsLkFjdGl2ZVhPYmplY3QgJiYgJ0FjdGl2ZVhPYmplY3QnIGluIGdsb2JhbDtcbnZhciBXRUFLX01BUCA9ICdXZWFrTWFwJztcbnZhciBnZXRXZWFrID0gbWV0YS5nZXRXZWFrO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IHdlYWsudWZzdG9yZTtcbnZhciBJbnRlcm5hbE1hcDtcblxudmFyIHdyYXBwZXIgPSBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrTWFwKCkge1xuICAgIHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICB9O1xufTtcblxudmFyIG1ldGhvZHMgPSB7XG4gIC8vIDIzLjMuMy4zIFdlYWtNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIGlmIChpc09iamVjdChrZXkpKSB7XG4gICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBXRUFLX01BUCkpLmdldChrZXkpO1xuICAgICAgcmV0dXJuIGRhdGEgPyBkYXRhW3RoaXMuX2ldIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgfSxcbiAgLy8gMjMuMy4zLjUgV2Vha01hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gd2Vhay5kZWYodmFsaWRhdGUodGhpcywgV0VBS19NQVApLCBrZXksIHZhbHVlKTtcbiAgfVxufTtcblxuLy8gMjMuMyBXZWFrTWFwIE9iamVjdHNcbnZhciAkV2Vha01hcCA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFdFQUtfTUFQLCB3cmFwcGVyLCBtZXRob2RzLCB3ZWFrLCB0cnVlLCB0cnVlKTtcblxuLy8gSUUxMSBXZWFrTWFwIGZyb3plbiBrZXlzIGZpeFxuaWYgKE5BVElWRV9XRUFLX01BUCAmJiBJU19JRTExKSB7XG4gIEludGVybmFsTWFwID0gd2Vhay5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBXRUFLX01BUCk7XG4gIGFzc2lnbihJbnRlcm5hbE1hcC5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICBtZXRhLk5FRUQgPSB0cnVlO1xuICBlYWNoKFsnZGVsZXRlJywgJ2hhcycsICdnZXQnLCAnc2V0J10sIGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcHJvdG8gPSAkV2Vha01hcC5wcm90b3R5cGU7XG4gICAgdmFyIG1ldGhvZCA9IHByb3RvW2tleV07XG4gICAgcmVkZWZpbmUocHJvdG8sIGtleSwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIC8vIHN0b3JlIGZyb3plbiBvYmplY3RzIG9uIGludGVybmFsIHdlYWttYXAgc2hpbVxuICAgICAgaWYgKGlzT2JqZWN0KGEpICYmICFpc0V4dGVuc2libGUoYSkpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9mKSB0aGlzLl9mID0gbmV3IEludGVybmFsTWFwKCk7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9mW2tleV0oYSwgYik7XG4gICAgICAgIHJldHVybiBrZXkgPT0gJ3NldCcgPyB0aGlzIDogcmVzdWx0O1xuICAgICAgLy8gc3RvcmUgYWxsIHRoZSByZXN0IG9uIG5hdGl2ZSB3ZWFrbWFwXG4gICAgICB9IHJldHVybiBtZXRob2QuY2FsbCh0aGlzLCBhLCBiKTtcbiAgICB9KTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFdFQUtfU0VUID0gJ1dlYWtTZXQnO1xuXG4vLyAyMy40IFdlYWtTZXQgT2JqZWN0c1xucmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFdFQUtfU0VULCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrU2V0KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuNC4zLjEgV2Vha1NldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgIHJldHVybiB3ZWFrLmRlZih2YWxpZGF0ZSh0aGlzLCBXRUFLX1NFVCksIHZhbHVlLCB0cnVlKTtcbiAgfVxufSwgd2VhaywgZmFsc2UsIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtQXJyYXkucHJvdG90eXBlLmZsYXRNYXBcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmxhdHRlbkludG9BcnJheSA9IHJlcXVpcmUoJy4vX2ZsYXR0ZW4taW50by1hcnJheScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgZmxhdE1hcDogZnVuY3Rpb24gZmxhdE1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHNvdXJjZUxlbiwgQTtcbiAgICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7XG4gICAgc291cmNlTGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG4gICAgZmxhdHRlbkludG9BcnJheShBLCBPLCBPLCBzb3VyY2VMZW4sIDAsIDEsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnZmxhdE1hcCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtQXJyYXkucHJvdG90eXBlLmZsYXR0ZW5cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmxhdHRlbkludG9BcnJheSA9IHJlcXVpcmUoJy4vX2ZsYXR0ZW4taW50by1hcnJheScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgZmxhdHRlbjogZnVuY3Rpb24gZmxhdHRlbigvKiBkZXB0aEFyZyA9IDEgKi8pIHtcbiAgICB2YXIgZGVwdGhBcmcgPSBhcmd1bWVudHNbMF07XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgc291cmNlTGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuICAgIGZsYXR0ZW5JbnRvQXJyYXkoQSwgTywgTywgc291cmNlTGVuLCAwLCBkZXB0aEFyZyA9PT0gdW5kZWZpbmVkID8gMSA6IHRvSW50ZWdlcihkZXB0aEFyZykpO1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZsYXR0ZW4nKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L0FycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW5jbHVkZXMgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoZWwgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuICRpbmNsdWRlcyh0aGlzLCBlbCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2luY2x1ZGVzJyk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vcndhbGRyb24vdGMzOS1ub3Rlcy9ibG9iL21hc3Rlci9lczYvMjAxNC0wOS9zZXB0LTI1Lm1kIzUxMC1nbG9iYWxhc2FwLWZvci1lbnF1ZXVpbmctYS1taWNyb3Rhc2tcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKTtcbnZhciBwcm9jZXNzID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucHJvY2VzcztcbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7XG4gIGFzYXA6IGZ1bmN0aW9uIGFzYXAoZm4pIHtcbiAgICB2YXIgZG9tYWluID0gaXNOb2RlICYmIHByb2Nlc3MuZG9tYWluO1xuICAgIG1pY3JvdGFzayhkb21haW4gPyBkb21haW4uYmluZChmbikgOiBmbik7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9wcm9wb3NhbC1pcy1lcnJvclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdFcnJvcicsIHtcbiAgaXNFcnJvcjogZnVuY3Rpb24gaXNFcnJvcihpdCkge1xuICAgIHJldHVybiBjb2YoaXQpID09PSAnRXJyb3InO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWdsb2JhbFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LkcsIHsgZ2xvYmFsOiByZXF1aXJlKCcuL19nbG9iYWwnKSB9KTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLW1hcC5mcm9tXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ01hcCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtbWFwLm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdNYXAnKTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnTWFwJywgeyB0b0pTT046IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tdG8tanNvbicpKCdNYXAnKSB9KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2xhbXA6IGZ1bmN0aW9uIGNsYW1wKHgsIGxvd2VyLCB1cHBlcikge1xuICAgIHJldHVybiBNYXRoLm1pbih1cHBlciwgTWF0aC5tYXgobG93ZXIsIHgpKTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IERFR19QRVJfUkFEOiBNYXRoLlBJIC8gMTgwIH0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBSQURfUEVSX0RFRyA9IDE4MCAvIE1hdGguUEk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgZGVncmVlczogZnVuY3Rpb24gZGVncmVlcyhyYWRpYW5zKSB7XG4gICAgcmV0dXJuIHJhZGlhbnMgKiBSQURfUEVSX0RFRztcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNjYWxlID0gcmVxdWlyZSgnLi9fbWF0aC1zY2FsZScpO1xudmFyIGZyb3VuZCA9IHJlcXVpcmUoJy4vX21hdGgtZnJvdW5kJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgZnNjYWxlOiBmdW5jdGlvbiBmc2NhbGUoeCwgaW5Mb3csIGluSGlnaCwgb3V0TG93LCBvdXRIaWdoKSB7XG4gICAgcmV0dXJuIGZyb3VuZChzY2FsZSh4LCBpbkxvdywgaW5IaWdoLCBvdXRMb3csIG91dEhpZ2gpKTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpYWRkaDogZnVuY3Rpb24gaWFkZGgoeDAsIHgxLCB5MCwgeTEpIHtcbiAgICB2YXIgJHgwID0geDAgPj4+IDA7XG4gICAgdmFyICR4MSA9IHgxID4+PiAwO1xuICAgIHZhciAkeTAgPSB5MCA+Pj4gMDtcbiAgICByZXR1cm4gJHgxICsgKHkxID4+PiAwKSArICgoJHgwICYgJHkwIHwgKCR4MCB8ICR5MCkgJiB+KCR4MCArICR5MCA+Pj4gMCkpID4+PiAzMSkgfCAwO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGltdWxoOiBmdW5jdGlvbiBpbXVsaCh1LCB2KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgJHUgPSArdTtcbiAgICB2YXIgJHYgPSArdjtcbiAgICB2YXIgdTAgPSAkdSAmIFVJTlQxNjtcbiAgICB2YXIgdjAgPSAkdiAmIFVJTlQxNjtcbiAgICB2YXIgdTEgPSAkdSA+PiAxNjtcbiAgICB2YXIgdjEgPSAkdiA+PiAxNjtcbiAgICB2YXIgdCA9ICh1MSAqIHYwID4+PiAwKSArICh1MCAqIHYwID4+PiAxNik7XG4gICAgcmV0dXJuIHUxICogdjEgKyAodCA+PiAxNikgKyAoKHUwICogdjEgPj4+IDApICsgKHQgJiBVSU5UMTYpID4+IDE2KTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpc3ViaDogZnVuY3Rpb24gaXN1YmgoeDAsIHgxLCB5MCwgeTEpIHtcbiAgICB2YXIgJHgwID0geDAgPj4+IDA7XG4gICAgdmFyICR4MSA9IHgxID4+PiAwO1xuICAgIHZhciAkeTAgPSB5MCA+Pj4gMDtcbiAgICByZXR1cm4gJHgxIC0gKHkxID4+PiAwKSAtICgofiR4MCAmICR5MCB8IH4oJHgwIF4gJHkwKSAmICR4MCAtICR5MCA+Pj4gMCkgPj4+IDMxKSB8IDA7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBSQURfUEVSX0RFRzogMTgwIC8gTWF0aC5QSSB9KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgREVHX1BFUl9SQUQgPSBNYXRoLlBJIC8gMTgwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHJhZGlhbnM6IGZ1bmN0aW9uIHJhZGlhbnMoZGVncmVlcykge1xuICAgIHJldHVybiBkZWdyZWVzICogREVHX1BFUl9SQUQ7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzY2FsZTogcmVxdWlyZSgnLi9fbWF0aC1zY2FsZScpIH0pO1xuIiwiLy8gaHR0cDovL2pmYmFzdGllbi5naXRodWIuaW8vcGFwZXJzL01hdGguc2lnbmJpdC5odG1sXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IHNpZ25iaXQ6IGZ1bmN0aW9uIHNpZ25iaXQoeCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiAoeCA9ICt4KSAhPSB4ID8geCA6IHggPT0gMCA/IDEgLyB4ID09IEluZmluaXR5IDogeCA+IDA7XG59IH0pO1xuIiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdW11bGg6IGZ1bmN0aW9uIHVtdWxoKHUsIHYpIHtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmO1xuICAgIHZhciAkdSA9ICt1O1xuICAgIHZhciAkdiA9ICt2O1xuICAgIHZhciB1MCA9ICR1ICYgVUlOVDE2O1xuICAgIHZhciB2MCA9ICR2ICYgVUlOVDE2O1xuICAgIHZhciB1MSA9ICR1ID4+PiAxNjtcbiAgICB2YXIgdjEgPSAkdiA+Pj4gMTY7XG4gICAgdmFyIHQgPSAodTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpO1xuICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4+IDE2KSArICgodTAgKiB2MSA+Pj4gMCkgKyAodCAmIFVJTlQxNikgPj4+IDE2KTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xuXG4vLyBCLjIuMi4yIE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVHZXR0ZXJfXyhQLCBnZXR0ZXIpXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19kZWZpbmVHZXR0ZXJfXzogZnVuY3Rpb24gX19kZWZpbmVHZXR0ZXJfXyhQLCBnZXR0ZXIpIHtcbiAgICAkZGVmaW5lUHJvcGVydHkuZih0b09iamVjdCh0aGlzKSwgUCwgeyBnZXQ6IGFGdW5jdGlvbihnZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcblxuLy8gQi4yLjIuMyBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lU2V0dGVyX18oUCwgc2V0dGVyKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fZGVmaW5lU2V0dGVyX186IGZ1bmN0aW9uIF9fZGVmaW5lU2V0dGVyX18oUCwgc2V0dGVyKSB7XG4gICAgJGRlZmluZVByb3BlcnR5LmYodG9PYmplY3QodGhpcyksIFAsIHsgc2V0OiBhRnVuY3Rpb24oc2V0dGVyKSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZW50cmllcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcyhpdCkge1xuICAgIHJldHVybiAkZW50cmllcyhpdCk7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4vX293bi1rZXlzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iamVjdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gICAgdmFyIGdldERlc2MgPSBnT1BELmY7XG4gICAgdmFyIGtleXMgPSBvd25LZXlzKE8pO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleSwgZGVzYztcbiAgICB3aGlsZSAoa2V5cy5sZW5ndGggPiBpKSB7XG4gICAgICBkZXNjID0gZ2V0RGVzYyhPLCBrZXkgPSBrZXlzW2krK10pO1xuICAgICAgaWYgKGRlc2MgIT09IHVuZGVmaW5lZCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBrZXksIGRlc2MpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcblxuLy8gQi4yLjIuNCBPYmplY3QucHJvdG90eXBlLl9fbG9va3VwR2V0dGVyX18oUClcbnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0Jywge1xuICBfX2xvb2t1cEdldHRlcl9fOiBmdW5jdGlvbiBfX2xvb2t1cEdldHRlcl9fKFApIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBLID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gICAgdmFyIEQ7XG4gICAgZG8ge1xuICAgICAgaWYgKEQgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgSykpIHJldHVybiBELmdldDtcbiAgICB9IHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcblxuLy8gQi4yLjIuNSBPYmplY3QucHJvdG90eXBlLl9fbG9va3VwU2V0dGVyX18oUClcbnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0Jywge1xuICBfX2xvb2t1cFNldHRlcl9fOiBmdW5jdGlvbiBfX2xvb2t1cFNldHRlcl9fKFApIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBLID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gICAgdmFyIEQ7XG4gICAgZG8ge1xuICAgICAgaWYgKEQgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgSykpIHJldHVybiBELnNldDtcbiAgICB9IHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdmFsdWVzID0gcmVxdWlyZSgnLi9fb2JqZWN0LXRvLWFycmF5JykoZmFsc2UpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoaXQpIHtcbiAgICByZXR1cm4gJHZhbHVlcyhpdCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3plbnBhcnNpbmcvZXMtb2JzZXJ2YWJsZVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4vX21pY3JvdGFzaycpKCk7XG52YXIgT0JTRVJWQUJMRSA9IHJlcXVpcmUoJy4vX3drcycpKCdvYnNlcnZhYmxlJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgUkVUVVJOID0gZm9yT2YuUkVUVVJOO1xuXG52YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGZuKSB7XG4gIHJldHVybiBmbiA9PSBudWxsID8gdW5kZWZpbmVkIDogYUZ1bmN0aW9uKGZuKTtcbn07XG5cbnZhciBjbGVhbnVwU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICB2YXIgY2xlYW51cCA9IHN1YnNjcmlwdGlvbi5fYztcbiAgaWYgKGNsZWFudXApIHtcbiAgICBzdWJzY3JpcHRpb24uX2MgPSB1bmRlZmluZWQ7XG4gICAgY2xlYW51cCgpO1xuICB9XG59O1xuXG52YXIgc3Vic2NyaXB0aW9uQ2xvc2VkID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICByZXR1cm4gc3Vic2NyaXB0aW9uLl9vID09PSB1bmRlZmluZWQ7XG59O1xuXG52YXIgY2xvc2VTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gIGlmICghc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHtcbiAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICB9XG59O1xuXG52YXIgU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKG9ic2VydmVyLCBzdWJzY3JpYmVyKSB7XG4gIGFuT2JqZWN0KG9ic2VydmVyKTtcbiAgdGhpcy5fYyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fbyA9IG9ic2VydmVyO1xuICBvYnNlcnZlciA9IG5ldyBTdWJzY3JpcHRpb25PYnNlcnZlcih0aGlzKTtcbiAgdHJ5IHtcbiAgICB2YXIgY2xlYW51cCA9IHN1YnNjcmliZXIob2JzZXJ2ZXIpO1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBjbGVhbnVwO1xuICAgIGlmIChjbGVhbnVwICE9IG51bGwpIHtcbiAgICAgIGlmICh0eXBlb2YgY2xlYW51cC51bnN1YnNjcmliZSA9PT0gJ2Z1bmN0aW9uJykgY2xlYW51cCA9IGZ1bmN0aW9uICgpIHsgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7IH07XG4gICAgICBlbHNlIGFGdW5jdGlvbihjbGVhbnVwKTtcbiAgICAgIHRoaXMuX2MgPSBjbGVhbnVwO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIG9ic2VydmVyLmVycm9yKGUpO1xuICAgIHJldHVybjtcbiAgfSBpZiAoc3Vic2NyaXB0aW9uQ2xvc2VkKHRoaXMpKSBjbGVhbnVwU3Vic2NyaXB0aW9uKHRoaXMpO1xufTtcblxuU3Vic2NyaXB0aW9uLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKHt9LCB7XG4gIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHsgY2xvc2VTdWJzY3JpcHRpb24odGhpcyk7IH1cbn0pO1xuXG52YXIgU3Vic2NyaXB0aW9uT2JzZXJ2ZXIgPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gIHRoaXMuX3MgPSBzdWJzY3JpcHRpb247XG59O1xuXG5TdWJzY3JpcHRpb25PYnNlcnZlci5wcm90b3R5cGUgPSByZWRlZmluZUFsbCh7fSwge1xuICBuZXh0OiBmdW5jdGlvbiBuZXh0KHZhbHVlKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYgKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSkge1xuICAgICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIubmV4dCk7XG4gICAgICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG9ic2VydmVyLCB2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2xvc2VTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBlcnJvcjogZnVuY3Rpb24gZXJyb3IodmFsdWUpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fcztcbiAgICBpZiAoc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHRocm93IHZhbHVlO1xuICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcbiAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLmVycm9yKTtcbiAgICAgIGlmICghbSkgdGhyb3cgdmFsdWU7XG4gICAgICB2YWx1ZSA9IG0uY2FsbChvYnNlcnZlciwgdmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUodmFsdWUpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fcztcbiAgICBpZiAoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB7XG4gICAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287XG4gICAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5jb21wbGV0ZSk7XG4gICAgICAgIHZhbHVlID0gbSA/IG0uY2FsbChvYnNlcnZlciwgdmFsdWUpIDogdW5kZWZpbmVkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9IGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH1cbn0pO1xuXG52YXIgJE9ic2VydmFibGUgPSBmdW5jdGlvbiBPYnNlcnZhYmxlKHN1YnNjcmliZXIpIHtcbiAgYW5JbnN0YW5jZSh0aGlzLCAkT2JzZXJ2YWJsZSwgJ09ic2VydmFibGUnLCAnX2YnKS5fZiA9IGFGdW5jdGlvbihzdWJzY3JpYmVyKTtcbn07XG5cbnJlZGVmaW5lQWxsKCRPYnNlcnZhYmxlLnByb3RvdHlwZSwge1xuICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgIHJldHVybiBuZXcgU3Vic2NyaXB0aW9uKG9ic2VydmVyLCB0aGlzLl9mKTtcbiAgfSxcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICByZXR1cm4gbmV3IChjb3JlLlByb21pc2UgfHwgZ2xvYmFsLlByb21pc2UpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGFGdW5jdGlvbihmbik7XG4gICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhhdC5zdWJzY3JpYmUoe1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGZuKHZhbHVlKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiByZWplY3QsXG4gICAgICAgIGNvbXBsZXRlOiByZXNvbHZlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbnJlZGVmaW5lQWxsKCRPYnNlcnZhYmxlLCB7XG4gIGZyb206IGZ1bmN0aW9uIGZyb20oeCkge1xuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT09ICdmdW5jdGlvbicgPyB0aGlzIDogJE9ic2VydmFibGU7XG4gICAgdmFyIG1ldGhvZCA9IGdldE1ldGhvZChhbk9iamVjdCh4KVtPQlNFUlZBQkxFXSk7XG4gICAgaWYgKG1ldGhvZCkge1xuICAgICAgdmFyIG9ic2VydmFibGUgPSBhbk9iamVjdChtZXRob2QuY2FsbCh4KSk7XG4gICAgICByZXR1cm4gb2JzZXJ2YWJsZS5jb25zdHJ1Y3RvciA9PT0gQyA/IG9ic2VydmFibGUgOiBuZXcgQyhmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUuc3Vic2NyaWJlKG9ic2VydmVyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEMoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICB2YXIgZG9uZSA9IGZhbHNlO1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFkb25lKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmb3JPZih4LCBmYWxzZSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoaXQpO1xuICAgICAgICAgICAgICBpZiAoZG9uZSkgcmV0dXJuIFJFVFVSTjtcbiAgICAgICAgICAgIH0pID09PSBSRVRVUk4pIHJldHVybjtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBpZiAoZG9uZSkgdGhyb3cgZTtcbiAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyBkb25lID0gdHJ1ZTsgfTtcbiAgICB9KTtcbiAgfSxcbiAgb2Y6IGZ1bmN0aW9uIG9mKCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aCwgaXRlbXMgPSBuZXcgQXJyYXkobCk7IGkgPCBsOykgaXRlbXNbaV0gPSBhcmd1bWVudHNbaSsrXTtcbiAgICByZXR1cm4gbmV3ICh0eXBlb2YgdGhpcyA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiAkT2JzZXJ2YWJsZSkoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICB2YXIgZG9uZSA9IGZhbHNlO1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFkb25lKSB7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBpdGVtcy5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChpdGVtc1tqXSk7XG4gICAgICAgICAgICBpZiAoZG9uZSkgcmV0dXJuO1xuICAgICAgICAgIH0gb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyBkb25lID0gdHJ1ZTsgfTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbmhpZGUoJE9ic2VydmFibGUucHJvdG90eXBlLCBPQlNFUlZBQkxFLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LkcsIHsgT2JzZXJ2YWJsZTogJE9ic2VydmFibGUgfSk7XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ09ic2VydmFibGUnKTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXByb21pc2UtZmluYWxseVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4vX3Byb21pc2UtcmVzb2x2ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ1Byb21pc2UnLCB7ICdmaW5hbGx5JzogZnVuY3Rpb24gKG9uRmluYWxseSkge1xuICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCBjb3JlLlByb21pc2UgfHwgZ2xvYmFsLlByb21pc2UpO1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiBvbkZpbmFsbHkgPT0gJ2Z1bmN0aW9uJztcbiAgcmV0dXJuIHRoaXMudGhlbihcbiAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKHgpIHtcbiAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiB4OyB9KTtcbiAgICB9IDogb25GaW5hbGx5LFxuICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgdGhyb3cgZTsgfSk7XG4gICAgfSA6IG9uRmluYWxseVxuICApO1xufSB9KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXByb21pc2UtdHJ5XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuL19wZXJmb3JtJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUHJvbWlzZScsIHsgJ3RyeSc6IGZ1bmN0aW9uIChjYWxsYmFja2ZuKSB7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYodGhpcyk7XG4gIHZhciByZXN1bHQgPSBwZXJmb3JtKGNhbGxiYWNrZm4pO1xuICAocmVzdWx0LmUgPyBwcm9taXNlQ2FwYWJpbGl0eS5yZWplY3QgOiBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlKShyZXN1bHQudik7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IG1ldGFkYXRhLnNldDtcblxubWV0YWRhdGEuZXhwKHsgZGVmaW5lTWV0YWRhdGE6IGZ1bmN0aW9uIGRlZmluZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCB0YXJnZXQsIHRhcmdldEtleSkge1xuICBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCBhbk9iamVjdCh0YXJnZXQpLCB0b01ldGFLZXkodGFyZ2V0S2V5KSk7XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcbnZhciBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwID0gbWV0YWRhdGEubWFwO1xudmFyIHN0b3JlID0gbWV0YWRhdGEuc3RvcmU7XG5cbm1ldGFkYXRhLmV4cCh7IGRlbGV0ZU1ldGFkYXRhOiBmdW5jdGlvbiBkZWxldGVNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHZhciB0YXJnZXRLZXkgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pO1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKGFuT2JqZWN0KHRhcmdldCksIHRhcmdldEtleSwgZmFsc2UpO1xuICBpZiAobWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCB8fCAhbWV0YWRhdGFNYXBbJ2RlbGV0ZSddKG1ldGFkYXRhS2V5KSkgcmV0dXJuIGZhbHNlO1xuICBpZiAobWV0YWRhdGFNYXAuc2l6ZSkgcmV0dXJuIHRydWU7XG4gIHZhciB0YXJnZXRNZXRhZGF0YSA9IHN0b3JlLmdldCh0YXJnZXQpO1xuICB0YXJnZXRNZXRhZGF0YVsnZGVsZXRlJ10odGFyZ2V0S2V5KTtcbiAgcmV0dXJuICEhdGFyZ2V0TWV0YWRhdGEuc2l6ZSB8fCBzdG9yZVsnZGVsZXRlJ10odGFyZ2V0KTtcbn0gfSk7XG4iLCJ2YXIgU2V0ID0gcmVxdWlyZSgnLi9lczYuc2V0Jyk7XG52YXIgZnJvbSA9IHJlcXVpcmUoJy4vX2FycmF5LWZyb20taXRlcmFibGUnKTtcbnZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IG1ldGFkYXRhLmtleXM7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG52YXIgb3JkaW5hcnlNZXRhZGF0YUtleXMgPSBmdW5jdGlvbiAoTywgUCkge1xuICB2YXIgb0tleXMgPSBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhPLCBQKTtcbiAgdmFyIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xuICBpZiAocGFyZW50ID09PSBudWxsKSByZXR1cm4gb0tleXM7XG4gIHZhciBwS2V5cyA9IG9yZGluYXJ5TWV0YWRhdGFLZXlzKHBhcmVudCwgUCk7XG4gIHJldHVybiBwS2V5cy5sZW5ndGggPyBvS2V5cy5sZW5ndGggPyBmcm9tKG5ldyBTZXQob0tleXMuY29uY2F0KHBLZXlzKSkpIDogcEtleXMgOiBvS2V5cztcbn07XG5cbm1ldGFkYXRhLmV4cCh7IGdldE1ldGFkYXRhS2V5czogZnVuY3Rpb24gZ2V0TWV0YWRhdGFLZXlzKHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICByZXR1cm4gb3JkaW5hcnlNZXRhZGF0YUtleXMoYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDIgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzFdKSk7XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXM7XG52YXIgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmdldDtcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeUdldE1ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gIHZhciBoYXNPd24gPSBvcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgaWYgKGhhc093bikgcmV0dXJuIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XG4gIHJldHVybiBwYXJlbnQgIT09IG51bGwgPyBvcmRpbmFyeUdldE1ldGFkYXRhKE1ldGFkYXRhS2V5LCBwYXJlbnQsIFApIDogdW5kZWZpbmVkO1xufTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0TWV0YWRhdGE6IGZ1bmN0aW9uIGdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5R2V0TWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IG1ldGFkYXRhLmtleXM7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG5tZXRhZGF0YS5leHAoeyBnZXRPd25NZXRhZGF0YUtleXM6IGZ1bmN0aW9uIGdldE93bk1ldGFkYXRhS2V5cyh0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1sxXSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gbWV0YWRhdGEuZ2V0O1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0T3duTWV0YWRhdGE6IGZ1bmN0aW9uIGdldE93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldClcbiAgICAsIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxudmFyIG9yZGluYXJ5SGFzTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIGhhc093biA9IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICBpZiAoaGFzT3duKSByZXR1cm4gdHJ1ZTtcbiAgdmFyIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xuICByZXR1cm4gcGFyZW50ICE9PSBudWxsID8gb3JkaW5hcnlIYXNNZXRhZGF0YShNZXRhZGF0YUtleSwgcGFyZW50LCBQKSA6IGZhbHNlO1xufTtcblxubWV0YWRhdGEuZXhwKHsgaGFzTWV0YWRhdGE6IGZ1bmN0aW9uIGhhc01ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5SGFzTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHsgaGFzT3duTWV0YWRhdGE6IGZ1bmN0aW9uIGhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldClcbiAgICAsIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufSB9KTtcbiIsInZhciAkbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvTWV0YUtleSA9ICRtZXRhZGF0YS5rZXk7XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9ICRtZXRhZGF0YS5zZXQ7XG5cbiRtZXRhZGF0YS5leHAoeyBtZXRhZGF0YTogZnVuY3Rpb24gbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGRlY29yYXRvcih0YXJnZXQsIHRhcmdldEtleSkge1xuICAgIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEoXG4gICAgICBtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSxcbiAgICAgICh0YXJnZXRLZXkgIT09IHVuZGVmaW5lZCA/IGFuT2JqZWN0IDogYUZ1bmN0aW9uKSh0YXJnZXQpLFxuICAgICAgdG9NZXRhS2V5KHRhcmdldEtleSlcbiAgICApO1xuICB9O1xufSB9KTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXNldC5mcm9tXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ1NldCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtc2V0Lm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdTZXQnKTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnU2V0JywgeyB0b0pTT046IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tdG8tanNvbicpKCdTZXQnKSB9KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL1N0cmluZy5wcm90b3R5cGUuYXRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICBhdDogZnVuY3Rpb24gYXQocG9zKSB7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vU3RyaW5nLnByb3RvdHlwZS5tYXRjaEFsbC9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgZ2V0RmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyIFJlZ0V4cFByb3RvID0gUmVnRXhwLnByb3RvdHlwZTtcblxudmFyICRSZWdFeHBTdHJpbmdJdGVyYXRvciA9IGZ1bmN0aW9uIChyZWdleHAsIHN0cmluZykge1xuICB0aGlzLl9yID0gcmVnZXhwO1xuICB0aGlzLl9zID0gc3RyaW5nO1xufTtcblxucmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKSgkUmVnRXhwU3RyaW5nSXRlcmF0b3IsICdSZWdFeHAgU3RyaW5nJywgZnVuY3Rpb24gbmV4dCgpIHtcbiAgdmFyIG1hdGNoID0gdGhpcy5fci5leGVjKHRoaXMuX3MpO1xuICByZXR1cm4geyB2YWx1ZTogbWF0Y2gsIGRvbmU6IG1hdGNoID09PSBudWxsIH07XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIG1hdGNoQWxsOiBmdW5jdGlvbiBtYXRjaEFsbChyZWdleHApIHtcbiAgICBkZWZpbmVkKHRoaXMpO1xuICAgIGlmICghaXNSZWdFeHAocmVnZXhwKSkgdGhyb3cgVHlwZUVycm9yKHJlZ2V4cCArICcgaXMgbm90IGEgcmVnZXhwIScpO1xuICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgIHZhciBmbGFncyA9ICdmbGFncycgaW4gUmVnRXhwUHJvdG8gPyBTdHJpbmcocmVnZXhwLmZsYWdzKSA6IGdldEZsYWdzLmNhbGwocmVnZXhwKTtcbiAgICB2YXIgcnggPSBuZXcgUmVnRXhwKHJlZ2V4cC5zb3VyY2UsIH5mbGFncy5pbmRleE9mKCdnJykgPyBmbGFncyA6ICdnJyArIGZsYWdzKTtcbiAgICByeC5sYXN0SW5kZXggPSB0b0xlbmd0aChyZWdleHAubGFzdEluZGV4KTtcbiAgICByZXR1cm4gbmV3ICRSZWdFeHBTdHJpbmdJdGVyYXRvcihyeCwgUyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhZCA9IHJlcXVpcmUoJy4vX3N0cmluZy1wYWQnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8yODBcbnZhciBXRUJLSVRfQlVHID0gL1ZlcnNpb25cXC8xMFxcLlxcZCsoXFwuXFxkKyk/KCBNb2JpbGVcXC9cXHcrKT8gU2FmYXJpXFwvLy50ZXN0KHVzZXJBZ2VudCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogV0VCS0lUX0JVRywgJ1N0cmluZycsIHtcbiAgcGFkRW5kOiBmdW5jdGlvbiBwYWRFbmQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGZhbHNlKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFkID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxudmFyIFdFQktJVF9CVUcgPSAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8oIE1vYmlsZVxcL1xcdyspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBXRUJLSVRfQlVHLCAnU3RyaW5nJywge1xuICBwYWRTdGFydDogZnVuY3Rpb24gcGFkU3RhcnQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRydWUpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1MZWZ0JywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltTGVmdCgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMSk7XG4gIH07XG59LCAndHJpbVN0YXJ0Jyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vc2VibWFya2JhZ2UvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltUmlnaHQnLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1SaWdodCgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMik7XG4gIH07XG59LCAndHJpbUVuZCcpO1xuIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdhc3luY0l0ZXJhdG9yJyk7XG4iLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ29ic2VydmFibGUnKTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWdsb2JhbFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdTeXN0ZW0nLCB7IGdsb2JhbDogcmVxdWlyZSgnLi9fZ2xvYmFsJykgfSk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrbWFwLmZyb21cbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLWZyb20nKSgnV2Vha01hcCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha21hcC5vZlxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tb2YnKSgnV2Vha01hcCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha3NldC5mcm9tXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ1dlYWtTZXQnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWtzZXQub2ZcbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLW9mJykoJ1dlYWtTZXQnKTtcbiIsInZhciAkaXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciBJVEVSQVRPUiA9IHdrcygnaXRlcmF0b3InKTtcbnZhciBUT19TVFJJTkdfVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xudmFyIEFycmF5VmFsdWVzID0gSXRlcmF0b3JzLkFycmF5O1xuXG52YXIgRE9NSXRlcmFibGVzID0ge1xuICBDU1NSdWxlTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IGZhbHNlLFxuICBDU1NWYWx1ZUxpc3Q6IGZhbHNlLFxuICBDbGllbnRSZWN0TGlzdDogZmFsc2UsXG4gIERPTVJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NU3RyaW5nTGlzdDogZmFsc2UsXG4gIERPTVRva2VuTGlzdDogdHJ1ZSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IGZhbHNlLFxuICBGaWxlTGlzdDogZmFsc2UsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MRm9ybUVsZW1lbnQ6IGZhbHNlLFxuICBIVE1MU2VsZWN0RWxlbWVudDogZmFsc2UsXG4gIE1lZGlhTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIE1pbWVUeXBlQXJyYXk6IGZhbHNlLFxuICBOYW1lZE5vZGVNYXA6IGZhbHNlLFxuICBOb2RlTGlzdDogdHJ1ZSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogZmFsc2UsXG4gIFBsdWdpbjogZmFsc2UsXG4gIFBsdWdpbkFycmF5OiBmYWxzZSxcbiAgU1ZHTGVuZ3RoTGlzdDogZmFsc2UsXG4gIFNWR051bWJlckxpc3Q6IGZhbHNlLFxuICBTVkdQYXRoU2VnTGlzdDogZmFsc2UsXG4gIFNWR1BvaW50TGlzdDogZmFsc2UsXG4gIFNWR1N0cmluZ0xpc3Q6IGZhbHNlLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiBmYWxzZSxcbiAgU291cmNlQnVmZmVyTGlzdDogZmFsc2UsXG4gIFN0eWxlU2hlZXRMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgVGV4dFRyYWNrQ3VlTGlzdDogZmFsc2UsXG4gIFRleHRUcmFja0xpc3Q6IGZhbHNlLFxuICBUb3VjaExpc3Q6IGZhbHNlXG59O1xuXG5mb3IgKHZhciBjb2xsZWN0aW9ucyA9IGdldEtleXMoRE9NSXRlcmFibGVzKSwgaSA9IDA7IGkgPCBjb2xsZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICB2YXIgTkFNRSA9IGNvbGxlY3Rpb25zW2ldO1xuICB2YXIgZXhwbGljaXQgPSBET01JdGVyYWJsZXNbTkFNRV07XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgcHJvdG8gPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICB2YXIga2V5O1xuICBpZiAocHJvdG8pIHtcbiAgICBpZiAoIXByb3RvW0lURVJBVE9SXSkgaGlkZShwcm90bywgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICBpZiAoIXByb3RvW1RPX1NUUklOR19UQUddKSBoaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBBcnJheVZhbHVlcztcbiAgICBpZiAoZXhwbGljaXQpIGZvciAoa2V5IGluICRpdGVyYXRvcnMpIGlmICghcHJvdG9ba2V5XSkgcmVkZWZpbmUocHJvdG8sIGtleSwgJGl0ZXJhdG9yc1trZXldLCB0cnVlKTtcbiAgfVxufVxuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CLCB7XG4gIHNldEltbWVkaWF0ZTogJHRhc2suc2V0LFxuICBjbGVhckltbWVkaWF0ZTogJHRhc2suY2xlYXJcbn0pO1xuIiwiLy8gaWU5LSBzZXRUaW1lb3V0ICYgc2V0SW50ZXJ2YWwgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIGZpeFxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG52YXIgc2xpY2UgPSBbXS5zbGljZTtcbnZhciBNU0lFID0gL01TSUUgLlxcLi8udGVzdCh1c2VyQWdlbnQpOyAvLyA8LSBkaXJ0eSBpZTktIGNoZWNrXG52YXIgd3JhcCA9IGZ1bmN0aW9uIChzZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChmbiwgdGltZSAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgICB2YXIgYm91bmRBcmdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDI7XG4gICAgdmFyIGFyZ3MgPSBib3VuZEFyZ3MgPyBzbGljZS5jYWxsKGFyZ3VtZW50cywgMikgOiBmYWxzZTtcbiAgICByZXR1cm4gc2V0KGJvdW5kQXJncyA/IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbikpLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH0gOiBmbiwgdGltZSk7XG4gIH07XG59O1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIgKyAkZXhwb3J0LkYgKiBNU0lFLCB7XG4gIHNldFRpbWVvdXQ6IHdyYXAoZ2xvYmFsLnNldFRpbWVvdXQpLFxuICBzZXRJbnRlcnZhbDogd3JhcChnbG9iYWwuc2V0SW50ZXJ2YWwpXG59KTtcbiIsInJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3ltYm9sJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmhhcy1pbnN0YW5jZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucGFyc2UtZmxvYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIudG8tcHJlY2lzaW9uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5lcHNpbG9uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLW5hbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5taW4tc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguYWNvc2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5hc2luaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmF0YW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguY2JydCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmNsejMyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguY29zaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguaHlwb3QnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5pbXVsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgubG9nMTAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5sb2cxcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5zaWduJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguc2luaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnRhbmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC50cnVuYycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5yYXcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5hbmNob3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmJpZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5saW5rJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdWInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN1cCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLm5vdycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuam9pbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zbGljZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zb3J0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lm1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc29tZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lmxhc3QtaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmlsbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLmV4ZWMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuZmxhZ3MnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5yZXBsYWNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5zZWFyY2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnByb21pc2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnNldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi53ZWFrLW1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi53ZWFrLXNldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5hcnJheS1idWZmZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmludDgtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0MzItYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmFwcGx5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVsZXRlLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZW51bWVyYXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmhhcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmlzLWV4dGVuc2libGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5vd24ta2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuYXJyYXkuZmxhdC1tYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuYXJyYXkuZmxhdHRlbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcuYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1zdGFydCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLWVuZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy50cmltLXJpZ2h0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5tYXRjaC1hbGwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1nZXR0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1zZXR0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1nZXR0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1zZXR0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWFwLnRvLWpzb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc2V0LnRvLWpzb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWFwLm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnNldC5vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy53ZWFrLW1hcC5vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy53ZWFrLXNldC5vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXAuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zZXQuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy53ZWFrLW1hcC5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstc2V0LmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuZ2xvYmFsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN5c3RlbS5nbG9iYWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuZXJyb3IuaXMtZXJyb3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5jbGFtcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmRlZy1wZXItcmFkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguZGVncmVlcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmZzY2FsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmlhZGRoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguaXN1YmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5pbXVsaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnJhZC1wZXItZGVnJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGgucmFkaWFucycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnNjYWxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGgudW11bGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5zaWduYml0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnByb21pc2UuZmluYWxseScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5wcm9taXNlLnRyeScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlZmluZS1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlbGV0ZS1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS1rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEta2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1vd24tbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hc2FwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9ic2VydmFibGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy93ZWIudGltZXJzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvd2ViLmltbWVkaWF0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9tb2R1bGVzL19jb3JlJyk7XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSwgZXZhbCkoXCJ0aGlzXCIpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwiKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7aWYodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIil7bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7fWVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpe2RlZmluZShbXSwgZmFjdG9yeSk7fWVsc2V7dmFyIGEgPSBmYWN0b3J5KCk7Zm9yKHZhciBpIGluIGEpICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIiA/IGV4cG9ydHMgOiByb290KVtpXSA9IGFbaV07fX0pKHNlbGYsIGZ1bmN0aW9uICgpe3JldHVybiB7d2FzbUhhc2g6XCIwNzAzMjgzOGI5ZjdmMDAxMzg0MTlhNTliZDM5ZDgyM1wiLGpzSGFzaDpcImQ4MjMyZTlmYzFjOGQxYmRlZWNkZDkwMTFmZjRjNmJhXCIsYXNtTWVtSGFzaDpcIjZlZDYwYjBhOGJhY2E1YjMzMjVkY2I2NDZkMTMyNzJlXCIsYXNtSlNIYXNoOlwiMTI2MDY3ZjA3Yzg0M2Q2ZDA3ZjRiM2E2ZjE5NWVjNDhcIn19KSIsImNvbnN0IFVOREVGSU5FRCA9ICd1bmRlZmluZWQnO1xyXG5sZXQgX1VSTCA9ICh0eXBlb2YgVVJMID09PSBVTkRFRklORUQpID8gKFxyXG4gICAgKHR5cGVvZiB3ZWJraXRVUkwgPT09IFVOREVGSU5FRCkgPyBudWxsIDogd2Via2l0VVJMXHJcbikgOiBVUkw7XHJcbmxldCBhc3luY1JlYWRCbG9iVG9CdWZmZXI7XHJcbmxldCB3cml0ZUJ1ZmZlclRvQmxvYjtcclxuaWYgKHR5cGVvZiBGaWxlUmVhZGVyU3luYyAhPT0gVU5ERUZJTkVEKSB7XHJcbiAgICBhc3luY1JlYWRCbG9iVG9CdWZmZXIgPSBmdW5jdGlvbiAoYmxvYiwgb2Zmc2V0ID0gMCwgc2l6ZSA9IGJsb2Iuc2l6ZSkge1xyXG4gICAgICAgIGxldCBmaWxlUmVhZGVyU3luYyA9IG5ldyBGaWxlUmVhZGVyU3luYygpO1xyXG4gICAgICAgIHJldHVybiBmaWxlUmVhZGVyU3luYy5yZWFkQXNBcnJheUJ1ZmZlcihibG9iLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgc2l6ZSkpO1xyXG4gICAgfVxyXG4gICAgd3JpdGVCdWZmZXJUb0Jsb2IgPSBmdW5jdGlvbiAoYnVmZmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBCbG9iKFtidWZmZXJdKTtcclxuICAgIH1cclxufSBlbHNlIGlmIChfVVJMKSB7XHJcbiAgICBhc3luY1JlYWRCbG9iVG9CdWZmZXIgPSBmdW5jdGlvbiAoYmxvYiwgb2Zmc2V0ID0gMCwgc2l6ZSA9IGJsb2Iuc2l6ZSkge1xyXG4gICAgICAgIGxldCBibG9iVXJsID0gX1VSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XHJcbiAgICAgICAgbGV0IHhtbEh0dHAgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuICAgICAgICB4bWxIdHRwLm9wZW4oJ0dFVCcsIGJsb2JVcmwsIGZhbHNlKTtcclxuICAgICAgICB4bWxIdHRwLnJlc3BvbnNlVHlwZSA9ICdhcnJheWJ1ZmZlcic7XHJcbiAgICAgICAgeG1sSHR0cC5zZW5kKG51bGwpO1xyXG4gICAgICAgIGxldCBzdGF0dXMgPSB4bWxIdHRwLnN0YXR1cztcclxuICAgICAgICBpZiAoc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQpIHtcclxuICAgICAgICAgICAgX1VSTC5yZXZva2VPYmplY3RVUkwoYmxvYlVybCk7XHJcbiAgICAgICAgICAgIGJsb2IgPSB4bWxIdHRwLnJlc3BvbnNlO1xyXG4gICAgICAgICAgICBpZiAoYmxvYi5zbGljZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJsb2Iuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBzaXplKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYmxvYiwgb2Zmc2V0LCBzaXplKS5idWZmZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgd3JpdGVCdWZmZXJUb0Jsb2IgPSBmdW5jdGlvbiAoYnVmZmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBCbG9iKFtidWZmZXJdKTtcclxuICAgIH1cclxufSBlbHNlIHtcclxuICAgIGFzeW5jUmVhZEJsb2JUb0J1ZmZlciA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCA9IDAsIHNpemUgPSBidWZmZXIuYnl0ZUxlbmd0aCkge1xyXG4gICAgICAgIGlmIChidWZmZXIuc2xpY2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlci5zbGljZShvZmZzZXQsIHNpemUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyLCBvZmZzZXQsIHNpemUpLmJ1ZmZlcjtcclxuICAgIH1cclxuICAgIHdyaXRlQnVmZmVyVG9CbG9iID0gZnVuY3Rpb24gKGJ1ZmZlcikge1xyXG4gICAgICAgIHJldHVybiBidWZmZXI7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIEJ1ZmZlckJsb2NrIHtcclxuICAgIGNvbnN0cnVjdG9yKHNpemUpIHtcclxuICAgICAgICB0aGlzLnNpemUgPSBzaXplO1xyXG4gICAgICAgIHRoaXMuYmxvY2tTaXplID0gODM4ODYwODsgLy8gMTAyNCAqIDEwMjQgKiA4ID0gOE1cclxuICAgICAgICB0aGlzLmJsb2NrcyA9IFtdO1xyXG4gICAgICAgIHRoaXMubG9hZGluZ0Jsb2NrcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuYmxvYkNhY2hlID0gW107XHJcbiAgICAgICAgdGhpcy5sb2FkaW5nQ2FjaGUgPSB7fTtcclxuICAgIH1cclxuICAgIHB1c2ggKG9mZnNldCwgc2l6ZSkge1xyXG4gICAgICAgIGxldCBibG9ja3MgPSB0aGlzLmJsb2NrcztcclxuICAgICAgICBsZXQgbWluID0gTWF0aC5tYXgoMCwgb2Zmc2V0KTtcclxuICAgICAgICBsZXQgbWF4ID0gTWF0aC5taW4ob2Zmc2V0ICsgc2l6ZSwgdGhpcy5zaXplKTtcclxuICAgICAgICBsZXQgaW50ZXJzZWN0aW9uID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IGJsb2Nrcy5sZW5ndGg7IGktLTspIHtcclxuICAgICAgICAgICAgbGV0IGJsb2NrID0gYmxvY2tzW2ldO1xyXG4gICAgICAgICAgICBsZXQgc3RhcnQgPSBibG9ja1swXTtcclxuICAgICAgICAgICAgbGV0IGVuZCA9IGJsb2NrWzFdO1xyXG4gICAgICAgICAgICBpZiAoc3RhcnQgPD0gbWF4ICYmIGVuZCA+PSBtaW4pIHtcclxuICAgICAgICAgICAgICAgIC8vIOacieS6pOmbhlxyXG4gICAgICAgICAgICAgICAgbWluID0gTWF0aC5taW4obWluLCBzdGFydCk7XHJcbiAgICAgICAgICAgICAgICBtYXggPSBNYXRoLm1heChtYXgsIGVuZCk7XHJcbiAgICAgICAgICAgICAgICBpbnRlcnNlY3Rpb24ucHVzaChpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgaiA9IGludGVyc2VjdGlvbi5sZW5ndGg7IGkgPCBqOyBpKyspIHtcclxuICAgICAgICAgICAgYmxvY2tzLnNwbGljZShpbnRlcnNlY3Rpb25baV0sIDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBibG9ja3MucHVzaChbbWluLCBtYXhdKTtcclxuICAgIH1cclxuICAgIGF2YWlsIChvZmZzZXQsIHNpemUpIHtcclxuICAgICAgICBsZXQgbWluID0gb2Zmc2V0O1xyXG4gICAgICAgIGxldCBtYXggPSBvZmZzZXQgKyBzaXplO1xyXG4gICAgICAgIGxldCBibG9ja3MgPSB0aGlzLmJsb2NrcztcclxuICAgICAgICBmb3IgKGxldCBpID0gYmxvY2tzLmxlbmd0aDsgaS0tOykge1xyXG4gICAgICAgICAgICBsZXQgYmxvY2sgPSBibG9ja3NbaV07XHJcbiAgICAgICAgICAgIGxldCBzdGFydCA9IGJsb2NrWzBdO1xyXG4gICAgICAgICAgICBsZXQgZW5kID0gYmxvY2tbMV07XHJcbiAgICAgICAgICAgIGlmIChzdGFydCA8PSBtaW4gJiYgZW5kID49IG1heCkge1xyXG4gICAgICAgICAgICAgICAgLy8g5YyF5ZCrXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBmdWxsICgpIHtcclxuICAgICAgICB0aGlzLmJsb2Nrcy5sZW5ndGggPT09IDEgJiYgdGhpcy5ibG9ja3NbMF1bMF0gPT09IDAgJiYgdGhpcy5ibG9ja3NbMF1bMV0gPT09IHRoaXMuc2l6ZTtcclxuICAgIH1cclxuICAgIGNoZWNrTG9hZEJ1ZmZlciAob2Zmc2V0LCBzaXplKSB7XHJcbiAgICAgICAgbGV0IG1pbiA9IG9mZnNldDtcclxuICAgICAgICBsZXQgbWF4ID0gb2Zmc2V0ICsgc2l6ZTtcclxuICAgICAgICBsZXQgYmxvY2tzID0gdGhpcy5sb2FkaW5nQmxvY2tzO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSBibG9ja3MubGVuZ3RoOyBpLS07KSB7XHJcbiAgICAgICAgICAgIGxldCBibG9jayA9IGJsb2Nrc1tpXTtcclxuICAgICAgICAgICAgbGV0IHN0YXJ0ID0gYmxvY2tbMF07XHJcbiAgICAgICAgICAgIGxldCBlbmQgPSBibG9ja1sxXTtcclxuICAgICAgICAgICAgaWYgKHN0YXJ0IDw9IG1pbiAmJiBlbmQgPj0gbWF4KSB7XHJcbiAgICAgICAgICAgICAgICAvLyDljIXlkKtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGxvYWRpbmdCdWZmZXIgKG9mZnNldCwgc2l6ZSkge1xyXG4gICAgICAgIGxldCBibG9ja3MgPSB0aGlzLmxvYWRpbmdCbG9ja3M7XHJcbiAgICAgICAgbGV0IG1pbiA9IE1hdGgubWF4KDAsIG9mZnNldCk7XHJcbiAgICAgICAgbGV0IG1heCA9IE1hdGgubWluKG9mZnNldCArIHNpemUsIHRoaXMuc2l6ZSk7XHJcbiAgICAgICAgbGV0IGludGVyc2VjdGlvbiA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSBibG9ja3MubGVuZ3RoOyBpLS07KSB7XHJcbiAgICAgICAgICAgIGxldCBibG9jayA9IGJsb2Nrc1tpXTtcclxuICAgICAgICAgICAgbGV0IHN0YXJ0ID0gYmxvY2tbMF07XHJcbiAgICAgICAgICAgIGxldCBlbmQgPSBibG9ja1sxXTtcclxuICAgICAgICAgICAgaWYgKHN0YXJ0IDw9IG1heCAmJiBlbmQgPj0gbWluKSB7XHJcbiAgICAgICAgICAgICAgICAvLyDmnInkuqTpm4ZcclxuICAgICAgICAgICAgICAgIG1pbiA9IE1hdGgubWluKG1pbiwgc3RhcnQpO1xyXG4gICAgICAgICAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCBlbmQpO1xyXG4gICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uLnB1c2goaSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGogPSBpbnRlcnNlY3Rpb24ubGVuZ3RoOyBpIDwgajsgaSsrKSB7XHJcbiAgICAgICAgICAgIGJsb2Nrcy5zcGxpY2UoaW50ZXJzZWN0aW9uW2ldLCAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYmxvY2tzLnB1c2goW21pbiwgbWF4XSk7XHJcbiAgICB9XHJcbiAgICBhZGRCdWZmZXIgKG9mZnNldCwgc2l6ZSwgYnVmZmVyKSB7XHJcbiAgICAgICAgbGV0IGFkZFVpbnQ4QXJyYXkgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xyXG4gICAgICAgIGxldCBibG9ja1NpemUgPSB0aGlzLmJsb2NrU2l6ZTtcclxuICAgICAgICBsZXQgYmxvYkNhY2hlID0gdGhpcy5ibG9iQ2FjaGU7XHJcbiAgICAgICAgbGV0IHN0YXJ0QmxvY2sgPSBNYXRoLmZsb29yKG9mZnNldCAvIGJsb2NrU2l6ZSk7XHJcbiAgICAgICAgbGV0IGVuZEJsb2NrID0gTWF0aC5mbG9vcigob2Zmc2V0ICsgc2l6ZSkgLyBibG9ja1NpemUpO1xyXG4gICAgICAgIGxldCBzcmNTdGFydCA9IG9mZnNldCAlIGJsb2NrU2l6ZTtcclxuICAgICAgICBsZXQgYWRkU3RhcnQgPSAwO1xyXG4gICAgICAgIGxldCBhZGRFbmQgPSBibG9ja1NpemUgLSBzcmNTdGFydDtcclxuICAgICAgICBmb3IgKGxldCBpID0gc3RhcnRCbG9jaywgaiA9IGVuZEJsb2NrOyBpIDw9IGo7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgYmxvYiA9IGJsb2JDYWNoZVtpXTtcclxuICAgICAgICAgICAgbGV0IHNyY0FycmF5QnVmZmVyO1xyXG4gICAgICAgICAgICBpZiAoYmxvYikge1xyXG4gICAgICAgICAgICAgICAgc3JjQXJyYXlCdWZmZXIgPSBhc3luY1JlYWRCbG9iVG9CdWZmZXIoYmxvYik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFzcmNBcnJheUJ1ZmZlcikge1xyXG4gICAgICAgICAgICAgICAgc3JjQXJyYXlCdWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoYmxvY2tTaXplKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgc3JjVWludDhBcnJheSA9IG5ldyBVaW50OEFycmF5KHNyY0FycmF5QnVmZmVyKTtcclxuICAgICAgICAgICAgc3JjVWludDhBcnJheS5zZXQoYWRkVWludDhBcnJheS5zbGljZShhZGRTdGFydCwgYWRkRW5kKSwgc3JjU3RhcnQpO1xyXG4gICAgICAgICAgICBibG9iQ2FjaGVbaV0gPSB3cml0ZUJ1ZmZlclRvQmxvYihzcmNVaW50OEFycmF5KTtcclxuICAgICAgICAgICAgc3JjU3RhcnQgPSAwO1xyXG4gICAgICAgICAgICBhZGRTdGFydCArPSBibG9ja1NpemU7XHJcbiAgICAgICAgICAgIGFkZEVuZCArPSBibG9ja1NpemU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucHVzaChvZmZzZXQsIHNpemUpO1xyXG4gICAgfVxyXG4gICAgZ2V0QnVmZmVyIChvZmZzZXQsIHNpemUpIHtcclxuICAgICAgICBpZiAob2Zmc2V0ICsgc2l6ZSA+IHRoaXMuc2l6ZSkge1xyXG4gICAgICAgICAgICBzaXplID0gdGhpcy5zaXplIC0gb2Zmc2V0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgYXJyYXlCdWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoc2l6ZSk7XHJcbiAgICAgICAgbGV0IGJsb2NrU2l6ZSA9IHRoaXMuYmxvY2tTaXplO1xyXG4gICAgICAgIGxldCBibG9iQ2FjaGUgPSB0aGlzLmJsb2JDYWNoZTtcclxuICAgICAgICBsZXQgc3RhcnRCbG9jayA9IE1hdGguZmxvb3Iob2Zmc2V0IC8gYmxvY2tTaXplKTtcclxuICAgICAgICBsZXQgZW5kQmxvY2sgPSBNYXRoLmZsb29yKChvZmZzZXQgKyBzaXplKSAvIGJsb2NrU2l6ZSk7XHJcbiAgICAgICAgbGV0IHNyY1N0YXJ0ID0gb2Zmc2V0ICUgYmxvY2tTaXplO1xyXG4gICAgICAgIGxldCBzcmNFbmQgPSBNYXRoLm1pbihzaXplLCBibG9ja1NpemUgLSBzcmNTdGFydCk7XHJcbiAgICAgICAgbGV0IGdldFN0YXJ0ID0gMDtcclxuICAgICAgICBsZXQgZ2V0RW5kID0gc3JjRW5kO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSBzdGFydEJsb2NrLCBqID0gZW5kQmxvY2s7IGkgPD0gajsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBibG9iID0gYmxvYkNhY2hlW2ldO1xyXG4gICAgICAgICAgICBsZXQgc3JjQXJyYXlCdWZmZXI7XHJcbiAgICAgICAgICAgIGlmIChibG9iKSB7XHJcbiAgICAgICAgICAgICAgICBzcmNBcnJheUJ1ZmZlciA9IGFzeW5jUmVhZEJsb2JUb0J1ZmZlcihibG9iLCBzcmNTdGFydCwgc3JjRW5kKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIXNyY0FycmF5QnVmZmVyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgKG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyLCBnZXRTdGFydCwgZ2V0RW5kIC0gZ2V0U3RhcnQpKS5zZXQobmV3IFVpbnQ4QXJyYXkoc3JjQXJyYXlCdWZmZXIpKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHNyY1N0YXJ0ID0gMDtcclxuICAgICAgICAgICAgc2l6ZSAtPSBzcmNFbmQ7XHJcbiAgICAgICAgICAgIGdldFN0YXJ0ICs9IHNyY0VuZDtcclxuICAgICAgICAgICAgc3JjRW5kID0gTWF0aC5taW4oc2l6ZSwgYmxvY2tTaXplIC0gc3JjU3RhcnQpO1xyXG4gICAgICAgICAgICBnZXRFbmQgKz0gc3JjRW5kO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYXJyYXlCdWZmZXI7XHJcbiAgICB9XHJcbiAgICBfZ2V0QnVmZmVyQ2FjaGVLZXkgKG9mZnNldCwgc2l6ZSkge1xyXG4gICAgICAgIHJldHVybiBbb2Zmc2V0LCBzaXplXS5qb2luKCctJyk7XHJcbiAgICB9XHJcbiAgICBkZXN0cm95ICgpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5ibG9iQ2FjaGUubGVuZ3RoOyBpLS07KSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmJsb2JDYWNoZVtpXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEJ1ZmZlckJsb2NrOyIsIlxuY2xhc3MgUERGQ29udHJvbHtcbiAgICBjb25zdHJ1Y3RvcihlbmdpbmVDb250cm9sLGVuZ2luZSl7XG4gICAgICAgIHRoaXMuZW5naW5lQ29udHJvbCA9IGVuZ2luZUNvbnRyb2w7XG4gICAgICAgIHRoaXMuZW5naW5lID0gZW5naW5lO1xuICAgIH1cbiAgICB0b0pzb24oKXtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIEdTREsuQ29udHJvbFxuICAgICAgICAgKi9cbiAgICAgICAgbGV0IGVuZ2luZUNvbnRyb2wgPSB0aGlzLmVuZ2luZUNvbnRyb2w7XG5cbiAgICAgICAgbGV0IGluZGV4ID0gZW5naW5lQ29udHJvbC5HZXRJbmRleCgpO1xuICAgICAgICBsZXQgaXNDaGVja2VkID0gZW5naW5lQ29udHJvbC5Jc0NoZWNrZWQoKTtcbiAgICAgICAgbGV0IGlzRGVmYXVsdENoZWNrZWQgPSBlbmdpbmVDb250cm9sLklzRGVmYXVsdENoZWNrZWQoKTtcbiAgICAgICAgbGV0IGlzRW1wdHkgPSBlbmdpbmVDb250cm9sLklzRW1wdHkoKTtcbiAgICAgICAgaXNFbXB0eSA9IGlzRW1wdHl8fGVuZ2luZUNvbnRyb2wuR2V0V2lkZ2V0KCkuSXNFbXB0eSgpO1xuICAgICAgICBpZihpc0VtcHR5KXtcbiAgICAgICAgICAgIHJldHVybiB7fVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBsZXQgb2JqZWN0TnVtID0gZW5naW5lQ29udHJvbC5HZXRXaWRnZXQoKS5HZXREaWN0KCkuR2V0T2JqTnVtKCk7XG5cbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgIGlzQ2hlY2tlZCxcbiAgICAgICAgICAgIGlzRGVmYXVsdENoZWNrZWQsXG4gICAgICAgICAgICBpc0VtcHR5LFxuICAgICAgICAgICAgb2JqZWN0TnVtLFxuICAgICAgICB9KVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUERGQ29udHJvbDsiLCJpbXBvcnQgUERGQ29udHJvbCBmcm9tICcuL0NvbnRyb2wnO1xuaW1wb3J0IExvZ2dlckZhY3RvcnkgZnJvbSAnLi4vLi4vc2hhcmVkL2xvZ2dlci9Mb2dnZXJGYWN0b3J5JztcbmNvbnN0IGxvZ2dlciA9IExvZ2dlckZhY3RvcnkuZ2V0TG9nZ2VyKCdwZGYtanIuRmllbGQnKTtcblxuY2xhc3MgRmllbGQge1xuICAgICAgLyoqXG4gICAgICogQHBhcmFtIGVuZ2luZUZvcm0ge0dTREsuRm9ybX07XG4gICAgICogQHBhcmFtIGVuZ2luZUZpZWxkIHtHU0RLLkZpZWxkfTtcbiAgICAgKiBAcGFyYW0gZW5naW5lIHtHU0RLfTtcbiAgICAgKiBAcGFyYW0gSlJcbiAgICAgKi9cbiAgY29uc3RydWN0b3IgKGVuZ2luZUZvcm0sIGVuZ2luZUZpZWxkLCBlbmdpbmUsIEpSKSB7XG4gICAgdGhpcy5lbmdpbmVGb3JtID0gZW5naW5lRm9ybTtcbiAgICB0aGlzLmVuZ2luZUZpZWxkID0gZW5naW5lRmllbGQ7XG4gICAgdGhpcy5lbmdpbmUgPSBlbmdpbmU7XG4gICAgdGhpcy5KUiA9IEpSO1xuICB9XG4gIHVwZGF0ZSAoa2V5LCB2YWx1ZSkge1xuICAgIGxldCBlbmdpbmVGaWVsZCA9IHRoaXMuZW5naW5lRmllbGQ7XG4gICAgbGV0IG9wdGlvbkFycmF5O1xuICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICBjYXNlICdhbGlnbic6XG4gICAgICAgIGVuZ2luZUZpZWxkLlNldEFsaWdubWVudCAoe3ZhbHVlOiB2YWx1ZX0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2ZsYWcnOlxuICAgICAgICBlbmdpbmVGaWVsZC5TZXRGbGFncyAodmFsdWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ21heExlbmd0aCc6XG4gICAgICAgIGVuZ2luZUZpZWxkLlNldE1heExlbmd0aCAodmFsdWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2RlZmF1bHRWYWx1ZSc6XG4gICAgICAgIGVuZ2luZUZpZWxkLlNldERlZmF1bHRWYWx1ZSAobmV3IHRoaXMuZW5naW5lLldTdHJpbmcgKHZhbHVlKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnY2xlYXJJdGVtcyc6XG4gICAgICAgIGxldCBvcHRzID0gbmV3IHRoaXMuZW5naW5lLkNob2ljZU9wdGlvbkFycmF5ICgpO1xuICAgICAgICBlbmdpbmVGaWVsZC5TZXRPcHRpb25zIChvcHRzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdkZWxldGVJdGVtcyc6XG4gICAgICAgIG9wdGlvbkFycmF5ID0gZW5naW5lRmllbGQuR2V0T3B0aW9ucyAoKTtcbiAgICAgICAgbGV0IG9wdGlvbnMgPSBuZXcgdGhpcy5lbmdpbmUuQ2hvaWNlT3B0aW9uQXJyYXkgKCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBqID0gb3B0aW9uQXJyYXkuR2V0U2l6ZSAoKTsgaSA8IGo7IGkrKykge1xuICAgICAgICAgIGxldCBvcHQgPSBvcHRpb25BcnJheS5HZXRBdCAoaSk7XG4gICAgICAgICAgaWYgKGkgIT0gdmFsdWUpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuQWRkIChvcHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgZmllbGRWYWx1ZSA9IGVuZ2luZUZpZWxkLkdldFZhbHVlICgpLnRvU3RyaW5nICgpO1xuICAgICAgICAgICAgaWYgKGZpZWxkVmFsdWUgPT0gb3B0Lm9wdGlvbl92YWx1ZS50b1N0cmluZyAoKSkge1xuICAgICAgICAgICAgICAvL2VuZ2luZUZpZWxkLlNldFZhbHVlKG5ldyB0aGlzLmVuZ2luZS5XU3RyaW5nKCcnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVuZ2luZUZpZWxkLlNldE9wdGlvbnMgKG9wdGlvbnMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2luc2VydEl0ZW1BdCc6XG4gICAgICAgIGxldCBuZXdPcHQgPSBuZXcgdGhpcy5lbmdpbmUuQ2hvaWNlT3B0aW9uICgpO1xuICAgICAgICBuZXdPcHQub3B0aW9uX3ZhbHVlID0gbmV3IHRoaXMuZW5naW5lLldTdHJpbmcgKHZhbHVlLnZhbHVlKTtcbiAgICAgICAgbmV3T3B0Lm9wdGlvbl9sYWJlbCA9IG5ldyB0aGlzLmVuZ2luZS5XU3RyaW5nICh2YWx1ZS5sYWJsZSk7XG4gICAgICAgIG5ld09wdC5zZWxlY3RlZCA9IHZhbHVlLnNlbGVjdGVkO1xuICAgICAgICBuZXdPcHQuZGVmYXVsdF9zZWxlY3RlZCA9IHZhbHVlLmRlZmF1bHRTZWxlY3RlZDtcbiAgICAgICAgb3B0aW9uQXJyYXkgPSBlbmdpbmVGaWVsZC5HZXRPcHRpb25zICgpO1xuICAgICAgICBvcHRpb25BcnJheS5JbnNlcnRBdCAodmFsdWUuaW5kZXgsIG5ld09wdCk7XG4gICAgICAgIGVuZ2luZUZpZWxkLlNldE9wdGlvbnMgKG9wdGlvbkFycmF5KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdhbHRlcm5hdGVOYW1lJzpcbiAgICAgICAgICBlbmdpbmVGaWVsZC5TZXRBbHRlcm5hdGVOYW1lKG5ldyB0aGlzLmVuZ2luZS5XU3RyaW5nKHZhbHVlKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0ZXh0Q29sb3InOlxuICAgICAgICBsZXQgZGEgPSBlbmdpbmVGaWVsZC5HZXREZWZhdWx0QXBwZWFyYW5jZSgpO1xuICAgICAgICBkYS50ZXh0X2NvbG9yID0gK3ZhbHVlO1xuICAgICAgICBlbmdpbmVGaWVsZC5TZXREZWZhdWx0QXBwZWFyYW5jZShkYSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnc2V0SXRlbXMnOlxuICAgICAgICAgIG9wdGlvbkFycmF5ID0gbmV3IHRoaXMuZW5naW5lLkNob2ljZU9wdGlvbkFycmF5ICgpO1xuICAgICAgICAgIHZhbHVlLm1hcChvcHRpb249PntcbiAgICAgICAgICAgIGxldCBnc2RrT3B0aW9uID0gbmV3IHRoaXMuZW5naW5lLkNob2ljZU9wdGlvbiAoKTtcbiAgICAgICAgICAgIGdzZGtPcHRpb24ub3B0aW9uX3ZhbHVlID0gbmV3IHRoaXMuZW5naW5lLldTdHJpbmcgKG9wdGlvbi52YWx1ZSk7XG4gICAgICAgICAgICBnc2RrT3B0aW9uLm9wdGlvbl9sYWJlbCA9IG5ldyB0aGlzLmVuZ2luZS5XU3RyaW5nIChvcHRpb24ubGFibGUpO1xuICAgICAgICAgICAgZ3Nka09wdGlvbi5zZWxlY3RlZCA9IG9wdGlvbi5zZWxlY3RlZDtcbiAgICAgICAgICAgIGdzZGtPcHRpb24uZGVmYXVsdF9zZWxlY3RlZCA9IG9wdGlvbi5kZWZhdWx0U2VsZWN0ZWQ7XG4gICAgICAgICAgICBvcHRpb25BcnJheS5BZGQoZ3Nka09wdGlvbik7XG4gICAgICAgICAgICBnc2RrT3B0aW9uLmRlbGV0ZSgpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgZW5naW5lRmllbGQuU2V0T3B0aW9ucyAob3B0aW9uQXJyYXkpO1xuICAgICAgICAgIGVuZ2luZUZpZWxkLlNldFZhbHVlKG5ldyB0aGlzLmVuZ2luZS5XU3RyaW5nKFwiXCIpKTtcbiAgICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBsZXQgY29udHJvbENvdW50ID0gZW5naW5lRmllbGQuR2V0Q29udHJvbENvdW50ICgpO1xuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBjb250cm9sQ291bnQ7IGluZGV4KyspIHtcbiAgICAgIGxldCBjb250cm9sID0gZW5naW5lRmllbGQuR2V0Q29udHJvbCAoaW5kZXgpO1xuICAgICAgbGV0IHdpZGdldCA9IGNvbnRyb2wuR2V0V2lkZ2V0ICgpO1xuICAgICAgd2lkZ2V0LlJlc2V0QXBwZWFyYW5jZVN0cmVhbSAoKTtcbiAgICB9XG4gIH1cbiAgc2V0VmFsdWUgKHZhbHVlKSB7XG4gICAgdGhpcy5lbmdpbmVGaWVsZC5TZXRWYWx1ZSAobmV3IHRoaXMuZW5naW5lLldTdHJpbmcgKHZhbHVlICsgJycpKTtcbiAgfVxuICBnZXRWYWx1ZSh2YWx1ZSl7XG4gICAgcmV0dXJuIHRoaXMuZW5naW5lRmllbGQuR2V0VmFsdWUoKS50b1N0cmluZygpO1xuICB9XG4gIHRvSnNvbiAoaW5kZXgpIHtcbiAgICB0cnkge1xuICAgICAgbGV0IGVuZ2luZUZpZWxkID0gdGhpcy5lbmdpbmVGaWVsZDtcbiAgICAgIGxldCBhbGlnbm1lbnQgPSBlbmdpbmVGaWVsZC5HZXRBbGlnbm1lbnQgKCkudmFsdWU7XG4gICAgICBsZXQgYWx0ZXJuYXRlTmFtZSA9IGVuZ2luZUZpZWxkLkdldEFsdGVybmF0ZU5hbWUgKCkudG9TdHJpbmcgKCk7XG5cbiAgICAgIGxldCBjb250cm9scyA9IFtdO1xuICAgICAgbGV0IGNvbnRyb2xDb3VudCA9IGVuZ2luZUZpZWxkLkdldENvbnRyb2xDb3VudCAoKTtcbiAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBjb250cm9sQ291bnQ7IGluZGV4KyspIHtcbiAgICAgICAgbGV0IGNvbnRyb2wgPSBlbmdpbmVGaWVsZC5HZXRDb250cm9sIChpbmRleCk7XG4gICAgICAgIGNvbnRyb2xzLnB1c2ggKG5ldyBQREZDb250cm9sIChjb250cm9sLCB0aGlzLmVuZ2luZSkudG9Kc29uICgpKTtcbiAgICAgIH1cblxuICAgICAgbGV0IGRlZmF1bHRBcCA9IGVuZ2luZUZpZWxkLkdldERlZmF1bHRBcHBlYXJhbmNlICgpO1xuXG4gICAgICBsZXQgZGVmYXVsdFZhbHVlID0gZW5naW5lRmllbGQuR2V0RGVmYXVsdFZhbHVlICgpLnRvU3RyaW5nICgpO1xuXG4gICAgICBsZXQgZmxhZyA9IGVuZ2luZUZpZWxkLkdldEZsYWdzICgpO1xuXG4gICAgICBsZXQgbWFwcGluZ05hbWUgPSBlbmdpbmVGaWVsZC5HZXRNYXBwaW5nTmFtZSAoKS50b1N0cmluZyAoKTtcblxuICAgICAgbGV0IG1heExlbmd0aCA9IGVuZ2luZUZpZWxkLkdldE1heExlbmd0aCAoKTtcblxuICAgICAgbGV0IG5hbWUgPSBlbmdpbmVGaWVsZC5HZXROYW1lICgpLnRvU3RyaW5nICgpO1xuXG4gICAgICBsZXQgb3B0aW9uQXJyYXkgPSBlbmdpbmVGaWVsZC5HZXRPcHRpb25zICgpO1xuICAgICAgbGV0IG9wdGlvbnMgPSBbXTtcblxuICAgICAgZm9yIChsZXQgaSA9IDAsIGogPSBvcHRpb25BcnJheS5HZXRTaXplICgpOyBpIDwgajsgaSsrKSB7XG4gICAgICAgIGxldCBvcHRpb24gPSBvcHRpb25BcnJheS5HZXRBdCAoaSk7XG4gICAgICAgIG9wdGlvbnMucHVzaCAoe1xuICAgICAgICAgIGxhYmxlOiBvcHRpb24ub3B0aW9uX2xhYmVsLnRvU3RyaW5nICgpLFxuICAgICAgICAgIHZhbHVlOiBvcHRpb24ub3B0aW9uX3ZhbHVlLnRvU3RyaW5nICgpLFxuICAgICAgICAgIHNlbGVjdGVkOiBvcHRpb24uc2VsZWN0ZWQsXG4gICAgICAgICAgZGVmYXVsdFNlbGVjdGVkOiBvcHRpb24uZGVmYXVsdF9zZWxlY3RlZCxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGxldCB0b3BWaXNpYmxlSW5kZXggPSBlbmdpbmVGaWVsZC5HZXRUb3BWaXNpYmxlSW5kZXggKCk7XG5cbiAgICAgIGxldCB0eXBlID0gZW5naW5lRmllbGQuR2V0VHlwZSAoKS52YWx1ZTtcblxuICAgICAgbGV0IHZhbHVlID0gZW5naW5lRmllbGQuR2V0VmFsdWUgKCkudG9TdHJpbmcgKCk7XG5cbiAgICAgIGxldCBpc0VtcHR5ID0gZW5naW5lRmllbGQuSXNFbXB0eSAoKTtcblxuICAgICAgbGV0IGpzb25BQSA9IHt9O1xuICAgICAgbGV0IGZpZWxkRGljdCA9IGVuZ2luZUZpZWxkLkdldERpY3QgKCk7XG4gICAgICBsZXQgQUFPYmogPSBmaWVsZERpY3QuR2V0RWxlbWVudCAobmV3IHRoaXMuZW5naW5lLlN0cmluZyAoJ0FBJykpO1xuXG4gICAgICBpZiAoQUFPYmopIHtcbiAgICAgICAgdHJ5e1xuICAgICAgICAgIGlmKEFBT2JqLkdldFR5cGUgKCkudmFsdWUgPT0gOSApe1xuICAgICAgICAgICAgQUFPYmogPSBBQU9iai5HZXREaXJlY3RPYmplY3QoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGV0IEFBRGljdCA9IEFBT2JqLkdldERpY3QgKCk7XG4gIFxuICAgICAgICAgIGxldCBBQSA9IG5ldyB0aGlzLmVuZ2luZS5BZGRpdGlvbmFsQWN0aW9uIChcbiAgICAgICAgICAgIHRoaXMuZW5naW5lRm9ybS5HZXREb2N1bWVudCAoKSxcbiAgICAgICAgICAgIEFBRGljdFxuICAgICAgICAgICk7XG4gIFxuICAgICAgICAgIGxldCB0cmlnZ2VycyA9IFtcbiAgICAgICAgICAgIHRoaXMuZW5naW5lLlRyaWdnZXJFdmVudC5lX1RyaWdnZXJGaWVsZEtleVN0cm9rZSxcbiAgICAgICAgICAgIHRoaXMuZW5naW5lLlRyaWdnZXJFdmVudC5lX1RyaWdnZXJGaWVsZFdpbGxGb3JtYXQsXG4gICAgICAgICAgICB0aGlzLmVuZ2luZS5UcmlnZ2VyRXZlbnQuZV9UcmlnZ2VyRmllbGRWYWx1ZUNoYW5nZWQsXG4gICAgICAgICAgICB0aGlzLmVuZ2luZS5UcmlnZ2VyRXZlbnQuZV9UcmlnZ2VyRmllbGRSZWNhbGN1bGF0ZVZhbHVlLFxuICAgICAgICAgICAgdGhpcy5lbmdpbmUuVHJpZ2dlckV2ZW50LmVfVHJpZ2dlckFubm90Q3Vyc29yRW50ZXIsXG4gICAgICAgICAgICB0aGlzLmVuZ2luZS5UcmlnZ2VyRXZlbnQuZV9UcmlnZ2VyQW5ub3RDdXJzb3JFeGl0LFxuICAgICAgICAgICAgdGhpcy5lbmdpbmUuVHJpZ2dlckV2ZW50LmVfVHJpZ2dlckFubm90TW91c2VCdXR0b25QcmVzc2VkLFxuICAgICAgICAgICAgdGhpcy5lbmdpbmUuVHJpZ2dlckV2ZW50LmVfVHJpZ2dlckFubm90TW91c2VCdXR0b25SZWxlYXNlZCxcbiAgICAgICAgICAgIHRoaXMuZW5naW5lLlRyaWdnZXJFdmVudC5lX1RyaWdnZXJBbm5vdFJlY2VpdmVJbnB1dEZvY3VzLFxuICAgICAgICAgICAgdGhpcy5lbmdpbmUuVHJpZ2dlckV2ZW50LmVfVHJpZ2dlckFubm90TG9zZUlucHV0Rm9jdXMsXG4gICAgICAgICAgXTtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRyaWdnZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgQSA9IEFBLkdldEFjdGlvbiAodHJpZ2dlcnNbaV0pO1xuICAgICAgICAgICAgaWYgKCFBLklzRW1wdHkgKCkpXG4gICAgICAgICAgICAgIGpzb25BQVt0cmlnZ2Vyc1tpXS52YWx1ZV0gPSB0aGlzLkpSLmFjdGlvbk1hbmFnZXJcbiAgICAgICAgICAgICAgICAuZ2V0IChBLCB0aGlzKVxuICAgICAgICAgICAgICAgIC50b0pzb24gKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9Y2F0Y2goZSl7XG5cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGV0IGZvbnROYW1lPSAnJztcbiAgICAgIHRyeXtcbiAgICAgICAgaWYoIWRlZmF1bHRBcC5mb250LklzRW1wdHkoKSlcbiAgICAgICAgICBmb250TmFtZSA9IGRlZmF1bHRBcC5mb250LkdldE5hbWUgKCkudG9TdHJpbmcgKCk7XG4gICAgICB9Y2F0Y2goZXJyKXtcbiAgICAgICAgaWYgKCFpc05hTiAoZXJyKSkge1xuICAgICAgICAgIGVyciA9IHRoaXMuZW5naW5lLmdldEVycm9yQ29kZSAoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLndhcm4gKGVycik7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBhbGlnbm1lbnQsXG4gICAgICAgIGFsdGVybmF0ZU5hbWUsXG4gICAgICAgIGNvbnRyb2xzLFxuICAgICAgICBEQToge1xuICAgICAgICAgIGZsYWdzOiBkZWZhdWx0QXAuZmxhZ3MsXG4gICAgICAgICAgZm9udE5hbWU6IGZvbnROYW1lLFxuICAgICAgICAgIHRleHRDb2xvcjogZGVmYXVsdEFwLnRleHRfY29sb3IsXG4gICAgICAgICAgdGV4dFNpemU6IGRlZmF1bHRBcC50ZXh0X3NpemUsXG4gICAgICAgIH0sXG4gICAgICAgIGRlZmF1bHRWYWx1ZSxcbiAgICAgICAgZmxhZyxcbiAgICAgICAgbWFwcGluZ05hbWUsXG4gICAgICAgIG1heExlbmd0aCxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgdG9wVmlzaWJsZUluZGV4LFxuICAgICAgICB0eXBlLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgaXNFbXB0eSxcbiAgICAgICAgQUE6IGpzb25BQSxcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBpZiAoIWlzTmFOIChlcnIpKSB7XG4gICAgICAgIGVyciA9IHRoaXMuZW5naW5lLmdldEVycm9yQ29kZSAoZXJyKTtcbiAgICAgIH1cbiAgICAgIGNvbnNvbGUud2FybiAoZXJyKTtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IEZpZWxkO1xuIiwiaW1wb3J0IFBERkZpZWxkIGZyb20gJy4vRmllbGQnO1xuaW1wb3J0IERlZmF1bHRBUCBmcm9tICcuLi9zaGFyZS9EZWZhdWx0QVAnO1xuaW1wb3J0IExvZ2dlckZhY3RvcnkgZnJvbSAnLi4vLi4vc2hhcmVkL2xvZ2dlci9Mb2dnZXJGYWN0b3J5JztcblxuY29uc3QgbG9nZ2VyID0gTG9nZ2VyRmFjdG9yeS5nZXRMb2dnZXIoJ3BkZi1qci5Gb3JtJyk7XG5cbmNsYXNzIFBERkZvcm0ge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBlbmdpbmVGb3JtIHtHU0RLLkZvcm19O1xuICAgICAqIEBwYXJhbSBlbmdpbmUge0dTREt9O1xuICAgICAqIEBwYXJhbSBKUlxuICAgICAqL1xuICBjb25zdHJ1Y3RvciAoZW5naW5lRm9ybSwgZW5naW5lLEpSKSB7XG4gICAgdGhpcy5lbmdpbmVGb3JtID0gZW5naW5lRm9ybTtcbiAgICB0aGlzLmVuZ2luZSA9IGVuZ2luZTtcbiAgICB0aGlzLkpSPUpSO1xuXG4gICAgbGV0IGFzc2lzdENhbGxiYWNrID0ge1xuICAgICAgRm9jdXNHb3RPbkNvbnRyb2w6Xz0+e1xuICAgICAgfSxcbiAgICAgIEZvY3VzTG9zdEZyb21Db250cm9sOl89PntcbiAgICAgIH0sXG4gICAgICBHZXRWZXJzaW9uOl89Pnt9LFxuICAgICAgS2lsbFRpbWVyOl89Pnt9LFxuICAgICAgUmVmcmVzaDpfPT57fSxcbiAgICAgIFJlbGVhc2U6Xz0+e30sXG4gICAgICBTZXRUaW1lckNhbGxiYWNrOl89Pnt9LFxuICAgIH1cbiAgICAvLyB0aGlzLmZpbGxlciA9IG5ldyBlbmdpbmUuRmlsbGVyKGVuZ2luZUZvcm0sZW5naW5lLkZpbGxlckFzc2lzdENhbGxiYWNrLmltcGxlbWVudChhc3Npc3RDYWxsYmFjaykpO1xuICAgIC8vIHRoaXMuZmlsbGVyLkhpZ2hsaWdodEZvcm1GaWVsZHMoZmFsc2UpXG4gIH1cbiAgZ2V0RmllbGQodGl0bGUpe1xuICAgIHJldHVybiB0aGlzLmZpZWxkc1t0aXRsZV07XG4gIH1cbiAgZmlsbCh0eXBlLCBwYWdlLHBvaW50KXtcbiAgICBsZXQgUERGUG9pbnQgPSBuZXcgdGhpcy5lbmdpbmUuUG9pbnRGKHBvaW50LngscG9pbnQueSk7XG5cbiAgICBzd2l0Y2godHlwZSl7XG4gICAgICBjYXNlICdMQnV0dG9uRG93bic6XG4gICAgICAvLyB0aGlzLmZpbGxlci5PbkxCdXR0b25Eb3duKHBhZ2UucGFnZSxQREZQb2ludCwwKTtcbiAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnTEJ1dHRvblVwJzpcbiAgICAgIC8vIHRoaXMuZmlsbGVyLk9uTEJ1dHRvblVwKHBhZ2UucGFnZSxQREZQb2ludCwwKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICAvLyB0aGlzLmZpbGxlci5LaWxsRm9jdXMoKTtcbiAgfVxuICBnZXRGaWVsZHNWYWx1ZSgpe1xuICAgIGxldCBqc29uPXt9XG4gICAgZm9yKGxldCB0aXRsZSBpbiB0aGlzLmZpZWxkcyl7XG4gICAgICBqc29uW3RpdGxlXT10aGlzLmZpZWxkc1t0aXRsZV0uZ2V0VmFsdWUoKTtcbiAgICB9XG4gICAgcmV0dXJuIGpzb247XG4gIH1cbiAgdG9Kc29uICgpIHtcbiAgICBsZXQgZW5naW5lRm9ybSA9IHRoaXMuZW5naW5lRm9ybTtcbiAgICBsZXQgbmVlZENvbnN0cnVjdEFwcGVhcmFuY2VzID0gZW5naW5lRm9ybS5OZWVkQ29uc3RydWN0QXBwZWFyYW5jZXMgKCk7XG5cbiAgICBsZXQgZmlsdGVyID0gbmV3IHRoaXMuZW5naW5lLldTdHJpbmcgKCcnKTtcbiAgICBsZXQgZmllbGRDb3VudCA9IGVuZ2luZUZvcm0uR2V0RmllbGRDb3VudCAoZmlsdGVyKTtcblxuICAgIGxldCBmaWVsZHMgPSBbXTtcbiAgICB0aGlzLmZpZWxkcyA9IHRoaXMuZmllbGRzfHx7fTtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgZmllbGRDb3VudDsgaW5kZXgrKykge1xuICAgICAgdHJ5e1xuICAgICAgICBsZXQgZmllbGQgPSBlbmdpbmVGb3JtLkdldEZpZWxkIChpbmRleCwgZmlsdGVyKTtcbiAgICAgICAgbGV0IHR5cGUgPSBmaWVsZC5HZXRUeXBlKCk7XG4gICAgICAgIGxldCBqckZpZWxkID0gbmV3IFBERkZpZWxkIChlbmdpbmVGb3JtLCBmaWVsZCwgdGhpcy5lbmdpbmUsdGhpcy5KUik7XG4gICAgICAgIGxldCBqc29uID0ganJGaWVsZC50b0pzb24gKGluZGV4KTtcbiAgICAgICAgdGhpcy5maWVsZHNbanNvbi5uYW1lfHxpbmRleF0gPSBqckZpZWxkO1xuICAgICAgICBmaWVsZHMucHVzaCAoanNvbik7XG4gICAgICB9Y2F0Y2goZSl7XG4gICAgICAgIGZpZWxkcy5wdXNoICh7fSk7XG4gICAgICAgIHRoaXMuZmllbGRzW2luZGV4XSA9IHt9O1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBmaWVsZEFycmF5ID0gZW5naW5lRm9ybS5HZXRGaWVsZHNJbkNhbGN1bGF0aW9uT3JkZXIgKCk7XG4gICAgbGV0IGNhbGN1bGF0aW9uT3JkZXIgPSBbXTtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgZmllbGRBcnJheS5HZXRTaXplICgpOyBpbmRleCsrKSB7XG4gICAgICBsZXQgZmllbGQgPSBmaWVsZEFycmF5LkdldEF0IChpbmRleCk7XG4gICAgICBjYWxjdWxhdGlvbk9yZGVyLnB1c2ggKGZpZWxkLkdldE5hbWUgKCkudG9TdHJpbmcgKCkpO1xuICAgIH1cblxuICAgIGxldCBkZWZhdWx0QXAgPSBlbmdpbmVGb3JtLkdldERlZmF1bHRBcHBlYXJhbmNlICgpO1xuXG4gICAgbGV0IGFsaWdubWVudCA9IGVuZ2luZUZvcm0uR2V0QWxpZ25tZW50KCk7XG5cbiAgICBsZXQgZm9udE5hbWU9ICcnO1xuICAgICAgdHJ5e1xuICAgICAgICBpZighZGVmYXVsdEFwLmZvbnQuSXNFbXB0eSgpKVxuICAgICAgICAgIGZvbnROYW1lID0gZGVmYXVsdEFwLmZvbnQuR2V0TmFtZSAoKS50b1N0cmluZyAoKTtcbiAgICAgIH1jYXRjaChlKXtcbiAgICAgICAgbG9nZ2VyLmVycm9yKCdmb250IG5hbWUgZXJyb3InKTtcbiAgICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBuZWVkQ29uc3RydWN0QXBwZWFyYW5jZXMsXG4gICAgICBmaWVsZHMsXG4gICAgICBEZWZhdWx0QXBwZWFyYW5jZToge1xuICAgICAgICBmbGFnczogZGVmYXVsdEFwLmZsYWdzLFxuICAgICAgICBmb250TmFtZTogZm9udE5hbWUsXG4gICAgICAgIHRleHRDb2xvcjogZGVmYXVsdEFwLnRleHRfY29sb3IsXG4gICAgICAgIHRleHRTaXplOiBkZWZhdWx0QXAudGV4dF9TaXplLFxuICAgICAgfSxcbiAgICAgIGNhbGN1bGF0aW9uT3JkZXIsXG4gICAgICBhbGlnbm1lbnRcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBERkZvcm07XG4iLCJjbGFzcyBQREZCb29rbWFyayB7XG4gICAgY29uc3RydWN0b3IoZW5naW5lLCBpZCwgY19ib29rbWFyaywgY19kb2MsIGRlZXAgPSAtMSkge1xuICAgICAgICB0aGlzLmVuZ2luZSA9IGVuZ2luZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLmNfYm9va21hcmsgPSBjX2Jvb2ttYXJrO1xuICAgICAgICB0aGlzLmNfZG9jID0gY19kb2M7XG4gICAgICAgIHRoaXMudGl0bGUgPSBjX2Jvb2ttYXJrLkdldFRpdGxlKCkudG9TdHJpbmcoKTtcbiAgICAgICAgbGV0IGNvbG9yMTYgPSB0aGlzLmNfYm9va21hcmsuR2V0Q29sb3IoKS50b1N0cmluZygxNik7XG4gICAgICAgIHRoaXMuY29sb3IgPSAnIycgKyBjb2xvcjE2LnN1YnN0cigyKTtcbiAgICAgICAgbGV0IHN0eWxlID0gdGhpcy5jX2Jvb2ttYXJrLkdldFN0eWxlKCk7XG4gICAgICAgIHRoaXMuaXNJdGFsaWMgPSBzdHlsZSAmIDBiMDE7XG4gICAgICAgIHRoaXMuaXNCb2xkID0gc3R5bGUgJiAwYjEwO1xuICAgICAgICB0aGlzLmNfZGVzdGluYXRpb24gPSBjX2Jvb2ttYXJrLkdldERlc3RpbmF0aW9uKCk7XG4gICAgICAgIHRoaXMuZGVlcCA9IGRlZXA7XG4gICAgICAgIGxldCBpc0VtcHR5ID0gdGhpcy5jX2Rlc3RpbmF0aW9uLklzRW1wdHkoKTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgICAgICBpZihpc0VtcHR5KXtcbiAgICAgICAgICAgIHRoaXMucGFnZUluZGV4ID0gMDtcbiAgICAgICAgICAgIHRoaXMucGFnZVRvcCA9IDA7XG4gICAgICAgICAgICB0aGlzLnBhZ2VMZWZ0ID0gMDtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBsZXQgcGFnZUluZGV4ID0gdGhpcy5jX2Rlc3RpbmF0aW9uLkdldFBhZ2VJbmRleCh0aGlzLmNfZG9jKTtcbiAgICAgICAgICAgIGxldCBwYWdlVG9wID0gdGhpcy5jX2Rlc3RpbmF0aW9uLkdldFRvcCgpO1xuICAgICAgICAgICAgbGV0IHBhZ2VMZWZ0ID0gdGhpcy5jX2Rlc3RpbmF0aW9uLkdldExlZnQoKTtcbiAgICAgICAgICAgIHRoaXMucGFnZUluZGV4ID0gcGFnZUluZGV4O1xuICAgICAgICAgICAgdGhpcy5wYWdlVG9wID0gcGFnZVRvcDtcbiAgICAgICAgICAgIHRoaXMucGFnZUxlZnQgPSBwYWdlTGVmdDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpbnNlcnQodGl0bGUsIHBhZ2VJbmRleCwgZGVzdGluYXRpb24pe1xuICAgICAgICBsZXQgd3NfdGl0bGUgPSBuZXcgdGhpcy5lbmdpbmUuV1N0cmluZyh0aXRsZSk7XG4gICAgICAgIGxldCBuZXdfYm9va21hcmsgPSB0aGlzLmNfYm9va21hcmsuSW5zZXJ0KHdzX3RpdGxlLCB0aGlzLmVuZ2luZS5Cb29rbWFya1Bvc2l0aW9uLmVfUG9zTGFzdENoaWxkKTtcbiAgICAgICAgdHJ5e1xuICAgICAgICAgICAgbGV0IHBhZ2UgPSB0aGlzLmNfZG9jLkdldFBhZ2UocGFnZUluZGV4KTtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLnRvcCA9IE1hdGgubWF4KDAsIHBhZ2UuR2V0SGVpZ2h0KCkgLSBkZXN0aW5hdGlvbi50b3ApO1xuICAgICAgICB9Y2F0Y2goZSl7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNfZGVzdGluYXRpb24gPSBuZXcgdGhpcy5lbmdpbmUuRGVzdGluYXRpb24uQ3JlYXRlWFlaKHRoaXMuY19kb2MsIHBhZ2VJbmRleCwgZGVzdGluYXRpb24ubGVmdCwgZGVzdGluYXRpb24udG9wLCAxKTtcbiAgICAgICAgbmV3X2Jvb2ttYXJrLlNldERlc3RpbmF0aW9uKGNfZGVzdGluYXRpb24pO1xuICAgICAgICBsZXQgaWQ7XG4gICAgICAgIGxldCBjaGlsZHJlbkNvdW50ID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7XG4gICAgICAgIGlmKHRoaXMuaWQgPT09IFwiXCIpe1xuICAgICAgICAgICAgaWQgPSBjaGlsZHJlbkNvdW50ICsgXCJcIjtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBpZCA9IHRoaXMuaWQgKyBcIi1cIiArIGNoaWxkcmVuQ291bnQ7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGJvb2ttYXJrID0gbmV3IFBERkJvb2ttYXJrKHRoaXMuZW5naW5lLCBpZCwgbmV3X2Jvb2ttYXJrLCB0aGlzLmNfZG9jLCB0aGlzLmRlZXAgKzEpO1xuICAgICAgICByZXR1cm4gYm9va21hcms7XG4gICAgfVxuICAgIGdldEJvb2ttYXJrQnlJZChpZCl7XG4gICAgICAgIGlkID0gaWQudG9TdHJpbmcoKTtcbiAgICAgICAgaWYoaWQgPT09IFwiXCIpIHJldHVybiB0aGlzO1xuICAgICAgICBpZihpZC5pbmRleE9mKHRoaXMuaWQpICE9PSAwKSByZXR1cm4gbnVsbDtcblxuICAgICAgICBpZih0aGlzLmlkICE9PSBcIlwiKXtcbiAgICAgICAgICAgIGlkID09IGlkLnN1YnN0cih0aGlzLmlkLmxlbmd0aCsxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBpZHMgPSBpZC5zcGxpdChcIi1cIik7XG4gICAgICAgIHRyeXtcbiAgICAgICAgICAgIGxldCBib29rbWFyayA9IHRoaXM7XG4gICAgICAgICAgICBmb3IobGV0IGkgPTA7IGk8IGlkcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgYm9va21hcmsgPSBib29rbWFyay5jaGlsZHJlbltpZHNbaV1dO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGJvb2ttYXJrO1xuICAgICAgICB9Y2F0Y2goZSl7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZW1vdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNfZG9jLlJlbW92ZUJvb2ttYXJrKHRoaXMuY19ib29rbWFyayk7XG4gICAgfVxuICAgIHNldFByb3BlcnR5KHByb3BlcnRpZXMpe1xuICAgICAgICBmb3IobGV0IHByb3BlcnR5IGluIHByb3BlcnRpZXMpe1xuICAgICAgICAgICAgaWYocHJvcGVydHkgPT0gXCJ0aXRsZVwiKXtcbiAgICAgICAgICAgICAgICBsZXQgdGl0bGUgPSBuZXcgdGhpcy5lbmdpbmUuV1N0cmluZyhwcm9wZXJ0aWVzW3Byb3BlcnR5XSk7XG4gICAgICAgICAgICAgICAgdGhpcy5jX2Jvb2ttYXJrLlNldFRpdGxlKHRpdGxlKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRpdGxlID0gdGhpcy5jX2Jvb2ttYXJrLkdldFRpdGxlKCkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH1lbHNlIGlmKHByb3BlcnR5ID09IFwic3R5bGVcIil7XG4gICAgICAgICAgICAgICAgdGhpcy5jX2Jvb2ttYXJrLlNldFN0eWxlKHByb3BlcnRpZXNbcHJvcGVydHldKTtcbiAgICAgICAgICAgICAgICBsZXQgc3R5bGUgPSB0aGlzLmNfYm9va21hcmsuR2V0U3R5bGUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmlzSXRhbGljID0gc3R5bGUgJiAwYjAxO1xuICAgICAgICAgICAgICAgIHRoaXMuaXNCb2xkID0gc3R5bGUgJiAwYjEwO1xuICAgICAgICAgICAgfWVsc2UgaWYocHJvcGVydHkgPT0gXCJjb2xvclwiKXtcbiAgICAgICAgICAgICAgICB0aGlzLmNfYm9va21hcmsuU2V0Q29sb3IocHJvcGVydGllc1twcm9wZXJ0eV0pO1xuICAgICAgICAgICAgICAgIGxldCBjb2xvcjE2ID0gdGhpcy5jX2Jvb2ttYXJrLkdldENvbG9yKCkudG9TdHJpbmcoMTYpO1xuICAgICAgICAgICAgICAgIHRoaXMuY29sb3IgPSAnIycgKyBjb2xvcjE2LnN1YnN0cigyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICB0b0pzb24gKCkge1xuICAgICAgICBpZih0aGlzLmNfYm9va21hcmsuSXNFbXB0eSgpKXtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgaWYodGhpcy5jX2Jvb2ttYXJrLkhhc0NoaWxkKCkpe1xuICAgICAgICAgICAgbGV0IGZpcnN0X2NoaWxkX2Jvb2ttYXJrID0gdGhpcy5jX2Jvb2ttYXJrLkdldEZpcnN0Q2hpbGQoKTtcbiAgICAgICAgICAgIGxldCBjX25leHQgPSBmaXJzdF9jaGlsZF9ib29rbWFyaztcbiAgICAgICAgICAgIGxldCBpbmRleCA9IDA7XG4gICAgICAgICAgICB3aGlsZSghY19uZXh0LklzRW1wdHkoKSl7XG4gICAgICAgICAgICAgICAgbGV0IGlkO1xuICAgICAgICAgICAgICAgIGlmKHRoaXMuaWQgPT09IFwiXCIpe1xuICAgICAgICAgICAgICAgICAgICBpZCA9IGluZGV4ICsgXCJcIjtcbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgaWQgPSB0aGlzLmlkICsgXCItXCIgKyBpbmRleDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IGJvb2ttYXJrID0gbmV3IFBERkJvb2ttYXJrKHRoaXMuZW5naW5lLCBpZCwgY19uZXh0LCB0aGlzLmNfZG9jLCB0aGlzLmRlZXAgKzEpO1xuICAgICAgICAgICAgICAgIGNfbmV4dCA9IGNfbmV4dC5HZXROZXh0U2libGluZygpO1xuICAgICAgICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChib29rbWFyay50b0pzb24oKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGJvb2ttYXJrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyB0aGlzLmRlbGV0ZSgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWQ6IHRoaXMuaWQsXG4gICAgICAgICAgICAvLyBwb3NpdGlvbjogdGhpcy5jX2Jvb2ttYXJrLnBvc2l0aW9uLFxuICAgICAgICAgICAgLy8gc3R5bGU6IHRoaXMuY19ib29rbWFyay5zdHlsZSxcbiAgICAgICAgICAgIGRlZXA6dGhpcy5kZWVwLFxuICAgICAgICAgICAgdGl0bGU6dGhpcy50aXRsZSxcbiAgICAgICAgICAgIGNvbG9yOnRoaXMuY29sb3IsXG4gICAgICAgICAgICBpc0JvbGQ6dGhpcy5pc0JvbGQsXG4gICAgICAgICAgICBpc0l0YWxpYzp0aGlzLmlzSXRhbGljLFxuICAgICAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgICAgICAgICAgcGFnZTp0aGlzLnBhZ2VJbmRleCxcbiAgICAgICAgICAgIHRvcDogdGhpcy5wYWdlVG9wLFxuICAgICAgICAgICAgbGVmdDogdGhpcy5wYWdlTGVmdFxuICAgICAgICAgICAgLy8gcGFnZUluZGV4OiB0aGlzLmNfZGVzdGluYXRpb24uR2V0UGFnZUluZGV4KHRoaXMuY19kb2MpLFxuICAgICAgICAgICAgLy8gdG9wOiB0aGlzLmNfZGVzdGluYXRpb24uR2V0VG9wKCksXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZGVsZXRlICgpe1xuICAgICAgICB0aGlzLmNfZGVzdGluYXRpb24uZGVsZXRlKCk7XG4gICAgICAgIHRoaXMuY19ib29rbWFyay5kZWxldGUoKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBERkJvb2ttYXJrOyIsIi8qKlxuICogQ3JlYXRlZCBieSBsaW5jIG9uIDIwMTgvNi8yOC5cbiAqL1xuaW1wb3J0IGdldFVuaXF1ZUlkIGZyb20gJy4uL3NoYXJlZC9nZXRVbmlxdWVJZC5qcyc7XG5pbXBvcnQgY3JlYXRlRGVmZXJyZWQgZnJvbSAnLi4vc2hhcmVkL2NyZWF0ZURlZmVycmVkLmpzJztcbmltcG9ydCBQREZQYWdlIGZyb20gJy4vUERGUGFnZS5qcyc7XG5pbXBvcnQgQnVmZmVyQmxvY2sgZnJvbSAnLi9CdWZmZXJCbG9jay5qcyc7XG5pbXBvcnQgUERGQm9va21hcmsgZnJvbSAnLi9QREZCb29rbWFyay5qcyc7XG5pbXBvcnQgUERGTGF5ZXIgZnJvbSAnLi9QREZMYXllci5qcyc7XG5pbXBvcnQganJGb3JtIGZyb20gJy4uL3BkZi1qci9Gb3JtL0Zvcm0nXG5pbXBvcnQgTG9nZ2VyRmFjdG9yeSBmcm9tICcuLi9zaGFyZWQvbG9nZ2VyL0xvZ2dlckZhY3RvcnkuanMnO1xuaW1wb3J0IGNpcGhlclR5cGUgZnJvbSBcIi4uL3NoYXJlZC9jaXBoZXJUeXBlXCI7XG5pbXBvcnQgUERGT2JqZWN0IGZyb20gXCIuL29iamVjdC9QREZPYmplY3RcIjtcbmxldCBub29wID0gZnVuY3Rpb24oKXt9O1xubGV0IGlzbG9hZCA9IGZhbHNlO1xuXG5jb25zdCBsb2dnZXIgPSBMb2dnZXJGYWN0b3J5LmdldExvZ2dlcigncGRmLWpyLlBERkRvYycpO1xuLyoqXG4gKiDmlofmoaPlr7nosaFcbiAqIEBjbGFzc1xuICovXG5jbGFzcyBQREZEb2Mge1xuICAgIGNvbnN0cnVjdG9yIChKUiwge1xuICAgICAgICBnZXRCdWZmZXIsXG4gICAgICAgIHNpemUsXG4gICAgICAgIHJlbGVhc2UgPSBub29wLFxuICAgICAgICBhc3luYyA9IGZhbHNlLFxuICAgICAgICBpc0NyZWF0ZSA9IGZhbHNlLFxuICAgIH0pIHtcbiAgICAgICAgdGhpcy5kb2NEZWZlcnJlZCA9IGNyZWF0ZURlZmVycmVkKCk7XG4gICAgICAgIHRoaXMuZG9jUHJvbWlzZSA9IHRoaXMuZG9jRGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgbGV0IGRvY1NpemUgPSBzaXplO1xuICAgICAgICB0aGlzLmlkID0gZ2V0VW5pcXVlSWQoJ3BkZl9kb2MnKTtcbiAgICAgICAgdGhpcy5KUiA9IEpSO1xuICAgICAgICAvKipcbiAgICAgICAgICogQHR5cGUgR1NES1xuICAgICAgICAgKi9cbiAgICAgICAgbGV0IGVuZ2luZSA9IHRoaXMuZW5naW5lID0gSlIuZW5naW5lO1xuICAgICAgICB0aGlzLmFzeW5jID0gYXN5bmM7XG4gICAgICAgIGxldCByZWFkZXJDYWxsYmFjaztcbiAgICAgICAgdGhpcy5yZWFkZXJCbG9ja0xvYWRpbmcgPSAwO1xuICAgICAgICB0aGlzLnBkZlRyZWU7XG5cbiAgICAgICAgaWYoaXNDcmVhdGUpe1xuICAgICAgICAgICAgdGhpcy5kb2MgPSBuZXcgZW5naW5lLlBERkRvYygpO1xuICAgICAgICAgICAgdGhpcy5kb2NEZWZlcnJlZC5yZXNvbHZlKHRoaXMuZG9jKTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBpZiAoYXN5bmMpIHtcbiAgICAgICAgICAgICAgICBsZXQgYXN5bmNCbG9jayA9IHRoaXMuYXN5bmNCbG9jayA9IG5ldyBCdWZmZXJCbG9jayhzaXplKTtcbiAgICAgICAgICAgICAgICByZWFkZXJDYWxsYmFjayA9IGVuZ2luZS5Bc3luY1JlYWRlckNhbGxiYWNrLmltcGxlbWVudCh7XG4gICAgICAgICAgICAgICAgICAgIFJlbGVhc2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbGVhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgR2V0U2l6ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvY1NpemU7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFJlYWRCbG9jazogKGJ1ZmZlciwgb2Zmc2V0LCBzaXplKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWFzeW5jQmxvY2suYXZhaWwob2Zmc2V0LCBzaXplKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYXN5bmNCbG9jay5jaGVja0xvYWRCdWZmZXIob2Zmc2V0LCBzaXplKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3luY0Jsb2NrLmxvYWRpbmdCdWZmZXIob2Zmc2V0LCBzaXplKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWFkZXJCbG9ja0xvYWRpbmcrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0QnVmZmVyKG9mZnNldCwgc2l6ZSkudGhlbigoYnVmZmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3luY0Jsb2NrLmFkZEJ1ZmZlcihvZmZzZXQsIHNpemUsIGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlYWRlckJsb2NrTG9hZGluZy0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFzeW5jQnVmZmVyID0gYXN5bmNCbG9jay5nZXRCdWZmZXIob2Zmc2V0LCBzaXplKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYXN5bmNCdWZmZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWFzeW5jQmxvY2suY2hlY2tMb2FkQnVmZmVyKG9mZnNldCwgc2l6ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXN5bmNCbG9jay5sb2FkaW5nQnVmZmVyKG9mZnNldCwgc2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVhZGVyQmxvY2tMb2FkaW5nKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldEJ1ZmZlcihvZmZzZXQsIHNpemUpLnRoZW4oKGJ1ZmZlcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXN5bmNCbG9jay5hZGRCdWZmZXIob2Zmc2V0LCBzaXplLCBidWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWFkZXJCbG9ja0xvYWRpbmctLTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzcmMgPSBuZXcgVWludDhBcnJheShhc3luY0J1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbmdpbmUuSEVBUFU4LnNldChzcmMsIGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgSXNEYXRhQXZhaWw6IGZ1bmN0aW9uIChvZmZzZXQsIHNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhdmFpbCA9IGFzeW5jQmxvY2suYXZhaWwob2Zmc2V0LCBzaXplKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhdmFpbDtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgQWRkRG93bmxvYWRIaW50OiAob2Zmc2V0LCBzaXplKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDlpJrpooTlhYjkuIvovb0yTeaVsOaNriAyMDk3MTUyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbW9yZSA9IDIwOTcxNTI7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWF4U2l6ZSA9IG9mZnNldCArIHNpemUgKyBtb3JlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1heFNpemUgPj0gZG9jU2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heFNpemUgPSBkb2NTaXplIC0gb2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhTaXplID0gc2l6ZSArIG1vcmU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXN5bmNCbG9jay5jaGVja0xvYWRCdWZmZXIob2Zmc2V0LCBzaXplKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFzeW5jQmxvY2suYXZhaWwob2Zmc2V0LCBzaXplKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYXN5bmNCbG9jay5sb2FkaW5nQnVmZmVyKG9mZnNldCwgbWF4U2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlYWRlckJsb2NrTG9hZGluZysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0QnVmZmVyKG9mZnNldCwgbWF4U2l6ZSkudGhlbigoYnVmZmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXN5bmNCbG9jay5hZGRCdWZmZXIob2Zmc2V0LCBtYXhTaXplLCBidWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVhZGVyQmxvY2tMb2FkaW5nLS07XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlYWRlckNhbGxiYWNrID0gZW5naW5lLlJlYWRlckNhbGxiYWNrLmltcGxlbWVudCh7XG4gICAgICAgICAgICAgICAgICAgIFJlbGVhc2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbGVhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgR2V0U2l6ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvY1NpemU7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFJlYWRCbG9jazogKGJ1ZmZlciwgb2Zmc2V0LCBzaXplKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3JjID0gbmV3IFVpbnQ4QXJyYXkoZ2V0QnVmZmVyKG9mZnNldCwgc2l6ZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZW5naW5lLkhFQVBVOC5zZXQoc3JjLCBidWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQHR5cGUgR1NESy5QREZEb2NcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5kb2MgPSBlbmdpbmUuY3JlYXRlUERGRG9jV2l0aFJlYWRlckNhbGxiYWNrKHJlYWRlckNhbGxiYWNrLCBhc3luYyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wYWdlQ2FjaGUgPSB7fTtcbiAgICAgICAgdGhpcy5wYWdlSW5kZXhNYXAgPSB7fTtcbiAgICAgICAgdGhpcy5wYWdlSW5kZXhQcm9taXNlID0ge307XG4gICAgICAgIHRoaXMuYmxvY2tSYW5nZXMgPSBbXTtcbiAgICAgICAgdGhpcy5yZW5kZXJGbGFncyA9IDA7XG4gICAgfVxuICAgIHBhcnNlQnlQYXNzd29yZCAocGFzc3dvcmQgPSAnJywgb3RoZXJEYXRhID0ge30pIHtcbiAgICAgICAgbGV0IGVuZ2luZSA9IHRoaXMuZW5naW5lO1xuICAgICAgICBsZXQgZGVmZXJyZWQgPSBjcmVhdGVEZWZlcnJlZCgpO1xuICAgICAgICBsZXQgcmV0cnkgPSAoKSA9PiB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcnNlQnlQYXNzd29yZChwYXNzd29yZCwgb3RoZXJEYXRhKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIDIwMCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucmVhZGVyQmxvY2tMb2FkaW5nKSB7XG4gICAgICAgICAgICByZXRyeSgpO1xuICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZXJyb3JDb2RlO1xuICAgICAgICB0aGlzLm90aGVyRGF0YSA9IG90aGVyRGF0YTtcbiAgICAgICAgaWYgKHBhc3N3b3JkKSB7XG4gICAgICAgICAgICBsZXQgcHdkID0gbmV3IGVuZ2luZS5TdHJpbmcocGFzc3dvcmQpO1xuICAgICAgICAgICAgZXJyb3JDb2RlID0gdGhpcy5kb2MuTG9hZChwd2QpO1xuICAgICAgICAgICAgcHdkLmRlbGV0ZSgpO1xuICAgICAgICB9IGVsc2UgaWYgKG90aGVyRGF0YS5lbmNyeXB0UGFzc3dvcmQpIHtcbiAgICAgICAgICAgIGxldCBwd2QgPSBuZXcgZW5naW5lLlN0cmluZyhvdGhlckRhdGEuZW5jcnlwdFBhc3N3b3JkKTtcbiAgICAgICAgICAgIGVycm9yQ29kZSA9IHRoaXMuZG9jLkxvYWRCeUFzeW1tZXRyaWNFbmNyeXB0aW9uKHB3ZCk7XG4gICAgICAgICAgICBwd2QuZGVsZXRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgcHdkID0gbmV3IGVuZ2luZS5TdHJpbmcocGFzc3dvcmQpO1xuICAgICAgICAgICAgZXJyb3JDb2RlID0gdGhpcy5kb2MuTG9hZChwd2QpO1xuICAgICAgICAgICAgcHdkLmRlbGV0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVycm9yQ29kZSA9PT0gZW5naW5lLkVycm9yQ29kZS5lX0VyclN1Y2Nlc3MpIHtcbiAgICAgICAgICAgIHRoaXMucGFzc3dvcmQgPSBwYXNzd29yZDtcbiAgICAgICAgICAgIGxldCBhY3Rpb24gID0gdGhpcy5kb2MuR2V0T3BlbkFjdGlvbigpO1xuICAgICAgICAgICAgaWYoIWFjdGlvbi5Jc0VtcHR5KCkpe1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9uPXRoaXMuSlIuYWN0aW9uTWFuYWdlci5nZXQoYWN0aW9uLHRoaXMuZG9jLHRoaXMuSlIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8g5a+85YWl5Yid5aeL55qEYW5ub3RhdGlvblxuICAgICAgICAgICAgaWYgKG90aGVyRGF0YS5mZGYgJiYgb3RoZXJEYXRhLmZkZi5maWxlKSB7XG4gICAgICAgICAgICAgICAgbGV0IGZpbGUgPSBvdGhlckRhdGEuZmRmLmZpbGU7XG4gICAgICAgICAgICAgICAgbGV0IHR5cGUgPSBvdGhlckRhdGEuZmRmLnR5cGU7XG4gICAgICAgICAgICAgICAgdGhpcy5pbXBvcnRGcm9tRkRGKGZpbGUsIHR5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kb2NEZWZlcnJlZC5yZXNvbHZlKHRoaXMuZG9jKTtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoZXJyb3JDb2RlLnZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChlcnJvckNvZGUgPT09IGVuZ2luZS5FcnJvckNvZGUuZV9FcnJEYXRhTm90UmVhZHkpIHtcbiAgICAgICAgICAgIHJldHJ5KCk7XG4gICAgICAgIH0gIGVsc2UgaWYgKGVycm9yQ29kZSA9PT0gZW5naW5lLkVycm9yQ29kZS5lX0VyclNlY3VyaXR5SGFuZGxlcikge1xuICAgICAgICAgICAgaWYgKG90aGVyRGF0YS5kcm0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLkpSLnJlZ2lzdGVyRFJNU2VjdXJpdHlDYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgIHJldHJ5KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoZXJyb3JDb2RlLnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShlcnJvckNvZGUudmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgIH1cbiAgICB1cGRhdGVQYWdlQ2FjaGUgKHBhZ2UpIHtcbiAgICAgICAgbGV0IGlkID0gcGFnZS5pZDtcbiAgICAgICAgdGhpcy5wYWdlQ2FjaGVbaWRdID0gcGFnZTtcbiAgICB9XG4gICAgdXBkYXRlUGFnZUluZGV4TWFwIChpbmRleCwgcGFnZSkge1xuICAgICAgICB0aGlzLnBhZ2VJbmRleE1hcFtpbmRleF0gPSBwYWdlO1xuICAgIH1cbiAgICBnZXRQYWdlQnlJZCAoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFnZUNhY2hlW2lkXSB8fCBudWxsO1xuICAgIH1cbiAgICBnZXRBbGxMb2FkZWRQYWdlcygpe1xuICAgICAgICBjb25zdCBwYWdlcyA9IFtdO1xuICAgICAgICBmb3IobGV0IGtleSBpbiB0aGlzLnBhZ2VDYWNoZSkge1xuICAgICAgICAgICAgcGFnZXMucHVzaCh0aGlzLnBhZ2VDYWNoZVtrZXldKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFnZXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOiOt+WPluaWh+aho+S/oeaBr1xuICAgICAqIEByZXR1cm5zIHtQREZEb2NJbmZvfSBQcm9taXNlXG4gICAgICovXG4gICAgZ2V0UERGRG9jSW5mbyAoKSB7XG4gICAgICAgIGxldCBlbmdpbmUgPSB0aGlzLmVuZ2luZTtcbiAgICAgICAgbGV0IF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9jUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChjX2RvYykge1xuICAgICAgICAgICAgbGV0IGRlZmVycmVkID0gY3JlYXRlRGVmZXJyZWQoKTtcbiAgICAgICAgICAgIGxldCBkaWN0ID0gY19kb2MuR2V0SW5mbygpO1xuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShkaWN0KTtcbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog6I635Y+W5paH5qGj5oC76aG15pWwXG4gICAgICogQHJldHVybnMge251bWJlcn0gUHJvbWlzZSwg5paH5qGj5oC76aG15pWw6I635Y+W5aSx6LSl5pe277yMcmVqZWN077yM5Y6f5Zug77ya5byC5q2l5Yqg6L295paH5qGj562JXG4gICAgICovXG4gICAgZ2V0UGFnZUNvdW50ICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9jUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChkb2MpIHtcbiAgICAgICAgICAgIHJldHVybiBkb2MuR2V0UGFnZUNvdW50KCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXRJbmRpcmVjdE9iamVjdChvYmpOdW0pe1xuICAgICAgICByZXR1cm4gdGhpcy5kb2NQcm9taXNlLnRoZW4oZnVuY3Rpb24gKGRvYykge1xuICAgICAgICAgICAgbGV0IG9iamVjdD1kb2MuR2V0SW5kaXJlY3RPYmplY3Qob2JqTnVtKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUERGT2JqZWN0KGRvYyxvYmplY3QpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0UGFnZXNXaWR0aEhlaWdodCAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRvY1Byb21pc2UudGhlbihmdW5jdGlvbiAoZG9jKSB7XG4gICAgICAgICAgICByZXR1cm4gW2RvYy5HZXRQYWdlQ291bnQoKSwgZG9jXTtcbiAgICAgICAgfSkudGhlbigoW2NvdW50LCBkb2NdKSA9PiB7XG4gICAgICAgICAgICBsZXQgbGlzdCA9IFtdO1xuICAgICAgICAgICAgbGV0IG5vdyA9IERhdGUubm93KCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gY291bnQ7IGktLTspIHtcbiAgICAgICAgICAgICAgICBsZXQgcGFnZSA9IGRvYy5HZXRQYWdlKGkpO1xuICAgICAgICAgICAgICAgIGxpc3RbaV0gPSB7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBwYWdlLkdldFdpZHRoKCksXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogcGFnZS5HZXRIZWlnaHQoKSxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgYWZ0ZXIgPSBEYXRlLm5vdygpIC0gbm93O1xuICAgICAgICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgICAgIH0pXG4gICAgfVxuICAgIGdldFBhZ2VCeUluZGV4IChpbmRleCkge1xuICAgICAgICBsZXQgcGRmUGFnZSA9IHRoaXMucGFnZUluZGV4TWFwW2luZGV4XTtcbiAgICAgICAgaWYgKHBkZlBhZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocGRmUGFnZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucGFnZUluZGV4UHJvbWlzZVtpbmRleF0pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhZ2VJbmRleFByb21pc2VbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIGxldCBkZWZlcnJlZCA9IGNyZWF0ZURlZmVycmVkKCk7XG4gICAgICAgIHBkZlBhZ2UgPSBuZXcgUERGUGFnZShpbmRleCwgdGhpcyk7XG4gICAgICAgIHRoaXMucGFnZUluZGV4UHJvbWlzZVtpbmRleF0gPSBwZGZQYWdlLmNfcGFnZVByb21pc2UudGhlbigoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVBhZ2VJbmRleE1hcChpbmRleCwgcGRmUGFnZSk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVBhZ2VDYWNoZShwZGZQYWdlKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnBhZ2VJbmRleFByb21pc2VbaW5kZXhdO1xuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShwZGZQYWdlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDojrflj5bmlofmoaPpobXpnaLlr7nosaFcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcGFnZU51bWJlciDpgJrov4dvYmogbnVtYmVyIOiOt+WPlumhtemdouWvueixoVxuICAgICAqIEByZXR1cm5zIHtQREZQYWdlfSBQcm9taXNlXG4gICAgICovXG4gICAgZ2V0UGFnZShwYWdlTnVtYmVyKSB7fVxuICAgIC8qKlxuICAgICAqIOiOt+WPluaWh+aho+mhtemdouWvueixoVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBwYWdlSW5kZXgg6YCa6L+H54mp55CG6aG16Z2iaW5kZXgg6I635Y+W6aG16Z2i5a+56LGhXG4gICAgICovXG4gICAgZ2V0UERGUGFnZUJ5UGFnZUluZGV4IChwYWdlSW5kZXgpIHtcblxuICAgIH1cbiAgICBnZXRQZXJtaXNzaW9uICgpIHtcbiAgICAgICAgaWYodGhpcy5zdGRDaXBoZXJPcHRpb25zKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0ZENpcGhlck9wdGlvbnMucGVybWlzc2lvbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5kb2MuR2V0VXNlclBlcm1pc3Npb25zKCk7XG4gICAgfVxuICAgIGdldE1ldGFkYXRhKCl7XG4gICAgICAgIGxldCBlbmdpbmUgPSB0aGlzLmVuZ2luZTtcbiAgICAgICAgbGV0IG1ldGFkYXRhID0gbmV3IGVuZ2luZS5NZXRhZGF0YSh0aGlzLmRvYyk7XG5cbiAgICAgICAgbGV0IGJhc2VJbmZvID0ge1xuICAgICAgICAgICAgXCJUaXRsZVwiOmdldE1ldGFkYXRhVmFsdWVzKG1ldGFkYXRhLG5ldyBlbmdpbmUuV1N0cmluZyhcIlRpdGxlXCIpKSxcbiAgICAgICAgICAgIFwiQXV0aG9yXCI6Z2V0TWV0YWRhdGFWYWx1ZXMobWV0YWRhdGEsbmV3IGVuZ2luZS5XU3RyaW5nKFwiQXV0aG9yXCIpKSxcbiAgICAgICAgICAgIFwiU3ViamVjdFwiOmdldE1ldGFkYXRhVmFsdWVzKG1ldGFkYXRhLG5ldyBlbmdpbmUuV1N0cmluZyhcIlN1YmplY3RcIikpLFxuICAgICAgICAgICAgXCJLZXl3b3Jkc1wiOmdldE1ldGFkYXRhVmFsdWVzKG1ldGFkYXRhLG5ldyBlbmdpbmUuV1N0cmluZyhcIktleXdvcmRzXCIpKSxcbiAgICAgICAgICAgIFwiQ3JlYXRvclwiOmdldE1ldGFkYXRhVmFsdWVzKG1ldGFkYXRhLG5ldyBlbmdpbmUuV1N0cmluZyhcIkNyZWF0b3JcIikpLFxuICAgICAgICAgICAgXCJQcm9kdWNlclwiOmdldE1ldGFkYXRhVmFsdWVzKG1ldGFkYXRhLG5ldyBlbmdpbmUuV1N0cmluZyhcIlByb2R1Y2VyXCIpKSxcbiAgICAgICAgICAgIFwiVHJhcHBlZFwiOmdldE1ldGFkYXRhVmFsdWVzKG1ldGFkYXRhLG5ldyBlbmdpbmUuV1N0cmluZyhcIlRyYXBwZWRcIikpLFxuICAgICAgICAgICAgXCJDcmVhdGlvbkRhdGVcIjpnZXRNZXRhZGF0YVZhbHVlcyhtZXRhZGF0YSxuZXcgZW5naW5lLldTdHJpbmcoXCJDcmVhdGlvbkRhdGVcIikpLFxuICAgICAgICAgICAgXCJNb2REYXRlXCI6Z2V0TWV0YWRhdGFWYWx1ZXMobWV0YWRhdGEsbmV3IGVuZ2luZS5XU3RyaW5nKFwiTW9kRGF0ZVwiKSksXG4gICAgICAgICAgICBcInBkZmFpZFwiOmdldE1ldGFkYXRhVmFsdWVzKG1ldGFkYXRhLG5ldyBlbmdpbmUuV1N0cmluZyhcInBkZmFpZFwiKSksXG4gICAgICAgIH07XG5cbiAgICAgICAgbGV0IGN1c3RvbWl6ZWRLZXkgPSBtZXRhZGF0YS5HZXRDdXN0b21lcktleXMoKTtcbiAgICAgICAgZm9yKGxldCBpPTAsaj1jdXN0b21pemVkS2V5Lmxlbmd0aDtpPGo7aSsrKXtcbiAgICAgICAgICAgIGxldCBrZXkgPSBjdXN0b21pemVkS2V5LkdldEF0KGkpO1xuICAgICAgICAgICAgYmFzZUluZm9ba2V5LnRvU3RyaW5nKCldID0gbWV0YWRhdGEuR2V0VmFsdWVzKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgbWV0YWRhdGEuZGVsZXRlKCk7XG4gICAgICAgIG1ldGFkYXRhID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIGJhc2VJbmZvO1xuICAgIH1cbiAgICBcbiAgICBzZXRNZXRhZGF0YVZhbHVlKGtleSx2YWx1ZSl7XG4gICAgICAgIGxldCBlbmdpbmUgPSB0aGlzLmVuZ2luZTtcbiAgICAgICAgbGV0IG1ldGFkYXRhID0gbmV3IGVuZ2luZS5NZXRhZGF0YSh0aGlzLmRvYyk7XG5cbiAgICAgICAgbGV0IHZhbHVlQXJyYXkgPSBtZXRhZGF0YS5HZXRWYWx1ZXMoa2V5KTtcbiAgICAgICAgdmFsdWVBcnJheS5SZW1vdmVBbGwoKTtcbiAgICAgICAgdmFsdWVBcnJheS5BZGQodmFsdWUpO1xuXG4gICAgICAgIG1ldGFkYXRhLlNldFZhbHVlcyhrZXksdmFsdWVBcnJheSk7XG5cbiAgICAgICAgbWV0YWRhdGEuZGVsZXRlKCk7XG4gICAgICAgIG1ldGFkYXRhID0gbnVsbDtcbiAgICB9XG4gICAgbW92ZVBhZ2VUbyhwYWdlSWQsIGRlc3RJbmRleCkge1xuICAgICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gdGhpcy5kb2NQcm9taXNlLnRoZW4oZnVuY3Rpb24gKGNfZG9jKSB7XG4gICAgICAgICAgICBsZXQgcGFnZSA9IF90aGlzLmdldFBhZ2VCeUlkKHBhZ2VJZCk7XG4gICAgICAgICAgICByZXR1cm4gcGFnZS5wYXJzZWRQYWdlKCkudGhlbiggY19wYWdlID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgcGFnZUluZGV4ID0gcGFnZS5pbmRleDtcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gY19kb2MuTW92ZVBhZ2VUbyhjX3BhZ2UsIGRlc3RJbmRleCk7XG4gICAgICAgICAgICAgICAgaWYocmVzdWx0KXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1pbkluZGV4LCBtYXhJbmRleCwgaXNVcDtcbiAgICAgICAgICAgICAgICAgICAgaWYocGFnZUluZGV4IDwgZGVzdEluZGV4KXtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbkluZGV4ID0gcGFnZUluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF4SW5kZXggPSBkZXN0SW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc1VwID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluSW5kZXggPSBkZXN0SW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhJbmRleCA9IHBhZ2VJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzVXAgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnVwZGF0ZVBhZ2VJbmRleChtaW5JbmRleCwgbWF4SW5kZXgsIGlzVXAsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIj09PT09PT0gbW92ZVBhZ2VUbyBqclwiKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coX3RoaXMucGFnZUluZGV4TWFwKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coX3RoaXMucGFnZUNhY2hlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpbnNlcnRQYWdlKHBhZ2VJbmRleCwgd2lkdGgsIGhlaWdodCl7XG4gICAgICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiB0aGlzLmRvY1Byb21pc2UudGhlbihmdW5jdGlvbiAoY19kb2MpIHtcbiAgICAgICAgICAgIGxldCBjX3BhZ2UgPSBjX2RvYy5JbnNlcnRQYWdlKHBhZ2VJbmRleCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICBpZighY19wYWdlKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgaW5kZXggPSBjX3BhZ2UuR2V0SW5kZXgoKTtcbiAgICAgICAgICAgIGxldCBuZXdCbGFua1BhZ2U7XG4gICAgICAgICAgICBsZXQgcGRmUGFnZSA9IG5ld0JsYW5rUGFnZSA9IG5ldyBQREZQYWdlKGluZGV4LCBfdGhpcyk7XG4gICAgICAgICAgICBuZXdCbGFua1BhZ2UucGFnZSA9IGNfcGFnZTtcbiAgICAgICAgICAgIGxldCBtYXhJbmRleCA9IGNfZG9jLkdldFBhZ2VDb3VudCgpIC0gMTtcbiAgICAgICAgICAgIF90aGlzLnVwZGF0ZVBhZ2VJbmRleChpbmRleCsxLCBtYXhJbmRleCwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICAgICAgX3RoaXMudXBkYXRlUGFnZUluZGV4TWFwKGluZGV4LCBwZGZQYWdlKTtcbiAgICAgICAgICAgIF90aGlzLnVwZGF0ZVBhZ2VDYWNoZShuZXdCbGFua1BhZ2UpO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCI9PT09PT09IGluc2VydFBhZ2UganJcIik7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhfdGhpcy5wYWdlSW5kZXhNYXApO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coX3RoaXMucGFnZUNhY2hlKTtcblxuICAgICAgICAgICAgcmV0dXJuIG5ld0JsYW5rUGFnZS50b0pzb24oKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJlbW92ZVBhZ2UocGFnZUluZGV4KXtcbiAgICAgICAgbGV0IF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9jUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChjX2RvYykge1xuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGNfZG9jLlJlbW92ZVBhZ2UocGFnZUluZGV4KTtcbiAgICAgICAgICAgIGlmKHJlc3VsdCl7XG4gICAgICAgICAgICAgICAgaWYoX3RoaXMucGFnZUluZGV4TWFwW3BhZ2VJbmRleF0pe1xuICAgICAgICAgICAgICAgICAgICBsZXQgcGFnZSA9IF90aGlzLnBhZ2VJbmRleE1hcFtwYWdlSW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgX3RoaXMucGFnZUluZGV4TWFwW3BhZ2VJbmRleF07XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBfdGhpcy5wYWdlQ2FjaGVbcGFnZS5pZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCBtYXhJbmRleCA9IGNfZG9jLkdldFBhZ2VDb3VudCgpIC0gMTtcbiAgICAgICAgICAgICAgICBfdGhpcy51cGRhdGVQYWdlSW5kZXgocGFnZUluZGV4LCBtYXhJbmRleCk7XG5cbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIj09PT09PT0gcmVtb3ZlUGFnZSBqclwiKTtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhfdGhpcy5wYWdlSW5kZXhNYXApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHVwZGF0ZVBhZ2VJbmRleChtaW5JbmRleCwgbWF4SW5kZXgsIGlzVXAsIGlzTW92ZSl7XG4gICAgICAgIGlmKGlzTW92ZSl7XG4gICAgICAgICAgICBpZihpc1VwKXtcbiAgICAgICAgICAgICAgICBsZXQgdG1wID0gdGhpcy5wYWdlSW5kZXhNYXBbbWF4SW5kZXhdO1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUGFnZUluZGV4KG1pbkluZGV4KzEsIG1heEluZGV4LCBpc1VwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgaWYodG1wKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYWdlSW5kZXhNYXBbbWluSW5kZXhdID0gdG1wO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhZ2VJbmRleE1hcFttaW5JbmRleF0uaW5kZXggPSBtaW5JbmRleDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIGxldCB0bXAgPSB0aGlzLnBhZ2VJbmRleE1hcFttaW5JbmRleF07XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVQYWdlSW5kZXgobWluSW5kZXgsIG1heEluZGV4LTEsIGlzVXAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBpZih0bXApe1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhZ2VJbmRleE1hcFttYXhJbmRleF0gPSB0bXA7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFnZUluZGV4TWFwW21heEluZGV4XS5pbmRleCA9IG1heEluZGV4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBpZihpc1VwKXtcbiAgICAgICAgICAgICAgICBmb3IobGV0IGk9bWF4SW5kZXg7aT49bWluSW5kZXg7aS0tKXtcbiAgICAgICAgICAgICAgICAgICAgaWYoIXRoaXMucGFnZUluZGV4TWFwW2ktMV0pIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhZ2VJbmRleE1hcFtpXSA9IHRoaXMucGFnZUluZGV4TWFwW2ktMV07XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFnZUluZGV4TWFwW2ldLmluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICBmb3IobGV0IGk9bWluSW5kZXg7aTw9bWF4SW5kZXg7aSsrKXtcbiAgICAgICAgICAgICAgICAgICAgaWYoIXRoaXMucGFnZUluZGV4TWFwW2krMV0pIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhZ2VJbmRleE1hcFtpXSA9IHRoaXMucGFnZUluZGV4TWFwW2krMV07XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFnZUluZGV4TWFwW2ldLmluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGVzdHJveSAoKSB7XG4gICAgICAgIGxldCBwYWdlQ2FjaGUgPSB0aGlzLnBhZ2VDYWNoZTtcbiAgICAgICAgZm9yIChsZXQgaSBpbiBwYWdlQ2FjaGUpIHtcbiAgICAgICAgICAgIHBhZ2VDYWNoZVtpXS5kZXN0cm95KCk7XG4gICAgICAgICAgICBkZWxldGUgcGFnZUNhY2hlW2ldO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYXN5bmNCbG9jayAmJiB0aGlzLmFzeW5jQmxvY2suZGVzdHJveSgpO1xuICAgICAgICB0aGlzLmRvYyAmJiB0aGlzLmRvYy5kZWxldGUoKTtcbiAgICAgICAgaWYodGhpcy5wZGZUcmVlKXtcbiAgICAgICAgICAgIHRoaXMucGRmVHJlZS5kZWxldGUoKTtcbiAgICAgICAgICAgIHRoaXMucGRmVHJlZSA9IG51bGxcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBhc3N3b3JkID0gbnVsbDtcbiAgICAgICAgdGhpcy5zdGRDaXBoZXJPcHRpb25zID0gbnVsbDtcbiAgICAgICAgdGhpcy5wYXNzd29yZFR5cGUgPSBudWxsO1xuICAgICAgICAvKipcbiogQHR5cGUgR1NESy5QREZEb2NcbioqL1xuICAgICAgICB0aGlzLmRvYyA9IG51bGw7XG4gICAgfVxuICAgIGRlc3Ryb3lQYWdlIChpZCkge1xuICAgICAgICBsZXQgcGFnZSA9IHRoaXMuZ2V0UGFnZUJ5SWQoaWQpO1xuICAgICAgICBpZiAocGFnZSkge1xuICAgICAgICAgICAgcGFnZS5kZXN0cm95KCk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5wYWdlQ2FjaGVbaWRdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRvSnNvbiAoKSB7XG4gICAgICAgIGxldCBkb2MgPSB0aGlzLmRvYztcbiAgICAgICAgbGV0IGVuZ2luZSA9IHRoaXMuZW5naW5lO1xuICAgICAgICBsZXQgcGFnZUNvdW50ID0gZG9jLkdldFBhZ2VDb3VudCgpO1xuICAgICAgICBsZXQgZmlsZVNpemUgPSBkb2MuR2V0RmlsZVNpemUoKTtcbiAgICAgICAgbGV0IGFjdGlvbj10aGlzLmFjdGlvbiYmdGhpcy5hY3Rpb24udG9Kc29uKCk7XG4gICAgICAgIGxldCBmaWxlSUQ9W107XG4gICAgICAgIGxldCB0cmFpbGVyID0gZG9jLkdldFRyYWlsZXIoKTtcbiAgICAgICAgbGV0IElET2JqXG4gICAgICAgIGlmKHRyYWlsZXIpe1xuICAgICAgICAgICAgbGV0IHN0cklEID0gbmV3IHRoaXMuZW5naW5lLlN0cmluZyhcIklEXCIpO1xuICAgICAgICAgICAgSURPYmogPSB0cmFpbGVyLkdldEVsZW1lbnQoc3RySUQpO1xuICAgICAgICAgICAgc3RySUQuZGVsZXRlKCk7XG4gICAgICAgICAgICBzdHJJRD1udWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmKElET2JqKXtcbiAgICAgICAgICAgIGxldCBJREFycmF5ID0gSURPYmouR2V0QXJyYXkoKTtcblxuICAgICAgICAgICAgLy8gbGV0IGlkMCA9IElEQXJyYXkuR2V0RWxlbWVudCgwKS50b1N0cmluZygpO1xuICAgICAgICAgICAgZm9yKGxldCBpID0gMCxzej0yO2k8c3o7aSsrKXtcbiAgICAgICAgICAgICAgICBsZXQgc3RyQnVmZmVyID0gSURBcnJheS5HZXRFbGVtZW50KGkpLkdldFN0cmluZygpLkdldEJ1ZmZlcigpO1xuICAgIFxuICAgICAgICAgICAgICAgIGxldCBoZXhTdHJJRCA9ICcnXG4gICAgICAgICAgICAgICAgZm9yKGxldCBqID0gMCxzdHJMZW5ndGg9MTY7ajxzdHJMZW5ndGg7aisrKXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvZGUgPSAodGhpcy5lbmdpbmUuSEVBUDhbc3RyQnVmZmVyK2pdPj4+MCkmMHgwMGZmXG4gICAgICAgICAgICAgICAgICAgIGNvZGUgPSBjb2RlLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgICAgICAgICAgICAgaWYoY29kZS5sZW5ndGg8Miljb2RlPScwJytjb2RlO1xuICAgICAgICAgICAgICAgICAgICBoZXhTdHJJRCs9Y29kZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmlsZUlELnB1c2goaGV4U3RySUQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBpc093bmVyID0gZmFsc2U7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgc2VjdXJpdHlIYW5kbGVyID0gZG9jLkdldFNlY3VyaXR5SGFuZGxlcigpO1xuICAgICAgICAgICAgaWYgKHNlY3VyaXR5SGFuZGxlci5Jc0VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgICBpc093bmVyID0gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBFbmNyeXB0VHlwZSA9IGVuZ2luZS5FbmNyeXB0VHlwZTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHNlY3VyaXR5SGFuZGxlci5HZXRTZWN1cml0eVR5cGUoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIEVuY3J5cHRUeXBlLmVfRW5jcnlwdE5vbmUgOlxuICAgICAgICAgICAgICAgICAgICAgICAgaXNPd25lciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgRW5jcnlwdFR5cGUuZV9FbmNyeXB0UGFzc3dvcmQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vdGhlckRhdGEgJiYgdGhpcy5vdGhlckRhdGEuZW5jcnlwdFBhc3N3b3JkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHB3ZCA9IGVuZ2luZS5MaWJyYXJ5LkRlY3J5cHRQYXNzd29yZChuZXcgZW5naW5lLlN0cmluZyh0aGlzLm90aGVyRGF0YS5lbmNyeXB0UGFzc3dvcmQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc093bmVyID0gKGRvYy5DaGVja1Bhc3N3b3JkKHB3ZCkgPT0gZW5naW5lLlBhc3N3b3JkVHlwZS5lX1B3ZE93bmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNPd25lciA9IChkb2MuQ2hlY2tQYXNzd29yZChuZXcgZW5naW5lLlN0cmluZyh0aGlzLnBhc3N3b3JkKSkgPT0gZW5naW5lLlBhc3N3b3JkVHlwZS5lX1B3ZE93bmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIEVuY3J5cHRUeXBlLmVfRW5jcnlwdEZveGl0RFJNIDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBFbmNyeXB0VHlwZS5lX0VuY3J5cHRDRFJNIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzT3duZXIgPSBkb2MuR2V0RFJNRW5jcnlwdERhdGEoKS5pc19vd25lcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIEVuY3J5cHRUeXBlLmVfRW5jcnlwdENlcnRpZmljYXRlIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vaXNPd25lciA9IGRvYy5HZXRDZXJ0aWZpY2F0ZUVuY3J5cHREYXRhKCkuaXNfb3duZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL2JyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIEVuY3J5cHRUeXBlLmVfRW5jcnlwdEN1c3RvbSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAvL2lzT3duZXIgPSBkb2MuR2V0Q3VzdG9tRW5jcnlwdERhdGEoKS5pc19vd25lcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgRW5jcnlwdFR5cGUuZV9FbmNyeXB0Uk1TICA6XG4gICAgICAgICAgICAgICAgICAgICAgICAvL2lzT3duZXIgPSBkb2MuR2V0RFJNRW5jcnlwdERhdGEoKS5pc19vd25lcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgRW5jcnlwdFR5cGUuZV9FbmNyeXB0VW5rbm93biA6XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBpc093bmVyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgaXNPd25lciA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGpzTmFtZVRyZWU9e31cblxuICAgICAgICBsZXQgbmFtZVRyZWUgPSBuZXcgdGhpcy5lbmdpbmUuUERGTmFtZVRyZWUoZG9jLCB0aGlzLmVuZ2luZS5QREZOYW1lVHJlZVR5cGUuZV9KYXZhU2NyaXB0KTtcbiAgICAgICAgZm9yKGxldCBuYW1lSW5kZXg9MCxzej1uYW1lVHJlZS5HZXRDb3VudCgpO25hbWVJbmRleDxzejtuYW1lSW5kZXgrKyl7XG4gICAgICAgICAgICBsZXQgbmFtZSA9IG5hbWVUcmVlLkdldE5hbWUobmFtZUluZGV4KTtcbiAgICAgICAgICAgIGxldCBvYmogPSBuYW1lVHJlZS5HZXRPYmoobmFtZSk7XG4gICAgICAgICAgICBsZXQgYWN0aW9uID0gbmV3IHRoaXMuZW5naW5lLkFjdGlvbihkb2Msb2JqLkdldERpY3QoKSk7XG4gICAgICAgICAgICBsZXQgamF2YVNjcmlwdEFjdGlvbiA9IG5ldyB0aGlzLmVuZ2luZS5KYXZhU2NyaXB0QWN0aW9uKGFjdGlvbik7XG5cbiAgICAgICAgICAgIGxldCBzY3JpcHRzID0gamF2YVNjcmlwdEFjdGlvbi5HZXRTY3JpcHQoKTtcbiAgICAgICAgICAgIGpzTmFtZVRyZWVbbmFtZS50b1N0cmluZygpXSA9IHNjcmlwdHMudG9TdHJpbmcoKTtcblxuICAgICAgICAgICAgYWN0aW9uLmRlbGV0ZSgpO1xuICAgICAgICAgICAgamF2YVNjcmlwdEFjdGlvbi5kZWxldGUoKTtcbiAgICAgICAgICAgIGFjdGlvbj1udWxsO1xuICAgICAgICAgICAgamF2YVNjcmlwdEFjdGlvbj1udWxsO1xuICAgICAgICB9XG4gICAgICAgIG5hbWVUcmVlLmRlbGV0ZSgpO1xuICAgICAgICBuYW1lVHJlZSA9IG51bGw7XG5cbiAgICAgICAgbGV0IGljb25zID0gW11cblxuICAgICAgICAvL3RvZG8g5L2/55SoaWNvbiBuYW1lIHRyZWVcbiAgICAgICAgbGV0IGM9ZG9jLkdldENhdGFsb2coKVxuICAgICAgICBsZXQgbj1jLkdldEVsZW1lbnQobmV3IHRoaXMuZW5naW5lLlN0cmluZygnTmFtZXMnKSk7XG4gICAgICAgIG49Yy5HZXRFbGVtZW50KG5ldyB0aGlzLmVuZ2luZS5TdHJpbmcoJ05hbWVzJykpLkdldERpY3QoKVxuICAgICAgICBsZXQgaWNvbnNPYmogPSBuLkdldEVsZW1lbnQobmV3IHRoaXMuZW5naW5lLlN0cmluZygnQVAnKSk7XG4gICAgICAgIGlmKGljb25zT2JqKXtcbiAgICAgICAgICAgIGxldCBpY29uc0RpY3Q9aWNvbnNPYmouR2V0RGlyZWN0T2JqZWN0KCkuR2V0RGljdCgpO1xuICAgICAgICAgICAgbGV0IG5hbWVzPWljb25zRGljdC5HZXRFbGVtZW50KG5ldyB0aGlzLmVuZ2luZS5TdHJpbmcoXCJOYW1lc1wiKSkuR2V0QXJyYXkoKTtcbiAgICAgICAgICAgIGxldCBzaXplPW5hbWVzLkdldEVsZW1lbnRDb3VudCgpO1xuICAgIFxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7aTxzaXplO2krPTIpe1xuICAgICAgICAgICAgICAgIGxldCBvID0gbmFtZXMuR2V0RWxlbWVudChpKTtcbiAgICAgICAgICAgICAgICBsZXQgbmFtZTtcbiAgICAgICAgICAgICAgICBsZXQgc3RyTmFtZT1vLkdldFN0cmluZygpO1xuICAgICAgICAgICAgICAgIHRyeXtcbiAgICAgICAgICAgICAgICAgICAgbmFtZT1zdHJOYW1lLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgfWNhdGNoKGUpe1xuICAgICAgICAgICAgICAgICAgICBsZXQgaGV4U3RySUQgPSAnJ1xuICAgICAgICAgICAgICAgICAgICBsZXQgc3RyQnVmZmVyID0gc3RyTmFtZS5HZXRCdWZmZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBqID0gMCxzdHJMZW5ndGg9c3RyTmFtZS5HZXRMZW5ndGgoKTtqPHN0ckxlbmd0aDtqKyspe1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvZGUgPSAodGhpcy5lbmdpbmUuSEVBUDhbc3RyQnVmZmVyK2pdPj4+MCkmMHgwMGZmXG4gICAgICAgICAgICAgICAgICAgICAgICBoZXhTdHJJRCs9U3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBuYW1lID0gdGhpcy5KUi5wZGZOYW1lRGVjb2RpbmcoaGV4U3RySUQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpY29ucy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgb2JqTnVtOm5hbWVzLkdldEVsZW1lbnQoaSsxKS5HZXREaXJlY3RPYmplY3QoKS5HZXRPYmpOdW0oKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vbGV0IHBhZ2VzQmFzaWNJbmZvID0gW107XG4gICAgICAgIC8vY29uc29sZS50aW1lKCdQREZEb2MudG9Kc29uLnBhZ2VzQmFzaWNJbmZvMScpO1xuICAgICAgICAvL2ZvciAobGV0IGkgPSBwYWdlQ291bnQ7IGktLTspIHtcbiAgICAgICAgLy8gICAgbGV0IHBhZ2UgPSBkb2MuR2V0UGFnZUJhc2ljSW5mbyhpKTtcbiAgICAgICAgLy8gICAgcGFnZXNCYXNpY0luZm9baV0gPSB7XG4gICAgICAgIC8vICAgICAgICB3aWR0aDogcGFnZS53aWR0aCxcbiAgICAgICAgLy8gICAgICAgIGhlaWdodDogcGFnZS5oZWlnaHQsXG4gICAgICAgIC8vICAgICAgICAvL3JvdGF0ZTogcGFnZS5HZXRSb3RhdGlvbigpLnZhbHVlLFxuICAgICAgICAvLyAgICB9O1xuICAgICAgICAvL31cbiAgICAgICAgLy9jb25zb2xlLnRpbWVFbmQoJ1BERkRvYy50b0pzb24ucGFnZXNCYXNpY0luZm8xJyk7XG4gICAgICAgIC8vY29uc29sZS50aW1lKCdQREZEb2MudG9Kc29uLnBhZ2VzQmFzaWNJbmZvJyk7XG4gICAgICAgIC8vZm9yIChsZXQgaSA9IHBhZ2VDb3VudDsgaS0tOykge1xuICAgICAgICAvLyAgICBsZXQgcGFnZSA9IGRvYy5HZXRQYWdlKGkpO1xuICAgICAgICAvLyAgICBwYWdlc0Jhc2ljSW5mb1tpXSA9IHtcbiAgICAgICAgLy8gICAgICAgIHdpZHRoOiBwYWdlLkdldFdpZHRoKCksXG4gICAgICAgIC8vICAgICAgICBoZWlnaHQ6IHBhZ2UuR2V0SGVpZ2h0KCksXG4gICAgICAgIC8vICAgICAgICByb3RhdGU6IHBhZ2UuR2V0Um90YXRpb24oKS52YWx1ZSxcbiAgICAgICAgLy8gICAgfTtcbiAgICAgICAgLy99XG4gICAgICAgIC8vY29uc29sZS50aW1lRW5kKCdQREZEb2MudG9Kc29uLnBhZ2VzQmFzaWNJbmZvJyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpZDogdGhpcy5pZCxcbiAgICAgICAgICAgIC8vIHNpemU6IHRoaXMuZG9jLkdldFNpemUoKSxcbiAgICAgICAgICAgIGZpbGVTaXplLFxuICAgICAgICAgICAgZmlsZUlELFxuICAgICAgICAgICAgcGFnZUNvdW50OiBwYWdlQ291bnQsXG4gICAgICAgICAgICB1c2VyUGVybWlzc2lvbnM6IGRvYy5HZXRVc2VyUGVybWlzc2lvbnMoKSxcbiAgICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICAgIGpzTmFtZVRyZWUsXG4gICAgICAgICAgICBoYXNGb3JtOmRvYy5IYXNGb3JtKCksXG4gICAgICAgICAgICBpc093bmVyLFxuICAgICAgICAgICAgaWNvbnNcbiAgICAgICAgICAgIC8vcGFnZXNCYXNpY0luZm86IHBhZ2VzQmFzaWNJbmZvLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBnZXRTdHJlYW0gKHt3cml0ZVN0cmVhbX0pIHtcbiAgICAgICAgbGV0IGVuZ2luZSA9IHRoaXMuZW5naW5lO1xuICAgICAgICByZXR1cm4gdGhpcy5kb2NQcm9taXNlLnRoZW4oZnVuY3Rpb24gKGRvYykge1xuICAgICAgICAgICAgbGV0IHdyaXR0ZW5TaXplID0gMDtcbiAgICAgICAgICAgIGxldCBkZWZlcnJlZCA9IGNyZWF0ZURlZmVycmVkKCk7XG4gICAgICAgICAgICBlbmdpbmUuc2F2ZURvYyhkb2MsIGVuZ2luZS5Xcml0ZXJDYWxsYmFjay5pbXBsZW1lbnQoe1xuICAgICAgICAgICAgICAgIFJlbGVhc2U6ICgpID0+IHt9LFxuICAgICAgICAgICAgICAgIEZsdXNoOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUod3JpdHRlblNpemUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIEdldFNpemU6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdyaXR0ZW5TaXplO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgV3JpdGVCbG9jazogKGN1cnNvciwgb2Zmc2V0LCBzaXplKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHdyaXR0ZW5TaXplICs9IHNpemU7XG4gICAgICAgICAgICAgICAgICAgIGxldCBlbmdpbmVCdWZmZXIgPSBlbmdpbmUuSEVBUFU4LmJ1ZmZlcjtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFycmF5QnVmZmVyO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZW5naW5lQnVmZmVyLnNsaWNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJheUJ1ZmZlciA9IGVuZ2luZUJ1ZmZlci5zbGljZShjdXJzb3IsIGN1cnNvciArIHNpemUpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlCdWZmZXIgPSBuZXcgVWludDhBcnJheShlbmdpbmVCdWZmZXIsIGN1cnNvciwgc2l6ZSkuYnVmZmVyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHdyaXRlU3RyZWFtKGFycmF5QnVmZmVyLCBvZmZzZXQsIHNpemUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSwgZW5naW5lLlNhdmVGbGFncy5lX1NhdmVGbGFnTm9ybWFsLnZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaW1wb3J0RnJvbUZERihmZGZkb2MsdHlwZSA9IDMpe1xuICAgICAgICBsZXQgcmFuZ2U9bmV3IHRoaXMuZW5naW5lLlJhbmdlKDAsdGhpcy5kb2MuR2V0UGFnZUNvdW50KCksdGhpcy5lbmdpbmUuUmFuZ2VGaWx0ZXIuZV9BbGwpO1xuICAgICAgICB0cnl7XG4gICAgICAgICAgICBsZXQgcmV0ID0gdGhpcy5kb2MuSW1wb3J0RnJvbUZERihmZGZkb2MsdHlwZSxyYW5nZSk7XG4gICAgICAgICAgICByYW5nZS5kZWxldGUoKTtcbiAgICAgICAgICAgIHJhbmdlID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH1jYXRjaChlcnIpe1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgbG9nZ2VyLmluZm8oJ0ltcG9ydEZyb21GREYnLCAnZmluYWxseScpXG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0Qm9va21hcmtzKCl7XG4gICAgICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiB0aGlzLmRvY1Byb21pc2UudGhlbihmdW5jdGlvbiAoY19kb2MpIHtcbiAgICAgICAgICAgIGxldCBkZWZlcnJlZCA9IGNyZWF0ZURlZmVycmVkKCk7XG4gICAgICAgICAgICBsZXQgcm9vdF9ib29rbWFyayA9IGNfZG9jLkdldFJvb3RCb29rbWFyaygpO1xuICAgICAgICAgICAgbGV0IGJvb2ttYXJrVHJlZTtcbiAgICAgICAgICAgIGlmKHJvb3RfYm9va21hcmsuSXNFbXB0eSgpKXtcbiAgICAgICAgICAgICAgICBib29rbWFya1RyZWUgPSBudWxsO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgbGV0IHJvb3RCb29rbWFyayA9IG5ldyBQREZCb29rbWFyayhfdGhpcy5lbmdpbmUsIFwiXCIsIHJvb3RfYm9va21hcmssIGNfZG9jKTtcbiAgICAgICAgICAgICAgICBib29rbWFya1RyZWUgPSByb290Qm9va21hcmsudG9Kc29uKCk7XG4gICAgICAgICAgICAgICAgX3RoaXMucm9vdEJvb2ttYXJrID0gcm9vdEJvb2ttYXJrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShib29rbWFya1RyZWUpO1xuICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjcmVhdGVSb290Qm9va21hcmsoKXtcbiAgICAgICAgbGV0IF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9jUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChjX2RvYykge1xuICAgICAgICAgICAgaWYoIV90aGlzLnJvb3RCb29rbWFyayl7XG4gICAgICAgICAgICAgICAgbGV0IHJvb3RfYm9va21hcmsgPSBjX2RvYy5DcmVhdGVSb290Qm9va21hcmsoKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBkZkJvb2ttYXJrID0gbmV3IFBERkJvb2ttYXJrKF90aGlzLmVuZ2luZSwgXCJcIiwgcm9vdF9ib29rbWFyaywgY19kb2MpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5yb290Qm9va21hcmsgPSBwZGZCb29rbWFyaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5yb290Qm9va21hcmsudG9Kc29uKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpbnNlcnRCb29rbWFyayhpZCwgdGl0bGUsIHBhZ2VJbmRleCwgdG9wLCBsZWZ0ID0gMCl7XG4gICAgICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGxldCBwZGZCb29rbWFyaztcbiAgICAgICAgaWYoaWQgPT09IFwiXCIgfHwgaWQgPT09IG51bGwpe1xuICAgICAgICAgICAgcGRmQm9va21hcmsgPSBfdGhpcy5yb290Qm9va21hcms7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgcGRmQm9va21hcmsgPSBfdGhpcy5yb290Qm9va21hcmsuZ2V0Qm9va21hcmtCeUlkKGlkKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbmV3Qm9va21hcmsgPSBwZGZCb29rbWFyay5pbnNlcnQodGl0bGUsIHBhZ2VJbmRleCwge3RvcDogdG9wLCBsZWZ0OiBsZWZ0fSk7XG4gICAgICAgIGxldCBqc29uID0gbmV3Qm9va21hcmsudG9Kc29uKCk7XG4gICAgICAgIHJldHVybiBqc29uO1xuICAgIH1cbiAgICBzZXRCb29rbWFya1Byb3BlcnR5KGlkLCBwcm9wZXJ0aWVzKXtcbiAgICAgICAgbGV0IHBkZkJvb2ttYXJrID0gdGhpcy5yb290Qm9va21hcmsuZ2V0Qm9va21hcmtCeUlkKGlkKTtcbiAgICAgICAgcGRmQm9va21hcmsuc2V0UHJvcGVydHkocHJvcGVydGllcyk7XG4gICAgICAgIHJldHVybiBwZGZCb29rbWFyay50b0pzb24oKTtcbiAgICB9XG4gICAgcmVtb3ZlQm9va21hcmsoaWQpe1xuICAgICAgICBsZXQgcGRmQm9va21hcmsgPSB0aGlzLnJvb3RCb29rbWFyay5nZXRCb29rbWFya0J5SWQoaWQpO1xuICAgICAgICByZXR1cm4gcGRmQm9va21hcmsucmVtb3ZlKCk7XG4gICAgfVxuICAgIGdldExheWVyTm9kZXMoKXtcbiAgICAgICAgbGV0IGVuZ2luZSA9IHRoaXMuZW5naW5lO1xuICAgICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gdGhpcy5kb2NQcm9taXNlLnRoZW4oZnVuY3Rpb24gKGNfZG9jKSB7XG4gICAgICAgICAgICBsZXQgZGVmZXJyZWQgPSBjcmVhdGVEZWZlcnJlZCgpO1xuICAgICAgICAgICAgbGV0IHBkZkxheWVyID0gbmV3IFBERkxheWVyKGNfZG9jLCBlbmdpbmUpO1xuICAgICAgICAgICAgX3RoaXMucGRmTGF5ZXIgPSBwZGZMYXllcjtcbiAgICAgICAgICAgIGxldCBsYXllckpTT04gPSBwZGZMYXllci50b0pzb24oKTtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUobGF5ZXJKU09OKTtcbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0UmVkYWN0aW9uKCl7XG4gICAgICAgIGxldCBlbmdpbmUgPSB0aGlzLmVuZ2luZTtcbiAgICAgICAgbGV0IF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9jUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChjX2RvYykge1xuICAgICAgICAgICAgaWYoIV90aGlzLmNfcmVkYWN0aW9uKXtcbiAgICAgICAgICAgICAgICB0cnl7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmNfcmVkYWN0aW9uID0gbmV3IGVuZ2luZS5SZWRhY3Rpb24oY19kb2MpO1xuICAgICAgICAgICAgICAgIH1jYXRjaChlcnIpe1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTmFOIChlcnIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnIgPSBlbmdpbmUuZ2V0RXJyb3JDb2RlIChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4gKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNfcmVkYWN0aW9uO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXBwbHlSZWRhY3Rpb24oKXtcbiAgICAgICAgbGV0IG9sZFBhZ2VzQW5ub3RPYmpzID0ge307XG4gICAgICAgIGxldCBwYWdlc01hcCA9IHt9O1xuICAgICAgICBsZXQgcHJvbWlzZXMgPSBbXTtcbiAgICAgICAgLy/lhYjojrflj5blt7LlrZjlnKjnmoRhbm5vdHNcbiAgICAgICAgZm9yKGxldCBpbmRleCBpbiB0aGlzLnBhZ2VDYWNoZSl7XG4gICAgICAgICAgICBsZXQgcGFnZSA9IHRoaXMucGFnZUNhY2hlW2luZGV4XTtcbiAgICAgICAgICAgIHBhZ2VzTWFwW3BhZ2UuaW5kZXhdID0gcGFnZTtcbiAgICAgICAgICAgIHByb21pc2VzLnB1c2gocGFnZS5nZXRBbm5vdHMoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKHBhZ2VzQW5ub3RPYmpzID0+IHtcbiAgICAgICAgICAgIGxldCBpID0wO1xuICAgICAgICAgICAgLy/miophbm5vdHMg5oyJ54WncGFnZUluZGV4IOWSjCBhbm5vdElkIOWFs+iBlOi1t+adpS5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICoge1xuICAgICAgICAgICAgICogIHBhZ2VJbmRleDp7XG4gICAgICAgICAgICAgKiAgICAgaWQ6IGFubm90LFxuICAgICAgICAgICAgICogICAgIGlkMjogYW5ub3QyLFxuICAgICAgICAgICAgICogIH0sXG4gICAgICAgICAgICAgKiAgcGFnZUluZGV4Mjp7XG4gICAgICAgICAgICAgKiAgICAgaWQ6IGFubm90LFxuICAgICAgICAgICAgICogICAgIGlkMjogYW5ub3QyLFxuICAgICAgICAgICAgICogIH0sXG4gICAgICAgICAgICAgKiB9XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZvcihsZXQgaW5kZXggaW4gdGhpcy5wYWdlQ2FjaGUpe1xuICAgICAgICAgICAgICAgIGxldCBwYWdlID0gdGhpcy5wYWdlQ2FjaGVbaW5kZXhdO1xuICAgICAgICAgICAgICAgIGlmKCFvbGRQYWdlc0Fubm90T2Jqc1twYWdlLmluZGV4XSkgb2xkUGFnZXNBbm5vdE9ianNbcGFnZS5pbmRleF0gPSB7fVxuICAgICAgICAgICAgICAgIHBhZ2VzQW5ub3RPYmpzW2ldLmZvckVhY2goYW5ub3QgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgaWQgPSBhbm5vdC5hbm5vdC5HZXRVbmlxdWVJRCgpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmKGlkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9sZFBhZ2VzQW5ub3RPYmpzW3BhZ2UuaW5kZXhdW2lkXSA9IGFubm90O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyByZWRhY3Rpb24gYXBwbHksIOeEtuWQjuabtOaWsHBhZ2UgYW5ub3RzLCDlvpfliLBhcHBseeWQjiwg5q+P6aG1546w5Zyo55qEYW5ub3RJZFxuICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ub3RJZHNcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICBhbm5vdElkc1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXVxuXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UmVkYWN0aW9uKCkudGhlbihjX3JlZGFjdGlvbiA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHByb21pc2VzID0gW107XG4gICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGNfcmVkYWN0aW9uLkFwcGx5KCk7XG4gICAgICAgICAgICAgICAgaWYoIXJlc3VsdCl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yKGxldCBpbmRleCBpbiB0aGlzLnBhZ2VDYWNoZSl7XG4gICAgICAgICAgICAgICAgICAgIGxldCBwYWdlID0gdGhpcy5wYWdlQ2FjaGVbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKHBhZ2UudXBkYXRlKCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICAgICAgICAgICAgfSkudGhlbihwYWdlc0Fubm90cyA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGRlbGV0ZWRQYWdlQW5ub3RzID0gW107XG4gICAgICAgICAgICAgICAgZm9yKGxldCBpPTA7aSA8IHBhZ2VzQW5ub3RzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBhZ2VBbm5vdHMgPSBwYWdlc0Fubm90c1tpXTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBhZ2VJbmRleCA9IHBhZ2VBbm5vdHMuaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGxldCBvbGRBbm5vdHMgPSBvbGRQYWdlc0Fubm90T2Jqc1twYWdlSW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZGVsZXRlZEFubm90cyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAvL+W+queOr2FwcGx555qEYW5ub3RzLCDmib7lh7rkuI3lrZjlnKjnmoQuXG4gICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaWQgaW4gb2xkQW5ub3RzKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhbm5vdCA9IG9sZEFubm90c1tpZF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihwYWdlQW5ub3RzLmFubm90SWRzLmluZGV4T2YoaWQpID09PSAtMSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlZEFubm90cy5wdXNoKGlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v5aSE55CG6YGX55WZ55qETm90ZSBhbm5vdC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdHlwZSA9IGFubm90LmdldFR5cGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih0eXBlID09IFwidGV4dFwiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1hcmtVcCA9IGFubm90LmFubm90LkdldFJlcGx5VG8oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlY3QgPSBhbm5vdC5hbm5vdC5HZXRSZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHJlY3QubGVmdCAhPT0gMCB8fCByZWN0LnRvcCAhPT0gMCB8fCByZWN0LnJpZ2h0ICE9PSAwIHx8IHJlY3QuYm90dG9tICE9PSAwKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhbm5vdElkID0gYW5ub3QuYW5ub3QuR2V0VW5pcXVlSUQoKS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihtYXJrVXAuaXNEZWxldGVkKCkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlZEFubm90cy5wdXNoKGFubm90SWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaWQgPSBtYXJrVXAuR2V0VW5pcXVlSUQoKS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHBhZ2VBbm5vdHMuYW5ub3RJZHMuaW5kZXhPZihpZCkgPT09IC0xKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFubm90SWQgPSBhbm5vdC5hbm5vdC5HZXRVbmlxdWVJRCgpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZWRBbm5vdHMucHVzaChhbm5vdElkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9Y2F0Y2goZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc05hTihlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlID0gdGhpcy5lbmdpbmUuZ2V0RXJyb3JDb2RlKGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGUudmFsdWUgJiYgZS52YWx1ZSA9PSA0KXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlZEFubm90cy5wdXNoKGFubm90SWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbm5vdC5yZW1vdmUoKS50aGVuKChzdWNjZXNzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcInJlbW92ZSBzdWNjZXNzOiBcIiArIHN1Y2Nlc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBkZWxldGVkUGFnZUFubm90cy5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVkQW5ub3RJZHM6IGRlbGV0ZWRBbm5vdHNcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZGVsZXRlZFBhZ2VBbm5vdHM7XG4gICAgICAgICAgICB9KS5jYXRjaChlPT4ge1xuICAgICAgICAgICAgICAgIGlmICghaXNOYU4oZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZSA9IHRoaXMuZW5naW5lLmdldEVycm9yQ29kZShlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImVycm9yOiBcIik7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBleHBvcnRUb0ZERihmaWxlVHlwZSxkYXRhVHlwZSl7XG4gICAgICAgIGxldCBlbmdpbmUgPSB0aGlzLmVuZ2luZTtcblxuICAgICAgICBsZXQgZmRmZG9jID0gbmV3IGVuZ2luZS5GREZEb2MoZmlsZVR5cGUpO1xuICAgICAgICBsZXQgcmFuZ2U9bmV3IGVuZ2luZS5SYW5nZSgwLHRoaXMuZG9jLkdldFBhZ2VDb3VudCgpLGVuZ2luZS5SYW5nZUZpbHRlci5lX0FsbCk7XG4gICAgICAgIHRoaXMuZG9jLkV4cG9ydFRvRkRGKGZkZmRvYyxkYXRhVHlwZSxyYW5nZSk7XG4gICAgICAgIHJhbmdlLmRlbGV0ZSgpO1xuICAgICAgICByYW5nZT1udWxsO1xuXG4gICAgICAgIGxldCB3cml0dGVuU2l6ZSA9IDA7XG4gICAgICAgIGxldCBidWZmZXJzID0gW107XG5cbiAgICAgICAgZmRmZG9jLlNhdmVBcyhlbmdpbmUuV3JpdGVyQ2FsbGJhY2suaW1wbGVtZW50KHtcbiAgICAgICAgICAgIFJlbGVhc2U6ICgpID0+IHt9LFxuICAgICAgICAgICAgRmx1c2g6ICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBHZXRTaXplOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdyaXR0ZW5TaXplO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFdyaXRlQmxvY2s6IChjdXJzb3IsIG9mZnNldCwgc2l6ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHdyaXR0ZW5TaXplICs9IHNpemU7XG4gICAgICAgICAgICAgICAgbGV0IGVuZ2luZUJ1ZmZlciA9IGVuZ2luZS5IRUFQVTguYnVmZmVyO1xuICAgICAgICAgICAgICAgIGxldCBhcnJheUJ1ZmZlcjtcbiAgICAgICAgICAgICAgICBpZiAoZW5naW5lQnVmZmVyLnNsaWNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGFycmF5QnVmZmVyID0gZW5naW5lQnVmZmVyLnNsaWNlKGN1cnNvciwgY3Vyc29yICsgc2l6ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYXJyYXlCdWZmZXIgPSBuZXcgVWludDhBcnJheShlbmdpbmVCdWZmZXIsIGN1cnNvciwgc2l6ZSkuYnVmZmVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBidWZmZXJzLnB1c2goYXJyYXlCdWZmZXIpO1xuICAgICAgICAgICAgICAgIC8vd3JpdGVTdHJlYW0oYXJyYXlCdWZmZXIsIG9mZnNldCwgc2l6ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcblxuICAgICAgICBmZGZkb2MuZGVsZXRlKCk7XG4gICAgICAgIGZkZmRvYz1udWxsO1xuICAgICAgICByZXR1cm4gbmV3IEJsb2IoYnVmZmVycywge3R5cGU6IFsnYXBwbGljYXRpb24vdm5kLmFkb2JlLmZkZicsICdhcHBsaWNhdGlvbi92bmQueGZkZiddW2ZpbGVUeXBlXX0pO1xuICAgIH1cbiAgICBsb2FkRm9ybSgpe1xuICAgICAgICBpZih0aGlzLmZvcm0pe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBlbmdpbmUgPSB0aGlzLmVuZ2luZTtcbiAgICAgICAgbGV0IGVuZ2luZUZvcm0gPSBuZXcgZW5naW5lLkZvcm0odGhpcy5kb2MpO1xuICAgICAgICB0aGlzLmZvcm0gPSBuZXcganJGb3JtKGVuZ2luZUZvcm0sZW5naW5lLHRoaXMuSlIpO1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JtO1xuICAgIH1cbiAgICBzZXRPcGVuQWN0aW9uKHR5cGUpe1xuICAgICAgICBsZXQgYWN0aW9uPXRoaXMuSlIuYWN0aW9uTWFuYWdlci5jcmVhdGUodGhpcy5kb2MsdHlwZSk7XG4gICAgICAgIHRoaXMuZG9jLlNldE9wZW5BY3Rpb24oYWN0aW9uKTtcbiAgICAgICAgdGhpcy5hY3Rpb249dGhpcy5KUi5hY3Rpb25NYW5hZ2VyLmdldChhY3Rpb24sdGhpcy5kb2MsdGhpcy5KUik7XG4gICAgICAgIHJldHVybiB0aGlzLmFjdGlvbi50b0pzb24oKTtcbiAgICB9XG5cblxuICAgIHNldFBhc3N3b3JkQW5kUGVybWlzc2lvbih1c2VyUGFzc3dvcmQsIGFkbWluUGFzc3dvcmQsIHBlcm1pc3Npb24sIGNpcGhlciwgaXNFbmNyeXB0TWV0YURhdGEpe1xuICAgICAgICBsZXQgZW5naW5lID0gdGhpcy5lbmdpbmU7XG4gICAgICAgIHJldHVybiB0aGlzLmRvY1Byb21pc2UudGhlbigoY19kb2MpID0+IHtcbiAgICAgICAgICAgIGxldCBjX2NpcGhlciwga2V5TGVuZ3RoO1xuICAgICAgICAgICAgaWYoY2lwaGVyID09IGNpcGhlclR5cGUuTm9uZSl7XG4gICAgICAgICAgICAgICAgY19jaXBoZXIgPSBlbmdpbmUuQ2lwaGVyVHlwZS5lX0NpcGhlck5vbmU7XG4gICAgICAgICAgICAgICAga2V5TGVuZ3RoID0gMDtcbiAgICAgICAgICAgIH1lbHNlIGlmKGNpcGhlciA9PSBjaXBoZXJUeXBlLlJDNCl7XG4gICAgICAgICAgICAgICAgY19jaXBoZXIgPSBlbmdpbmUuQ2lwaGVyVHlwZS5lX0NpcGhlclJDNDtcbiAgICAgICAgICAgICAgICBrZXlMZW5ndGggPSAxNjtcbiAgICAgICAgICAgIH1lbHNlIGlmKGNpcGhlciA9PSBjaXBoZXJUeXBlLkFFUzEyOCl7XG4gICAgICAgICAgICAgICAgY19jaXBoZXIgPSBlbmdpbmUuQ2lwaGVyVHlwZS5lX0NpcGhlckFFUztcbiAgICAgICAgICAgICAgICBrZXlMZW5ndGggPSAxNjtcbiAgICAgICAgICAgIH1lbHNlIGlmKGNpcGhlciA9PSBjaXBoZXJUeXBlLkFFUzI1Nil7XG4gICAgICAgICAgICAgICAgY19jaXBoZXIgPSBlbmdpbmUuQ2lwaGVyVHlwZS5lX0NpcGhlckFFUztcbiAgICAgICAgICAgICAgICBrZXlMZW5ndGggPSAzMjtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImNpcGhlciBlcnJvclwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBzZWN1cml0eUhhbmRsZXIgPSBjX2RvYy5HZXRTZWN1cml0eUhhbmRsZXIoKTtcbiAgICAgICAgICAgIGxldCBzZWN1cml0eVR5cGUgPSBzZWN1cml0eUhhbmRsZXIuR2V0U2VjdXJpdHlUeXBlKCk7XG4gICAgICAgICAgICBsZXQgc3RkU2VjdXJpdHlIYW5kbGVyLCBzdGRFbmNyeXB0RGF0YTtcbiAgICAgICAgICAgIHRyeXtcbiAgICAgICAgICAgICAgICBpZihzZWN1cml0eVR5cGUudmFsdWUgPT0gMSl7XG4gICAgICAgICAgICAgICAgICAgIHN0ZEVuY3J5cHREYXRhID0gY19kb2MuR2V0U3RkRW5jcnlwdERhdGEoKTtcbiAgICAgICAgICAgICAgICAgICAgc3RkRW5jcnlwdERhdGEuY2lwaGVyID0gY19jaXBoZXI7XG4gICAgICAgICAgICAgICAgICAgIHN0ZEVuY3J5cHREYXRhLmlzX2VuY3J5cHRfbWV0YWRhdGEgPSBpc0VuY3J5cHRNZXRhRGF0YTtcbiAgICAgICAgICAgICAgICAgICAgc3RkRW5jcnlwdERhdGEua2V5X2xlbmd0aCA9IGtleUxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgc3RkRW5jcnlwdERhdGEudXNlcl9wZXJtaXNzaW9ucyA9IHBlcm1pc3Npb247XG4gICAgICAgICAgICAgICAgICAgIHN0ZFNlY3VyaXR5SGFuZGxlciA9IG5ldyBlbmdpbmUuU3RkU2VjdXJpdHlIYW5kbGVyKHNlY3VyaXR5SGFuZGxlcik7XG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIHN0ZEVuY3J5cHREYXRhID0gbmV3IGVuZ2luZS5TdGRFbmNyeXB0RGF0YShpc0VuY3J5cHRNZXRhRGF0YSwgcGVybWlzc2lvbiwgY19jaXBoZXIsIGtleUxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIHN0ZFNlY3VyaXR5SGFuZGxlciA9IG5ldyBlbmdpbmUuU3RkU2VjdXJpdHlIYW5kbGVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfWNhdGNoKGUpe1xuICAgICAgICAgICAgICAgIHN0ZEVuY3J5cHREYXRhID0gbmV3IGVuZ2luZS5TdGRFbmNyeXB0RGF0YShpc0VuY3J5cHRNZXRhRGF0YSwgcGVybWlzc2lvbiwgY19jaXBoZXIsIGtleUxlbmd0aCk7XG4gICAgICAgICAgICAgICAgc3RkU2VjdXJpdHlIYW5kbGVyID0gbmV3IGVuZ2luZS5TdGRTZWN1cml0eUhhbmRsZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGNpcGhlciA9PSBjaXBoZXJUeXBlLkFFUzI1Nil7XG4gICAgICAgICAgICAgICAgbGV0IHN0clVzZXJQd2Q7XG4gICAgICAgICAgICAgICAgbGV0IHN0ck93bmVyUHdkO1xuICAgICAgICAgICAgICAgIGlmKHVzZXJQYXNzd29yZCA9PSAtMSl7XG4gICAgICAgICAgICAgICAgICAgIHN0clVzZXJQd2QgPSBuZXcgZW5naW5lLldTdHJpbmcoXCJcIik7XG4gICAgICAgICAgICAgICAgICAgIHN0ck93bmVyUHdkID0gbmV3IGVuZ2luZS5XU3RyaW5nKGFkbWluUGFzc3dvcmQpO1xuICAgICAgICAgICAgICAgICAgICBzdGRTZWN1cml0eUhhbmRsZXIuU2V0QUVTMjU2TW9kaWZ5RmxhZ3MoNSk7XG4gICAgICAgICAgICAgICAgc3RkU2VjdXJpdHlIYW5kbGVyLkluaXRpYWxpemVXKHN0ZEVuY3J5cHREYXRhLCBzdHJVc2VyUHdkLCBzdHJPd25lclB3ZCk7XG5cbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgc3RyVXNlclB3ZCA9IG5ldyBlbmdpbmUuV1N0cmluZyh1c2VyUGFzc3dvcmQpO1xuICAgICAgICAgICAgICAgICAgICBzdHJPd25lclB3ZCA9IG5ldyBlbmdpbmUuV1N0cmluZyhhZG1pblBhc3N3b3JkKTsgICAgXG4gICAgICAgICAgICAgICAgICAgIHN0ZFNlY3VyaXR5SGFuZGxlci5Jbml0aWFsaXplVyhzdGRFbmNyeXB0RGF0YSwgc3RyVXNlclB3ZCwgc3RyT3duZXJQd2QpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHN0clVzZXJQd2QuZGVsZXRlKCk7XG4gICAgICAgICAgICAgICAgc3RyT3duZXJQd2QuZGVsZXRlKCk7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICBsZXQgc3RyVXNlclB3ZCxzdHJPd25lclB3ZDtcbiAgICAgICAgICAgICAgICBzdHJVc2VyUHdkID0gbmV3IGVuZ2luZS5TdHJpbmcodXNlclBhc3N3b3JkKTtcbiAgICAgICAgICAgICAgICAgICAgc3RyT3duZXJQd2QgPSBuZXcgZW5naW5lLlN0cmluZyhhZG1pblBhc3N3b3JkKTtcbiAgICAgICAgICAgICAgICAgICAgc3RkU2VjdXJpdHlIYW5kbGVyLkluaXRpYWxpemUoc3RkRW5jcnlwdERhdGEsIHN0clVzZXJQd2QsIHN0ck93bmVyUHdkKTtcblxuICAgICAgICAgICAgICAgIHN0clVzZXJQd2QuZGVsZXRlKCk7XG4gICAgICAgICAgICAgICAgc3RyT3duZXJQd2QuZGVsZXRlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCByZXN1bHQgPSBjX2RvYy5TZXRTZWN1cml0eUhhbmRsZXIoc3RkU2VjdXJpdHlIYW5kbGVyKTtcbiAgICAgICAgICAgIGlmKHJlc3VsdCl7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGRDaXBoZXJPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICBpc0VuY3J5cHRNZXRhZGF0YTogaXNFbmNyeXB0TWV0YURhdGEsXG4gICAgICAgICAgICAgICAgICAgIHBlcm1pc3Npb246IHBlcm1pc3Npb24sXG4gICAgICAgICAgICAgICAgICAgIGNpcGhlclR5cGU6IGNpcGhlclxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0ZEVuY3J5cHREYXRhLmRlbGV0ZSgpO1xuICAgICAgICAgICAgc3RkRW5jcnlwdERhdGE9bnVsbDtcbiAgICAgICAgICAgIHN0ZFNlY3VyaXR5SGFuZGxlci5kZWxldGUoKTtcbiAgICAgICAgICAgIHN0ZFNlY3VyaXR5SGFuZGxlcj1udWxsO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVtb3ZlU2VjdXJpdHkoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9jUHJvbWlzZS50aGVuKChjX2RvYykgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZWdpc3RlckRSTVNlY3VyaXR5Q2FsbGJhY2sgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBjX2RvYy5SZW1vdmVTZWN1cml0eSgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgY2hlY2tQYXNzd29yZChwYXNzd29yZCl7XG4gICAgICAgIGxldCBlbmdpbmUgPSB0aGlzLmVuZ2luZTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9jUHJvbWlzZS50aGVuKChjX2RvYykgPT4ge1xuICAgICAgICAgICAgbGV0IHB3ZCA9IG5ldyBlbmdpbmUuU3RyaW5nKHBhc3N3b3JkKTtcbiAgICAgICAgICAgIGxldCB0eXBlID0gIGNfZG9jLkNoZWNrUGFzc3dvcmQocHdkKTtcbiAgICAgICAgICAgIHB3ZC5kZWxldGUoKTtcbiAgICAgICAgICAgIHB3ZD1udWxsO1xuICAgICAgICAgICAgcmV0dXJuIHR5cGUudmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBcblxuICAgIGdldFN0ZENpcGhlck9wdGlvbnMoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9jUHJvbWlzZS50aGVuKChjX2RvYykgPT4ge1xuICAgICAgICAgICAgaWYodGhpcy5zdGRDaXBoZXJPcHRpb25zKSByZXR1cm4gdGhpcy5zdGRDaXBoZXJPcHRpb25zO1xuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgICAgIGxldCBzZWN1cml0eUhhbmRsZXIgPSBjX2RvYy5HZXRTZWN1cml0eUhhbmRsZXIoKTtcbiAgICAgICAgICAgIGlmKCFzZWN1cml0eUhhbmRsZXIgfHwgc2VjdXJpdHlIYW5kbGVyLklzRW1wdHkoKSkgcmV0dXJuIG9wdGlvbnM7XG4gICAgICAgICAgICBsZXQgc2VjdXJpdHlUeXBlID0gc2VjdXJpdHlIYW5kbGVyLkdldFNlY3VyaXR5VHlwZSgpO1xuICAgICAgICAgICAgaWYoc2VjdXJpdHlUeXBlLnZhbHVlID09IDEpe1xuICAgICAgICAgICAgICAgIGxldCBlbmNyeXBlRGF0YSA9IGNfZG9jLkdldFN0ZEVuY3J5cHREYXRhKCk7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5pc0VuY3J5cHRNZXRhZGF0YSA9IGVuY3J5cGVEYXRhLmlzX2VuY3J5cHRfbWV0YWRhdGE7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5wZXJtaXNzaW9uID0gZW5jcnlwZURhdGEudXNlcl9wZXJtaXNzaW9ucztcbiAgICAgICAgICAgICAgICBpZihlbmNyeXBlRGF0YS5jaXBoZXIudmFsdWUgPT09IDApe1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmNpcGhlclR5cGUgPSBjaXBoZXJUeXBlLk5vbmU7XG4gICAgICAgICAgICAgICAgfWVsc2UgaWYoZW5jcnlwZURhdGEuY2lwaGVyLnZhbHVlID09PSAxKXtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5jaXBoZXJUeXBlID0gY2lwaGVyVHlwZS5SQzQ7XG4gICAgICAgICAgICAgICAgfWVsc2UgaWYoZW5jcnlwZURhdGEuY2lwaGVyLnZhbHVlID09PSAyKXtcbiAgICAgICAgICAgICAgICAgICAgaWYoZW5jcnlwZURhdGEua2V5X2xlbmd0aCA9PT0gMTYpe1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5jaXBoZXJUeXBlID0gY2lwaGVyVHlwZS5BRVMxMjg7XG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5jaXBoZXJUeXBlID0gY2lwaGVyVHlwZS5BRVMyNTY7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucztcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0VXNlclBhc3N3b3JkKHBhc3N3b3JkKXtcbiAgICAgICAgbGV0IGVuZ2luZSA9IHRoaXMuZW5naW5lO1xuICAgICAgICByZXR1cm4gdGhpcy5kb2NQcm9taXNlLnRoZW4oKGNfZG9jKSA9PiB7XG4gICAgICAgICAgICBsZXQgcHdkID0gbmV3IGVuZ2luZS5TdHJpbmcocGFzc3dvcmQpO1xuXG4gICAgICAgICAgICBsZXQgcmV0ID0gY19kb2MuR2V0VXNlclBhc3N3b3JkKHB3ZCkudG9TdHJpbmcoKTtcblxuICAgICAgICAgICAgcHdkLmRlbGV0ZSgpO1xuICAgICAgICAgICAgcHdkPW51bGw7XG5cbiAgICAgICAgICAgIHJldHVybiByZXRcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2V0UGFzc3dvcmRUeXBlKHR5cGUpe1xuICAgICAgICB0aGlzLnBhc3N3b3JkVHlwZSA9IHR5cGU7XG4gICAgfVxuICAgIGdldFBhc3N3b3JkVHlwZSgpe1xuICAgICAgICByZXR1cm4gdGhpcy5kb2NQcm9taXNlLnRoZW4oKGNfZG9jKSA9PiB7XG4gICAgICAgICAgICBpZih0aGlzLnBhc3N3b3JkVHlwZSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFzc3dvcmRUeXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNfZG9jLkdldFBhc3N3b3JkVHlwZSgpLnZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2V0UmVuZGVyRmxhZyhmbGFncyl7XG4gICAgICAgIHRoaXMucmVuZGVyRmxhZ3MgPSBmbGFncztcbiAgICB9XG4gICAgZ2V0UmVuZGVyRmxhZ3MoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyRmxhZ3M7XG4gICAgfVxuXG4gICAgZHJtRW5jcnlwdCAob3B0aW9ucykge1xuICAgICAgICBsZXQgZW5naW5lID0gdGhpcy5lbmdpbmU7XG4gICAgICAgIHJldHVybiB0aGlzLmRvY1Byb21pc2UudGhlbigoY19kb2MpID0+IHtcbiAgICAgICAgICAgIGxldCBzZWN1cml0eUhhbmRsZXIgPSBjX2RvYy5HZXRTZWN1cml0eUhhbmRsZXIoKTtcbiAgICAgICAgICAgIGlmIChzZWN1cml0eUhhbmRsZXIgJiYgIXNlY3VyaXR5SGFuZGxlci5Jc0VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgICBsZXQgZW5jcnlwdFR5cGUgPSBzZWN1cml0eUhhbmRsZXIuR2V0U2VjdXJpdHlUeXBlKCk7XG4gICAgICAgICAgICAgICAgaWYgKGVuY3J5cHRUeXBlICE9PSBlbmdpbmUuRW5jcnlwdFR5cGUuZV9FbmNyeXB0VW5rbm93biAmJiBlbmNyeXB0VHlwZSAhPT0gZW5naW5lLkVuY3J5cHRUeXBlLmVfRW5jcnlwdE5vbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8g6K+05piO5pyJ5Yqg5a+G5LqG77yM6K6p55So5oi35YWI56e76Zmk5Yqg5a+GXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh7ZXJyb3I6IDF9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY19kb2M7XG4gICAgICAgIH0pLnRoZW4oKGNfZG9jKSA9PiB7XG4gICAgICAgICAgICBsZXQgZHJtRW5jcnlwdERhdGEgPSBuZXcgZW5naW5lLkRSTUVuY3J5cHREYXRhKFxuICAgICAgICAgICAgICAgIG9wdGlvbnMuaXNFbmNyeXB0TWV0YWRhdGEsXG4gICAgICAgICAgICAgICAgbmV3IGVuZ2luZS5TdHJpbmcob3B0aW9ucy5zdWJGaWx0ZXIpLFxuICAgICAgICAgICAgICAgIGVuZ2luZS5DaXBoZXJUeXBlLnZhbHVlc1tvcHRpb25zLmNpcGhlcl0sXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5rZXlMZW5ndGgsXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5pc093bmVyLFxuICAgICAgICAgICAgICAgIG9wdGlvbnMudXNlclBlcm1pc3Npb25zXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgbGV0IGRybVNlY3VyaXR5SGFuZGxlciA9IG5ldyBlbmdpbmUuRFJNU2VjdXJpdHlIYW5kbGVyKCk7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy52YWx1ZXMpIHtcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWVzID0gb3B0aW9ucy52YWx1ZXM7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSBpbiB2YWx1ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgZHJtU2VjdXJpdHlIYW5kbGVyLlNldERSTVZhbHVlKGksIG5ldyBlbmdpbmUuV1N0cmluZyh2YWx1ZXNbaV0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZHJtU2VjdXJpdHlIYW5kbGVyLkluaXRpYWxpemUoZHJtRW5jcnlwdERhdGEsIG5ldyBlbmdpbmUuU3RyaW5nKG9wdGlvbnMuZmlsZUlkKSwgbmV3IGVuZ2luZS5TdHJpbmcob3B0aW9ucy5pbml0aWFsS2V5KSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW2NfZG9jLCBkcm1TZWN1cml0eUhhbmRsZXJdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyDliqDlr4blpLHotKVcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3Qoe2Vycm9yOiAyfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLnRoZW4oKFtjX2RvYywgZHJtU2VjdXJpdHlIYW5kbGVyXSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGNfZG9jLlNldFNlY3VyaXR5SGFuZGxlcihkcm1TZWN1cml0eUhhbmRsZXIpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldE1ldGFkYXRhVmFsdWVzKG1ldGFkYXRhLGtleSl7XG4gICAgbGV0IHZhbHVlQXJyYXkgPSBtZXRhZGF0YS5HZXRWYWx1ZXMoa2V5KTtcbiAgICBsZXQganNWYWx1ZUFycmF5ID0gJyc7XG4gICAgZm9yKGxldCBpbmRleD0wLHN6PXZhbHVlQXJyYXkuR2V0U2l6ZSgpO2luZGV4PHN6O2luZGV4Kyspe1xuICAgICAgICBqc1ZhbHVlQXJyYXkgPSB2YWx1ZUFycmF5LkdldEF0KGluZGV4KS50b1N0cmluZygpO1xuICAgIH1cbiAgICByZXR1cm4ganNWYWx1ZUFycmF5O1xufVxuXG5leHBvcnQgZGVmYXVsdCBQREZEb2M7IiwibGV0IHVybExpc3QgPSBbXTtcblxuICBmdW5jdGlvbiBhZGRGb250KGJ1ZmZlclN0cmluZywgZW5naW5lKXtcbiAgICBsZXQgYnVmZmVyO1xuICAgIGlmIChidWZmZXJTdHJpbmcgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICBidWZmZXIgPSBidWZmZXJTdHJpbmcuYnVmZmVyO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoYnVmZmVyU3RyaW5nLkdldExlbmd0aCAoKSA8IDEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAgIGxldCBzdGFydCA9IGJ1ZmZlclN0cmluZy5HZXRCdWZmZXIgKCk7XG4gICAgICBsZXQgc2l6ZSA9IGJ1ZmZlclN0cmluZy5HZXRMZW5ndGggKCk7XG4gICAgICBsZXQgZW5kID0gc3RhcnQgKyBzaXplO1xuICAgICAgaWYgKGVuZ2luZS5IRUFQVTguYnVmZmVyLnNsaWNlKSB7XG4gICAgICAgIGJ1ZmZlciA9IGVuZ2luZS5IRUFQVTguYnVmZmVyLnNsaWNlIChzdGFydCwgZW5kKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5IChlbmdpbmUuSEVBUFU4LmJ1ZmZlciwgc3RhcnQsIHNpemUpLmJ1ZmZlcjtcbiAgICAgIH1cbiAgICB9XG4gICAgICByZXR1cm4ge2J1ZmZlcn07XG4gICAgbGV0IGJsb2IgPSBuZXcgQmxvYiAoW2J1ZmZlcl0sIHt0eXBlOiAnYXBwbGljYXRpb24veC1mb250LXdvZmYnfSk7XG4gICAgICAvL2xldCBibG9iID0gbmV3IEJsb2IoW2J1ZmZlcl0se3R5cGU6J2FwcGxpY2F0aW9uL3gtZm9udC10cnVldHlwZSd9KTtcbiAgICAvL2xldCB1cmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuICAgIC8vdXJsTGlzdC5wdXNoKHVybCk7XG4gICAgLy9yZXR1cm4gdXJsXG4gICAgICByZXR1cm4gYmxvYjtcbiAgfVxuICBmdW5jdGlvbiByZXZva2VBbGxVUkwoKXtcbiAgICAvL2ZvcihsZXQgdXJsIG9mIHVybExpc3Qpe1xuICAgIC8vICBVUkwucmV2b2tlT2JqZWN0VVJMKHVybCk7XG4gICAgLy99XG4gIH1cbmZ1bmN0aW9uIGdldFdvZmZEYXRhQnVmZmVyICh3b2ZmRGF0YSwgZW5naW5lKSB7XG4gICAgaWYgKHdvZmZEYXRhLkdldExlbmd0aCAoKSA8IDEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgc3RhcnQgPSBidWZmZXJTdHJpbmcuR2V0QnVmZmVyICgpO1xuICAgIGxldCBzaXplID0gYnVmZmVyU3RyaW5nLkdldExlbmd0aCAoKTtcbiAgICBsZXQgZW5kID0gc3RhcnQgKyBzaXplO1xuICAgIGlmIChlbmdpbmUuSEVBUFU4LmJ1ZmZlci5zbGljZSkge1xuICAgICAgICBidWZmZXIgPSBlbmdpbmUuSEVBUFU4LmJ1ZmZlci5zbGljZSAoc3RhcnQsIGVuZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkgKGVuZ2luZS5IRUFQVTguYnVmZmVyLCBzdGFydCwgc2l6ZSkuYnVmZmVyO1xuICAgIH1cbiAgICByZXR1cm4ge2J1ZmZlcn07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBhZGRGb250LFxuICAgIHJldm9rZUFsbFVSTCxcbiAgICBnZXRXb2ZmRGF0YUJ1ZmZlcixcbn07IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGxpbmMgb24gMjAxOC82LzI4LlxuICovXG5pbXBvcnQgJy4vcG9seWZpbGwuanMnO1xuIGltcG9ydCBjcmVhdGVEZWZlcnJlZCBmcm9tICcuLi9zaGFyZWQvY3JlYXRlRGVmZXJyZWQnO1xuaW1wb3J0IFBERkRvYyBmcm9tICcuL1BERkRvYyc7XG5pbXBvcnQgRm9udEVudW1zIGZyb20gJy4vZ2V0VGhpcmRQYXJ0eUZvbnRCdWZmZXInO1xuaW1wb3J0IEFubm90TWFuYWdlciBmcm9tICcuL2Fubm90L0Fubm90TWFuYWdlcic7XG5pbXBvcnQgQWN0aW9uTWFuYWdlciBmcm9tICcuL2FjdGlvbi9BY3Rpb25NYW5hZ2VyJztcbmltcG9ydCBHcmFwaGljc09iamVjdE1hbmFnZXIgZnJvbSAnLi9ncmFwaGljcy9HcmFwaGljc09iamVjdE1hbmFnZXIuanMnO1xuaW1wb3J0IHt3YXNtSGFzaCwgYXNtTWVtSGFzaH0gZnJvbSAnLi4vanItZW5naW5lL2dzZGsvZ3Nkay5oYXNoJztcbmltcG9ydCBnZXRJY29uUHJvdmlkZXIgZnJvbSAnLi9pY29uUHJvdmlkZXInO1xuaW1wb3J0IExvZ2dlckZhY3RvcnkgZnJvbSAnLi4vc2hhcmVkL2xvZ2dlci9Mb2dnZXJGYWN0b3J5LmpzJztcbmltcG9ydCBicm90bGlEZWNvbXByZXNzIGZyb20gJy4vYnJvdGxpLWRlY29tcHJlc3MnO1xuaW1wb3J0IHtnZXRDdXN0b21TZWN1cml0eUNhbGxiYWNrLFxuICAgIGdldEN1c3RvbVNlY3VyaXR5SGFuZGxlcn0gZnJvbSBcIi4vY3VzdG9tU2VjdXJpdHlIYW5kbGVyXCJcblxuY29uc3QgbG9nZ2VyID0gTG9nZ2VyRmFjdG9yeS5nZXRMb2dnZXIoJ1BERkpSJyk7XG4vKipcbiAqIFBERiBqYXZhc2NyaXB0IHJlbmRlciBjbGFzcy5cbiAqIEBjbGFzc1xuICoqL1xuY2xhc3MgUERGSlIge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBQREZKUlxuICAgICAqIEBwYXJhbSBQREZKckVuZ2luZSBQREYgamF2YXNjcmlwdCBFbmdpbmVcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvciAoUERGSnJFbmdpbmUsIHtlbmdpbmVQYXRoID0gJy4nLCBmb250UGF0aCA9ICdodHRwOi8vd2VicGRmLmZveGl0c29mdHdhcmUuY29tL3dlYmZvbnRzJ30gPSB7fSkge1xuICAgICAgICBsZXQganJFbmdpbmVEZWZlcnJlZCA9IGNyZWF0ZURlZmVycmVkKCk7XG4gICAgICAgIGxldCBqckVuZ2luZVByb21pc2UgPSBqckVuZ2luZURlZmVycmVkLnByb21pc2U7XG4gICAgICAgIHRoaXMuanJFbmdpbmVQcm9taXNlID0ganJFbmdpbmVQcm9taXNlO1xuICAgICAgICB0aGlzLmZvbnRQYXRoID0gZm9udFBhdGg7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAdHlwZSBHU0RLXG4gICAgICAgICAqL1xuICAgICAgICBsZXQgZW5naW5lID0gdGhpcy5lbmdpbmUgPSBQREZKckVuZ2luZSh7XG4gICAgICAgICAgICBvblJ1bnRpbWVJbml0aWFsaXplZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGpyRW5naW5lRGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxvY2F0ZUZpbGU6IChmaWxlbmFtZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChmaWxlbmFtZSA9PT0gJ2dzZGsud2FzbScpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihcIkVkZ2VcIikgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2VuZ2luZVBhdGgsIGZpbGVuYW1lXS5qb2luKCcvJykgKyAnP2g9JyArIHdhc21IYXNoO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnZGF0YTphcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07YmFzZTY0LCcgKyBbZW5naW5lUGF0aCwgZmlsZW5hbWUgKyAnLmJyb3RsaSddLmpvaW4oJy8nKSArICc/aD0nICsgd2FzbUhhc2g7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChmaWxlbmFtZSA9PT0gJ2dzZGsuYXNtLmpzLm1lbScpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtlbmdpbmVQYXRoLCBmaWxlbmFtZSArICcuYnJvdGxpJ10uam9pbignLycpICsgJz9oPScgKyBhc21NZW1IYXNoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gW2VuZ2luZVBhdGgsIGZpbGVuYW1lXS5qb2luKCcvJykgKyAnP2g9JyArIHdhc21IYXNoO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlYWRCaW5hcnk6IGZ1bmN0aW9uICh3YXNtQmluYXJ5RmlsZSkge1xuICAgICAgICAgICAgICAgIGxldCBwcmUgPSAnZGF0YTphcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07YmFzZTY0LCc7XG4gICAgICAgICAgICAgICAgaWYgKHdhc21CaW5hcnlGaWxlLmluZGV4T2YocHJlKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB3YXNtQmluYXJ5RmlsZSA9IHdhc21CaW5hcnlGaWxlLnJlcGxhY2UocHJlLCAnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVhZEJyb3RsaUFzeW5jKHdhc21CaW5hcnlGaWxlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVhZEFzeW5jOiBmdW5jdGlvbiAobWVtb3J5SW5pdGlhbGl6ZXIsIG9ubG9hZCwgb25lcnJvcikge1xuICAgICAgICAgICAgICAgIC8vcmVhZEFzeW5jKG1lbW9yeUluaXRpYWxpemVyLCBvbmxvYWQsIG9uZXJyb3IpXG4gICAgICAgICAgICAgICAgcmVhZEJyb3RsaUFzeW5jKG1lbW9yeUluaXRpYWxpemVyLCBvbmxvYWQsIG9uZXJyb3IpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmFubm90TWFuYWdlciA9IG5ldyBBbm5vdE1hbmFnZXIoZW5naW5lKTtcbiAgICAgICAgdGhpcy5hY3Rpb25NYW5hZ2VyPW5ldyAgQWN0aW9uTWFuYWdlcihlbmdpbmUpO1xuICAgICAgICB0aGlzLmdyYXBoaWNzT2JqZWN0TWFuYWdlcj1uZXcgIEdyYXBoaWNzT2JqZWN0TWFuYWdlcihlbmdpbmUsdGhpcyk7XG4gICAgICAgIHRoaXMucGRmRG9jQ2FjaGUgPSB7fTtcblxuICAgICAgICB0aGlzLmZvbnRJbmZvTWFwPXt9XG4gICAgICAgIGpyRW5naW5lUHJvbWlzZS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIGxldCBlbmdpbmUgPSB0aGlzLmVuZ2luZTtcbiAgICAgICAgICAgIGVuZ2luZS5zZXRUaGlyZFBhcnR5Rm9udEhhbmRsZXIoZW5naW5lLlRoaXJkUGFydHlGb250SGFuZGxlci5pbXBsZW1lbnQoe1xuICAgICAgICAgICAgICAgIEdldFRoaXJkUGFydHlGb250OiAoZm9udE5hbWUsIGNoYXJzZXQsIGl0YWxpYywgd2VpZ2h0LCBmb250RmxhZyk9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBrZXk9W2ZvbnROYW1lLCBjaGFyc2V0LCBpdGFsaWMsIHdlaWdodCwgZm9udEZsYWddLmpvaW4oJy0nKTtcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5mb250SW5mb01hcFtrZXldKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZvbnRJbmZvTWFwW2tleV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gZGVidWdnZXI7ICAgXG4gICAgICAgICAgICAgICAgICAgIGxldCBidWZmZXIgPSBGb250RW51bXMuZ2V0VGhpcmRQYXJ0eUZvbnRCdWZmZXIoZm9udFBhdGgsIGZvbnROYW1lLCBjaGFyc2V0LCBpdGFsaWMsIHdlaWdodCwgZm9udEZsYWcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWJ1ZmZlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbGV0IGZvbnRJbmZvID0gZW5naW5lLlRoaXJkUGFydHlGb250SW5mby5pbXBsZW1lbnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgR2V0RmFjZUluZGV4OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIEdldEZvbnRGaWxlRGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRhdGEgPSBlbmdpbmUuX21hbGxvYyhidWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5naW5lLkhFQVBVOC5zZXQobmV3IFVpbnQ4QXJyYXkoYnVmZmVyKSwgZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGV0IGRhdGEgPSBnc2RrLl9tYWxsb2MoMjApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZm9yIChsZXQgaSA9IDA7IGkgPCAyMDsgaSArKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICBnc2RrLkhFQVBVOFtkYXRhICsgaV0gPSBpICsgNjVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJuIGRhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYnVmZmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIEdldEZvbnRGaWxlU2l6ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlci5ieXRlTGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9udEluZm9NYXBba2V5XT1mb250SW5mb1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTmFOIChlcnIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgZXJyID0gdGhpcy5lbmdpbmUuZ2V0RXJyb3JDb2RlIChlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybiAoZXJyKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIEdldFdlYkZvbnRGaWxlU3RyZWFtKHBvcyl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogQHR5cGUgVWludDhBcnJheVxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgbGV0IGJ1ZmZlciA9IEZvbnRFbnVtcy5nZXRXZWJGb250RmlsZUJ1ZmZlcihmb250UGF0aCxwb3MpO1xuICAgICAgICAgICAgICAgICAgICBpZighYnVmZmVyKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxldCBzdHJlYW1DYWxsYmFjaz1udWxsO1xuICAgICAgICAgICAgICAgICAgICB0cnl7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW1DYWxsYmFjayA9IGVuZ2luZS5TdHJlYW1DYWxsYmFjay5pbXBsZW1lbnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlbGVhc2U6ICgpID0+IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZsdXNoOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0U2l6ZTooKT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZUJsb2NrOihjdXJzb3IsIG9mZnNldCwgc2l6ZSk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdyZWFkb25seSBtb2RlLCB3cml0ZSBmdW5jdGlvbiBzaG91bGRuXFwndCBiZSBjYWxsZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFkQmxvY2s6KGJ1ZlB0cixvZmZzZXQsc2l6ZSk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNyYyA9IGJ1ZmZlci5zbGljZShvZmZzZXQsb2Zmc2V0K3NpemUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmdpbmUuSEVBUFU4LnNldChzcmMsIGJ1ZlB0cik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNOYU4gKGVycikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyID0gdGhpcy5lbmdpbmUuZ2V0RXJyb3JDb2RlIChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuIChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHJlYW1DYWxsYmFjaztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIEdldEZvbnRGaWxlc1Bvcyhwb3Mpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRm9udEVudW1zLmdldEZvbnRGaWxlc1Bvcyhwb3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgLy8gaWNvblByb3ZpZGVyLmluaXRJY29uUHJvdmlkZXIodGhpcyxlbmdpbmUpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy51c2VyTmFtZSA9ICdGb3hpdCBXZWInO1xuICAgIH1cbiAgICBnZXRGb250QnVmZmVyKGZvbnROYW1lLCBmb250RmxhZyxpdGFsaWMgPSBmYWxzZSxjaGFyc2V0PTAsIHdlaWdodD00MDAscmVhbE5hbWU9ZmFsc2Upe1xuICAgICAgICByZXR1cm4gRm9udEVudW1zLmdldFRoaXJkUGFydHlGb250QnVmZmVyKHRoaXMuZm9udFBhdGgsIGZvbnROYW1lLCBjaGFyc2V0LCBpdGFsaWMsIHdlaWdodCwgZm9udEZsYWcscmVhbE5hbWUpO1xuICAgIH1cbiAgICB1cGRhdGVQZGZEb2NDYWNoZSAocGRmRG9jKSB7XG4gICAgICAgIGxldCBpZCA9IHBkZkRvYy5pZDtcbiAgICAgICAgdGhpcy5wZGZEb2NDYWNoZVtpZF0gPSBwZGZEb2M7XG4gICAgfVxuICAgIGdldFBERkRvY0J5SWQgKGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBkZkRvY0NhY2hlW2lkXSB8fCBudWxsO1xuICAgIH1cbiAgICBkZXN0cm95RG9jIChpZCkge1xuICAgICAgICAvL2xldCBwZGZEb2MgPSB0aGlzLnBkZkRvY0NhY2hlW2lkXTtcbiAgICAgICAgLy9pZiAocGRmRG9jKSB7XG4gICAgICAgIC8vICAgIHBkZkRvYy5kZXN0cm95KCk7XG4gICAgICAgIC8vfVxuICAgICAgICBkZWxldGUgdGhpcy5wZGZEb2NDYWNoZVtpZF07XG4gICAgICAgIC8vcGRmRG9jID0gbnVsbDtcbiAgICB9XG5cbiAgICBjaGVja0xpY2Vuc2UgKHNuID0gJycsIGtleSA9ICcnKSB7XG4gICAgICAgIGxldCBkZWZlcnJlZCA9IGNyZWF0ZURlZmVycmVkKCk7XG5cbiAgICAgICAgdGhpcy5qckVuZ2luZVByb21pc2UudGhlbigoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbmdpbmUuaW5pdGlhbGl6ZShzbiwga2V5KSA9PT0gdGhpcy5lbmdpbmUuRXJyb3JDb2RlLmVfRXJyU3VjY2VzcztcbiAgICAgICAgfSkudGhlbigoZmxhZykgPT4ge1xuICAgICAgICAgICAgaWYoZmxhZyl7XG4gICAgICAgICAgICAgICAgdGhpcy5lbmdpbmUuTGlicmFyeS5FbmFibGVKYXZhU2NyaXB0KGZhbHNlKTtcbiAgICAgICAgICAgICAgICBnZXRJY29uUHJvdmlkZXIoKS5pbml0SWNvblByb3ZpZGVyKHRoaXMsdGhpcy5lbmdpbmUpO1xuICAgICAgICAgICAgICAgIC8vdGhpcy5yZWdpc3RlckRSTVNlY3VyaXR5Q2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICAvL2xldCBbZmlsdGVyLGNhbGxiYWNrXSA9IGdldEN1c3RvbVNlY3VyaXR5Q2FsbGJhY2sodGhpcy5lbmdpbmUpO1xuICAgICAgICAgICAgICAgIC8vdGhpcy5lbmdpbmUuTGlicmFyeS5SZWdpc3RlclNlY3VyaXR5Q2FsbGJhY2soZmlsdGVyLGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5yZXNvbHZlKGZsYWcpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgfVxuXG4gICAgLy9nZXRQREZEb2NCeUZpbGUgKGZpbGUpIHtcbiAgICAvLyAgICBsZXQgZGVmZXJyZWQgPSBjcmVhdGVEZWZlcnJlZCgpO1xuICAgIC8vICAgIGxldCBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAvLyAgICBsZXQgZW5naW5lID0gdGhpcy5lbmdpbmU7XG4gICAgLy8gICAgZmlsZVJlYWRlci5vbmVycm9yID0gKCkgPT4ge1xuICAgIC8vICAgICAgICBkZWZlcnJlZC5yZWplY3QoKTtcbiAgICAvLyAgICB9XG4gICAgLy8gICAgZmlsZVJlYWRlci5vbmxvYWQgPSAoKSA9PiB7XG4gICAgLy8gICAgICAgIGxldCBkYXRhVmlldyA9IG5ldyBVaW50OEFycmF5KGZpbGVSZWFkZXIucmVzdWx0KTtcbiAgICAvLyAgICAgICAgbGV0IGJ1ZmZlclNpemUgPSBkYXRhVmlldy5sZW5ndGggKiBkYXRhVmlldy5CWVRFU19QRVJfRUxFTUVOVDtcbiAgICAvLyAgICAgICAgbGV0IG1hbGxvY0luZGV4ID0gZW5naW5lLl9tYWxsb2MoYnVmZmVyU2l6ZSk7XG4gICAgLy8gICAgICAgIGVuZ2luZS5IRUFQVTguc2V0KGRhdGFWaWV3LCBtYWxsb2NJbmRleCk7XG4gICAgLy8gICAgICAgIGRhdGFWaWV3ID0gbnVsbDtcbiAgICAvLyAgICAgICAgbGV0IHBkZkRvYyA9IG5ldyBQREZEb2MoZW5naW5lKTtcbiAgICAvLyAgICAgICAgdGhpcy51cGRhdGVQZGZEb2NDYWNoZShwZGZEb2MpO1xuICAgIC8vICAgICAgICBwZGZEb2MucHVzaENodW5rKG1hbGxvY0luZGV4LCBidWZmZXJTaXplKTtcbiAgICAvLyAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShwZGZEb2MpO1xuICAgIC8vICAgIH1cbiAgICAvLyAgICBmaWxlUmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpO1xuICAgIC8vICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgIC8vfVxuICAgIGNyZWF0ZU5ld0RvYyh0aXRsZSwgYXV0aG9yLCBwYWdlU2l6ZSl7XG4gICAgICAgIGxldCBwZGZEb2MgPSBuZXcgUERGRG9jKHRoaXMsIHtcbiAgICAgICAgICAgIGlzQ3JlYXRlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNldE1ldGFEYXRhKHBkZkRvYywgdGl0bGUsIGF1dGhvcik7XG4gICAgICAgIGxldCB3aWR0aCwgaGVpZ2h0O1xuICAgICAgICBpZihwYWdlU2l6ZSl7XG4gICAgICAgICAgICBpZihwYWdlU2l6ZS53aWR0aCl7XG4gICAgICAgICAgICAgICAgd2lkdGggPSBwYWdlU2l6ZS53aWR0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKHBhZ2VTaXplLmhlaWdodCl7XG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gcGFnZVNpemUuaGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwZGZEb2MuaW5zZXJ0UGFnZSgwLCB3aWR0aCwgaGVpZ2h0KS50aGVuKF8gPT4ge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVQZGZEb2NDYWNoZShwZGZEb2MsIHRpdGxlLCBhdXRob3IpO1xuICAgICAgICAgICAgcmV0dXJuIHBkZkRvYztcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHNldE1ldGFEYXRhKHBkZkRvYywgdGl0bGUsIGF1dGhvcil7XG4gICAgICAgIGxldCB0aXRsZUtleSA9IG5ldyB0aGlzLmVuZ2luZS5XU3RyaW5nKFwiVGl0bGVcIik7XG4gICAgICAgIGxldCBhdXRob3JLZXkgPSBuZXcgdGhpcy5lbmdpbmUuV1N0cmluZyhcIkF1dGhvclwiKTtcbiAgICAgICAgbGV0IHByb2R1Y2VyS2V5ID0gbmV3IHRoaXMuZW5naW5lLldTdHJpbmcoXCJQcm9kdWNlclwiKTtcbiAgICAgICAgbGV0IHRpdGxlVmFsXG4gICAgICAgIGlmKHRpdGxlKXtcbiAgICAgICAgICAgIHRpdGxlVmFsID0gbmV3IHRoaXMuZW5naW5lLldTdHJpbmcodGl0bGUpO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIHRpdGxlVmFsID0gbmV3IHRoaXMuZW5naW5lLldTdHJpbmcoXCJVbnRpdGxlZC5wZGZcIik7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGF1dGhvclZhbDtcbiAgICAgICAgaWYoYXV0aG9yKXtcbiAgICAgICAgICAgIGF1dGhvclZhbCA9IG5ldyB0aGlzLmVuZ2luZS5XU3RyaW5nKGF1dGhvcik7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgYXV0aG9yVmFsID0gbmV3IHRoaXMuZW5naW5lLldTdHJpbmcoXCJVbmtub3duXCIpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBsZXQgcHJvZHVjZXJWYWwgPSBuZXcgdGhpcy5lbmdpbmUuV1N0cmluZyhcIkZveGl0IFBERldlYlNESzcuMFwiKTtcblxuICAgICAgICBwZGZEb2Muc2V0TWV0YWRhdGFWYWx1ZSh0aXRsZUtleSwgdGl0bGVWYWwpO1xuICAgICAgICBwZGZEb2Muc2V0TWV0YWRhdGFWYWx1ZShhdXRob3JLZXksIGF1dGhvclZhbCk7XG4gICAgICAgIHBkZkRvYy5zZXRNZXRhZGF0YVZhbHVlKHByb2R1Y2VyS2V5LCBwcm9kdWNlclZhbCk7XG4gICAgICAgIGxldCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBsZXQgeSA9IG5vdy5nZXRVVENGdWxsWWVhcigpO1xuICAgICAgICBsZXQgbSA9IG5vdy5nZXRVVENNb250aCgpICsgMTtcbiAgICAgICAgbGV0IGQgPSBub3cuZ2V0VVRDRGF0ZSgpO1xuICAgICAgICBsZXQgaCA9IG5vdy5nZXRVVENIb3VycygpO1xuICAgICAgICBsZXQgbWluID0gbm93LmdldFVUQ01pbnV0ZXMoKTtcbiAgICAgICAgbGV0IHMgPSBub3cuZ2V0VVRDU2Vjb25kcygpO1xuICAgICAgICBpZihtIDwgMTApIG0gPSBcIjBcIiArIG07XG4gICAgICAgIGlmKGQgPCAxMCkgZCA9IFwiMFwiICsgZDtcbiAgICAgICAgaWYoaCA8IDEwKSBoID0gXCIwXCIgKyBoO1xuICAgICAgICBpZihtaW4gPCAxMCkgbWluID0gXCIwXCIgKyBtaW47XG4gICAgICAgIGlmKHMgPCAxMCkgcyA9IFwiMFwiICsgcztcbiAgICAgICAgLy9EOjIwMTAwOTE3MDYyNTA1KzEwJzAwJ1xuICAgICAgICBsZXQgZGF0ZSA9IFwiRDpcIisgeSArIG0gKyBkICsgaCArIG1pbiArIHMgKyBcIiswMCcwMCdcIjtcbiAgICAgICAgbGV0IGNyZWF0aW9uRGF0ZSA9IG5ldyB0aGlzLmVuZ2luZS5XU3RyaW5nKFwiQ3JlYXRpb25EYXRlXCIpO1xuICAgICAgICBsZXQgbW9kRGF0ZSA9IG5ldyB0aGlzLmVuZ2luZS5XU3RyaW5nKFwiTW9kRGF0ZVwiKTtcbiAgICAgICAgZGF0ZSA9IG5ldyB0aGlzLmVuZ2luZS5XU3RyaW5nKGRhdGUpO1xuXG4gICAgICAgIHBkZkRvYy5zZXRNZXRhZGF0YVZhbHVlKGNyZWF0aW9uRGF0ZSwgZGF0ZSk7XG4gICAgICAgIHBkZkRvYy5zZXRNZXRhZGF0YVZhbHVlKG1vZERhdGUsIGRhdGUpO1xuICAgICAgICB0aXRsZUtleS5kZWxldGUoKTtcbiAgICAgICAgYXV0aG9yS2V5LmRlbGV0ZSgpO1xuICAgICAgICBwcm9kdWNlcktleS5kZWxldGUoKTtcbiAgICAgICAgdGl0bGVWYWwuZGVsZXRlKCk7XG4gICAgICAgIGF1dGhvclZhbC5kZWxldGUoKTtcbiAgICAgICAgcHJvZHVjZXJWYWwuZGVsZXRlKCk7XG4gICAgICAgIGNyZWF0aW9uRGF0ZS5kZWxldGUoKTtcbiAgICAgICAgbW9kRGF0ZS5kZWxldGUoKTtcbiAgICAgICAgZGF0ZS5kZWxldGUoKTtcbiAgICB9XG4gICAgZ2V0UERGRG9jICh7c2l6ZSwgZ2V0QnVmZmVyLCByZWxlYXNlfSkge1xuICAgICAgICBsZXQgcGRmRG9jID0gbmV3IFBERkRvYyh0aGlzLCB7XG4gICAgICAgICAgICBnZXRCdWZmZXIsXG4gICAgICAgICAgICBzaXplLFxuICAgICAgICAgICAgcmVsZWFzZSxcbiAgICAgICAgICAgIGFzeW5jOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy51cGRhdGVQZGZEb2NDYWNoZShwZGZEb2MpO1xuICAgICAgICByZXR1cm4gcGRmRG9jO1xuICAgIH1cbiAgICBnZXRGREZEb2Moe3NpemUsIGdldEJ1ZmZlciwgcmVsZWFzZX0pe1xuICAgICAgICBsZXQgcmVhZGVyQ2FsbGJhY2sgPSB0aGlzLmVuZ2luZS5SZWFkZXJDYWxsYmFjay5pbXBsZW1lbnQoe1xuICAgICAgICAgICAgUmVsZWFzZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIEdldFNpemU6ICgpID0+e1xuICAgICAgICAgICAgICAgIHJldHVybiBzaXplO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFJlYWRCbG9jazogKGJ1ZmZlciwgb2Zmc2V0LCBzaXplKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHNyYyA9IG5ldyBVaW50OEFycmF5KGdldEJ1ZmZlcihvZmZzZXQsIHNpemUpKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVuZ2luZS5IRUFQVTguc2V0KHNyYywgYnVmZmVyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzLmVuZ2luZS5GREZEb2MocmVhZGVyQ2FsbGJhY2spO1xuICAgIH1cbiAgICBnZXRGREZGcm9tVVJMKHVybCl7XG4gICAgICAgIGxldCB4aHIgPXRoaXMucmVxdWVzdERhdGEoJ0dFVCcsZmFsc2UsdXJsLDEsMSx0cnVlKTtcbiAgICAgICAgdmFyIGZpbGVTaXplID0gK3hoci5nZXRSZXNwb25zZUhlYWRlcignQ29udGVudC1SYW5nZScpLm1hdGNoKCdieXRlc1teXSs/LyhbXl0rKScpWzFdO1xuXG4gICAgICAgIGxldCByZWFkZXJDYWxsYmFjayA9IHRoaXMuZW5naW5lLlJlYWRlckNhbGxiYWNrLmltcGxlbWVudCh7XG4gICAgICAgICAgICBSZWxlYXNlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgR2V0U2l6ZTogKCkgPT57XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpbGVTaXplO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFJlYWRCbG9jazogKGJ1ZmZlciwgb2Zmc2V0LCBzaXplKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHNyYyA9IG5ldyBVaW50OEFycmF5KHRoaXMucmVxdWVzdERhdGEoXCJHRVRcIixmYWxzZSx1cmwsb2Zmc2V0LHNpemUpKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVuZ2luZS5IRUFQVTguc2V0KHNyYywgYnVmZmVyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IHRoaXMuZW5naW5lLkZERkRvYyhyZWFkZXJDYWxsYmFjaykpO1xuICAgIH1cbiAgICBnZXRQREZEb2NBc3luYyAoe3NpemUsIGdldEJ1ZmZlciwgcmVsZWFzZX0pIHtcbiAgICAgICAgbGV0IHBkZkRvYyA9IG5ldyBQREZEb2ModGhpcywge1xuICAgICAgICAgICAgZ2V0QnVmZmVyLFxuICAgICAgICAgICAgc2l6ZSxcbiAgICAgICAgICAgIHJlbGVhc2UsXG4gICAgICAgICAgICBhc3luYzogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy51cGRhdGVQZGZEb2NDYWNoZShwZGZEb2MpO1xuICAgICAgICByZXR1cm4gcGRmRG9jO1xuICAgIH1cbiAgICBnZXRQREZEb2NCeVJlYWRlckNhbGJhY2sgKHJlYWRlckNhbGxiYWNrUGFyYW1zKSB7XG4gICAgICAgIGxldCBwZGZEb2MgPSBuZXcgUERGRG9jKHRoaXMuZW5naW5lLCB7cmVhZGVyQ2FsbGJhY2tQYXJhbXN9KTtcbiAgICAgICAgdGhpcy51cGRhdGVQZGZEb2NDYWNoZShwZGZEb2MpO1xuICAgICAgICByZXR1cm4gcGRmRG9jO1xuICAgIH1cbiAgICBnZXRQREZEb2NCeUFzeW5jUmVhZGVyQ2FsbGJhY2sgKHJlYWRlckNhbGxiYWNrUGFyYW1zKSB7XG4gICAgICAgIGxldCBwZGZEb2MgPSBuZXcgUERGRG9jKHRoaXMuZW5naW5lLCB7cmVhZGVyQ2FsbGJhY2tQYXJhbXMsIGFzeW5jOiB0cnVlfSk7XG4gICAgICAgIHRoaXMudXBkYXRlUGRmRG9jQ2FjaGUocGRmRG9jKTtcbiAgICAgICAgcmV0dXJuIHBkZkRvYztcbiAgICB9XG4gICAgY3JlYXRlUERGRG9jICgpIHtcbiAgICAgICAgXG4gICAgfVxuICAgIHJlcXVlc3REYXRhKHR5cGUsYXN5bmMsdXJsLG9mZnNldCwgc2l6ZSxlbnRpdHkpe1xuICAgICAgICB2YXIgeG1sSHR0cCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICB4bWxIdHRwLm9wZW4odHlwZSwgdXJsLCBhc3luYyk7XG4gICAgICAgIGlmKHR5cGVvZiBvZmZzZXQgIT0gJ3VuZGVmaW5lZCcpe1xuICAgICAgICAgICAgdmFyIHJhbmdlID0gXCJieXRlcz1cIiArIG9mZnNldCArIFwiLVwiICsgKG9mZnNldCArIHNpemUgLSAxKTtcbiAgICAgICAgICAgIHhtbEh0dHAuc2V0UmVxdWVzdEhlYWRlcihcIlJhbmdlXCIsIHJhbmdlKTtcbiAgICAgICAgICAgIHhtbEh0dHAucmVzcG9uc2VUeXBlPVwiYXJyYXlidWZmZXJcIjtcbiAgICAgICAgfVxuICAgICAgICB4bWxIdHRwLnNlbmQobnVsbCk7XG4gICAgICAgIGxldCBzdGF0dXMgPSB4bWxIdHRwLnN0YXR1cztcbiAgICAgICAgXG4gICAgICAgIGlmIChzdGF0dXM+PTIwMCYmc3RhdHVzPDMwMHx8c3RhdHVzPT09MzA0KXtcbiAgICAgICAgICAgIGlmKGVudGl0eSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHhtbEh0dHA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geG1sSHR0cC5yZXNwb25zZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvL3NhdmVCaXRtYXBUb0ZpbGUoYml0bWFwKXtcbiAgICAvLyAgICBsZXQgZW5naW5lID0gdGhpcy5lbmdpbmU7XG4gICAgLy8gICAgbGV0IGltYWdlID0gbmV3IHRoaXMuZW5naW5lLkltYWdlKCk7XG4gICAgLy8gICAgaW1hZ2UuQWRkRnJhbWUoYml0bWFwKTtcbiAgICAvLyAgICBsZXQgYnVmZmVyID0gW11cbiAgICAvLyAgICBsZXQgc3RyZWFtQ2FsbGJhY2sgPSB0aGlzLmVuZ2luZS5TdHJlYW1DYWxsYmFjay5pbXBsZW1lbnQoe1xuICAgIC8vICAgICAgICBSZWxlYXNlOiAoKSA9PiB7fSxcbiAgICAvLyAgICAgICAgRmx1c2g6ICgpID0+IHtcbiAgICAvLyAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgIC8vICAgICAgICB9LFxuICAgIC8vICAgICAgICBHZXRTaXplOigpPT57XG4gICAgLy8gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAvLyAgICAgICAgfSxcbiAgICAvLyAgICAgICAgV3JpdGVCbG9jazooY3Vyc29yLCBvZmZzZXQsIHNpemUpPT57XG4gICAgLy8gICAgICAgICAgICBsZXQgZW5naW5lQnVmZmVyID0gZW5naW5lLkhFQVBVOC5idWZmZXI7XG4gICAgLy8gICAgICAgICAgICBsZXQgYXJyYXlCdWZmZXI7XG4gICAgLy8gICAgICAgICAgICBpZiAoZW5naW5lQnVmZmVyLnNsaWNlKSB7XG4gICAgLy8gICAgICAgICAgICAgICAgYXJyYXlCdWZmZXIgPSBlbmdpbmVCdWZmZXIuc2xpY2UoY3Vyc29yLCBjdXJzb3IgKyBzaXplKTtcbiAgICAvLyAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgLy8gICAgICAgICAgICAgICAgYXJyYXlCdWZmZXIgPSBuZXcgVWludDhBcnJheShlbmdpbmVCdWZmZXIsIGN1cnNvciwgc2l6ZSkuYnVmZmVyO1xuICAgIC8vICAgICAgICAgICAgfVxuICAgIC8vICAgICAgICAgICAgYnVmZmVyID0gYnVmZmVyLmNvbmNhdChhcnJheUJ1ZmZlcik7XG4gICAgLy8gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAvLyAgICAgICAgfVxuICAgIC8vICAgIH0pXG4gICAgLy8gICAgaW1hZ2UuU2F2ZUFzKHN0cmVhbUNhbGxiYWNrLG5ldyB0aGlzLmVuZ2luZS5XU3RyaW5nKFwiLmJtcFwiKSk7XG4gICAgLy9cbiAgICAvLyAgICBsZXQgYmxvYiA9IG5ldyBCbG9iKGJ1ZmZlcix7dHlwZTpcImltYWdlL2JtcFwifSk7XG4gICAgLy8gICAgbGV0IGZpbGVVcmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuICAgIC8vICAgIGNvbnNvbGUubG9nKGZpbGVVcmwpO1xuICAgIC8vfVxuICAgIHJlZ2lzdGVyU2VjdXJpdHlDYWxsYmFjayAodHlwZSwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLnVuUmVnaXN0ZXJTZWN1cml0eUNhbGxiYWNrKHR5cGUpO1xuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ0ZveGl0RFJNJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZWdpc3RlckRSTVNlY3VyaXR5Q2FsbGJhY2sob3B0aW9ucyk7XG4gICAgICAgICAgICBkZWZhdWx0IDpcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVnaXN0ZXJEUk1TZWN1cml0eUNhbGxiYWNrICgpIHtcbiAgICAgICAgaWYgKHRoaXMucmVnaXN0ZXJlZERSTVNlY3VyaXR5Q2FsbGJhY2spIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgZW5naW5lID0gdGhpcy5lbmdpbmU7XG4gICAgICAgICAgICBsZXQgc2VjdXJpdHlDYWxsYmFjayA9IGVuZ2luZS5EUk1TZWN1cml0eUNhbGxiYWNrLmltcGxlbWVudCh7XG4gICAgICAgICAgICAgICAgUmVsZWFzZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgR2V0U2VjdXJpdHlUeXBlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbmdpbmUuRW5jcnlwdFR5cGUuZV9FbmNyeXB0Rm94aXREUk07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBJc093bmVyOiAoY19kb2MsIHN1YkZpbHRlcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcGRmRG9jID0gdGhpcy5nZXRQREZEb2NGcm9tQ0RvYyhjX2RvYyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwZGZEb2MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwZGZEb2Mub3RoZXJEYXRhLmRybS5pc093bmVyO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBHZXRVc2VyUGVybWlzc2lvbnM6IChjX2RvYywgc3ViRmlsdGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBwZGZEb2MgPSB0aGlzLmdldFBERkRvY0Zyb21DRG9jKGNfZG9jKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBkZkRvYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBkZkRvYy5vdGhlckRhdGEuZHJtLnVzZXJQZXJtaXNzaW9ucztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBHZXRDaXBoZXJUeXBlOiAoY19kb2MsIHN1YkZpbHRlcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcGRmRG9jID0gdGhpcy5nZXRQREZEb2NGcm9tQ0RvYyhjX2RvYyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwZGZEb2MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbmdpbmUuQ2lwaGVyVHlwZS52YWx1ZXNbcGRmRG9jLm90aGVyRGF0YS5kcm0uY2lwaGVyXTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbmdpbmUuQ2lwaGVyVHlwZS5lX0NpcGhlck5vbmU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIEdldEtleUxlbmd0aDogKGNfZG9jLCBzdWJGaWx0ZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBkZkRvYyA9IHRoaXMuZ2V0UERGRG9jRnJvbUNEb2MoY19kb2MpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGRmRG9jKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGRmRG9jLm90aGVyRGF0YS5kcm0ua2V5TGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE2O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBHZXRGaWxlSUQ6IChjX2RvYywgc3ViRmlsdGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBwZGZEb2MgPSB0aGlzLmdldFBERkRvY0Zyb21DRG9jKGNfZG9jKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBkZkRvYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBlbmdpbmUuU3RyaW5nKHBkZkRvYy5vdGhlckRhdGEuZHJtLmZpbGVJZCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IGVuZ2luZS5TdHJpbmcoJycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBHZXRJbml0aWFsS2V5OiAoY19kb2MsIHN1YkZpbHRlcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcGRmRG9jID0gdGhpcy5nZXRQREZEb2NGcm9tQ0RvYyhjX2RvYyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwZGZEb2MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgZW5naW5lLlN0cmluZyhwZGZEb2Mub3RoZXJEYXRhLmRybS5pbml0aWFsS2V5KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgZW5naW5lLlN0cmluZygnJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gZW5naW5lLkxpYnJhcnkuUmVnaXN0ZXJTZWN1cml0eUNhbGxiYWNrKG5ldyBlbmdpbmUuU3RyaW5nKFwiRm94aXREUk1cIiksIHNlY3VyaXR5Q2FsbGJhY2spO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJlZERSTVNlY3VyaXR5Q2FsbGJhY2sgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhyZXN1bHQpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB1blJlZ2lzdGVyU2VjdXJpdHlDYWxsYmFjayAodHlwZSkge1xuICAgICAgICBsZXQgZW5naW5lID0gdGhpcy5lbmdpbmU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmVuZ2luZS5MaWJyYXJ5LlVucmVnaXN0ZXJTZWN1cml0eUNhbGxiYWNrKG5ldyBlbmdpbmUuU3RyaW5nKHR5cGUpKVxuICAgICAgICB9IGNhdGNoIChleCkge1xuXG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0VXNlck5hbWUgKG5hbWUpIHtcbiAgICAgICAgdGhpcy51c2VyTmFtZSA9IG5hbWU7XG4gICAgfVxuICAgIGdldFVzZXJOYW1lICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXNlck5hbWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBwYXJhbSB7R1NESy5Bbm5vdH0gYW5ub3QgXG4gICAgICovXG4gICAgZ2V0Um90YXRlZEFubm90UmVjdChhbm5vdCl7XG4gICAgICAgIGxldCBwZGZSZWN0ID0gYW5ub3QuR2V0UmVjdCgpOyAgICAgICBcbiAgICAgICAgbGV0IHJldCA9IHtcbiAgICAgICAgICAgIGxlZnQ6cGRmUmVjdC5sZWZ0LFxuICAgICAgICAgICAgdG9wOnBkZlJlY3QudG9wLFxuICAgICAgICAgICAgcmlnaHQ6cGRmUmVjdC5yaWdodCxcbiAgICAgICAgICAgIGJvdHRvbTpwZGZSZWN0LmJvdHRvbSxcbiAgICAgICAgICAgIHJvdGF0ZTowXG4gICAgICAgIH1cbiAgICAgICAgcGRmUmVjdC5kZWxldGUoKTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICBnZXRIZXhTdHJpbmcoR1NES1N0cil7XG4gICAgICAgIGxldCBoZXhTdHJJRCA9ICcnO1xuICAgICAgICBsZXQgc3RyTGVuZ3RoID0gR1NES1N0ci5HZXRMZW5ndGgoKTtcbiAgICAgICAgbGV0IHN0ckJ1ZmZlciA9IEdTREtTdHIuR2V0QnVmZmVyKCk7XG4gICAgICAgIGZvcihsZXQgaiA9IDA7ajxzdHJMZW5ndGg7aisrKXtcbiAgICAgICAgICAgIGxldCBjb2RlID0gKHRoaXMuZW5naW5lLkhFQVA4W3N0ckJ1ZmZlcitqXT4+PjApJjB4MDBmZlxuICAgICAgICAgICAgaGV4U3RySUQrPVN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhleFN0cklEO1xuICAgIH1cbiAgICBnZXRQREZEb2NGcm9tQ0RvYyAoY19kb2MpIHtcbiAgICAgICAgbGV0IHBkZkRvY0NhY2hlID0gdGhpcy5wZGZEb2NDYWNoZTtcbiAgICAgICAgZm9yIChsZXQgaSBpbiBwZGZEb2NDYWNoZSkge1xuICAgICAgICAgICAgbGV0IHBkZkRvYyA9IHBkZkRvY0NhY2hlW2ldO1xuICAgICAgICAgICAgaWYgKGNfZG9jLkVxdWFscyhwZGZEb2MuZG9jKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwZGZEb2M7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcGRmTmFtZURlY29kaW5nKHN0cmluZyl7XG4gICAgICAgIGlmKHN0cmluZy5jaGFyQ29kZUF0KDApID09IDB4ZmUgJiYgc3RyaW5nLmNoYXJDb2RlQXQoMSkgPT0gMHhmZil7XG4gICAgICAgICAgICB2YXIgdGVtcD1cIlwiO1xuICAgICAgICAgICAgZm9yKHZhciBpID0gMjtpPHN0cmluZy5sZW5ndGg7aSs9Mil7XG4gICAgICAgICAgICAgICAgdGVtcCs9U3RyaW5nLmZyb21DaGFyQ29kZSgoc3RyaW5nLmNoYXJDb2RlQXQoaSkgPDwgOCkrXG4gICAgICAgICAgICAgICAgc3RyaW5nLmNoYXJDb2RlQXQoaSsxKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGVtcDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQREZKUjtcblxuZnVuY3Rpb24gcmVhZEJyb3RsaUFzeW5jKHVybCwgb25sb2FkLCBvbmVycm9yKSB7XG4gICAgcmVhZEFzeW5jKHVybCwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdmFyIGJ1ZmZlciA9IGJyb3RsaURlY29tcHJlc3MobmV3IFVpbnQ4QXJyYXkoZGF0YSkpLmJ1ZmZlcjtcbiAgICAgICAgb25sb2FkKGJ1ZmZlcilcbiAgICB9LCBvbmVycm9yKVxufTtcbmZ1bmN0aW9uIHJlYWRBc3luYyh1cmwsIG9ubG9hZCwgb25lcnJvcikge1xuICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB4aHIub3BlbignR0VUJywgdXJsLCB0cnVlKTtcbiAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2FycmF5YnVmZmVyJztcbiAgICB4aHIub25sb2FkID0gZnVuY3Rpb24geGhyX29ubG9hZCgpIHtcbiAgICAgICAgaWYgKHhoci5zdGF0dXMgPT0gMjAwIHx8ICh4aHIuc3RhdHVzID09IDAgJiYgeGhyLnJlc3BvbnNlKSkgeyAvLyBmaWxlIFVSTHMgY2FuIHJldHVybiAwXG4gICAgICAgICAgICBvbmxvYWQoeGhyLnJlc3BvbnNlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBvbmVycm9yKCk7XG4gICAgfTtcbiAgICB4aHIub25lcnJvciA9IG9uZXJyb3I7XG4gICAgeGhyLnNlbmQobnVsbCk7XG59OyIsImNsYXNzIFBERkxheWVyIHtcbiAgICBjb25zdHJ1Y3RvcihjX2RvYywgY19lbmdpbmUpIHtcbiAgICAgICAgdGhpcy5jX2VuZ2luZSA9IGNfZW5naW5lO1xuICAgICAgICB0aGlzLmxheWVyX3RyZWUgPSBuZXcgY19lbmdpbmUuTGF5ZXJUcmVlKGNfZG9jKTtcbiAgICAgICAgdGhpcy5sYXllcl9jb250ZXh0ID0gbmV3IGNfZW5naW5lLkxheWVyQ29udGV4dChjX2RvYywgMHgwMDAwKTtcbiAgICAgICAgaWYoIXRoaXMubGF5ZXJfdHJlZS5Jc0VtcHR5KCkpe1xuICAgICAgICAgICAgbGV0IHJvb3Rfbm9kZSA9IHRoaXMubGF5ZXJfdHJlZS5HZXRSb290Tm9kZSgpO1xuICAgICAgICAgICAgdGhpcy5yb290TGF5ZXJOb2RlID0gbmV3IFBERkxheWVyTm9kZShcIlwiLCByb290X25vZGUsIHRoaXMubGF5ZXJfY29udGV4dCwgLTEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0TGF5ZXJOb2RlVmlzaWFibGUoaWQsIHZpc2lhYmxlKXtcbiAgICAgICAgbGV0IGxheWVyTm9kZSA9IHRoaXMuZ2V0TGF5ZXJOb2RlQnlJZChpZCk7XG4gICAgICAgIHJldHVybiB0aGlzLmxheWVyX2NvbnRleHQuU2V0VmlzaWJsZShsYXllck5vZGUubGF5ZXJfbm9kZSwgdmlzaWFibGUpO1xuICAgIH1cblxuICAgIGdldExheWVyTm9kZUJ5SWQoaWQpe1xuICAgICAgICBpZCA9IGlkLnRvU3RyaW5nKCk7XG4gICAgICAgIGxldCBpZHMgPSBpZC5zcGxpdChcIi1cIik7XG4gICAgICAgIHRyeXtcbiAgICAgICAgICAgIGxldCBsYXllck5vZGUgPSB0aGlzLnJvb3RMYXllck5vZGU7XG4gICAgICAgICAgICBmb3IobGV0IGkgPTA7IGk8IGlkcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgbGF5ZXJOb2RlID0gbGF5ZXJOb2RlLmNoaWxkcmVuW2lkc1tpXV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbGF5ZXJOb2RlO1xuICAgICAgICB9Y2F0Y2goZSl7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0b0pzb24gKCkge1xuICAgICAgICBpZih0aGlzLmxheWVyX3RyZWUuSXNFbXB0eSgpKXtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5yb290TGF5ZXJOb2RlLnRvSnNvbigpO1xuICAgIH1cbiAgICBkZWxldGUgKCkge1xuICAgICAgICB0aGlzLmxheWVyX3RyZWUuZGVsZXRlKCk7XG4gICAgICAgIHRoaXMubGF5ZXJfY29udGV4dC5kZWxldGUoKTtcbiAgICB9XG59XG5cbmNsYXNzIFBERkxheWVyTm9kZSB7XG4gICAgY29uc3RydWN0b3IoaWQsIGxheWVyX25vZGUsIGxheWVyX2NvbnRleHQsIGRlZXApIHtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLmxheWVyX25vZGUgPSBsYXllcl9ub2RlO1xuICAgICAgICB0aGlzLm5hbWUgPSBsYXllcl9ub2RlLkdldE5hbWUoKS50b1N0cmluZygpO1xuICAgICAgICB0aGlzLmhhc0xheWVyID0gbGF5ZXJfbm9kZS5IYXNMYXllcigpO1xuICAgICAgICB0aGlzLmRlZXAgPSBkZWVwO1xuICAgICAgICB0aGlzLmxheWVyX2NvbnRleHQgPSBsYXllcl9jb250ZXh0O1xuICAgICAgICB0aGlzLnZpc2libGUgPSBsYXllcl9jb250ZXh0LklzVmlzaWJsZShsYXllcl9ub2RlKTtcbiAgICAgICAgdGhpcy5pc0xvY2tlZCA9IGxheWVyX25vZGUuSXNMb2NrZWQoKTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IHRoaXMuZ2V0Q2hpbGRyZW4oKTtcbiAgICB9XG5cbiAgICBnZXRDaGlsZHJlbigpe1xuICAgICAgICBsZXQgY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgbGV0IGNoaWxkQ291bnQgPSB0aGlzLmxheWVyX25vZGUuR2V0Q2hpbGRyZW5Db3VudCgpO1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpPCBjaGlsZENvdW50OyBpKysgKXtcbiAgICAgICAgICAgIHRyeXtcbiAgICAgICAgICAgIGxldCBsYXllcl9ub2RlID0gdGhpcy5sYXllcl9ub2RlLkdldENoaWxkKGkpO1xuICAgICAgICAgICAgbGV0IGlkO1xuICAgICAgICAgICAgaWYodGhpcy5pZCAhPT0gXCJcIil7XG4gICAgICAgICAgICAgICAgaWQgPSB0aGlzLmlkICsgXCItXCIgKyBpO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgaWQgPSBpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGxheWVyTm9kZSA9IG5ldyBQREZMYXllck5vZGUoaWQsIGxheWVyX25vZGUsIHRoaXMubGF5ZXJfY29udGV4dCwgdGhpcy5kZWVwICsgMSk7XG4gICAgICAgICAgICBjaGlsZHJlbi5wdXNoKGxheWVyTm9kZSk7XG4gICAgICAgICAgICB9Y2F0Y2goZSl7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGlsZHJlbjtcbiAgICB9XG5cbiAgICB0b0pzb24gKCkge1xuICAgICAgICBpZih0aGlzLmxheWVyX25vZGUuSXNFbXB0eSgpKXtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgbGV0IGNoaWxkQ291bnQgPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaTwgY2hpbGRDb3VudDsgaSsrICl7XG4gICAgICAgICAgICBsZXQgbGF5ZXJOb2RlID0gdGhpcy5jaGlsZHJlbltpXTtcbiAgICAgICAgICAgIGNoaWxkcmVuLnB1c2gobGF5ZXJOb2RlLnRvSnNvbigpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWQ6IHRoaXMuaWQsXG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgICAgICBkZWVwOiB0aGlzLmRlZXAsXG4gICAgICAgICAgICBoYXNMYXllcjogdGhpcy5oYXNMYXllcixcbiAgICAgICAgICAgIGlzTG9ja2VkOiB0aGlzLmlzTG9ja2VkLFxuICAgICAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgICAgICAgICAgdmlzaWJsZTogdGhpcy52aXNpYmxlXG4gICAgICAgIH07XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQREZMYXllcjsiLCJpbXBvcnQgY3JlYXRlRGVmZXJyZWQgZnJvbSAnLi4vc2hhcmVkL2NyZWF0ZURlZmVycmVkLmpzJztcbmltcG9ydCBnZXRVbmlxdWVJZCBmcm9tICcuLi9zaGFyZWQvZ2V0VW5pcXVlSWQuanMnO1xuaW1wb3J0IHByb2dyZXNzaXZlQ29udGludWUgZnJvbSAnLi9wcm9ncmVzc2l2ZUNvdW50aW5lLmpzJztcbmltcG9ydCB7IGdldEVuZ2luZUFubm90VHlwZSB9IGZyb20gJy4vYW5ub3QvYW5ub3RUeXBlJztcbmltcG9ydCB7IGdldEVuZ2luZVJlY3RGIH0gZnJvbSAnLi9zaGFyZS9yZWN0JztcbmltcG9ydCBndWlkIGZyb20gJy4uL3NoYXJlZC9ndWlkLmpzJztcbmltcG9ydCBMb2dnZXJGYWN0b3J5IGZyb20gJy4uL3NoYXJlZC9sb2dnZXIvTG9nZ2VyRmFjdG9yeS5qcyc7XG5pbXBvcnQgSW1hZ2UgZnJvbSBcIi4vYmFzZS9JbWFnZVwiO1xuaW1wb3J0IFdhdGVybWFyayBmcm9tIFwiLi9iYXNlL1dhdGVybWFyay9XYXRlcm1hcmtcIjtcbmltcG9ydCBXYXRlcm1hcmtTZXR0aW5ncyBmcm9tIFwiLi9iYXNlL1dhdGVybWFyay9XYXRlcm1hcmtTZXR0aW5nc1wiO1xuaW1wb3J0IFdhdGVybWFya1RleHRQcm9wZXJ0aWVzIGZyb20gXCIuL2Jhc2UvV2F0ZXJtYXJrL1dhdGVybWFya1RleHRQcm9wZXJ0aWVzXCI7XG5jb25zdCBDUkVBVEVfQklUTUFQX0ZBSUwgPSAnY3JlYXRlIGJpdG1hcCBmYWlsJztcbmNvbnN0IENSRUFURV9CSVRNQVBfUkVOREVSX0ZBSUwgPSAnY3JlYXRlIGJpdG1hcCByZW5kZXIgZmFpbCc7XG5jb25zdCBCSVRNQVBfUkVOREVSX0ZBSUwgPSAnYml0bWFwIHJlbmRlciBmYWlsJztcblxuY29uc3QgbG9nZ2VyID0gTG9nZ2VyRmFjdG9yeS5nZXRMb2dnZXIoJ3BkZi1qci5QREZQYWdlJyk7XG5cbmZ1bmN0aW9uIGNoZWNrSUUxMCAoKSB7XG4gICAgbGV0IHVzZXJBZ2VudCA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbiAgICBsZXQgbWF0Y2g7XG4gICAgaWYgKCdBY3RpdmVYT2JqZWN0JyBpbiBzZWxmICYmIChtYXRjaCA9IHVzZXJBZ2VudC5tYXRjaCgvbXNpZSAoW1xcZFxcLl0rKS8pKSkge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQobWF0Y2hbMV0pID09PSAxMDtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuY29uc3QgaXNJRTEwID0gY2hlY2tJRTEwKCk7XG5sZXQgZ2V0Qml0bWFwQnVmZmVyO1xubGV0IGNyZWF0ZUJpdG1hcFJlbmRlcjtcbmlmIChpc0lFMTApIHtcbiAgICBjcmVhdGVCaXRtYXBSZW5kZXIgPSBmdW5jdGlvbiBjcmVhdGVCaXRtYXBSZW5kZXIgKGVuZ2luZSwgYml0bWFwKSB7XG4gICAgICAgIGxldCByZW5kZXJlciA9IG5ldyBlbmdpbmUuUmVuZGVyZXIoYml0bWFwLCBmYWxzZSk7XG4gICAgICAgIGlmIChyZW5kZXJlci5Jc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIHJlbmRlcmVyLmRlbGV0ZSgpO1xuICAgICAgICAgICAgYml0bWFwLmRlbGV0ZSgpO1xuICAgICAgICAgICAgdGhyb3cgQ1JFQVRFX0JJVE1BUF9SRU5ERVJfRkFJTDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVuZGVyZXI7XG4gICAgfVxuICAgIGdldEJpdG1hcEJ1ZmZlciA9IGZ1bmN0aW9uIGdldEJpdG1hcEJ1ZmZlciAoZW5naW5lLCBiaXRtYXAsIHJlbmRlcmVyKSB7XG4gICAgICAgIGxldCBiaXRtYXBXaWR0aCA9IGJpdG1hcC5HZXRXaWR0aCgpO1xuICAgICAgICBsZXQgYml0bWFwSGVpZ2h0ID0gYml0bWFwLkdldEhlaWdodCgpO1xuICAgICAgICBsZXQgaW1hZ2UgPSBuZXcgZW5naW5lLkltYWdlKCk7XG4gICAgICAgIGltYWdlLkFkZEZyYW1lKGJpdG1hcCk7XG4gICAgICAgIGxldCBidWZmZXJzID0gW107XG4gICAgICAgIGxldCBzdHJlYW1DYWxsYmFjayA9IGVuZ2luZS5TdHJlYW1DYWxsYmFjay5pbXBsZW1lbnQoe1xuICAgICAgICAgICAgUmVsZWFzZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlbmRlcmVyLmRlbGV0ZSgpO1xuICAgICAgICAgICAgICAgIGJpdG1hcC5kZWxldGUoKTtcbiAgICAgICAgICAgICAgICBzdHJlYW1DYWxsYmFjay5kZWxldGUoKTtcbiAgICAgICAgICAgICAgICBpbWFnZS5kZWxldGUoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBGbHVzaDogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIEdldFNpemU6KCk9PntcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBXcml0ZUJsb2NrOihjdXJzb3IsIG9mZnNldCwgc2l6ZSk9PntcbiAgICAgICAgICAgICAgICBsZXQgZW5naW5lQnVmZmVyID0gZW5naW5lLkhFQVBVOC5idWZmZXI7XG4gICAgICAgICAgICAgICAgbGV0IGFycmF5QnVmZmVyO1xuICAgICAgICAgICAgICAgIGlmIChlbmdpbmVCdWZmZXIuc2xpY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgYXJyYXlCdWZmZXIgPSBuZXcgVWludDhBcnJheShlbmdpbmVCdWZmZXIuc2xpY2UoY3Vyc29yLCBjdXJzb3IgKyBzaXplKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYXJyYXlCdWZmZXIgPSBuZXcgVWludDhBcnJheShlbmdpbmVCdWZmZXIsIGN1cnNvciwgc2l6ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJ1ZmZlcnMucHVzaChhcnJheUJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIGltYWdlLlNhdmVBcyhzdHJlYW1DYWxsYmFjayxuZXcgZW5naW5lLldTdHJpbmcoXCIucG5nXCIpKTtcbiAgICAgICAgbGV0IHR5cGUgPSBcImltYWdlL3BuZ1wiO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgIGltYWdlOiBuZXcgQmxvYihidWZmZXJzLHt0eXBlfSksXG4gICAgICAgICAgICB3aWR0aDogYml0bWFwV2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IGJpdG1hcEhlaWdodCxcbiAgICAgICAgfTtcbiAgICB9XG59IGVsc2Uge1xuXG4gICAgY3JlYXRlQml0bWFwUmVuZGVyID0gZnVuY3Rpb24gY3JlYXRlQml0bWFwUmVuZGVyIChlbmdpbmUsIGJpdG1hcCkge1xuICAgICAgICBsZXQgcmVuZGVyZXIgPSBuZXcgZW5naW5lLlJlbmRlcmVyKGJpdG1hcCwgdHJ1ZSk7XG4gICAgICAgIGlmIChyZW5kZXJlci5Jc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIHJlbmRlcmVyLmRlbGV0ZSgpO1xuICAgICAgICAgICAgYml0bWFwLmRlbGV0ZSgpO1xuICAgICAgICAgICAgdGhyb3cgQ1JFQVRFX0JJVE1BUF9SRU5ERVJfRkFJTDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVuZGVyZXI7XG4gICAgfVxuXG4gICAgZ2V0Qml0bWFwQnVmZmVyID0gXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHBhcmFtIHsqfSBlbmdpbmUgXG4gICAgICogQHBhcmFtIHtHU0RLLkJpdG1hcH0gYml0bWFwIFxuICAgICAqIEBwYXJhbSB7Kn0gcmVuZGVyZXIgXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0Qml0bWFwQnVmZmVyIChlbmdpbmUsIGJpdG1hcCwgcmVuZGVyZXIpIHtcbiAgICAgICAgaWYoYml0bWFwLkdldEZvcm1hdCgpIT1lbmdpbmUuRElCRm9ybWF0LmVfRElCQXJnYilcbiAgICAgICAgICAgIGJpdG1hcC5Db252ZXJ0Rm9ybWF0KGVuZ2luZS5ESUJGb3JtYXQuZV9ESUJBcmdiKTtcblxuICAgICAgICBsZXQgc3RhcnQgPSBiaXRtYXAuR2V0QnVmZmVyKCk7XG4gICAgICAgIGxldCBiaXRtYXBXaWR0aCA9IGJpdG1hcC5HZXRXaWR0aCgpO1xuICAgICAgICBsZXQgYml0bWFwSGVpZ2h0ID0gYml0bWFwLkdldEhlaWdodCgpO1xuICAgICAgICBsZXQgc2l6ZSA9IGJpdG1hcEhlaWdodCAqIGJpdG1hcC5HZXRQaXRjaCgpO1xuICAgICAgICBsZXQgZW5kID0gc3RhcnQgKyBzaXplO1xuICAgICAgICBsZXQgaW1hZ2VEYXRhQnVmZmVyO1xuICAgICAgICBpZiAoZW5naW5lLkhFQVBVOC5idWZmZXIuc2xpY2UpIHtcbiAgICAgICAgICAgIGltYWdlRGF0YUJ1ZmZlciA9IGVuZ2luZS5IRUFQVTguYnVmZmVyLnNsaWNlKHN0YXJ0LCBlbmQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW1hZ2VEYXRhQnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoZW5naW5lLkhFQVBVOC5idWZmZXIsIHN0YXJ0LCBzaXplKS5idWZmZXI7XG4gICAgICAgIH1cblxuICAgICAgICByZW5kZXJlci5kZWxldGUoKTtcbiAgICAgICAgYml0bWFwLmRlbGV0ZSgpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBidWZmZXI6IGltYWdlRGF0YUJ1ZmZlcixcbiAgICAgICAgICAgIHdpZHRoOiBiaXRtYXBXaWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogYml0bWFwSGVpZ2h0LFxuICAgICAgICB9O1xuICAgIH1cbn1cblxuLyoqXG4gKiDmlofmoaPpobXpnaJcbiAqIEBjbGFzc1xuICovXG5jbGFzcyBQREZQYWdlIHtcbiAgICBjb25zdHJ1Y3RvciAoaW5kZXgsIHBkZkRvYykge1xuICAgICAgICB0aGlzLmlkID0gZ2V0VW5pcXVlSWQoJ3BkZl9wYWdlJyk7XG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICAgICAgdGhpcy5wZGZEb2MgPSBwZGZEb2M7XG4gICAgICAgIHRoaXMuZG9jID0gcGRmRG9jLmRvYztcbiAgICAgICAgbGV0IEpSID0gdGhpcy5KUiA9IHBkZkRvYy5KUjtcbiAgICAgICAgdGhpcy5hbm5vdE1hbmFnZXIgPSBKUi5hbm5vdE1hbmFnZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAdHlwZSBHU0RLXG4gICAgICAgICAqL1xuICAgICAgICBsZXQgZW5naW5lID0gdGhpcy5lbmdpbmUgPSBwZGZEb2MuZW5naW5lO1xuICAgICAgICB0aGlzLnByb2dyZXNzaXZlQ29udGludWVTdGF0ZSA9IGVuZ2luZS5Qcm9ncmVzc2l2ZVN0YXRlLmVfVG9CZUNvbnRpbnVlZDtcbiAgICAgICAgdGhpcy5wcm9ncmVzc2l2ZUZpbmlzaFN0YXRlID0gZW5naW5lLlByb2dyZXNzaXZlU3RhdGUuZV9GaW5pc2hlZDtcbiAgICAgICAgbGV0IHBhZ2VEZWZlcnJlZCA9IHRoaXMucGFnZURlZmVycmVkID0gY3JlYXRlRGVmZXJyZWQoKTtcbiAgICAgICAgdGhpcy5jX3BhZ2VQcm9taXNlID0gcGFnZURlZmVycmVkLnByb21pc2U7XG4gICAgICAgIHRoaXMuX2dldFBhZ2UoaW5kZXgpLnRoZW4oKHBhZ2UpID0+IHtcbiAgICAgICAgICAgIHRoaXMucGFnZSA9IHBhZ2U7XG4gICAgICAgICAgICB0aGlzLmFubm90YXRpb25JREFycmF5ID0gdGhpcy5fcHJlcGFyZUFubm90YXRpb25zKHBhZ2UpO1xuICAgICAgICAgICAgcGFnZURlZmVycmVkLnJlc29sdmUocGFnZSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIHBhZ2VEZWZlcnJlZC5yZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9nZXRQYWdlIChpbmRleCkge1xuICAgICAgICBsZXQgZGVmZXJyZWQgPSBjcmVhdGVEZWZlcnJlZCgpO1xuICAgICAgICBsZXQgcGFnZTtcbiAgICAgICAgbGV0IGVycm9yQ29kZTtcbiAgICAgICAgbGV0IGRhdGFOb3RSZWFkeSA9IHRoaXMuZW5naW5lLkVycm9yQ29kZS5lX0VyckRhdGFOb3RSZWFkeTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcGFnZSA9IHRoaXMuZG9jLkdldFBhZ2UoaW5kZXgpO1xuICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgICAgZXJyb3JDb2RlID0gdGhpcy5lbmdpbmUuZ2V0RXJyb3JDb2RlKGV4KTtcbiAgICAgICAgICAgIGlmIChlcnJvckNvZGUgIT09IGRhdGFOb3RSZWFkeSkge1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChlcnJvckNvZGUudmFsdWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnBkZkRvYy5yZWFkZXJCbG9ja0xvYWRpbmcgfHwgZXJyb3JDb2RlID09PSBkYXRhTm90UmVhZHkpIHtcbiAgICAgICAgICAgIHBhZ2UgJiYgcGFnZS5kZWxldGUoKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX2dldFBhZ2UoaW5kZXgpLnRoZW4oZnVuY3Rpb24gKHBhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShwYWdlKTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgMzAwKTtcbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYWdlLklzRW1wdHkoKSkge1xuICAgICAgICAgICAgcGFnZS5kZWxldGUoKTtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdCgtMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHBhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgIH1cbiAgICBfcHJlcGFyZUFubm90YXRpb25zKHBhZ2UpIHtcbiAgICAgICAgY29uc3QgYW5ub3RhdGlvbklkQXJyYXkgPSB0aGlzLl9nZXRBbm5vdGF0aW9uSWRBcnJheShwYWdlKTtcbiAgICAgICAgLy8g6YG/5YWN6Z2e5paw5aKeYW5ub3RhdGlvbiBJROWSjOaWsOWinueahGFubm90YXRpb24gSUTph43lpI3ooqvmm7/mjaLlr7zoh7TnmoTmm7TmlrDpl67popjvvIzmiYDku6Xlv4Xpobvku47mnIDlkI7kuIDkuKrlvIDlp4vmo4Dmn6VcbiAgICAgICAgcmV0dXJuIGFubm90YXRpb25JZEFycmF5LnJlZHVjZSgocHJldiwgaWQsIGluZGV4LCBhcnJheSkgPT4ge1xuICAgICAgICAgICAgaWYoaWQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBwcmV2LnB1c2gobnVsbCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBvdGhlclJlcGVhdEluZGV4ID0gcHJldi5pbmRleE9mKGlkKTtcbiAgICAgICAgICAgIGlmKG90aGVyUmVwZWF0SW5kZXggPiAtMSB8fCBpZC5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgIGxldCBuZXdJZCA9IGlkO1xuICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3SWQgPSBndWlkKCk7XG4gICAgICAgICAgICAgICAgfSB3aGlsZSAoYXJyYXkuaW5kZXhPZihuZXdJZCkgIT09IC0xKTtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoYER1cGxpY2F0ZWQgYW5ub3RhdGlvbiBpZCBmb3VuZCBhdCBwYWdlICR7dGhpcy5pbmRleH0gb2YgdGhpcyBkb2N1bWVudDogJHtpZH0sIGFuZCB0aGF0IHdpbGwgYmUgcmVwbGFjZWQgdG8gJHtuZXdJZH1gKTtcbiAgICAgICAgICAgICAgICBjb25zdCBhbm5vdCA9IHBhZ2UuR2V0QW5ub3QoaW5kZXgpO1xuICAgICAgICAgICAgICAgIHRyeXtcbiAgICAgICAgICAgICAgICAgICAgYW5ub3QuU2V0VW5pcXVlSUQobmV3IHRoaXMuZW5naW5lLldTdHJpbmcobmV3SWQpKTtcbiAgICAgICAgICAgICAgICAgICAgaWQgPSBuZXdJZDtcbiAgICAgICAgICAgICAgICB9Y2F0Y2goZSl7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuKGBhbm5vdGF0aW9uIFNldFVuaXF1ZUlEIGVycm9yLiBwYWdlOiAke3RoaXMuaW5kZXh9LCBPbGQgQW5ub3RpZDogJHtpZH0sIFRoZSBlcnJvciBuZXcgaWQgaXM6ICR7bmV3SWR9YCk7XG4gICAgICAgICAgICAgICAgICAgIC8vdG9kbyBTZXRVbmlxdWVJRCBleGNlcHRpb24uXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJldi5wdXNoKGlkKTtcbiAgICAgICAgICAgIHJldHVybiBwcmV2O1xuICAgICAgICB9LCBbXSk7XG4gICAgfVxuICAgIF9nZXRBbm5vdEluZGV4QnlJZChhbm5vdElkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFubm90YXRpb25JREFycmF5LmluZGV4T2YoYW5ub3RJZCk7XG4gICAgfVxuICAgIF9zZXRBbm5vdElkQXQoYW5ub3RJZCwgaW5kZXgpIHtcbiAgICAgICAgaWYoaW5kZXggPj0gdGhpcy5hbm5vdGF0aW9uSURBcnJheS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IGlkeCA9IHRoaXMuYW5ub3RhdGlvbklEQXJyYXkuaW5kZXhPZihhbm5vdElkKTtcbiAgICAgICAgICAgIGlmKGlkeCA+IC0xKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEdXBsaWNhdGVkIGFubm90YXRpb24gaWQ6ICcgKyBhbm5vdElkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFubm90YXRpb25JREFycmF5W2luZGV4XSA9IGFubm90SWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPEdTREsuUERGUGFnZT59XG4gICAgICovXG4gICAgcGFyc2VkUGFnZSAoKSB7XG4gICAgICAgIGlmICh0aGlzLnBhcnNlZFBhZ2VQcm9taXNlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZWRQYWdlUHJvbWlzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZWRQYWdlUHJvbWlzZSA9IHRoaXMuY19wYWdlUHJvbWlzZS50aGVuKChwYWdlKSA9PiB7XG4gICAgICAgICAgICBpZiAocGFnZS5Jc1BhcnNlZCgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgcGFyc2VTdWNjZXNzID0gcHJvZ3Jlc3NpdmVDb250aW51ZShcbiAgICAgICAgICAgICAgICBwYWdlLlN0YXJ0UGFyc2UoMCwgbnVsbCwgZmFsc2UpLCBcbiAgICAgICAgICAgICAgICB0aGlzLnByb2dyZXNzaXZlQ29udGludWVTdGF0ZSwgXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9ncmVzc2l2ZUZpbmlzaFN0YXRlXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKCFwYXJzZVN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICBwYWdlLmRlbGV0ZSgpO1xuICAgICAgICAgICAgICAgIHRocm93ICdwYXJzZSBwYWdlIGZhaWwnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBhZ2U7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZVBhcnNlUGFnZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlZFBhZ2VQcm9taXNlID0gdGhpcy5jX3BhZ2VQcm9taXNlLnRoZW4oKHBhZ2UpID0+IHtcbiAgICAgICAgICAgIGxldCBwYXJzZVN1Y2Nlc3MgPSBwcm9ncmVzc2l2ZUNvbnRpbnVlKFxuICAgICAgICAgICAgICAgIHBhZ2UuU3RhcnRQYXJzZSgwLCBudWxsLCB0cnVlKSxcbiAgICAgICAgICAgICAgICB0aGlzLnByb2dyZXNzaXZlQ29udGludWVTdGF0ZSxcbiAgICAgICAgICAgICAgICB0aGlzLnByb2dyZXNzaXZlRmluaXNoU3RhdGVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoIXBhcnNlU3VjY2Vzcykge1xuICAgICAgICAgICAgICAgIHBhZ2UuZGVsZXRlKCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgJ3BhcnNlIHBhZ2UgZmFpbCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcGFnZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOiOt+WPlueJqeeQhueahOesrOWHoOmhtVxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgICovXG4gICAgZ2V0SW5kZXggKCkge31cbiAgICAvKipcbiAgICAgKiDojrflj5ZwZGbkuK3nmoTnrKzlh6DpobVcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBcbiAgICAgKi9cbiAgICBnZXRPYmpOdW1iZXIgKCkge31cbiAgICAvKipcbiAgICAgKiDojrflj5ZwZGbpobXpnaLlrr3luqbvvIzljZXkvY3ngrnvvIxwZGbljZXkvY1cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgICAqL1xuICAgIGdldFdpZHRoICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY19wYWdlUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChwYWdlKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFnZS5HZXRXaWR0aCgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog6I635Y+WcGRm6aG16Z2i6auY5bqm77yM5Y2V5L2N54K577yMcGRm5Y2V5L2NXG4gICAgICogQHJldHVybnMge251bWJlcn1cbiAgICAgKi9cbiAgICBnZXRIZWlnaHQgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jX3BhZ2VQcm9taXNlLnRoZW4oZnVuY3Rpb24gKHBhZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiBwYWdlLkdldEhlaWdodCgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0QW5ub3RzSW1hZ2VEYXRhQnlUaWxlIChhbm5vdEluZGV4cyA9IFtdLCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCBzY2FsZSA9IDEsIHJvdGF0ZSA9IDApIHtcblxuICAgIH1cbiAgICAvKipcbiAgICAgKiDojrflj5bpobXpnaLnmoRhbm5vdGF0aW9u77yM5YyF5ZCrV2lkZ2V0QW5ub3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBbaWRMaXN0XVxuICAgICAqIEByZXR1cm5zIHtBbm5vdGF0aW9uW119XG4gICAgICovXG4gICAgZ2V0QW5ub3RzIChpZExpc3QpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VkUGFnZSgpLnRoZW4oKHBhZ2UpID0+IHtcbiAgICAgICAgICAgIGlmKCFpZExpc3QpIHtcbiAgICAgICAgICAgICAgICBpZExpc3QgPSB0aGlzLmFubm90YXRpb25JREFycmF5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGlkTGlzdC5tYXAoaWQgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fZ2V0QW5ub3RJbmRleEJ5SWQoaWQpO1xuICAgICAgICAgICAgICAgIGlmKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0QW5ub3RCeUluZGV4KHBhZ2UsIGluZGV4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldEFubm90SURMaXN0ICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYW5ub3RhdGlvbklEQXJyYXk7XG4gICAgfVxuICAgIF9nZXRBbm5vdEJ5SW5kZXggKHBhZ2UsIGluZGV4KSB7XG4gICAgICAgIGxldCBhbm5vdCA9IHBhZ2UuR2V0QW5ub3QoaW5kZXgpO1xuICAgICAgICBpZiAoYW5ub3QuSXNFbXB0eSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5hbm5vdE1hbmFnZXIuZ2V0KGFubm90LCB0aGlzKTtcbiAgICB9XG4gICAgZ2V0QW5ub3RCeUlkKGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE5hdGl2ZUFubm90QnlJZChpZCkudGhlbihhbm5vdCA9PiBhbm5vdC5Jc0VtcHR5KCkgPyBudWxsIDogdGhpcy5hbm5vdE1hbmFnZXIuZ2V0KGFubm90LCB0aGlzKSk7XG4gICAgfVxuICAgIGdldFRodW1iKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jX3BhZ2VQcm9taXNlLnRoZW4oIGNfcGFnZSA9PiB7XG4gICAgICAgICAgICBsZXQgdGh1bWIgPSBjX3BhZ2UuR2V0VGh1bWIoKTtcbiAgICAgICAgICAgIGxldCB3aWR0aCA9IGNfcGFnZS5HZXRXaWR0aCgpO1xuICAgICAgICAgICAgbGV0IGhlaWdodCA9IGNfcGFnZS5HZXRXaWR0aCgpO1xuICAgICAgICAgICAgbGV0IHNjYWxlV2lkdGggPSAyMDA7XG4gICAgICAgICAgICBsZXQgc2NhbGUgPSBzY2FsZVdpZHRoIC8gd2lkdGg7XG4gICAgICAgICAgICBpZihmYWxzZSAmJiB0aHVtYil7XG4gICAgICAgICAgICAgICAgbGV0IHNjYWxlSGVpZ2h0ID0gaGVpZ2h0ICogc2NhbGU7XG5cbiAgICAgICAgICAgICAgICBsZXQgYml0bWFwID0gY19wYWdlLkxvYWRUaHVtYm5haWwoKTtcbiAgICAgICAgICAgICAgICBsZXQgaXNFbXB0eSA9IGJpdG1hcC5Jc0VtcHR5KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyOiB0aHVtYixcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHNjYWxlV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogc2NhbGVIZWlnaHQsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIHdpZHRoID0gY19wYWdlLkdldFdpZHRoKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0SW1hZ2VEYXRhKHNjYWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldE5hdGl2ZUFubm90QnlJZChpZCkge1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuX2dldEFubm90SW5kZXhCeUlkKGlkKTtcbiAgICAgICAgaWYoaW5kZXggPT0gLTEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQW5ub3RhdGlvbiBub3QgZm91bmQ6ICR7aWR9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VkUGFnZSgpLnRoZW4ocGFnZSA9PiBwYWdlLkdldEFubm90KGluZGV4KSk7XG4gICAgfVxuICAgIGdldEltYWdlRGF0YUJ5VGlsZSAoeCwgeSwgd2lkdGgsIGhlaWdodCwgc2NhbGUgPSAxLCByb3RhdGUgPSAwLCByZW5kZXJGbGFncykge1xuICAgICAgICBsZXQgZW5naW5lID0gdGhpcy5lbmdpbmU7XG4gICAgICAgIGxldCByZW5kZXJXaWR0aDtcbiAgICAgICAgbGV0IHJlbmRlckhlaWdodDtcbiAgICAgICAgbGV0IHByb2dyZXNzaXZlQ29udGludWVTdGF0ZSA9IHRoaXMucHJvZ3Jlc3NpdmVDb250aW51ZVN0YXRlO1xuICAgICAgICBsZXQgcHJvZ3Jlc3NpdmVGaW5pc2hTdGF0ZSA9IHRoaXMucHJvZ3Jlc3NpdmVGaW5pc2hTdGF0ZTtcbiAgICAgICAgbGV0IF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFt0aGlzLmdldFdpZHRoKCksIHRoaXMuZ2V0SGVpZ2h0KCldKS50aGVuKChbcGFnZVdpZHRoLCBwYWdlSGVpZ2h0XSkgPT4ge1xuICAgICAgICAgICAgcmVuZGVyV2lkdGggPSBwYWdlV2lkdGggKiBzY2FsZTtcbiAgICAgICAgICAgIHJlbmRlckhlaWdodCA9IHBhZ2VIZWlnaHQgKiBzY2FsZTtcbiAgICAgICAgfSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZWRQYWdlKCk7XG4gICAgICAgIH0pLnRoZW4oKHBhZ2UpPT4ge1xuICAgICAgICAgICAgbGV0IGJpdG1hcCA9IGNyZWF0ZUJpdG1hcChlbmdpbmUsIHdpZHRoLCBoZWlnaHQscGFnZS5IYXNUcmFuc3BhcmVuY3koKSk7XG4gICAgICAgICAgICByZXR1cm4gW2JpdG1hcCwgcGFnZSwgZW5naW5lXTtcbiAgICAgICAgfSkudGhlbigoW2JpdG1hcCwgcGFnZSwgZW5naW5lXSkgPT57XG4gICAgICAgICAgICBsZXQgcmVuZGVyZXIgPSBjcmVhdGVCaXRtYXBSZW5kZXIoZW5naW5lLCBiaXRtYXApO1xuICAgICAgICAgICAgaWYoX3RoaXMucGRmRG9jLnBkZkxheWVyICYmIF90aGlzLnBkZkRvYy5wZGZMYXllci5sYXllcl9jb250ZXh0KXtcbiAgICAgICAgICAgICAgICByZW5kZXJlci5TZXRMYXllckNvbnRleHQoX3RoaXMucGRmRG9jLnBkZkxheWVyLmxheWVyX2NvbnRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFtyZW5kZXJlciwgYml0bWFwLCBwYWdlLCBlbmdpbmVdO1xuICAgICAgICB9KS50aGVuKChbcmVuZGVyZXIsIGJpdG1hcCwgcGFnZSwgZW5naW5lXSk9PiB7XG4gICAgICAgICAgICBzdGFydEJpdG1hcFJlbmRlcih7XG4gICAgICAgICAgICAgICAgeDogLXgsIHk6IC15LCBcbiAgICAgICAgICAgICAgICB3aWR0aDogcmVuZGVyV2lkdGgsIFxuICAgICAgICAgICAgICAgIGhlaWdodDogcmVuZGVySGVpZ2h0LCBcbiAgICAgICAgICAgICAgICByb3RhdGUsXG4gICAgICAgICAgICB9LCBlbmdpbmUsIHBhZ2UsIGJpdG1hcCwgcmVuZGVyZXIsIHJlbmRlckZsYWdzLCBcbiAgICAgICAgICAgIHByb2dyZXNzaXZlQ29udGludWVTdGF0ZSwgcHJvZ3Jlc3NpdmVGaW5pc2hTdGF0ZSxcbiAgICAgICAgICAgIDApXG4gICAgICAgICAgICByZXR1cm4gW3JlbmRlcmVyLCBiaXRtYXAsIGVuZ2luZV07XG4gICAgICAgIH0pLnRoZW4oKFtyZW5kZXJlciwgYml0bWFwLCBlbmdpbmVdKT0+IHtcbiAgICAgICAgICAgIHJldHVybiBnZXRCaXRtYXBCdWZmZXIoZW5naW5lLCBiaXRtYXAsIHJlbmRlcmVyKTtcbiAgICAgICAgfSlcbiAgICAgICAgXG4gICAgfVxuICAgIGdldEltYWdlRGF0YSAoc2NhbGUgPSAxKSB7XG4gICAgICAgIGxldCBlbmdpbmUgPSB0aGlzLmVuZ2luZTtcbiAgICAgICAgbGV0IHByb2dyZXNzaXZlQ29udGludWVTdGF0ZSA9IHRoaXMucHJvZ3Jlc3NpdmVDb250aW51ZVN0YXRlO1xuICAgICAgICBsZXQgcHJvZ3Jlc3NpdmVGaW5pc2hTdGF0ZSA9IHRoaXMucHJvZ3Jlc3NpdmVGaW5pc2hTdGF0ZTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFt0aGlzLnBhcnNlZFBhZ2UoKSwgdGhpcy5nZXRXaWR0aCgpLCB0aGlzLmdldEhlaWdodCgpXSkudGhlbihmdW5jdGlvbiAoW3BhZ2UsIHdpZHRoLCBoZWlnaHRdKSB7XG4gICAgICAgICAgICBsZXQgYml0bWFwV2lkdGggPSB3aWR0aCAqIHNjYWxlO1xuICAgICAgICAgICAgbGV0IGJpdG1hcEhlaWdodCA9IGhlaWdodCAqIHNjYWxlO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgYml0bWFwID0gbmV3IGVuZ2luZS5CaXRtYXAoYml0bWFwV2lkdGgsIGJpdG1hcEhlaWdodCwgZW5naW5lLkRJQkZvcm1hdC5lX0RJQkFyZ2IsIDAsIDApO1xuICAgICAgICAgICAgaWYgKGJpdG1hcC5Jc0VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgICBiaXRtYXAuZGVsZXRlKCk7XG4gICAgICAgICAgICAgICAgcGFnZS5kZWxldGUoKTtcbiAgICAgICAgICAgICAgICB0aHJvdyAnY3JlYXRlIGJpdG1hcCBmYWlsJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBbYml0bWFwLCBwYWdlLCBlbmdpbmVdO1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChbYml0bWFwLCBwYWdlLCBlbmdpbmVdKSB7XG4gICAgICAgICAgICBsZXQgcmVuZGVyZXIgPSBuZXcgZW5naW5lLlJlbmRlcmVyKGJpdG1hcCwgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAocmVuZGVyZXIuSXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAgcmVuZGVyZXIuZGVsZXRlKCk7XG4gICAgICAgICAgICAgICAgYml0bWFwLmRlbGV0ZSgpO1xuICAgICAgICAgICAgICAgIHBhZ2UuZGVsZXRlKCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgJ3JlbmRlciBiaXRtYXAgZmFpbCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gW3JlbmRlcmVyLCBiaXRtYXAsIHBhZ2UsIGVuZ2luZV07XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKFtyZW5kZXJlciwgYml0bWFwLCBwYWdlLCBlbmdpbmVdKSB7XG4gICAgICAgICAgICBsZXQgbWF0cml4ID0gcGFnZS5HZXREaXNwbGF5TWF0cml4KDAsIDAsIGJpdG1hcC5HZXRXaWR0aCgpLCBiaXRtYXAuR2V0SGVpZ2h0KCksIGVuZ2luZS5Sb3RhdGlvbi5lX1JvdGF0aW9uMCk7XG5cbiAgICAgICAgICAgIGxldCBpc1JlbmRlclN1Y2Nlc3MgPSBwcm9ncmVzc2l2ZUNvbnRpbnVlKFxuICAgICAgICAgICAgICAgIHJlbmRlcmVyLlN0YXJ0UmVuZGVyKHBhZ2UsIG1hdHJpeCwgbnVsbCksIFxuICAgICAgICAgICAgICAgIHByb2dyZXNzaXZlQ29udGludWVTdGF0ZSwgXG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3NpdmVGaW5pc2hTdGF0ZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmICghaXNSZW5kZXJTdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgcmVuZGVyZXIuZGVsZXRlKCk7XG4gICAgICAgICAgICAgICAgYml0bWFwLmRlbGV0ZSgpO1xuICAgICAgICAgICAgICAgIHBhZ2UuZGVsZXRlKCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgJ3JlbmRlciBwYWdlIGltYWdlIGZhaWwnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFtyZW5kZXJlciwgYml0bWFwLCBwYWdlLCBlbmdpbmVdO1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChbcmVuZGVyZXIsIGJpdG1hcCwgcGFnZSwgZW5naW5lXSkge1xuICAgICAgICAgICAgbGV0IHN0YXJ0ID0gYml0bWFwLkdldEJ1ZmZlcigpO1xuICAgICAgICAgICAgbGV0IGJpdG1hcFdpZHRoID0gYml0bWFwLkdldFdpZHRoKCk7XG4gICAgICAgICAgICBsZXQgYml0bWFwSGVpZ2h0ID0gYml0bWFwLkdldEhlaWdodCgpO1xuICAgICAgICAgICAgbGV0IHNpemUgPSBiaXRtYXBIZWlnaHQgKiBiaXRtYXAuR2V0UGl0Y2goKTtcbiAgICAgICAgICAgIGxldCBlbmQgPSBzdGFydCArIHNpemU7XG4gICAgICAgICAgICBsZXQgaW1hZ2VEYXRhQnVmZmVyO1xuICAgICAgICAgICAgaWYgKGVuZ2luZS5IRUFQVTguYnVmZmVyLnNsaWNlKSB7XG4gICAgICAgICAgICAgICAgaW1hZ2VEYXRhQnVmZmVyID0gZW5naW5lLkhFQVBVOC5idWZmZXIuc2xpY2Uoc3RhcnQsIGVuZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGltYWdlRGF0YUJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KGVuZ2luZS5IRUFQVTguYnVmZmVyLCBzdGFydCwgc2l6ZSkuYnVmZmVyO1xuICAgICAgICAgICAgfSAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZW5kZXJlci5kZWxldGUoKTtcbiAgICAgICAgICAgIGJpdG1hcC5kZWxldGUoKTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBidWZmZXI6IGltYWdlRGF0YUJ1ZmZlcixcbiAgICAgICAgICAgICAgICB3aWR0aDogYml0bWFwV2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBiaXRtYXBIZWlnaHQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KVxuICAgIH1cbiAgICAvKipcbiAgICAgKiDojrflj5bpobXpnaLml4vovaznmoTop5LluqZcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSAwLCA5MCwgMTgwLCAyNzBcbiAgICAgKi9cbiAgICBnZXRSb3RhdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNfcGFnZVByb21pc2UudGhlbigocGFnZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHBhZ2UuR2V0Um90YXRpb24oKS52YWx1ZTtcbiAgICAgICAgfSlcbiAgICB9XG4gICAgc2V0Um90YXRpb24gKHJvdGF0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNfcGFnZVByb21pc2UudGhlbigocGFnZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFtwYWdlLlNldFJvdGF0aW9uKHRoaXMuZW5naW5lLlJvdGF0aW9uW1snZV9Sb3RhdGlvbjAnLCAnZV9Sb3RhdGlvbjkwJywgJ2VfUm90YXRpb24xODAnLCAnZV9Sb3RhdGlvbjI3MCddW3JvdGF0aW9uXSB8fCAnZV9Sb3RhdGlvbjAnXSksIHBhZ2VdKTtcbiAgICAgICAgfSkudGhlbigoW2ZsYWcsIHBhZ2VdKSA9PiB7XG4gICAgICAgICAgICAvL2lmIChmbGFnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhZ2UuR2V0Um90YXRpb24oKS52YWx1ZTtcbiAgICAgICAgICAgIC8vfVxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCk7XG4gICAgICAgIH0pXG4gICAgfVxuICAgIC8qKlxuICAgICAqIOiOt+WPllBERumhtemdoua4suafk+aIkOWbvueJh1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2NhbGUgPSAxXVxuICAgICAqIEByZXR1cm5zIHtQYWdlSW1hZ2V9XG4gICAgICovXG4gICAgZ2V0UGFnZUltYWdlIChzY2FsZSA9IDEpIHtcblxuICAgIH1cbiAgICAvKipcbiAgICAgKiDojrflj5blj6/op4bojIPlm7RcbiAgICAgKiBAcmV0dXJucyB7UERGUmVjdH1cbiAgICAgKi9cbiAgICBnZXRWaXNpYmxlQ29udGVudEJveCAoKSB7fVxuICAgIC8qKlxuICAgICAqIOiOt+WPlumhtemdouiMg+WbtFxuICAgICAqIEByZXR1cm5zIHtQREZSZWN0fVxuICAgICAqL1xuICAgIGdldE1lZGlhQm94ICgpIHt9XG4gICAgLyoqXG4gICAgICog6I635Y+W5paH5pys5L+h5oGvXG4gICAgICogQHJldHVybnMge1BERlRleHRbXX1cbiAgICAgKi9cbiAgICBnZXRUZXh0cyAoKSB7fVxuICAgIC8qKlxuICAgICAqIOiOt+WPlumhtemdouS4reWGheiBlOeahOWbvueJh1xuICAgICAqIEByZXR1cm5zIHtQREZJbWFnZVtdfVxuICAgICAqL1xuICAgIGdldEltYWdlcyAoKSB7fVxuICAgIC8qKlxuICAgICAqIOiOt+WPlumhtemdouS4reeahOW9oueKtlxuICAgICAqIEByZXR1cm5zIHtQREZTaGFwZVtdfVxuICAgICAqL1xuICAgIGdldFNoYXBlcyAoKSB7fVxuICAgIC8qKiBcbiAgICAgKiDojrflj5bpobXpnaLkuK3nmoTmuJDlj5hcbiAgICAgKiBAcmV0dXJucyB7UERGU2hhZGluZ1tdfVxuICAgICAqL1xuICAgIGdldFNoYWRpbmdzICgpIHt9XG5cbiAgICBkZXN0cm95ICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY19wYWdlUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChwYWdlKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFnZS5kZWxldGUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHRvSnNvbiAoKSB7XG4gICAgICAgIGxldCBwYWdlID0gdGhpcy5wYWdlO1xuICAgICAgICBsZXQgZW5naW5lID0gdGhpcy5lbmdpbmU7XG4gICAgICAgIGxldCBSZWN0RiA9IHRoaXMuZW5naW5lLkNGWF9GbG9hdFJlY3Q7XG4gICAgICAgIGxldCBtZWRpYUJveCA9IHBhZ2UuR2V0Qm94KGVuZ2luZS5Cb3hUeXBlLmVfTWVkaWFCb3gpO1xuICAgICAgICBtZWRpYUJveC5Ob3JtYWxpemUoKTtcbiAgICAgICAgaWYgKG1lZGlhQm94LklzRW1wdHkoKSkge1xuICAgICAgICAgICAgLy8gTWVkaWFib3ggaXMgbm90IHByZXNlbnQsIEFkb2JlIHRyZWF0cyBpdCBhcyBMZXR0ZXIgKDguNSd4MTEnKVxuICAgICAgICAgICAgbWVkaWFCb3ggPSBuZXcgUmVjdEYoMCwgMCwgNjEyLCA3OTIpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBib3g7XG4gICAgICAgIGxldCBjcm9wQm94ID0gcGFnZS5HZXRCb3goZW5naW5lLkJveFR5cGUuZV9Dcm9wQm94KTtcbiAgICAgICAgY3JvcEJveC5Ob3JtYWxpemUoKTtcbiAgICAgICAgaWYgKGNyb3BCb3guSXNFbXB0eSgpKSB7XG4gICAgICAgICAgICBib3ggPSBtZWRpYUJveDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJveCA9IGNyb3BCb3g7XG4gICAgICAgICAgICAvLyBTb21lIFBERiBjb21lcyB3aXRoIGNyb3AgYm94IGJpZ2dlciB0aGFuIG1lZGlhIGJveCwgd2hpY2ggZG9lc24ndCBtYWtlIHNlbnNlLFxuICAgICAgICAgICAgLy8gYnV0IHdlIG5lZWQgdG8gaGFuZGxlIGl0IGJ5IGNsaXBwaW5nIHRoZSBjcm9wIGJveCB3aXRoIG1lZGlhIGJveFxuICAgICAgICAgICAgYm94LkludGVyc2VjdChtZWRpYUJveCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IFJvdGF0aW9uID0gZW5naW5lLlJvdGF0aW9uO1xuICAgICAgICBsZXQgcGRmTWF0cml4O1xuICAgICAgICBzd2l0Y2ggKHBhZ2UuR2V0Um90YXRpb24oKSkge1xuICAgICAgICAgICAgY2FzZSBSb3RhdGlvbi5lX1JvdGF0aW9uMDpcbiAgICAgICAgICAgICAgICBwZGZNYXRyaXggPSBuZXcgZW5naW5lLk1hdHJpeCgxLCAwLCAwLCAxLCAtYm94LmxlZnQsIC1ib3guYm90dG9tKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgUm90YXRpb24uZV9Sb3RhdGlvbjkwOlxuICAgICAgICAgICAgICAgIHBkZk1hdHJpeCA9IG5ldyBlbmdpbmUuTWF0cml4KDAsIC0xLCAxLCAwLCAtYm94LmJvdHRvbSwgYm94LnJpZ2h0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgUm90YXRpb24uZV9Sb3RhdGlvbjE4MDpcbiAgICAgICAgICAgICAgICBwZGZNYXRyaXggPSBuZXcgZW5naW5lLk1hdHJpeCgtMSwgMCwgMCwgLTEsIGJveC5yaWdodCwgYm94LnRvcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFJvdGF0aW9uLmVfUm90YXRpb24yNzA6XG4gICAgICAgICAgICAgICAgcGRmTWF0cml4ID0gbmV3IGVuZ2luZS5NYXRyaXgoMCwgMSwgLTEsIDAsIGJveC50b3AsIC1ib3gubGVmdCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0IDpcbiAgICAgICAgICAgICAgICBwZGZNYXRyaXggPSBuZXcgZW5naW5lLk1hdHJpeCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGRmUGFnZU1hdHJpeCA9IHBkZk1hdHJpeDtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWQ6IHRoaXMuaWQsXG4gICAgICAgICAgICBpbmRleDogcGFnZS5HZXRJbmRleCgpLFxuICAgICAgICAgICAgd2lkdGg6IHBhZ2UuR2V0V2lkdGgoKSxcbiAgICAgICAgICAgIGhlaWdodDogcGFnZS5HZXRIZWlnaHQoKSxcbiAgICAgICAgICAgIHJvdGF0aW9uOiBwYWdlLkdldFJvdGF0aW9uKCkudmFsdWUsXG4gICAgICAgICAgICBhbm5vdENvdW50OiBwYWdlLkdldEFubm90Q291bnQoKSxcbiAgICAgICAgICAgIG1hdHJpeDogW3BkZk1hdHJpeC5HZXRBKCksIHBkZk1hdHJpeC5HZXRCKCksIHBkZk1hdHJpeC5HZXRDKCksIHBkZk1hdHJpeC5HZXREKCksIHBkZk1hdHJpeC5HZXRFKCksIHBkZk1hdHJpeC5HZXRGKCldLFxuICAgICAgICB9XG4gICAgfVxuICAgIGdldFBhZ2VNYXRyaXggKCkge1xuICAgICAgICBsZXQgcGFnZSA9IHRoaXMucGFnZTtcbiAgICAgICAgbGV0IGVuZ2luZSA9IHRoaXMuZW5naW5lO1xuICAgICAgICBsZXQgUmVjdEYgPSB0aGlzLmVuZ2luZS5DRlhfRmxvYXRSZWN0O1xuICAgICAgICBsZXQgbWVkaWFCb3ggPSBwYWdlLkdldEJveChlbmdpbmUuQm94VHlwZS5lX01lZGlhQm94KTtcbiAgICAgICAgbWVkaWFCb3guTm9ybWFsaXplKCk7XG4gICAgICAgIGlmIChtZWRpYUJveC5Jc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIC8vIE1lZGlhYm94IGlzIG5vdCBwcmVzZW50LCBBZG9iZSB0cmVhdHMgaXQgYXMgTGV0dGVyICg4LjUneDExJylcbiAgICAgICAgICAgIG1lZGlhQm94ID0gbmV3IFJlY3RGKDAsIDAsIDYxMiwgNzkyKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgYm94O1xuICAgICAgICBsZXQgY3JvcEJveCA9IHBhZ2UuR2V0Qm94KGVuZ2luZS5Cb3hUeXBlLmVfQ3JvcEJveCk7XG4gICAgICAgIGNyb3BCb3guTm9ybWFsaXplKCk7XG4gICAgICAgIGlmIChjcm9wQm94LklzRW1wdHkoKSkge1xuICAgICAgICAgICAgYm94ID0gbWVkaWFCb3g7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBib3ggPSBjcm9wQm94O1xuICAgICAgICAgICAgLy8gU29tZSBQREYgY29tZXMgd2l0aCBjcm9wIGJveCBiaWdnZXIgdGhhbiBtZWRpYSBib3gsIHdoaWNoIGRvZXNuJ3QgbWFrZSBzZW5zZSxcbiAgICAgICAgICAgIC8vIGJ1dCB3ZSBuZWVkIHRvIGhhbmRsZSBpdCBieSBjbGlwcGluZyB0aGUgY3JvcCBib3ggd2l0aCBtZWRpYSBib3hcbiAgICAgICAgICAgIGJveC5JbnRlcnNlY3QobWVkaWFCb3gpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBSb3RhdGlvbiA9IGVuZ2luZS5Sb3RhdGlvbjtcbiAgICAgICAgbGV0IHBkZlBhZ2VNYXRyaXg7XG4gICAgICAgIHN3aXRjaCAocGFnZS5HZXRSb3RhdGlvbigpKSB7XG4gICAgICAgICAgICBjYXNlIFJvdGF0aW9uLmVfUm90YXRpb24wOlxuICAgICAgICAgICAgICAgIHBkZlBhZ2VNYXRyaXggPSBuZXcgZW5naW5lLk1hdHJpeCgxLCAwLCAwLCAxLCAtYm94LmxlZnQsIC1ib3guYm90dG9tKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgUm90YXRpb24uZV9Sb3RhdGlvbjkwOlxuICAgICAgICAgICAgICAgIHBkZlBhZ2VNYXRyaXggPSBuZXcgZW5naW5lLk1hdHJpeCgwLCAtMSwgMSwgMCwgLWJveC5ib3R0b20sIGJveC5yaWdodCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFJvdGF0aW9uLmVfUm90YXRpb24xODA6XG4gICAgICAgICAgICAgICAgcGRmUGFnZU1hdHJpeCA9IG5ldyBlbmdpbmUuTWF0cml4KC0xLCAwLCAwLCAtMSwgYm94LnJpZ2h0LCBib3gudG9wKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgUm90YXRpb24uZV9Sb3RhdGlvbjI3MDpcbiAgICAgICAgICAgICAgICBwZGZQYWdlTWF0cml4ID0gbmV3IGVuZ2luZS5NYXRyaXgoMCwgMSwgLTEsIDAsIGJveC50b3AsIC1ib3gubGVmdCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0IDpcbiAgICAgICAgICAgICAgICBwZGZQYWdlTWF0cml4ID0gbmV3IGVuZ2luZS5NYXRyaXgoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGRmUGFnZU1hdHJpeDtcbiAgICB9XG4gICAgZ2V0Qml0bWFwIChzY2FsZSA9IDEsIHJvdGF0ZSA9IDAsIHJlY3QsIGZsYWdzID0gWydwYWdlJ10pIHtcbiAgICAgICAgbGV0IHJlbmRlckZsYWdzID0gMDtcbiAgICAgICAgbGV0IGVuZ2luZSA9IHRoaXMuZW5naW5lO1xuICAgICAgICBsZXQgZmxhZ01hcCA9IHtcbiAgICAgICAgICAgIHBhZ2U6IGVuZ2luZS5Db250ZW50RmxhZy5lX1JlbmRlclBhZ2UudmFsdWUsXG4gICAgICAgICAgICBhbm5vdDogZW5naW5lLkNvbnRlbnRGbGFnLmVfUmVuZGVyQW5ub3QudmFsdWUsXG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGogPSBmbGFncy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgICAgIHJlbmRlckZsYWdzIHw9IGZsYWdNYXBbZmxhZ3NbaV1dXG4gICAgICAgIH1cbiAgICAgICAgbGV0IHggPSByZWN0ID8gcmVjdC54IDogMDtcbiAgICAgICAgbGV0IHkgPSByZWN0ID8gcmVjdC55IDogMDtcbiAgICAgICAgbGV0IGJpdG1hcFdpZHRoO1xuICAgICAgICBsZXQgYml0bWFwSGVpZ2h0O1xuICAgICAgICBsZXQgcmVuZGVyV2lkdGg7XG4gICAgICAgIGxldCByZW5kZXJIZWlnaHQ7XG4gICAgICAgIGxldCBwcm9ncmVzc2l2ZUNvbnRpbnVlU3RhdGUgPSB0aGlzLnByb2dyZXNzaXZlQ29udGludWVTdGF0ZTtcbiAgICAgICAgbGV0IHByb2dyZXNzaXZlRmluaXNoU3RhdGUgPSB0aGlzLnByb2dyZXNzaXZlRmluaXNoU3RhdGU7XG4gICAgICAgIGxldCBwYWdlO1xuICAgICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZWRQYWdlKCkudGhlbigoX3BhZ2UpID0+IHtcbiAgICAgICAgICAgIHBhZ2UgPSBfcGFnZTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbdGhpcy5nZXRXaWR0aCgpLCB0aGlzLmdldEhlaWdodCgpXSk7XG4gICAgICAgIH0pLnRoZW4oKFtwYWdlV2lkdGgsIHBhZ2VIZWlnaHRdKSA9PiB7XG4gICAgICAgICAgICByZW5kZXJXaWR0aCA9IHBhZ2VXaWR0aCAqIHNjYWxlO1xuICAgICAgICAgICAgcmVuZGVySGVpZ2h0ID0gcGFnZUhlaWdodCAqIHNjYWxlO1xuICAgICAgICAgICAgYml0bWFwV2lkdGggPSByZWN0ID8gcmVjdC53aWR0aCA6IHJlbmRlcldpZHRoO1xuICAgICAgICAgICAgYml0bWFwSGVpZ2h0ID0gcmVjdCA/IHJlY3QuaGVpZ2h0IDogcmVuZGVySGVpZ2h0O1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGxldCBiaXRtYXAgPSBjcmVhdGVCaXRtYXAoZW5naW5lLCBiaXRtYXBXaWR0aCwgYml0bWFwSGVpZ2h0KTtcbiAgICAgICAgICAgIHJldHVybiBbYml0bWFwLCBwYWdlLCBlbmdpbmVdO1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChbYml0bWFwLCBwYWdlLCBlbmdpbmVdKSB7XG4gICAgICAgICAgICBsZXQgcmVuZGVyZXIgPSBjcmVhdGVCaXRtYXBSZW5kZXIoZW5naW5lLCBiaXRtYXApO1xuICAgICAgICAgICAgaWYoX3RoaXMucGRmRG9jLnBkZkxheWVyICYmIF90aGlzLnBkZkRvYy5wZGZMYXllci5sYXllcl9jb250ZXh0KXtcbiAgICAgICAgICAgICAgICByZW5kZXJlci5TZXRMYXllckNvbnRleHQoX3RoaXMucGRmRG9jLnBkZkxheWVyLmxheWVyX2NvbnRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFtyZW5kZXJlciwgYml0bWFwLCBwYWdlLCBlbmdpbmVdO1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChbcmVuZGVyZXIsIGJpdG1hcCwgcGFnZSwgZW5naW5lXSkge1xuICAgICAgICAgICAgc3RhcnRCaXRtYXBSZW5kZXIoe1xuICAgICAgICAgICAgICAgIHg6IC14LCB5OiAteSwgd2lkdGg6IHJlbmRlcldpZHRoLCBoZWlnaHQ6IHJlbmRlckhlaWdodCwgcm90YXRlLFxuICAgICAgICAgICAgfSwgZW5naW5lLCBwYWdlLCBiaXRtYXAsIHJlbmRlcmVyLCByZW5kZXJGbGFncywgXG4gICAgICAgICAgICBwcm9ncmVzc2l2ZUNvbnRpbnVlU3RhdGUsIHByb2dyZXNzaXZlRmluaXNoU3RhdGUsXG4gICAgICAgICAgICAwKVxuICAgICAgICAgICAgcmV0dXJuIFtyZW5kZXJlciwgYml0bWFwLCBlbmdpbmVdO1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChbcmVuZGVyZXIsIGJpdG1hcCwgZW5naW5lXSkge1xuICAgICAgICAgICAgcmV0dXJuIGdldEJpdG1hcEJ1ZmZlcihlbmdpbmUsIGJpdG1hcCwgcmVuZGVyZXIpO1xuICAgICAgICB9KVxuICAgIH1cbiAgICBnZXRCaXRtYXBCeU1hdHJpeCAobWF0cml4LCByZWN0LCBmbGFncykge1xuXG4gICAgfVxuICAgIGdldFBhZ2VBbmRIaWdobGlnaHRCaXRtYXAgKHNjYWxlID0gMSwgcm90YXRlID0gMCwgcmVjdCkge1xuICAgICAgICBsZXQgZW5naW5lID0gdGhpcy5lbmdpbmU7XG4gICAgICAgIGxldCB4ID0gcmVjdCA/IHJlY3QueCA6IDA7XG4gICAgICAgIGxldCB5ID0gcmVjdCA/IHJlY3QueSA6IDA7XG4gICAgICAgIGxldCBiaXRtYXBXaWR0aDtcbiAgICAgICAgbGV0IGJpdG1hcEhlaWdodDtcbiAgICAgICAgbGV0IHJlbmRlcldpZHRoO1xuICAgICAgICBsZXQgcmVuZGVySGVpZ2h0O1xuICAgICAgICBsZXQgcHJvZ3Jlc3NpdmVDb250aW51ZVN0YXRlID0gdGhpcy5wcm9ncmVzc2l2ZUNvbnRpbnVlU3RhdGU7XG4gICAgICAgIGxldCBwcm9ncmVzc2l2ZUZpbmlzaFN0YXRlID0gdGhpcy5wcm9ncmVzc2l2ZUZpbmlzaFN0YXRlO1xuICAgICAgICBsZXQgcGFnZTtcbiAgICAgICAgbGV0IF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VkUGFnZSgpLnRoZW4oKF9wYWdlKSA9PiB7XG4gICAgICAgICAgICBwYWdlID0gX3BhZ2U7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoW3RoaXMuZ2V0V2lkdGgoKSwgdGhpcy5nZXRIZWlnaHQoKV0pO1xuICAgICAgICB9KS50aGVuKChbcGFnZVdpZHRoLCBwYWdlSGVpZ2h0XSkgPT4ge1xuICAgICAgICAgICAgcmVuZGVyV2lkdGggPSBwYWdlV2lkdGggKiBzY2FsZTtcbiAgICAgICAgICAgIHJlbmRlckhlaWdodCA9IHBhZ2VIZWlnaHQgKiBzY2FsZTtcbiAgICAgICAgICAgIGJpdG1hcFdpZHRoID0gcmVjdCA/IHJlY3Qud2lkdGggOiByZW5kZXJXaWR0aDtcbiAgICAgICAgICAgIGJpdG1hcEhlaWdodCA9IHJlY3QgPyByZWN0LmhlaWdodCA6IHJlbmRlckhlaWdodDtcbiAgICAgICAgfSkudGhlbigoKT0+IHtcbiAgICAgICAgICAgIGxldCBiaXRtYXAgPSBjcmVhdGVCaXRtYXAoZW5naW5lLCBiaXRtYXBXaWR0aCwgYml0bWFwSGVpZ2h0KTtcbiAgICAgICAgICAgIHJldHVybiBbYml0bWFwLCBwYWdlLCBlbmdpbmVdO1xuICAgICAgICB9KS50aGVuKChbYml0bWFwLCBwYWdlLCBlbmdpbmVdKT0+IHtcbiAgICAgICAgICAgIGxldCByZW5kZXJlciA9IGNyZWF0ZUJpdG1hcFJlbmRlcihlbmdpbmUsIGJpdG1hcCk7XG4gICAgICAgICAgICBpZihfdGhpcy5wZGZEb2MucGRmTGF5ZXIgJiYgX3RoaXMucGRmRG9jLnBkZkxheWVyLmxheWVyX2NvbnRleHQpe1xuICAgICAgICAgICAgICAgIHJlbmRlcmVyLlNldExheWVyQ29udGV4dChfdGhpcy5wZGZEb2MucGRmTGF5ZXIubGF5ZXJfY29udGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gW3JlbmRlcmVyLCBiaXRtYXAsIHBhZ2UsIGVuZ2luZV07XG4gICAgICAgIH0pLnRoZW4oKFtyZW5kZXJlciwgYml0bWFwLCBwYWdlLCBlbmdpbmVdKSA9PntcbiAgICAgICAgICAgIHN0YXJ0Qml0bWFwUmVuZGVyV2l0aFBhZ2VIaWdobGlnaHQoe1xuICAgICAgICAgICAgICAgIHg6IC14LCB5OiAteSwgd2lkdGg6IHJlbmRlcldpZHRoLCBoZWlnaHQ6IHJlbmRlckhlaWdodCwgcm90YXRlLFxuICAgICAgICAgICAgfSwgZW5naW5lLCBwYWdlLCBiaXRtYXAsIHJlbmRlcmVyLFxuICAgICAgICAgICAgcHJvZ3Jlc3NpdmVDb250aW51ZVN0YXRlLCBwcm9ncmVzc2l2ZUZpbmlzaFN0YXRlLFxuICAgICAgICAgICAgMClcbiAgICAgICAgICAgIHJldHVybiBbcmVuZGVyZXIsIGJpdG1hcCwgZW5naW5lXTtcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoW3JlbmRlcmVyLCBiaXRtYXAsIGVuZ2luZV0pIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRCaXRtYXBCdWZmZXIoZW5naW5lLCBiaXRtYXAsIHJlbmRlcmVyKTtcbiAgICAgICAgfSlcbiAgICB9XG4gICAgZ2V0QW5ub3RCaXRtYXAgKGFubm90SWQsIHNjYWxlLCByb3RhdGUsIHJlY3QpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIEdTREtcbiAgICAgICAgICovXG4gICAgICAgIGxldCBlbmdpbmUgPSB0aGlzLmVuZ2luZTtcbiAgICAgICAgbGV0IHggPSByZWN0ID8gcmVjdC54IDogMDtcbiAgICAgICAgbGV0IHkgPSByZWN0ID8gcmVjdC55IDogMDtcbiAgICAgICAgbGV0IHBhZ2U7XG4gICAgICAgIGxldCBiaXRtYXBXaWR0aDtcbiAgICAgICAgbGV0IGJpdG1hcEhlaWdodDtcbiAgICAgICAgbGV0IHJlbmRlcldpZHRoO1xuICAgICAgICBsZXQgcmVuZGVySGVpZ2h0O1xuXG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlZFBhZ2UoKS50aGVuKChfcGFnZSkgPT4ge1xuICAgICAgICAgICAgcGFnZSA9IF9wYWdlO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFt0aGlzLmdldFdpZHRoKCksIHRoaXMuZ2V0SGVpZ2h0KCksIHRoaXMuZ2V0TmF0aXZlQW5ub3RCeUlkKGFubm90SWQpXSk7XG4gICAgICAgIH0pLnRoZW4oKFtwYWdlV2lkdGgsIHBhZ2VIZWlnaHQsIGFubm90XSkgPT4ge1xuICAgICAgICAgICAgcmVuZGVyV2lkdGggPSBwYWdlV2lkdGggKiBzY2FsZSA7XG4gICAgICAgICAgICByZW5kZXJIZWlnaHQgPSBwYWdlSGVpZ2h0ICogc2NhbGU7XG4gICAgICAgICAgICByZXR1cm4gYW5ub3Q7XG4gICAgICAgIC8vIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgLy8gcmV0dXJuIHBhZ2UuR2V0QW5ub3QoaW5kZXgpO1xuICAgICAgICB9KS50aGVuKChhbm5vdCkgPT4ge1xuICAgICAgICAgICAgaWYgKGFubm90LklzRW1wdHkoKSkge1xuICAgICAgICAgICAgICAgIHRocm93ICdhbm5vdCBpcyBlbXB0eSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgYW5ub3RSZWN0ID0gYW5ub3QuR2V0UmVjdCgpO1xuICAgICAgICAgICAgLy8gcmVuZGVyV2lkdGggPSAoYW5ub3RSZWN0LnJpZ2h0IC0gYW5ub3RSZWN0LmxlZnQpICogc2NhbGU7XG4gICAgICAgICAgICAvLyByZW5kZXJIZWlnaHQgPSAoYW5ub3RSZWN0LnRvcCAtIGFubm90UmVjdC5ib3R0b20pICogc2NhbGU7XG4gICAgICAgICAgICBsZXQgZXh0ZW5kU2l6ZSA9ICtzY2FsZTtcbiAgICAgICAgICAgIGJpdG1hcFdpZHRoID0gTWF0aC5tYXgoKHJlY3QgPyByZWN0LndpZHRoK2V4dGVuZFNpemUgOiAoYW5ub3RSZWN0LnJpZ2h0IC0gYW5ub3RSZWN0LmxlZnQpICogc2NhbGUpLCAxKTtcbiAgICAgICAgICAgIGJpdG1hcEhlaWdodCA9IE1hdGgubWF4KChyZWN0ID8gcmVjdC5oZWlnaHQrZXh0ZW5kU2l6ZSA6IChhbm5vdFJlY3QudG9wIC0gYW5ub3RSZWN0LmJvdHRvbSkgKiBzY2FsZSksIDEpO1xuICAgICAgICAgICAgLy8gYml0bWFwV2lkdGggPSAzMDA7XG4gICAgICAgICAgICAvLyBiaXRtYXBIZWlnaHQgPSAzMDA7XG4gICAgICAgICAgICByZXR1cm4gW2JpdG1hcFdpZHRoLCBiaXRtYXBIZWlnaHQsIGFubm90XTtcbiAgICAgICAgfSkudGhlbigoW3dpZHRoLCBoZWlnaHQsIGFubm90XSkgPT4ge1xuICAgICAgICAgICAgbGV0IGJpdG1hcCA9IGNyZWF0ZUJpdG1hcChlbmdpbmUsIHdpZHRoLCBoZWlnaHQsdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm4gW2JpdG1hcCwgYW5ub3RdO1xuICAgICAgICB9KS50aGVuKChbYml0bWFwLCBhbm5vdF0pID0+IHtcbiAgICAgICAgICAgIGxldCByZW5kZXJlciA9IGNyZWF0ZUJpdG1hcFJlbmRlcihlbmdpbmUsIGJpdG1hcCk7XG4gICAgICAgICAgICByZXR1cm4gW3JlbmRlcmVyLCBiaXRtYXAsIGFubm90XTtcbiAgICAgICAgfSkudGhlbigoW3JlbmRlcmVyLCBiaXRtYXAsIGFubm90XSkgPT4ge1xuICAgICAgICAgICAgLy9sZXQgbWF0cml4ID0gbmV3IGVuZ2luZS5NYXRyaXgoKTtcbiAgICAgICAgICAgIC8vbGV0IGRpc3BsYXlNYXRyaXggPSBuZXcgZW5naW5lLk1hdHJpeChzY2FsZSwgMCwgMCwgLXNjYWxlLCAwLCBwYWdlLkdldEhlaWdodCgpKnNjYWxlKTtcbiAgICAgICAgICAgIC8vZGlzcGxheU1hdHJpeC5lIC09IHg7XG4gICAgICAgICAgICAvL2Rpc3BsYXlNYXRyaXguZiAtPSB5O1xuXG4gICAgICAgICAgICAgLy9sZXQgZGlzcGxheU1hdHJpeCA9IHBhZ2UuR2V0RGlzcGxheU1hdHJpeCgwLCAwLCByZW5kZXJXaWR0aCwgcmVuZGVySGVpZ2h0LCBlbmdpbmUuUm90YXRpb24uZV9Sb3RhdGlvbjApO1xuICAgICAgICAgICAgIC8vZGlzcGxheU1hdHJpeCA9IGFubm90LkdldERpc3BsYXlNYXRyaXgoZGlzcGxheU1hdHJpeCk7XG4gICAgICAgICAgICAgLy9sZXQgcmVjdDIgPSBhbm5vdC5HZXREZXZpY2VSZWN0KGRpc3BsYXlNYXRyaXgpO1xuICAgICAgICAgICAgIC8vZGlzcGxheU1hdHJpeC5lLT1yZWN0Mi5sZWZ0O1xuICAgICAgICAgICAgLy9kaXNwbGF5TWF0cml4LmYtPXJlY3QyLnRvcDtcbiAgICAgICAgICAgIGxldCBkaXNwbGF5TWF0cml4ID0gcGFnZS5HZXREaXNwbGF5TWF0cml4KC14LCAteSwgcmVuZGVyV2lkdGgsIHJlbmRlckhlaWdodCwgZW5naW5lLlJvdGF0aW9uLmVfUm90YXRpb24wKTtcbiAgICAgICAgICAgIGxldCByZW5kZXJlZCA9IHJlbmRlcmVyLlJlbmRlckFubm90KGFubm90LCBkaXNwbGF5TWF0cml4KTtcbiAgICAgICAgICAgIGlmICghcmVuZGVyZWQpIHtcbiAgICAgICAgICAgICAgICByZW5kZXJlci5kZWxldGUoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBidWZmZXI6IG5ldyBBcnJheUJ1ZmZlcigwKSxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gIHRoaXMuSlIuc2F2ZUJpdG1hcFRvRmlsZShiaXRtYXApO1xuICAgICAgICAgICAgcmV0dXJuIGdldEJpdG1hcEJ1ZmZlcihlbmdpbmUsIGJpdG1hcCwgcmVuZGVyZXIpO1xuICAgICAgICB9KVxuICAgIH1cbiAgICBnZXRBbm5vdEJpdG1hcEJ5UmFuZ2UgKHJhbmdlLCBzY2FsZSwgcm90YXRlLCByZWN0KSB7XG4gICAgICAgIGxldCBlbmdpbmUgPSB0aGlzLmVuZ2luZTtcbiAgICAgICAgbGV0IHggPSByZWN0ID8gcmVjdC54IDogMDtcbiAgICAgICAgbGV0IHkgPSByZWN0ID8gcmVjdC55IDogMDtcbiAgICAgICAgbGV0IHBhZ2U7XG4gICAgICAgIGxldCBiaXRtYXBXaWR0aDtcbiAgICAgICAgbGV0IGJpdG1hcEhlaWdodDtcbiAgICAgICAgbGV0IHJlbmRlcldpZHRoO1xuICAgICAgICBsZXQgcmVuZGVySGVpZ2h0O1xuXG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlZFBhZ2UoKS50aGVuKChfcGFnZSkgPT4ge1xuICAgICAgICAgICAgcGFnZSA9IF9wYWdlO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFt0aGlzLmdldFdpZHRoKCksIHRoaXMuZ2V0SGVpZ2h0KCldKTtcbiAgICAgICAgfSkudGhlbigoW3BhZ2VXaWR0aCwgcGFnZUhlaWdodF0pID0+IHtcbiAgICAgICAgICAgIHJlbmRlcldpZHRoID0gcGFnZVdpZHRoICogc2NhbGUgO1xuICAgICAgICAgICAgcmVuZGVySGVpZ2h0ID0gcGFnZUhlaWdodCAqIHNjYWxlO1xuICAgICAgICAgICAgYml0bWFwV2lkdGggPSByZWN0ID8gcmVjdC53aWR0aCA6IHJlbmRlcldpZHRoO1xuICAgICAgICAgICAgYml0bWFwSGVpZ2h0ID0gcmVjdCA/IHJlY3QuaGVpZ2h0IDogcmVuZGVySGVpZ2h0O1xuICAgICAgICAgICAgcmV0dXJuIFtiaXRtYXBXaWR0aCwgYml0bWFwSGVpZ2h0LCByZW5kZXJXaWR0aCwgcmVuZGVySGVpZ2h0XTtcbiAgICAgICAgfSkudGhlbigoW3dpZHRoLCBoZWlnaHQsIHJlbmRlcldpZHRoLCByZW5kZXJIZWlnaHRdKSA9PiB7XG4gICAgICAgICAgICBsZXQgYml0bWFwID0gY3JlYXRlQml0bWFwKGVuZ2luZSwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICByZXR1cm4gW2JpdG1hcCwgcmVuZGVyV2lkdGgsIHJlbmRlckhlaWdodF07XG4gICAgICAgIH0pLnRoZW4oKFtiaXRtYXAsIHJlbmRlcldpZHRoLCByZW5kZXJIZWlnaHRdKSA9PiB7XG4gICAgICAgICAgICBsZXQgcmVuZGVyZXIgPSBjcmVhdGVCaXRtYXBSZW5kZXIoZW5naW5lLCBiaXRtYXApO1xuICAgICAgICAgICAgcmV0dXJuIFtyZW5kZXJlciwgYml0bWFwLCByZW5kZXJXaWR0aCwgcmVuZGVySGVpZ2h0XTtcbiAgICAgICAgfSkudGhlbigoW3JlbmRlcmVyLCBiaXRtYXAsIHJlbmRlcldpZHRoLCByZW5kZXJIZWlnaHRdKSA9PiB7XG4gICAgICAgICAgICBsZXQgbWF0cml4ID0gcGFnZS5HZXREaXNwbGF5TWF0cml4KC14LCAteSwgcmVuZGVyV2lkdGgsIHJlbmRlckhlaWdodCwgZW5naW5lLlJvdGF0aW9uLmVfUm90YXRpb24wKTtcbiAgICAgICAgICAgIGxldCBhbm5vdHMgPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBqID0gcmFuZ2UubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGl0ZW1zID0gcmFuZ2VbaV07XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW1zIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgbSA9IGl0ZW1zWzBdLCBuID0gaXRlbXNbMV07IG0gPD0gbjsgbSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbm5vdHMucHVzaChwYWdlLkdldEFubm90KG0pKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFubm90cy5wdXNoKHBhZ2UuR2V0QW5ub3QoaXRlbXMpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgaiA9IGFubm90cy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgYW5ub3QgPSBhbm5vdHNbaV07XG4gICAgICAgICAgICAgICAgcmVuZGVyZXIuUmVuZGVyQW5ub3QoYW5ub3QsIG1hdHJpeCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZ2V0Qml0bWFwQnVmZmVyKGVuZ2luZSwgYml0bWFwLCByZW5kZXJlcik7XG4gICAgICAgIH0pXG4gICAgfVxuICAgIGdldEFubm90SWRBdFBvaW50ICh4LCB5LCB0b2xlcmFuY2UgPSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlZFBhZ2UoKS50aGVuKChwYWdlKSA9PiB7XG4gICAgICAgICAgICAvLyBsZXQgUG9pbnRGID0gdGhpcy5lbmdpbmUuUG9pbnRGO1xuICAgICAgICAgICAgbGV0IGFubm90ID0gcGFnZS5HZXRBbm5vdEF0UG9pbnQobmV3IHRoaXMuZW5naW5lLlBvaW50Rih4LCB5KSwgdG9sZXJhbmNlKTtcbiAgICAgICAgICAgIGlmIChhbm5vdC5Jc0VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYW5ub3QuR2V0VW5pcXVlSUQoKS50b1N0cmluZygpO1xuICAgICAgICB9KVxuICAgIH1cbiAgICBnZXRBbm5vdElkQXREZXZpY2VQb2ludCAoeCwgeSwgdG9sZXJhbmNlID0gMCwgbWF0cml4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlZFBhZ2UoKS50aGVuKChwYWdlKSA9PiB7XG4gICAgICAgICAgICAvL2xldCB3aWR0aCA9IHBhZ2UuR2V0V2lkdGgoKSAqIHNjYWxlO1xuICAgICAgICAgICAgLy9sZXQgaGVpZ2h0ID0gcGFnZS5HZXRIZWlnaHQoKSAqIHNjYWxlO1xuICAgICAgICAgICAgLy9sZXQgZW5naW5lUm90YXRlID0gZ2V0RW5naW5lUm90YXRlKGVuZ2luZSwgcm90YXRlKTtcbiAgICAgICAgICAgIC8vbGV0IGFubm90ID0gcGFnZS5HZXRBbm5vdEF0RGV2aWNlUG9pbnQobmV3IGVuZ2luZS5Qb2ludEYoeCwgeSksIHRvbGVyYW5jZSwgcGFnZS5HZXREaXNwbGF5TWF0cml4KDAsIDAsIHdpZHRoLCBoZWlnaHQsIGVuZ2luZVJvdGF0ZSkpO1xuICAgICAgICAgICAgLy9sZXQgcGRmTWF0cml4ID0gdGhpcy5nZXRQREZNYXRyaXgoKTtcbiAgICAgICAgICAgIC8vcGRmTWF0cml4LlNjYWxlKHNjYWxlLCAtc2NhbGUpO1xuICAgICAgICAgICAgbGV0IGVuZ2luZSA9IHRoaXMuZW5naW5lO1xuICAgICAgICAgICAgbGV0IHBkZk1hdHJpeCA9IG5ldyBlbmdpbmUuTWF0cml4KCk7XG4gICAgICAgICAgICBpZiAobWF0cml4KSB7XG4gICAgICAgICAgICAgICAgcGRmTWF0cml4LlNldChtYXRyaXhbMF0sIG1hdHJpeFsxXSwgbWF0cml4WzJdLCBtYXRyaXhbM10sIG1hdHJpeFs0XSwgbWF0cml4WzVdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBhbm5vdCA9IHBhZ2UuR2V0QW5ub3RBdERldmljZVBvaW50KG5ldyBlbmdpbmUuUG9pbnRGKHgsIHkpLCB0b2xlcmFuY2UsIHBkZk1hdHJpeCk7XG4gICAgICAgICAgICBpZiAoYW5ub3QuSXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFubm90LkdldFVuaXF1ZUlEKCkudG9TdHJpbmcoKTtcbiAgICAgICAgfSlcbiAgICB9XG4gICAgLy9nZXRDaGFySW5kZXhBdFBvaW50ICh4LCB5LCB0b2xlcmFuY2UgPSAwKSB7XG4gICAgLy8gICAgcmV0dXJuIHRoaXMuZ2V0Tm9ybWFsVGV4dFBhZ2UoKS50aGVuKCh0ZXh0UGFnZSkgPT4ge1xuICAgIC8vICAgICAgICBsZXQgY2hhckluZGV4ID0gdGV4dFBhZ2UuR2V0SW5kZXhBdFBvcyh4LCB5LCB0b2xlcmFuY2UgLyogdG9sZXJhbmNlICovKVxuICAgIC8vICAgICAgICBjb25zb2xlLmxvZyhjaGFySW5kZXgpO1xuICAgIC8vICAgICAgICByZXR1cm4gY2hhckluZGV4O1xuICAgIC8vICAgIH0pXG4gICAgLy99XG4gICAgZ2V0Q2hhckluZm9BdFBvaW50ICh4LCB5LCB0b2xlcmFuY2UgPSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE5vcm1hbFRleHRQYWdlKCkudGhlbigodGV4dFBhZ2UpID0+IHtcbiAgICAgICAgICAgIGxldCBjaGFySW5kZXggPSB0ZXh0UGFnZS5HZXRJbmRleEF0UG9zKHgsIHksIHRvbGVyYW5jZSAvKiB0b2xlcmFuY2UgKi8pXG4gICAgICAgICAgICBpZiAoY2hhckluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHRleHRSZWN0Q291bnQgPSB0ZXh0UGFnZS5HZXRUZXh0UmVjdENvdW50KGNoYXJJbmRleCwgMSk7XG4gICAgICAgICAgICBpZiAoIXRleHRSZWN0Q291bnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCByZWN0ID0gdGV4dFBhZ2UuR2V0VGV4dFJlY3QoMCk7XG4gICAgICAgICAgICBsZXQgcm90YXRpb24gPSB0ZXh0UGFnZS5HZXRCYXNlbGluZVJvdGF0aW9uKDApO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBjaGFySW5kZXg6IGNoYXJJbmRleCxcbiAgICAgICAgICAgICAgICBsZWZ0OiByZWN0LmxlZnQsXG4gICAgICAgICAgICAgICAgcmlnaHQ6IHJlY3QucmlnaHQsXG4gICAgICAgICAgICAgICAgdG9wOiByZWN0LnRvcCxcbiAgICAgICAgICAgICAgICBib3R0b206IHJlY3QuYm90dG9tLFxuICAgICAgICAgICAgICAgIHJvdGF0aW9uOiByb3RhdGlvbi52YWx1ZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pXG4gICAgfVxuICAgIGdldE5vcm1hbFRleHRQYWdlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VkUGFnZSgpLnRoZW4oKHBhZ2UpID0+IHtcbiAgICAgICAgICAgIGxldCBlbmdpbmUgPSB0aGlzLmVuZ2luZTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgZW5naW5lLlRleHRQYWdlKHBhZ2UsIGVuZ2luZS5UZXh0UGFyc2VGbGFncy5lX1BhcnNlVGV4dE5vcm1hbC52YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICAvL3JldHVybjtcbiAgICAgICAgLy9sZXQgdGV4dFBhZ2UgPSB0aGlzLk5vcm1hbFRleHRQYWdlO1xuICAgICAgICAvL2lmICh0ZXh0UGFnZSkge1xuICAgICAgICAvLyAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRleHRQYWdlKTtcbiAgICAgICAgLy99XG4gICAgICAgIC8vbGV0IGdldE5vcm1hbFRleHRQYWdlUHJvbWlzZSA9IHRoaXMuZ2V0Tm9ybWFsVGV4dFBhZ2VQcm9taXNlO1xuICAgICAgICAvL2lmIChnZXROb3JtYWxUZXh0UGFnZVByb21pc2UpIHtcbiAgICAgICAgLy8gICAgcmV0dXJuIGdldE5vcm1hbFRleHRQYWdlUHJvbWlzZTtcbiAgICAgICAgLy99XG4gICAgICAgIC8vcmV0dXJuIHRoaXMuZ2V0Tm9ybWFsVGV4dFBhZ2VQcm9taXNlID0gdGhpcy5wYXJzZWRQYWdlKCkudGhlbigocGFnZSkgPT4ge1xuICAgICAgICAvLyAgICBsZXQgZW5naW5lID0gdGhpcy5lbmdpbmU7XG4gICAgICAgIC8vICAgIHJldHVybiB0aGlzLk5vcm1hbFRleHRQYWdlID0gbmV3IGVuZ2luZS5UZXh0UGFnZShwYWdlLCBlbmdpbmUuVGV4dFBhcnNlRmxhZ3MuZV9QYXJzZVRleHROb3JtYWwudmFsdWUpO1xuICAgICAgICAvL30pO1xuICAgIH1cbiAgICBnZXROb3JtYWxUZXh0UGFnZVN5bmMgKCkge1xuICAgICAgICBsZXQgZW5naW5lID0gdGhpcy5lbmdpbmU7XG4gICAgICAgIGxldCB0ZXh0UGFnZSA9IG5ldyBlbmdpbmUuVGV4dFBhZ2UodGhpcy5wYWdlLCBlbmdpbmUuVGV4dFBhcnNlRmxhZ3MuZV9QYXJzZVRleHROb3JtYWwudmFsdWUpO1xuICAgICAgICByZXR1cm4gdGV4dFBhZ2U7XG4gICAgfVxuICAgIHJlbW92ZUFubm90QnlJZChhbm5vdElkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE5hdGl2ZUFubm90QnlJZChhbm5vdElkKS50aGVuKGFubm90ID0+IHtcbiAgICAgICAgICAgIGlmKGFubm90KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VkUGFnZSgpLnRoZW4ocGFnZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmKHBhZ2UuUmVtb3ZlQW5ub3QoYW5ub3QpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy51cGRhdGUoKS50aGVuKF8gPT4gdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cbiAgICByZW1vdmVBbGxBbm5vdCAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlZFBhZ2UoKS50aGVuKChwYWdlKSA9PiB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gcGFnZS5HZXRBbm5vdENvdW50KCk7IGktLTspIHtcbiAgICAgICAgICAgICAgICBwYWdlLlJlbW92ZUFubm90KHBhZ2UuR2V0QW5ub3QoaSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5hbm5vdGF0aW9uSURBcnJheSA9IFtdO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX2dldEFubm90YXRpb25JZEFycmF5KHBhZ2UpIHtcbiAgICAgICAgY29uc3QgY291bnQgPSBwYWdlLkdldEFubm90Q291bnQoKTtcbiAgICAgICAgcmV0dXJuIEFycmF5KGNvdW50KVxuICAgICAgICAgICAgLmZpbGwodW5kZWZpbmVkKVxuICAgICAgICAgICAgLm1hcCgoXywgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBhbm5vdCA9IHBhZ2UuR2V0QW5ub3QoaW5kZXgpO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhbm5vdC5Jc0VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFubm90LkdldFVuaXF1ZUlEKCkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIGFubm90LmRlbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgIH1cbiAgICBhZGRJbWFnZShpbWFnZUJ1ZmZlcixwb2ludCx3aWR0aCxoZWlnaHQpe1xuICAgICAgICBsZXQgZW5naW5lID0gdGhpcy5lbmdpbmU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAdHlwZSBHU0RLLkltYWdlXG4gICAgICAgICAqL1xuICAgICAgICBsZXQgaW1hZ2U9SW1hZ2UuY3JlYXRlSW1hZ2UoZW5naW5lLGltYWdlQnVmZmVyKTtcbiAgICAgICAgbGV0IFBERlBvaW50ID0gbmV3IGVuZ2luZS5Qb2ludEYocG9pbnQueCxwb2ludC55KTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VkUGFnZSgpLnRoZW4oKGNfcGFnZSkgPT4ge1xuXG4gICAgICAgICAgICAvLyBzd2l0Y2goY19wYWdlLkdldFJvdGF0aW9uKCkudmFsdWUpe1xuICAgICAgICAgICAgLy8gICAgIGNhc2UgMTpcbiAgICAgICAgICAgIC8vICAgICBjYXNlIDM6XG4gICAgICAgICAgICAvLyAgICAgICAgIGxldCB0ZW1wID0gaGVpZ2h0O1xuICAgICAgICAgICAgLy8gICAgICAgICBoZWlnaHQgPSB3aWR0aDtcbiAgICAgICAgICAgIC8vICAgICAgICAgd2lkdGggPSB0ZW1wO1xuICAgICAgICAgICAgLy8gICAgICAgICBicmVhaztcbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgIGxldCByZXQgPSBjX3BhZ2UuQWRkSW1hZ2UoaW1hZ2UsMCxQREZQb2ludCx3aWR0aCxoZWlnaHQsdHJ1ZSk7XG4gICAgICAgICAgICAvLyBjX3BhZ2UuU3RhcnRQYXJzZSgwLG51bGwsdHJ1ZSk7XG5cbiAgICAgICAgICAgIC8vIGxldCBwb3MgPSBjX3BhZ2UuR2V0TGFzdEdyYXBoaWNzT2JqZWN0UG9zaXRpb24oZW5naW5lLkdyYXBoaWNzT2JqZWN0VHlwZS5lX1R5cGVJbWFnZSk7XG4gICAgICAgICAgICAvLyBsZXQgYWRkZWRJbWFnZSA9IGNfcGFnZS5HZXRHcmFwaGljc09iamVjdChwb3MpO1xuXG4gICAgICAgICAgICAvLyBsZXQgcmFkaWFuPWNfcGFnZS5HZXRSb3RhdGlvbigpLnZhbHVlKjkwKk1hdGguUEkvMTgwO1xuXG4gICAgICAgICAgICAvLyAvKipcbiAgICAgICAgICAgIC8vICAqIEB0eXBlIEdTREsuQ0ZYX0Zsb2F0UmVjdFxuICAgICAgICAgICAgLy8gICovXG4gICAgICAgICAgICAvLyBsZXQgb3JpUmVjdCA9IGFkZGVkSW1hZ2UuR2V0UmVjdCgpO1xuICAgICAgICAgICAgLy8gbGV0IGNlbnRlcj17XG4gICAgICAgICAgICAvLyAgICAgeDoob3JpUmVjdC5yaWdodCtvcmlSZWN0LmxlZnQpLzIsXG4gICAgICAgICAgICAvLyAgICAgeToob3JpUmVjdC50b3Arb3JpUmVjdC5ib3R0b20pLzJcbiAgICAgICAgICAgIC8vIH07XG4gICAgICAgICAgICAvLyBsZXQgbSA9IGFkZGVkSW1hZ2UuR2V0TWF0cml4KCk7XG4gICAgICAgICAgICAvLyBtLlJvdGF0ZUF0KHJhZGlhbiwtY2VudGVyLngsLWNlbnRlci55LDApXG4gICAgICAgICAgICAvLyAvLyBtLlRyYW5zbGF0ZSgtY2VudGVyLngsLWNlbnRlci55LDApO1xuICAgICAgICAgICAgLy8gLy8gbS5Sb3RhdGUoLXJhZGlhbiwwKTtcbiAgICAgICAgICAgIC8vIC8vIG0uVHJhbnNsYXRlKGNlbnRlci54LGNlbnRlci55LDApO1xuICAgICAgICAgICAgLy8gYWRkZWRJbWFnZS5TZXRNYXRyaXgobSk7XG4gICAgICAgICAgICAvLyBjX3BhZ2UuR2VuZXJhdGVDb250ZW50KCk7XG4gICAgICAgICAgICAvLyBjX3BhZ2UuU3RhcnRQYXJzZSgwLG51bGwsdHJ1ZSk7XG4gICAgICAgICAgICAvLyBtLmRlbGV0ZSgpO1xuXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYWRkQW5ub3QgKGFubm90KSB7XG4gICAgICAgIC8vcmV0dXJuIHRoaXMuY3JlYXRlQW5ub3QoYW5ub3QpO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZWRQYWdlKCkudGhlbigoY19wYWdlKSA9PiB7XG4gICAgICAgICAgICBsZXQgZW5naW5lID0gdGhpcy5lbmdpbmU7XG4gICAgICAgICAgICBsZXQgY19Bbm5vdFR5cGUgPSBnZXRFbmdpbmVBbm5vdFR5cGUoZW5naW5lLCBhbm5vdC50eXBlKTtcbiAgICAgICAgICAgIGxldCBjX3JlY3RmID0gZ2V0RW5naW5lUmVjdEYoZW5naW5lLCBhbm5vdC5yZWN0KTtcbiAgICAgICAgICAgIGxldCBjX2Fubm90ID0gY19wYWdlLkFkZEFubm90KGNfQW5ub3RUeXBlLCBjX3JlY3RmKTtcbiAgICAgICAgICAgIGxldCBjcmVhdGVkQW5ub3QgPSB0aGlzLmFubm90TWFuYWdlci5nZXQoY19hbm5vdCwgdGhpcyk7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlZEFubm90LmNyZWF0ZShhbm5vdCk7XG4gICAgICAgIH0pLnRoZW4oYW5ub3RzID0+IHtcbiAgICAgICAgICAgIGFubm90cy5mb3JFYWNoKGFubm90ID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRBbm5vdElkQXQoYW5ub3QuZ2V0SWQoKSwgYW5ub3QuZ2V0SW5kZXgoKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBhbm5vdHM7XG4gICAgICAgIH0pXG4gICAgfVxuICAgIG1hcmtSZWRhY3RBbm5vdCAocmVjdEZBcnJheSl7XG4gICAgICAgIGxldCBlbmdpbmUgPSB0aGlzLmVuZ2luZTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGRmRG9jLmdldFJlZGFjdGlvbigpLnRoZW4oY19yZWRhY3Rpb24gPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY19wYWdlUHJvbWlzZS50aGVuKChjX3BhZ2UpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW2NfcmVkYWN0aW9uLCBjX3BhZ2VdO1xuICAgICAgICAgICAgfSkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGNfcmVkYWN0aW9uID0gcmVzdWx0WzBdO1xuICAgICAgICAgICAgICAgIGxldCBjX3BhZ2UgPSByZXN1bHRbMV07XG4gICAgICAgICAgICAgICAgbGV0IHJlZGFjdEFubm90O1xuICAgICAgICAgICAgICAgIHRyeXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNfcmVjdF9mX2FycmF5ID0gbmV3IGVuZ2luZS5SZWN0RkFycmF5KCk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBqID0gcmVjdEZBcnJheS5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZWN0ID0gcmVjdEZBcnJheVtpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjX3JlY3RmID0gbmV3IGVuZ2luZS5DRlhfRmxvYXRSZWN0KHJlY3QubGVmdCwgcmVjdC5ib3R0b20sIHJlY3QucmlnaHQsIHJlY3QudG9wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNfcmVjdF9mX2FycmF5LkFkZChjX3JlY3RmKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZWRhY3RBbm5vdCA9IGNfcmVkYWN0aW9uLk1hcmtSZWRhY3RBbm5vdChjX3BhZ2UsIGNfcmVjdF9mX2FycmF5KTtcbiAgICAgICAgICAgICAgICB9Y2F0Y2goZXJyKXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc05hTiAoZXJyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyID0gdGhpcy5lbmdpbmUuZ2V0RXJyb3JDb2RlIChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyAoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IGNyZWF0ZWRBbm5vdCA9IHRoaXMuYW5ub3RNYW5hZ2VyLmdldChyZWRhY3RBbm5vdCwgdGhpcyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZWRBbm5vdC5jcmVhdGUoY3JlYXRlZEFubm90KTtcbiAgICAgICAgICAgIH0pLnRoZW4oYW5ub3RzID0+IHtcbiAgICAgICAgICAgICAgICBhbm5vdHMuZm9yRWFjaChhbm5vdCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldEFubm90SWRBdChhbm5vdC5nZXRJZCgpLCBhbm5vdC5nZXRJbmRleCgpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYW5ub3RzO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFkZEFubm90R3JvdXAoYW5ub3RzLGhlYWRlckluZGV4KXtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VkUGFnZSgpLnRoZW4oKGNfcGFnZSkgPT4ge1xuICAgICAgICAgICAgbGV0IGVuZ2luZSA9IHRoaXMuZW5naW5lO1xuICAgICAgICAgICAgbGV0IGdyb3VwPW5ldyBlbmdpbmUuTWFya3VwQXJyYXkoKTtcbiAgICAgICAgICAgIGxldCByZXN1bHQ9W107XG4gICAgICAgICAgICBhbm5vdHMuZm9yRWFjaCgoYW5ub3QsaW5kZXgpPT57XG4gICAgICAgICAgICAgICAgaWYoaW5kZXghPT1oZWFkZXJJbmRleCl7XG4gICAgICAgICAgICAgICAgICAgIGFubm90Lm5vUG9wdXA9dHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IGNfQW5ub3RUeXBlID0gZ2V0RW5naW5lQW5ub3RUeXBlKGVuZ2luZSwgYW5ub3QudHlwZSk7XG4gICAgICAgICAgICAgICAgbGV0IGNfcmVjdGYgPSBnZXRFbmdpbmVSZWN0RihlbmdpbmUsIGFubm90LnJlY3QpO1xuICAgICAgICAgICAgICAgIGxldCBjX2Fubm90ID0gY19wYWdlLkFkZEFubm90KGNfQW5ub3RUeXBlLCBjX3JlY3RmKTtcbiAgICAgICAgICAgICAgICBncm91cC5BZGQobmV3IGVuZ2luZS5NYXJrdXAoY19hbm5vdCkpO1xuICAgICAgICAgICAgICAgIGxldCBjcmVhdGVkQW5ub3QgPSB0aGlzLmFubm90TWFuYWdlci5nZXQoY19hbm5vdCwgdGhpcyk7XG4gICAgICAgICAgICAgICAgcmVzdWx0PXJlc3VsdC5jb25jYXQoY3JlYXRlZEFubm90LmNyZWF0ZShhbm5vdCkpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNfcGFnZS5TZXRBbm5vdEdyb3VwKGdyb3VwLGhlYWRlckluZGV4KTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0pLnRoZW4oYW5ub3RzID0+IHtcbiAgICAgICAgICAgIGFubm90cy5mb3JFYWNoKGFubm90ID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRBbm5vdElkQXQoYW5ub3QuZ2V0SWQoKSwgYW5ub3QuZ2V0SW5kZXgoKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBhbm5vdHM7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjcmVhdGVBbm5vdCAoYW5ub3QpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VkUGFnZSgpLnRoZW4oKGNfcGFnZSkgPT4ge1xuICAgICAgICAgICAgbGV0IGVuZ2luZSA9IHRoaXMuZW5naW5lO1xuICAgICAgICAgICAgLy90cnkge1xuXG4gICAgICAgICAgICAvL2xldCBjX0Fubm90VHlwZSA9IGdldEVuZ2luZUFubm90VHlwZShlbmdpbmUsIGFubm90LnR5cGUpO1xuICAgICAgICAgICAgLy9sZXQgY19yZWN0ZiA9IGdldEVuZ2luZVJlY3RGKGVuZ2luZSwgYW5ub3QucmVjdCk7XG4gICAgICAgICAgICAvL2xldCBjX2Fubm90ID0gY19wYWdlLkFkZEFubm90KGNfQW5ub3RUeXBlLCBjX3JlY3RmKTtcbiAgICAgICAgICAgIC8vbGV0IGNyZWF0ZWRBbm5vdCA9IHRoaXMuYW5ub3RNYW5hZ2VyLmdldChjX2Fubm90LCB0aGlzKTtcbiAgICAgICAgICAgIC8vcmV0dXJuIGNyZWF0ZWRBbm5vdC5jcmVhdGUoYW5ub3QpO1xuICAgICAgICAgICAgbGV0IGhpZ2hsaWdodCA9IG5ldyBlbmdpbmUuSGlnaGxpZ2h0KCk7XG4gICAgICAgICAgICBsZXQgcXVhZFBvaW50c0FycmF5ID0gbmV3IGVuZ2luZS5RdWFkUG9pbnRzQXJyYXkoKTtcbiAgICAgICAgICAgIGxldCBRdWFkUG9pbnRzID0gZW5naW5lLlF1YWRQb2ludHM7XG4gICAgICAgICAgICBsZXQgUG9pbnRGID0gZW5naW5lLlBvaW50RjtcbiAgICAgICAgICAgIHF1YWRQb2ludHNBcnJheS5BZGQobmV3IFF1YWRQb2ludHMobmV3IFBvaW50RigxMDAsIDQwMCksIG5ldyBQb2ludEYoMjAwLDQwMCksIG5ldyBQb2ludEYoMTAwLDMwMCksIG5ldyBQb2ludEYoMjAwLDMwMCkpKTtcbiAgICAgICAgICAgIGhpZ2hsaWdodC5TZXRRdWFkUG9pbnRzKHF1YWRQb2ludHNBcnJheSk7XG4gICAgICAgICAgICB2YXIgYml0bWFwID0gbmV3IGVuZ2luZS5CaXRtYXAoMTAwLCAxMDAsIGVuZ2luZS5ESUJGb3JtYXQuZV9ESUJBcmdiLCAwLCAwKVxuICAgICAgICAgICAgdmFyIHJlbmRlcmVyID0gbmV3IGVuZ2luZS5SZW5kZXJlcihiaXRtYXAsIHRydWUpXG4gICAgICAgICAgICBpZiAocmVuZGVyZXIuSXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAgcmVuZGVyZXIuZGVsZXRlKClcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBtYXRyaXggPSB0aGlzLmdldFBhZ2VNYXRyaXgoKTtcbiAgICAgICAgICAgIG1hdHJpeC5UcmFuc2xhdGUoMTAwLCAzMDApO1xuICAgICAgICAgICAgbGV0IGlzT0sgPSByZW5kZXJlci5SZW5kZXJBbm5vdChhbm5vdCwgbWF0cml4KVxuICAgICAgICAgICAgcmV0dXJuIGdldEJpdG1hcEJ1ZmZlcihlbmdpbmUsIGJpdG1hcCwgcmVuZGVyZXIpXG5cbiAgICAgICAgLy99IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIC8vIGpzIGRpcmVjdGx5IHRocm93cyBlcnJvciBjb2RlLCB3aGlsZSBjKysgdGhyb3dzIGV4Y2VwdGlvblxuICAgICAgICAvLyAgICB2YXIgZXJyb3JDb2RlID0gKGVyciBpbnN0YW5jZW9mIGVuZ2luZS5FcnJvckNvZGUpID8gZXJyIDogZW5naW5lLmdldEVycm9yQ29kZShlcnIpXG4gICAgICAgIC8vICAgIGNvbnNvbGUubG9nKGVycm9yQ29kZSlcbiAgICAgICAgLy99XG4gICAgICAgIH0pXG4gICAgfVxuICAgIGdldFRleHRSZWN0c0F0UmVjdCAocmVjdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZWRQYWdlKCkudGhlbigoY19wYWdlKSA9PiB7XG4gICAgICAgICAgICB0cnl7XG4gICAgICAgICAgICBsZXQgZW5naW5lID0gdGhpcy5lbmdpbmU7XG4gICAgICAgICAgICBsZXQgUmVjdEYgPSBlbmdpbmUuQ0ZYX0Zsb2F0UmVjdDtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQHR5cGUgR1NESy5UZXh0UGFnZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBsZXQgY190ZXh0UGFnZSA9IHRoaXMuZ2V0Tm9ybWFsVGV4dFBhZ2VTeW5jKCk7XG4gICAgICAgICAgICBsZXQgY19yZWN0QXJyYXkgPSBjX3RleHRQYWdlLkdldFRleHRSZWN0QXJyYXlCeVJlY3QobmV3IFJlY3RGKHJlY3QubGVmdCwgcmVjdC5ib3R0b20sIHJlY3QucmlnaHQsIHJlY3QudG9wKSk7XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gY19yZWN0QXJyYXkuR2V0U2l6ZSgpOyBpLS07KSB7XG4gICAgICAgICAgICAgICAgbGV0IGNfcmVjdCA9IGNfcmVjdEFycmF5LkdldEF0KGkpO1xuXG4gICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gY190ZXh0UGFnZS5HZXRJbmRleEF0UG9zKChjX3JlY3QucmlnaHQrY19yZWN0LmxlZnQpLzIsKGNfcmVjdC5ib3R0b20rY19yZWN0LnRvcCkvMisyLDIpO1xuICAgICAgICAgICAgICAgIGxldCBjb3VudCA9IGNfdGV4dFBhZ2UuR2V0VGV4dFJlY3RDb3VudChpbmRleCwyKTtcbiAgICAgICAgICAgICAgICBsZXQgcm90YXRpb24gPSAwO1xuICAgICAgICAgICAgICAgIGlmKGNvdW50ID4gMCl7XG4gICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uID0gY190ZXh0UGFnZS5HZXRCYXNlbGluZVJvdGF0aW9uKDApLnZhbHVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJlc3VsdFtpXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogY19yZWN0LmxlZnQsXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiBjX3JlY3QucmlnaHQsXG4gICAgICAgICAgICAgICAgICAgIHRvcDogY19yZWN0LnRvcCxcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tOiBjX3JlY3QuYm90dG9tLFxuICAgICAgICAgICAgICAgICAgICByb3RhdGlvbixcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9Y2F0Y2goZXJyKXtcbiAgICAgICAgICAgIGlmICghaXNOYU4gKGVycikpIHtcbiAgICAgICAgICAgICAgZXJyID0gdGhpcy5lbmdpbmUuZ2V0RXJyb3JDb2RlIChlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc29sZS53YXJuIChlcnIpO1xuICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxuICAgIGdldFRleHRDb250aW51b3VzUmVjdHNBdFJlY3QgKHJlY3QpIHtcbiAgICAgICAgaWYocmVjdC5yaWdodCAtIHJlY3QubGVmdDwwLjV8fFxuICAgICAgICAgICAgcmVjdC50b3AgLSByZWN0LmJvdHRvbTwwLjUpe1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoW10pO1xuICAgICAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5nZXRUZXh0UmVjdHNBdFJlY3QocmVjdCkudGhlbigocmVjdEFycmF5KSA9PiB7XG4gICAgICAgICAgICB0cnl7XG4gICAgICAgICAgICBsZXQgY291bnQgPSByZWN0QXJyYXkubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKGNvdW50IDwgMikge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWN0QXJyYXk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgZmlyc3RSZWN0ID0gcmVjdEFycmF5WzBdO1xuICAgICAgICAgICAgbGV0IGxhc3RSZWN0ID0gcmVjdEFycmF5W2NvdW50IC0gMV07XG4gICAgICAgICAgICBsZXQgZW5naW5lID0gdGhpcy5lbmdpbmU7XG4gICAgICAgICAgICBsZXQgdGV4dFBhZ2UgPSB0aGlzLmdldE5vcm1hbFRleHRQYWdlU3luYygpO1xuICAgICAgICAgICAgbGV0IHRvbGVyYW5jZSA9IDM7XG4gICAgICAgICAgICBsZXQgc3RhcnRUb2xlcmFuY2UgPSBNYXRoLm1pbigoZmlyc3RSZWN0LnRvcCAtIGZpcnN0UmVjdC5ib3R0b20pIC8gMiwgdG9sZXJhbmNlKTtcbiAgICAgICAgICAgIGxldCBzdGFydFBvaW50ID0gbmV3IGVuZ2luZS5Qb2ludEYoZmlyc3RSZWN0LmxlZnQgKyBzdGFydFRvbGVyYW5jZSwgZmlyc3RSZWN0LnRvcCAtIHN0YXJ0VG9sZXJhbmNlKTtcbiAgICAgICAgICAgIGxldCBzdGFydENoYXJJbmRleCA9IHRleHRQYWdlLkdldEluZGV4QXRQb3Moc3RhcnRQb2ludC54LCBzdGFydFBvaW50LnksIHN0YXJ0VG9sZXJhbmNlKTtcbiAgICAgICAgICAgIGlmIChzdGFydENoYXJJbmRleCA8IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVjdEFycmF5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGVuZFRvbGVyYW5jZSA9IE1hdGgubWluKChsYXN0UmVjdC50b3AgLSBsYXN0UmVjdC5ib3R0b20pIC8gMiwgdG9sZXJhbmNlKTtcbiAgICAgICAgICAgIGxldCBlbmRQb2ludCA9IG5ldyBlbmdpbmUuUG9pbnRGKGxhc3RSZWN0LnJpZ2h0IC0gZW5kVG9sZXJhbmNlLCBsYXN0UmVjdC5ib3R0b20gKyBlbmRUb2xlcmFuY2UpO1xuICAgICAgICAgICAgbGV0IGVuZENoYXJJbmRleCA9IHRleHRQYWdlLkdldEluZGV4QXRQb3MoZW5kUG9pbnQueCwgZW5kUG9pbnQueSwgZW5kVG9sZXJhbmNlKTtcbiAgICAgICAgICAgIGlmIChlbmRDaGFySW5kZXggPCAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlY3RBcnJheTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCB0ZW1wQ2hhckluZGV4O1xuICAgICAgICAgICAgaWYgKGVuZENoYXJJbmRleCA8IHN0YXJ0Q2hhckluZGV4KSB7XG4gICAgICAgICAgICAgICAgdGVtcENoYXJJbmRleCA9IHN0YXJ0Q2hhckluZGV4O1xuICAgICAgICAgICAgICAgIHN0YXJ0Q2hhckluZGV4ID0gZW5kQ2hhckluZGV4O1xuICAgICAgICAgICAgICAgIGVuZENoYXJJbmRleCA9IHRlbXBDaGFySW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgcmVzdWx0QXJyYXkgPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBqID0gdGV4dFBhZ2UuR2V0VGV4dFJlY3RDb3VudChzdGFydENoYXJJbmRleCwgZW5kQ2hhckluZGV4IC0gc3RhcnRDaGFySW5kZXgpOyBpIDwgajsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRleHRSZWN0ID0gdGV4dFBhZ2UuR2V0VGV4dFJlY3QoaSk7XG4gICAgICAgICAgICAgICAgcmVzdWx0QXJyYXlbaV0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IHRleHRSZWN0LmxlZnQsXG4gICAgICAgICAgICAgICAgICAgIHRvcDogdGV4dFJlY3QudG9wLFxuICAgICAgICAgICAgICAgICAgICByaWdodDogdGV4dFJlY3QucmlnaHQsXG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbTogdGV4dFJlY3QuYm90dG9tLFxuICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjp0ZXh0UGFnZS5HZXRCYXNlbGluZVJvdGF0aW9uKGkpLnZhbHVlLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHRBcnJheTtcbiAgICAgICAgICAgIH1jYXRjaChlcnIpe1xuICAgICAgICAgICAgICAgIGlmICghaXNOYU4gKGVycikpIHtcbiAgICAgICAgICAgICAgICAgIGVyciA9IHRoaXMuZW5naW5lLmdldEVycm9yQ29kZSAoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuIChlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cbiAgICBnZXRUZXh0Q29udGludW91c0NoYXJzQXRSZWN0IChyZWN0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFRleHRSZWN0c0F0UmVjdChyZWN0KS50aGVuKChyZWN0QXJyYXkpID0+IHtcbiAgICAgICAgICAgIGxldCBjb3VudCA9IHJlY3RBcnJheS5sZW5ndGg7XG4gICAgICAgICAgICBpZiAoIWNvdW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGZpcnN0UmVjdCA9IHJlY3RBcnJheVswXTtcbiAgICAgICAgICAgIGxldCBsYXN0UmVjdCA9IHJlY3RBcnJheVtjb3VudCAtIDFdO1xuICAgICAgICAgICAgbGV0IGVuZ2luZSA9IHRoaXMuZW5naW5lO1xuICAgICAgICAgICAgbGV0IHRleHRQYWdlID0gdGhpcy5nZXROb3JtYWxUZXh0UGFnZVN5bmMoKTtcbiAgICAgICAgICAgIGxldCB0b2xlcmFuY2UgPSAzO1xuICAgICAgICAgICAgbGV0IHN0YXJ0VG9sZXJhbmNlID0gTWF0aC5taW4oKGZpcnN0UmVjdC50b3AgLSBmaXJzdFJlY3QuYm90dG9tKSAvIDIsIHRvbGVyYW5jZSk7XG4gICAgICAgICAgICBsZXQgc3RhcnRQb2ludCA9IG5ldyBlbmdpbmUuUG9pbnRGKGZpcnN0UmVjdC5sZWZ0ICsgc3RhcnRUb2xlcmFuY2UsIGZpcnN0UmVjdC50b3AgLSBzdGFydFRvbGVyYW5jZSk7XG4gICAgICAgICAgICBsZXQgc3RhcnRDaGFySW5kZXggPSB0ZXh0UGFnZS5HZXRJbmRleEF0UG9zKHN0YXJ0UG9pbnQueCwgc3RhcnRQb2ludC55LCBzdGFydFRvbGVyYW5jZSk7XG4gICAgICAgICAgICBpZiAoc3RhcnRDaGFySW5kZXggPCAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGVuZFRvbGVyYW5jZSA9IE1hdGgubWluKChsYXN0UmVjdC50b3AgLSBsYXN0UmVjdC5ib3R0b20pIC8gMiwgdG9sZXJhbmNlKTtcbiAgICAgICAgICAgIGxldCBlbmRQb2ludCA9IG5ldyBlbmdpbmUuUG9pbnRGKGxhc3RSZWN0LnJpZ2h0IC0gZW5kVG9sZXJhbmNlLCBsYXN0UmVjdC5ib3R0b20gKyBlbmRUb2xlcmFuY2UpO1xuICAgICAgICAgICAgbGV0IGVuZENoYXJJbmRleCA9IHRleHRQYWdlLkdldEluZGV4QXRQb3MoZW5kUG9pbnQueCwgZW5kUG9pbnQueSwgZW5kVG9sZXJhbmNlKTtcbiAgICAgICAgICAgIGlmIChlbmRDaGFySW5kZXggPCAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHRlbXBDaGFySW5kZXg7XG4gICAgICAgICAgICBpZiAoZW5kQ2hhckluZGV4IDwgc3RhcnRDaGFySW5kZXgpIHtcbiAgICAgICAgICAgICAgICB0ZW1wQ2hhckluZGV4ID0gc3RhcnRDaGFySW5kZXg7XG4gICAgICAgICAgICAgICAgc3RhcnRDaGFySW5kZXggPSBlbmRDaGFySW5kZXg7XG4gICAgICAgICAgICAgICAgZW5kQ2hhckluZGV4ID0gdGVtcENoYXJJbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0ZXh0UGFnZS5HZXRDaGFycyhzdGFydENoYXJJbmRleCwgZW5kQ2hhckluZGV4IC0gc3RhcnRDaGFySW5kZXggKyAxKS50b1N0cmluZygpO1xuICAgICAgICB9KVxuICAgIH1cblxuICAgIGdldFRleHRTZWFyY2ggKHBhdHRlcm4sIGZsYWdzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlZFBhZ2UoKS50aGVuKChwYWdlKSA9PiB7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbGV0IGVuZ2luZSA9IHRoaXMuZW5naW5lO1xuICAgICAgICAgICAgICAgIGZsYWdzID0gZmxhZ3MgfHwgZW5naW5lLlNlYXJjaEZsYWdzLmVfU2VhcmNoTm9ybWFsLnZhbHVlO1xuICAgICAgICAgICAgICAgIGxldCBjX3RleHRTZWFyY2ggPSBuZXcgZW5naW5lLlRleHRTZWFyY2godGhpcy5nZXROb3JtYWxUZXh0UGFnZVN5bmMoKSk7XG4gICAgICAgICAgICAgICAgY190ZXh0U2VhcmNoLlNldFBhdHRlcm4obmV3IGVuZ2luZS5XU3RyaW5nKHBhdHRlcm4pKTtcbiAgICAgICAgICAgICAgICBjX3RleHRTZWFyY2guU2V0U2VhcmNoRmxhZ3MoZmxhZ3MpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjX3RleHRTZWFyY2g7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAvLyBqcyBkaXJlY3RseSB0aHJvd3MgZXJyb3IgY29kZSwgd2hpbGUgYysrIHRocm93cyBleGNlcHRpb25cbiAgICAgICAgICAgICAgICB2YXIgZXJyb3JDb2RlID0gKGVyciBpbnN0YW5jZW9mIHRoaXMuZW5naW5lLkVycm9yQ29kZSkgPyBlcnIgOiB0aGlzLmVuZ2luZS5nZXRFcnJvckNvZGUoZXJyKVxuICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihlcnJvckNvZGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0pXG4gICAgfVxuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY19wYWdlUHJvbWlzZS50aGVuKHBhZ2UgPT4ge1xuICAgICAgICAgICAgdGhpcy5hbm5vdGF0aW9uSURBcnJheSA9IHRoaXMuX3ByZXBhcmVBbm5vdGF0aW9ucyhwYWdlKTtcbiAgICAgICAgICAgIHJldHVybiB7aW5kZXg6dGhpcy5pbmRleCwgYW5ub3RJZHM6IHRoaXMuYW5ub3RhdGlvbklEQXJyYXl9O1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmbGF0dGVuKG9wdGlvbil7XG4gICAgICAgIHJldHVybiB0aGlzLmNfcGFnZVByb21pc2UudGhlbihjX3BhZ2UgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGNfcGFnZS5GbGF0dGVuKHRydWUsIG9wdGlvbik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldEdyYXBoaWNzT2JqZWN0QXRQb2ludF9zIChbeCwgeV0sIHRvbGVyYW5jZSwgdHlwZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZWRQYWdlKCkudGhlbigocGFnZSkgPT4ge1xuICAgICAgICAgICAgbGV0IGVuZ2luZSA9IHRoaXMuZW5naW5lO1xuICAgICAgICAgICAgbGV0IHR5cGVzID0gZW5naW5lLkdyYXBoaWNzT2JqZWN0VHlwZTtcbiAgICAgICAgICAgIGxldCBwb2ludCA9IG5ldyBlbmdpbmUuUG9pbnRGKHgsIHkpO1xuXG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gUHJvbWlzZS5hbGwoW3BhZ2UuR2V0R3JhcGhpY3NPYmplY3RBdFBvaW50KHBvaW50LCB0b2xlcmFuY2UsIHR5cGVzLnZhbHVlc1t0eXBlXSksIHBhZ2VdKTtcblxuICAgICAgICAgICAgcG9pbnQuZGVsZXRlKCk7XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0pLnRoZW4oKFtvYmplY3QsIHBhZ2VdKSA9PiB7XG4gICAgICAgICAgICBpZiAob2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgbGV0IGpyT2JqZWN0PXRoaXMuSlIuZ3JhcGhpY3NPYmplY3RNYW5hZ2VyLmdldChvYmplY3QsIHBhZ2UsIHRoaXMpO1xuICAgICAgICAgICAgICAgIGlmKG9iamVjdC5HZXRUeXBlKCkudmFsdWUgPT09IDUpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ganJPYmplY3QuZ2V0R3JhcGhpY3NPYmplY3RBdFBvaW50KHgsIHksdHlwZSx0aGlzLkpSLmdyYXBoaWNzT2JqZWN0TWFuYWdlcilcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYodHlwZT09PTApe1xuICAgICAgICAgICAgICAgICAgICBpZihvYmplY3QuR2V0VHlwZSgpLnZhbHVlID09PSAyKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBqck9iamVjdC5pc1BvaW50SW5MaW5lKHgseSx0b2xlcmFuY2UpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGpyT2JqZWN0O1xuICAgICAgICAgICAgICAgICAgICB9ZWxzZVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ganJPYmplY3Q7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGdldEdyYXBoaWNzT2JqZWN0QXRQb2ludCAoW3gsIHldLCB0b2xlcmFuY2UsIHR5cGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VkUGFnZSgpLnRoZW4oKHBhZ2UpID0+IHtcbiAgICAgICAgICAgIGxldCBlbmdpbmUgPSB0aGlzLmVuZ2luZTtcbiAgICAgICAgICAgIGxldCB0eXBlcyA9IGVuZ2luZS5HcmFwaGljc09iamVjdFR5cGU7XG4gICAgICAgICAgICBsZXQgcG9pbnQgPSBuZXcgZW5naW5lLlBvaW50Rih4LCB5KTtcblxuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IFByb21pc2UuYWxsKFtwYWdlLkdldEdyYXBoaWNzT2JqZWN0c0F0UG9pbnQocG9pbnQsIHRvbGVyYW5jZSwgdHlwZXMudmFsdWVzW3R5cGVdKSwgcGFnZV0pO1xuXG4gICAgICAgICAgICBwb2ludC5kZWxldGUoKTtcblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSkudGhlbigoaW5mbyk9PnRoaXMuY2hlY2tQYXRoT2JqZWN0cyhpbmZvLHgsIHksIHR5cGUsIHRvbGVyYW5jZSkpXG4gICAgfVxuICAgIGNoZWNrUGF0aE9iamVjdHMoW29iamVjdHMsIHBhZ2VdLHgseSx0eXBlLHRvbGVyYW5jZSkge1xuICAgICAgICBpZiAob2JqZWN0cykge1xuICAgICAgICAgICAgbGV0IG51bWJlcjtcbiAgICAgICAgICAgIGxldCBnZXRPYmplY3Q7XG4gICAgICAgICAgICBpZihvYmplY3RzIGluc3RhbmNlb2YgQXJyYXkpe1xuICAgICAgICAgICAgICAgIG51bWJlciA9IG9iamVjdHMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGdldE9iamVjdCA9IGluZGV4PT5vYmplY3RzW2luZGV4XTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIG51bWJlciA9IG9iamVjdHMuR2V0U2l6ZSgpO1xuICAgICAgICAgICAgICAgIGdldE9iamVjdCA9IGluZGV4PT5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5KUi5ncmFwaGljc09iamVjdE1hbmFnZXIuZ2V0KG9iamVjdHMuR2V0QXQoaW5kZXgpLCBwYWdlLCB0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvcihsZXQgaW5kZXggPSAwOyBpbmRleDxudW1iZXI7aW5kZXgrKyl7XG4gICAgICAgICAgICAgICAgbGV0IGpyT2JqZWN0ID0gZ2V0T2JqZWN0KGluZGV4KTtcbiAgICBcbiAgICAgICAgICAgICAgICBpZihqck9iamVjdC5nZXRUeXBlKCkgPT09IDUpe1xuICAgICAgICAgICAgICAgICAgICBsZXQgb2JqID0gdGhpcy5jaGVja1BhdGhPYmplY3RzKFtqck9iamVjdC5nZXRHcmFwaGljc09iamVjdHNBdFBvaW50KHgsIHksdHlwZSx0b2xlcmFuY2UsdGhpcy5KUi5ncmFwaGljc09iamVjdE1hbmFnZXIpLHBhZ2VdLHgseSx0b2xlcmFuY2UpO1xuICAgICAgICAgICAgICAgICAgICBpZihvYmopcmV0dXJuIG9iajtcbiAgICAgICAgICAgICAgICB9ZWxzZSBpZihqck9iamVjdC5nZXRUeXBlKCkgPT09IDIpe1xuICAgICAgICAgICAgICAgICAgICBpZigganJPYmplY3QuaXNQb2ludEluTGluZSh4LHksdG9sZXJhbmNlKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBqck9iamVjdDtcbiAgICAgICAgICAgICAgICB9ZWxzZVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ganJPYmplY3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgYWRkV2F0ZXJtYXJrKGRhdGE9e30pe1xuICAgICAgICAvKipcbiAgICAgICAgICogQHR5cGUgR1NESy5XYXRlcm1hcmtcbiAgICAgICAgICovXG4gICAgICAgIGxldCB3YXRlcm1hcmssXG4gICAgICAgICAgICBlbmdpbmU9dGhpcy5lbmdpbmUsXG4gICAgICAgICAgICBkb2M9dGhpcy5kb2MsXG4gICAgICAgICAgICB0eXBlPWRhdGEudHlwZTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQHR5cGUgR1NESy5XYXRlcm1hcmtUZXh0UHJvcGVydGllc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBsZXQgdGV4dFByb3BlcnRpZXM7XG4gICAgICAgIGxldCB3YXRlcm1hcmtTZXR0aW5ncz1kYXRhLndhdGVybWFya1NldHRpbmdzO1xuICAgICAgICB3YXRlcm1hcmtTZXR0aW5ncz1PYmplY3QuYXNzaWduKHtcbiAgICAgICAgICAgIHBvc2l0aW9uOlwiQ2VudGVyXCIsXG4gICAgICAgICAgICBvZmZzZXRYOjAsXG4gICAgICAgICAgICBvZmZzZXRZOjAsXG4gICAgICAgICAgICBmbGFnczowLFxuICAgICAgICAgICAgc2NhbGVYOjEsXG4gICAgICAgICAgICBzY2FsZVk6MSxcbiAgICAgICAgICAgIHJvdGF0aW9uOjQ1LFxuICAgICAgICAgICAgb3BhY2l0eToxMDBcbiAgICAgICAgfSx3YXRlcm1hcmtTZXR0aW5ncyk7XG4gICAgICAgIGxldCBzZXR0aW5ncz13YXRlcm1hcmtTZXR0aW5ncyYmV2F0ZXJtYXJrU2V0dGluZ3MuY3JlYXRlV2F0ZXJtYXJrU2V0dGluZ3MoZW5naW5lLHdhdGVybWFya1NldHRpbmdzLnBvc2l0aW9uLHdhdGVybWFya1NldHRpbmdzLm9mZnNldFgsd2F0ZXJtYXJrU2V0dGluZ3Mub2Zmc2V0WSx3YXRlcm1hcmtTZXR0aW5ncy5mbGFncyx3YXRlcm1hcmtTZXR0aW5ncy5zY2FsZVgsd2F0ZXJtYXJrU2V0dGluZ3Muc2NhbGVZLHdhdGVybWFya1NldHRpbmdzLnJvdGF0aW9uLHdhdGVybWFya1NldHRpbmdzLm9wYWNpdHkpO1xuICAgICAgICBpZih0eXBlLnRvTG9jYWxlTG93ZXJDYXNlKCk9PT1cImJpdG1hcFwiKXtcbiAgICAgICAgICAgIHdhdGVybWFyaz1XYXRlcm1hcmsuY3JlYXRlQml0bWFwV2F0ZXJtYXJrKGVuZ2luZSxkb2MsZGF0YS5iaXRtYXAsc2V0dGluZ3MpXG4gICAgICAgIH1lbHNlIGlmKHR5cGUudG9Mb2NhbGVMb3dlckNhc2UoKT09PVwidGV4dFwiKXtcbiAgICAgICAgICAgIGxldCB3YXRlcm1hcmtUZXh0UHJvcGVydGllcz1kYXRhLndhdGVybWFya1RleHRQcm9wZXJ0aWVzO1xuICAgICAgICAgICAgd2F0ZXJtYXJrVGV4dFByb3BlcnRpZXM9T2JqZWN0LmFzc2lnbih7XG4gICAgICAgICAgICAgICAgZm9udDowLFxuICAgICAgICAgICAgICAgIGZvbnRTaXplOjIwLFxuICAgICAgICAgICAgICAgIGNvbG9yOjB4MDAwMDAwLFxuICAgICAgICAgICAgICAgIGZvbnRTdHlsZTpcIm5vcm1hbFwiLFxuICAgICAgICAgICAgICAgIGxpbmVTcGFjZToxMCxcbiAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6XCJjZW50ZXJcIlxuICAgICAgICAgICAgfSx3YXRlcm1hcmtUZXh0UHJvcGVydGllcyk7XG4gICAgICAgICAgICB0ZXh0UHJvcGVydGllcz13YXRlcm1hcmtUZXh0UHJvcGVydGllcyYmV2F0ZXJtYXJrVGV4dFByb3BlcnRpZXMuY3JlYXRlV2F0ZXJtYXJrVGV4dFByb3BlcnRpZXMoZW5naW5lLHdhdGVybWFya1RleHRQcm9wZXJ0aWVzLmZvbnQsd2F0ZXJtYXJrVGV4dFByb3BlcnRpZXMuZm9udFNpemUsd2F0ZXJtYXJrVGV4dFByb3BlcnRpZXMuY29sb3Isd2F0ZXJtYXJrVGV4dFByb3BlcnRpZXMuZm9udFN0eWxlLHdhdGVybWFya1RleHRQcm9wZXJ0aWVzLmxpbmVTcGFjZSx3YXRlcm1hcmtUZXh0UHJvcGVydGllcy5hbGlnbm1lbnQpO1xuICAgICAgICAgICAgd2F0ZXJtYXJrPVdhdGVybWFyay5jcmVhdGVUZXh0V2F0ZXJtYXJrKGVuZ2luZSxkb2MsZGF0YS50ZXh0LHRleHRQcm9wZXJ0aWVzLHNldHRpbmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZWRQYWdlKCkudGhlbigoY19wYWdlKSA9PiB7XG4gICAgICAgICAgICB0cnl7XG4gICAgICAgICAgICAgICAgd2F0ZXJtYXJrICYmIHdhdGVybWFyay5JbnNlcnRUb1BhZ2UoY19wYWdlKTtcbiAgICAgICAgICAgICAgICBjX3BhZ2UuR2VuZXJhdGVDb250ZW50KCk7XG4gICAgICAgICAgICAgICAgbGV0IGFubm90O1xuICAgICAgICAgICAgICAgIGlmKHdhdGVybWFya1NldHRpbmdzLmZsYWdzPT09MSl7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYW5ub3RhdGlvbklEQXJyYXkgPSB0aGlzLl9nZXRBbm5vdGF0aW9uSWRBcnJheShjX3BhZ2UpO1xuICAgICAgICAgICAgICAgICAgICBhbm5vdD10aGlzLmFubm90TWFuYWdlci5nZXQoY19wYWdlLkdldEFubm90KDApLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gd2F0ZXJtYXJrU2V0dGluZ3MuZmxhZ3M9PT0xP2Fubm90LnRvSnNvbigpOndhdGVybWFyaztcbiAgICAgICAgICAgIH1jYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoIWlzTmFOIChlcnIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGVyciA9IGVuZ2luZS5nZXRFcnJvckNvZGUgKGVycik7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4gKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUERGUGFnZTtcbi8qKlxuICogXG4gKiBAcGFyYW0ge0dTREt9IGVuZ2luZSBcbiAqIEBwYXJhbSB7Kn0gd2lkdGggXG4gKiBAcGFyYW0geyp9IGhlaWdodCBcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQml0bWFwIChlbmdpbmUsIHdpZHRoLCBoZWlnaHQsaGFzVHJhbnNwYXJlbmN5KSB7XG4gICAgbGV0IGJpdG1hcCA9IG5ldyBlbmdpbmUuQml0bWFwKHdpZHRoLCBoZWlnaHQsIGhhc1RyYW5zcGFyZW5jeT9lbmdpbmUuRElCRm9ybWF0LmVfRElCQXJnYjplbmdpbmUuRElCRm9ybWF0LmVfRElCUmdiLCAwLCAwKTtcbiAgICBpZiAoYml0bWFwLklzRW1wdHkoKSkge1xuICAgICAgICBiaXRtYXAuZGVsZXRlKCk7XG4gICAgICAgIHRocm93IENSRUFURV9CSVRNQVBfRkFJTDtcbiAgICB9XG4gICAgbGV0IHJlY3QgPSBuZXcgZW5naW5lLkZYX1JFQ1QoKTtcbiAgICByZWN0LmxlZnQgPSAwO1xuICAgIHJlY3QudG9wID0gMDtcbiAgICByZWN0LnJpZ2h0ID0gd2lkdGg7XG4gICAgcmVjdC50b3AgPSBoZWlnaHQ7XG4gICAgYml0bWFwLkZpbGxSZWN0KGhhc1RyYW5zcGFyZW5jeT8weDAwZmZmZmZmOjB4ZmZmZmZmZmYscmVjdCk7XG4gICAgcmVjdC5kZWxldGUoKTtcbiAgICBcbiAgICByZXR1cm4gYml0bWFwOyAgIFxufVxuLy9mdW5jdGlvbiBjcmVhdGVCaXRtYXBSZW5kZXIgKGVuZ2luZSwgYml0bWFwKSB7XG4vLyAgICBsZXQgcmVuZGVyZXIgPSBuZXcgZW5naW5lLlJlbmRlcmVyKGJpdG1hcCwgdHJ1ZSk7XG4vLyAgICBpZiAocmVuZGVyZXIuSXNFbXB0eSgpKSB7XG4vLyAgICAgICAgcmVuZGVyZXIuZGVsZXRlKCk7XG4vLyAgICAgICAgYml0bWFwLmRlbGV0ZSgpO1xuLy8gICAgICAgIHRocm93IENSRUFURV9CSVRNQVBfUkVOREVSX0ZBSUw7XG4vLyAgICB9XG4vLyAgICByZXR1cm4gcmVuZGVyZXI7XG4vL31cbi8qKlxuICogXG4gKiBAcGFyYW0geyp9IGVuZ2luZSBcbiAqIEBwYXJhbSB7Kn0gcmVuZGVyZXIgXG4gKiBAcGFyYW0ge0dTREsuUERGUGFnZX0gcGFnZSBcbiAqIEBwYXJhbSB7Kn0ganJSZW5kZXJGbGFncyBcbiAqL1xuZnVuY3Rpb24gcmVuZGVyR3JhcGhpY09iamVjdChlbmdpbmUscmVuZGVyZXIsbWF0cml4LHBhZ2UsanJSZW5kZXJGbGFncyA9IDEpe1xuICAgIGxldCBwb3MgPSBwYWdlLkdldEZpcnN0R3JhcGhpY3NPYmplY3RQb3NpdGlvbihlbmdpbmUuR3JhcGhpY3NPYmplY3RUeXBlLmVfVHlwZUFsbCk7XG4gICAgd2hpbGUocG9zKXtcbiAgICAgICAgdHJ5e1xuICAgICAgICBsZXQgb2JqZWN0ID0gcGFnZS5HZXRHcmFwaGljc09iamVjdChwb3MpO1xuICAgICAgICBwb3MgPXBhZ2UuR2V0TmV4dEdyYXBoaWNzT2JqZWN0UG9zaXRpb24ocG9zLGVuZ2luZS5HcmFwaGljc09iamVjdFR5cGUuZV9UeXBlQWxsKTtcblxuICAgICAgICBsZXQgdHlwZSA9IG9iamVjdC5HZXRUeXBlKCk7XG4gICAgICAgIGlmKGpyUmVuZGVyRmxhZ3MmMHgxICYmIHR5cGUgJiYgdHlwZS52YWx1ZSA9PSBlbmdpbmUuR3JhcGhpY3NPYmplY3RUeXBlLmVfVHlwZVBhdGgudmFsdWUpe1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYoanJSZW5kZXJGbGFncyYweDIgJiYgdHlwZSAmJiB0eXBlLnZhbHVlID09IGVuZ2luZS5HcmFwaGljc09iamVjdFR5cGUuZV9UeXBlSW1hZ2UudmFsdWUpe1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgcmVuZGVyZXIuUmVuZGVyR3JhcGhpY3NPYmplY3Qob2JqZWN0LHBhZ2UsbWF0cml4KTtcbiAgICB9Y2F0Y2goZXJyKXtcbiAgICAgICAgaWYgKCFpc05hTiAoZXJyKSkge1xuICAgICAgICAgIGVyciA9IHRoaXMuZW5naW5lLmdldEVycm9yQ29kZSAoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLndhcm4gKGVycik7XG4gICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBcbiAqIEBwYXJhbSB7Kn0gcGFyYW0wIFxuICogQHBhcmFtIHtHU0RLfSBlbmdpbmUgXG4gKiBAcGFyYW0ge0dTREsuUERGUGFnZX0gcGFnZSBcbiAqIEBwYXJhbSB7Kn0gYml0bWFwIFxuICogQHBhcmFtIHtHU0RLLlJlbmRlcmVyfSByZW5kZXJlciBcbiAqIEBwYXJhbSB7Kn0gcmVuZGVyRmxhZ3MgXG4gKiBAcGFyYW0geyp9IHByb2dyZXNzaXZlQ29udGludWVTdGF0ZSBcbiAqIEBwYXJhbSB7Kn0gcHJvZ3Jlc3NpdmVGaW5pc2hTdGF0ZSBcbiAqL1xuZnVuY3Rpb24gc3RhcnRCaXRtYXBSZW5kZXIgKHt4LCB5LCB3aWR0aCwgaGVpZ2h0LCByb3RhdGV9LFxuICAgIGVuZ2luZSwgcGFnZSwgYml0bWFwLCByZW5kZXJlciwgcmVuZGVyRmxhZ3MsIHByb2dyZXNzaXZlQ29udGludWVTdGF0ZSwgcHJvZ3Jlc3NpdmVGaW5pc2hTdGF0ZSxqclJlbmRlckZsYWdzKSB7XG4gICAgbGV0IG1hdHJpeCA9IHBhZ2UuR2V0RGlzcGxheU1hdHJpeCh4LCB5LCB3aWR0aCwgaGVpZ2h0LCBlbmdpbmUuUm90YXRpb24uZV9Sb3RhdGlvbjApO1xuXG4gICAgaWYgKHJlbmRlckZsYWdzKSB7XG4gICAgICAgIHJlbmRlcmVyLlNldFJlbmRlckNvbnRlbnRGbGFncyhyZW5kZXJGbGFncyk7XG4gICAgfVxuICAgIGlmKGpyUmVuZGVyRmxhZ3MgPT09IDApe1xuICAgICAgICBsZXQgaXNSZW5kZXJTdWNjZXNzID0gcHJvZ3Jlc3NpdmVDb250aW51ZShcbiAgICAgICAgICAgIHJlbmRlcmVyLlN0YXJ0UmVuZGVyKHBhZ2UsIG1hdHJpeCwgbnVsbCksXG4gICAgICAgICAgICBwcm9ncmVzc2l2ZUNvbnRpbnVlU3RhdGUsXG4gICAgICAgICAgICBwcm9ncmVzc2l2ZUZpbmlzaFN0YXRlXG4gICAgICAgICk7XG4gICAgICAgIGlmICghaXNSZW5kZXJTdWNjZXNzKSB7XG4gICAgICAgICAgICByZW5kZXJlci5kZWxldGUoKTtcbiAgICAgICAgICAgIGJpdG1hcC5kZWxldGUoKTtcbiAgICAgICAgICAgIHRocm93IEJJVE1BUF9SRU5ERVJfRkFJTDtcbiAgICAgICAgfVxuICAgIH1lbHNle1xuICAgICAgICByZW5kZXJHcmFwaGljT2JqZWN0KGVuZ2luZSxyZW5kZXJlcixtYXRyaXgscGFnZSxqclJlbmRlckZsYWdzKTtcbiAgICB9XG59XG4vL2Z1bmN0aW9uIHN0YXJ0Qml0bWFwUmVuZGVyV2l0aFBhZ2VIaWdobGlnaHQgKHt4LCB5LCB3aWR0aCwgaGVpZ2h0LCByb3RhdGV9LFxuLy8gICAgZW5naW5lLCBwYWdlLCBiaXRtYXAsIHJlbmRlcmVyLCBwcm9ncmVzc2l2ZUNvbnRpbnVlU3RhdGUsIHByb2dyZXNzaXZlRmluaXNoU3RhdGUpIHtcbi8vICAgIGxldCBtYXRyaXggPSBwYWdlLkdldERpc3BsYXlNYXRyaXgoeCwgeSwgd2lkdGgsIGhlaWdodCwgZW5naW5lLlJvdGF0aW9uLmVfUm90YXRpb24wKTtcbi8vXG4vLyAgICAvL3JlbmRlcmVyLlNldFJlbmRlckNvbnRlbnRGbGFncyhlbmdpbmUuQ29udGVudEZsYWcuZV9SZW5kZXJQYWdlLnZhbHVlKTtcbi8vICAgIHJlbmRlcmVyLlNldFJlbmRlckNvbnRlbnRGbGFncygwKTtcbi8vICAgIC8vcmVuZGVyZXIuRmlsbFJlY3QoMHhmZmZmZmYwMCwgbnVsbClcbi8vXG4vLyAgICBsZXQgaXNSZW5kZXJTdWNjZXNzID0gcHJvZ3Jlc3NpdmVDb250aW51ZShcbi8vICAgICAgICByZW5kZXJlci5TdGFydFJlbmRlcihwYWdlLCBtYXRyaXgsIG51bGwpLFxuLy8gICAgICAgIHByb2dyZXNzaXZlQ29udGludWVTdGF0ZSxcbi8vICAgICAgICBwcm9ncmVzc2l2ZUZpbmlzaFN0YXRlXG4vLyAgICApO1xuLy8gICAgaWYgKCFpc1JlbmRlclN1Y2Nlc3MpIHtcbi8vICAgICAgICByZW5kZXJlci5kZWxldGUoKTtcbi8vICAgICAgICBiaXRtYXAuZGVsZXRlKCk7XG4vLyAgICAgICAgdGhyb3cgQklUTUFQX1JFTkRFUl9GQUlMO1xuLy8gICAgfSBlbHNlIHtcbi8vICAgICAgICBsZXQgcG9zaXRpb24gPSBwYWdlLkdldEZpcnN0R3JhcGhpY3NPYmplY3RQb3NpdGlvbihlbmdpbmUuR3JhcGhpY3NPYmplY3RUeXBlLmVfVHlwZUFsbCk7XG4vLyAgICAgICAgbGV0IGkgPSAwO1xuLy8gICAgICAgIHdoaWxlIChwb3NpdGlvbikge1xuLy8gICAgICAgICAgICBsZXQgb2JqID0gcGFnZS5HZXRHcmFwaGljc09iamVjdChwb3NpdGlvbik7XG4vLyAgICAgICAgICAgIGNvbnNvbGUubG9nKCdwYWdlLkdldEdyYXBoaWNzT2JqZWN0KHBvc2l0aW9uKScsb2JqKVxuLy8gICAgICAgICAgICBpZiAob2JqLkdldFR5cGUoKSA9PT0gZW5naW5lLkdyYXBoaWNzT2JqZWN0VHlwZS5lX1R5cGVGb3JtWE9iamVjdCkge1xuLy8gICAgICAgICAgICAgICAgbGV0IG9ianMgPSBvYmouR2V0Rm9ybVhPYmplY3QoKS5HZXRHcmFwaGljc09iamVjdHMoKTtcbi8vICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdvYmouR2V0Rm9ybVhPYmplY3QoKS5HZXRHcmFwaGljc09iamVjdHMoKTsnLG9ianMpXG4vLyAgICAgICAgICAgICAgICBsZXQgcG9zaXRpb24gPSBvYmpzLkdldEZpcnN0R3JhcGhpY3NPYmplY3RQb3NpdGlvbihlbmdpbmUuR3JhcGhpY3NPYmplY3RUeXBlLmVfVHlwZUFsbCk7XG4vLyAgICAgICAgICAgICAgICB3aGlsZSAocG9zaXRpb24pIHtcbi8vICAgICAgICAgICAgICAgICAgICBsZXQgb2JqID0gb2Jqcy5HZXRHcmFwaGljc09iamVjdChwb3NpdGlvbik7XG4vLyAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ29ianMuR2V0R3JhcGhpY3NPYmplY3QocG9zaXRpb24pJyxvYmopXG4vLyAgICAgICAgICAgICAgICAgICAgaWYgKG9iai5HZXRUeXBlKCkgPT09IGVuZ2luZS5HcmFwaGljc09iamVjdFR5cGUuZV9UeXBlVGV4dCkge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJlci5SZW5kZXJHcmFwaGljc09iamVjdChvYmosIHBhZ2UsIG1hdHJpeCk7XG4vLyAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gb2Jqcy5HZXROZXh0R3JhcGhpY3NPYmplY3RQb3NpdGlvbihwb3NpdGlvbiwgZW5naW5lLkdyYXBoaWNzT2JqZWN0VHlwZS5lX1R5cGVBbGwpO1xuLy8gICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICB9XG4vL1xuLy8gICAgICAgICAgICBwb3NpdGlvbiA9IHBhZ2UuR2V0TmV4dEdyYXBoaWNzT2JqZWN0UG9zaXRpb24ocG9zaXRpb24sIGVuZ2luZS5HcmFwaGljc09iamVjdFR5cGUuZV9UeXBlQWxsKTtcbi8vICAgICAgICB9XG4vLyAgICAgICAgbGV0IGhpZ2hsaWdodFR5cGUgPSBlbmdpbmUuQW5ub3RUeXBlLmVfSGlnaGxpZ2h0O1xuLy8gICAgICAgIGZvciAodmFyIGkgPSAwLCBqID0gcGFnZS5HZXRBbm5vdENvdW50KCk7IGkgPCBqOyBpKyspIHtcbi8vICAgICAgICAgICAgbGV0IGFubm90ID0gcGFnZS5HZXRBbm5vdChpKTtcbi8vICAgICAgICAgICAgaWYgKGFubm90LkdldFR5cGUoKSA9PT0gaGlnaGxpZ2h0VHlwZSkge1xuLy8gICAgICAgICAgICAgICAgcmVuZGVyZXIuUmVuZGVyQW5ub3QoYW5ub3QsIG1hdHJpeClcbi8vICAgICAgICAgICAgfVxuLy8gICAgICAgIH1cbi8vICAgIH1cbi8vfVxuZnVuY3Rpb24gc3RhcnRCaXRtYXBSZW5kZXJXaXRoUGFnZUhpZ2hsaWdodCAoe3gsIHksIHdpZHRoLCBoZWlnaHQsIHJvdGF0ZX0sXG4gICAgZW5naW5lLCBwYWdlLCBiaXRtYXAsIHJlbmRlcmVyLCBwcm9ncmVzc2l2ZUNvbnRpbnVlU3RhdGUsIHByb2dyZXNzaXZlRmluaXNoU3RhdGUsanJSZW5kZXJGbGFncykge1xuICAgIGxldCBtYXRyaXggPSBwYWdlLkdldERpc3BsYXlNYXRyaXgoeCwgeSwgd2lkdGgsIGhlaWdodCwgZW5naW5lLlJvdGF0aW9uLmVfUm90YXRpb24wKTtcblxuICAgIHJlbmRlcmVyLlNldFJlbmRlckNvbnRlbnRGbGFncyhlbmdpbmUuQ29udGVudEZsYWcuZV9SZW5kZXJQYWdlLnZhbHVlKTtcblxuICAgIGxldCBpc1JlbmRlclN1Y2Nlc3MgPSAxO1xuICAgIGlmKGpyUmVuZGVyRmxhZ3MgPT09IDApe1xuICAgICAgICBpc1JlbmRlclN1Y2Nlc3MgPSBwcm9ncmVzc2l2ZUNvbnRpbnVlKFxuICAgICAgICAgICAgcmVuZGVyZXIuU3RhcnRSZW5kZXIocGFnZSwgbWF0cml4LCBudWxsKSxcbiAgICAgICAgICAgIHByb2dyZXNzaXZlQ29udGludWVTdGF0ZSxcbiAgICAgICAgICAgIHByb2dyZXNzaXZlRmluaXNoU3RhdGVcbiAgICAgICAgKTtcbiAgICBcbiAgICB9ZWxzZXtcbiAgICAgICAgcmVuZGVyR3JhcGhpY09iamVjdChlbmdpbmUscmVuZGVyZXIsbWF0cml4LHBhZ2UsanJSZW5kZXJGbGFncyk7XG4gICAgfVxuXG4gICAgaWYgKCFpc1JlbmRlclN1Y2Nlc3MpIHtcbiAgICAgICAgcmVuZGVyZXIuZGVsZXRlKCk7XG4gICAgICAgIGJpdG1hcC5kZWxldGUoKTtcbiAgICAgICAgdGhyb3cgQklUTUFQX1JFTkRFUl9GQUlMO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBoaWdobGlnaHRUeXBlID0gZW5naW5lLkFubm90VHlwZS5lX0hpZ2hsaWdodDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGogPSBwYWdlLkdldEFubm90Q291bnQoKTsgaSA8IGo7IGkrKykge1xuICAgICAgICAgICAgbGV0IGFubm90ID0gcGFnZS5HZXRBbm5vdChpKTtcbiAgICAgICAgICAgIGlmIChhbm5vdC5HZXRUeXBlKCkgPT09IGhpZ2hsaWdodFR5cGUpIHtcbiAgICAgICAgICAgICAgICByZW5kZXJlci5SZW5kZXJBbm5vdChhbm5vdCwgbWF0cml4KVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5cblxuLy9mdW5jdGlvbiBnZXRCaXRtYXBCdWZmZXIgKGVuZ2luZSwgYml0bWFwLCByZW5kZXJlcikge1xuLy8gICAgbGV0IHN0YXJ0ID0gYml0bWFwLkdldEJ1ZmZlcigpO1xuLy8gICAgbGV0IGJpdG1hcFdpZHRoID0gYml0bWFwLkdldFdpZHRoKCk7XG4vLyAgICBsZXQgYml0bWFwSGVpZ2h0ID0gYml0bWFwLkdldEhlaWdodCgpO1xuLy8gICAgbGV0IHNpemUgPSBiaXRtYXBIZWlnaHQgKiBiaXRtYXAuR2V0UGl0Y2goKTtcbi8vICAgIGxldCBlbmQgPSBzdGFydCArIHNpemU7XG4vLyAgICBsZXQgaW1hZ2VEYXRhQnVmZmVyO1xuLy8gICAgaWYgKGVuZ2luZS5IRUFQVTguYnVmZmVyLnNsaWNlKSB7XG4vLyAgICAgICAgaW1hZ2VEYXRhQnVmZmVyID0gZW5naW5lLkhFQVBVOC5idWZmZXIuc2xpY2Uoc3RhcnQsIGVuZCk7XG4vLyAgICB9IGVsc2Uge1xuLy8gICAgICAgIGltYWdlRGF0YUJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KGVuZ2luZS5IRUFQVTguYnVmZmVyLCBzdGFydCwgc2l6ZSkuYnVmZmVyO1xuLy8gICAgfVxuLy9cbi8vICAgIHJlbmRlcmVyLmRlbGV0ZSgpO1xuLy8gICAgYml0bWFwLmRlbGV0ZSgpO1xuLy9cbi8vICAgIHJldHVybiB7XG4vLyAgICAgICAgYnVmZmVyOiBpbWFnZURhdGFCdWZmZXIsXG4vLyAgICAgICAgd2lkdGg6IGJpdG1hcFdpZHRoLFxuLy8gICAgICAgIGhlaWdodDogYml0bWFwSGVpZ2h0LFxuLy8gICAgfTtcbi8vfVxuZnVuY3Rpb24gZ2V0RW5naW5lUm90YXRlIChlbmdpbmUsIHJvdGF0ZSkge1xuICAgIGxldCBSb3RhdGUgPSBlbmdpbmUuUm90YXRpb247XG4gICAgbGV0IHJvdGF0ZTAgPSBSb3RhdGUuZV9Sb3RhdGlvbjA7XG4gICAgcmV0dXJuIFtyb3RhdGUwLCBSb3RhdGUuZV9Sb3RhdGlvbjkwLCBSb3RhdGUuZV9Sb3RhdGlvbjE4MCwgUm90YXRlLmVfUm90YXRpb24yNzBdW3JvdGF0ZV0gfHwgcm90YXRlMDtcbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBBY3Rpb24ge1xuICAgIHN0YXRpYyBjcmVhdGUoZW5naW5lLHBkZkRvYyx0eXBlKXtcbiAgICAgICAgcmV0dXJuIGVuZ2luZS5BY3Rpb24uQ3JlYXRlKHBkZkRvYyx0eXBlKTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoYWN0aW9uLGRvYyxlbmdpbmUsSlIpe1xuICAgICAgICB0aGlzLmVuZ2luZSA9IGVuZ2luZTtcbiAgICAgICAgdGhpcy5kb2M9ZG9jO1xuICAgICAgICB0aGlzLkpSPUpSO1xuICAgICAgICB0aGlzLmFjdGlvbiA9IGFjdGlvbjtcbiAgICAgICAgdGhpcy5pbml0U3ViQWN0aW9ucygpO1xuICAgIH1cbiAgICB0b0pzb24oKXtcbiAgICAgICAgbGV0IHR5cGVJbkVuZ2luZT10aGlzLmdldFR5cGUoKTtcbiAgICAgICAgbGV0IHR5cGUgPSB0eXBlSW5FbmdpbmUucmVwbGFjZSgvXkFjdGlvblR5cGVfZV8vLCAnJyk7XG4gICAgICAgIGxldCBzdWJBY3Rpb249W107XG4gICAgICAgIGxldCBkaWN0ID0gdGhpcy5hY3Rpb24uR2V0RGljdCAoKTtcbiAgICAgICAgbGV0IG9iak51bWJlciA9IGRpY3QuR2V0T2JqTnVtKCk7XG4gICAgICAgIGxldCBzdWJBY3Rpb25Db3VudD10aGlzLmFjdGlvbi5HZXRTdWJBY3Rpb25Db3VudCgpO1xuICAgICAgICB0aGlzLnN1YkFjdGlvbi5mb3JFYWNoKChhY3Rpb24pPT57XG4gICAgICAgICAgICBzdWJBY3Rpb24ucHVzaChhY3Rpb24udG9Kc29uKCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9iak51bWJlcixcbiAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICBzdWJBY3Rpb24sXG4gICAgICAgICAgICBzdWJBY3Rpb25Db3VudFxuICAgICAgICB9XG4gICAgfVxuICAgIHNldEFjdGlvbkRhdGFCeUluZGV4KGRhdGEsYWN0aW9uSW5kZXg9MCl7XG4gICAgICAgIGxldCBhY3Rpb249dGhpcztcbiAgICAgICAgZm9yKGxldCBpPTE7aTw9YWN0aW9uSW5kZXg7aSsrKXtcbiAgICAgICAgICAgIGFjdGlvbj1hY3Rpb24uc3ViQWN0aW9uWzBdO1xuICAgICAgICB9XG4gICAgICAgIGFjdGlvbi5zZXRBY3Rpb25EYXRhKGRhdGEpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0U3ViQWN0aW9uKGluZGV4LHR5cGUpe1xuICAgICAgICBsZXQgYWN0aW9uPXRoaXMuSlIuYWN0aW9uTWFuYWdlci5jcmVhdGUodGhpcy5kb2MsdHlwZSk7XG4gICAgICAgIHRoaXMuYWN0aW9uLlNldFN1YkFjdGlvbihpbmRleCxhY3Rpb24pO1xuICAgICAgICB0aGlzLmluaXRTdWJBY3Rpb25zKCk7XG4gICAgfVxuICAgIGluc2VydFN1YkFjdGlvbihpbmRleCx0eXBlKXtcbiAgICAgICAgbGV0IGFjdGlvbj10aGlzLkpSLmFjdGlvbk1hbmFnZXIuY3JlYXRlKHRoaXMuZG9jLHR5cGUpO1xuICAgICAgICB0aGlzLmFjdGlvbi5JbnNlcnRTdWJBY3Rpb24oaW5kZXgsYWN0aW9uKTtcbiAgICAgICAgdGhpcy5pbml0U3ViQWN0aW9ucygpO1xuICAgIH1cbiAgICByZW1vdmVBbGxTdWJBY3Rpb25zKCl7XG4gICAgICAgIHRoaXMuYWN0aW9uLlJlbW92ZUFsbFN1YkFjdGlvbnMoKTtcbiAgICAgICAgdGhpcy5pbml0U3ViQWN0aW9ucygpO1xuICAgIH1cbiAgICByZW1vdmVTdWJBY3Rpb24oaW5kZXgpe1xuICAgICAgICB0aGlzLmFjdGlvbi5SZW1vdmVTdWJBY3Rpb24oaW5kZXgpO1xuICAgICAgICB0aGlzLmluaXRTdWJBY3Rpb25zKCk7XG4gICAgfVxuICAgIGlzRW1wdHkoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWN0aW9uLklzRW1wdHkoKTtcbiAgICB9XG4gICAgZ2V0VHlwZSgpe1xuICAgICAgICByZXR1cm4gdGhpcy5hY3Rpb24uR2V0VHlwZSgpLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgfVxuICAgIHNldEFjdGlvbkRhdGEoZGF0YSl7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaW5pdFN1YkFjdGlvbnMoKXtcbiAgICAgICAgY29uc3Qgc3ViQWN0aW9uQ291bnQ9dGhpcy5hY3Rpb24uR2V0U3ViQWN0aW9uQ291bnQoKTtcbiAgICAgICAgdGhpcy5zdWJBY3Rpb249W107XG4gICAgICAgIGlmKHN1YkFjdGlvbkNvdW50PjApe1xuICAgICAgICAgICAgZm9yKGxldCBpPTA7aTxzdWJBY3Rpb25Db3VudDtpKyspe1xuICAgICAgICAgICAgICAgIHRoaXMuc3ViQWN0aW9uLnB1c2godGhpcy5KUi5hY3Rpb25NYW5hZ2VyLmdldCh0aGlzLmFjdGlvbi5HZXRTdWJBY3Rpb24oaSksdGhpcy5kb2MsdGhpcy5KUikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSIsImltcG9ydCBBY3Rpb24gZnJvbSAnLi9BY3Rpb24nO1xuaW1wb3J0IFVSSUFjdGlvbiBmcm9tICcuL1VSSUFjdGlvbic7XG5pbXBvcnQgR290b0FjdGlvbiBmcm9tICcuL0dvdG9BY3Rpb24nO1xuaW1wb3J0IExhdW5jaEFjdGlvbiBmcm9tICcuL0xhdW5jaEFjdGlvbic7XG5pbXBvcnQgTmFtZWRBY3Rpb24gZnJvbSAnLi9OYW1lZEFjdGlvbic7XG5pbXBvcnQgSmF2YVNjcmlwdEFjdGlvbiBmcm9tICcuL0phdmFTY3JpcHRBY3Rpb24nO1xuaW1wb3J0IFN1Ym1pdEZvcm1BY3Rpb24gZnJvbSAnLi9TdWJtaXRGb3JtQWN0aW9uJztcbmltcG9ydCBSZXNldEZvcm1BY3Rpb24gZnJvbSAnLi9SZXNldEZvcm1BY3Rpb24nO1xuaW1wb3J0IEltcG9ydERhdGFBY3Rpb24gZnJvbSAnLi9JbXBvcnREYXRhQWN0aW9uJztcbmltcG9ydCBSZW5kaXRpb25BY3Rpb24gZnJvbSAnLi9SZW5kaXRpb25BY3Rpb24nO1xuaW1wb3J0IEhpZGVBY3Rpb24gZnJvbSAnLi9IaWRlQWN0aW9uJztcbmltcG9ydCBSZW1vdGVHb3RvQWN0aW9uIGZyb20gJy4vUmVtb3RlR290b0FjdGlvbic7XG5pbXBvcnQgRW1iZWRkZWRHb3RvQWN0aW9uIGZyb20gJy4vRW1iZWRkZWRHb3RvQWN0aW9uJztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFjdGlvbk1hbmFnZXJ7XG4gICAgY29uc3RydWN0b3IoZW5naW5lKXtcbiAgICAgICAgdGhpcy5lbmdpbmU9ZW5naW5lO1xuICAgIH1cbiAgICBnZXQoYWN0aW9uLGRvYyxKUil7XG4gICAgICAgIGxldCBlbmdpbmUgPSB0aGlzLmVuZ2luZTtcbiAgICAgICAgbGV0IEFjdGlvblR5cGUgPSBlbmdpbmUuQWN0aW9uVHlwZTtcbiAgICAgICAgbGV0IGFjdGlvblR5cGU9YWN0aW9uJiZhY3Rpb24uR2V0VHlwZSgpfHxudWxsO1xuICAgICAgICBzd2l0Y2ggKGFjdGlvblR5cGUpe1xuICAgICAgICAgICAgY2FzZSBBY3Rpb25UeXBlLmVfVHlwZVVSSTpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFVSSUFjdGlvbihhY3Rpb24sZG9jLGVuZ2luZSxKUik7XG4gICAgICAgICAgICBjYXNlIEFjdGlvblR5cGUuZV9UeXBlTGF1bmNoOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgTGF1bmNoQWN0aW9uKGFjdGlvbixkb2MsZW5naW5lLEpSKTtcbiAgICAgICAgICAgIGNhc2UgQWN0aW9uVHlwZS5lX1R5cGVOYW1lZDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IE5hbWVkQWN0aW9uKGFjdGlvbixkb2MsZW5naW5lLEpSKTtcbiAgICAgICAgICAgIGNhc2UgQWN0aW9uVHlwZS5lX1R5cGVKYXZhU2NyaXB0OlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSmF2YVNjcmlwdEFjdGlvbihhY3Rpb24sZG9jLGVuZ2luZSxKUik7XG4gICAgICAgICAgICBjYXNlIEFjdGlvblR5cGUuZV9UeXBlUmVzZXRGb3JtOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVzZXRGb3JtQWN0aW9uKGFjdGlvbixkb2MsZW5naW5lLEpSKTtcbiAgICAgICAgICAgIGNhc2UgQWN0aW9uVHlwZS5lX1R5cGVTdWJtaXRGb3JtOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU3VibWl0Rm9ybUFjdGlvbihhY3Rpb24sZG9jLGVuZ2luZSxKUik7XG4gICAgICAgICAgICBjYXNlIEFjdGlvblR5cGUuZV9UeXBlSW1wb3J0RGF0YTpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEltcG9ydERhdGFBY3Rpb24oYWN0aW9uLGRvYyxlbmdpbmUsSlIpO1xuICAgICAgICAgICAgY2FzZSBBY3Rpb25UeXBlLmVfVHlwZUdvdG86XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBHb3RvQWN0aW9uKGFjdGlvbixkb2MsZW5naW5lLEpSKTtcbiAgICAgICAgICAgIGNhc2UgQWN0aW9uVHlwZS5lX1R5cGVSZW5kaXRpb246XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZW5kaXRpb25BY3Rpb24oYWN0aW9uLGRvYyxlbmdpbmUsSlIpO1xuICAgICAgICAgICAgY2FzZSBBY3Rpb25UeXBlLmVfVHlwZUhpZGU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBIaWRlQWN0aW9uKGFjdGlvbixkb2MsZW5naW5lLEpSKTtcbiAgICAgICAgICAgIGNhc2UgQWN0aW9uVHlwZS5lX1R5cGVHb1RvUjpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlbW90ZUdvdG9BY3Rpb24oYWN0aW9uLGRvYyxlbmdpbmUsSlIpO1xuICAgICAgICAgICAgY2FzZSBBY3Rpb25UeXBlLmVfVHlwZUdvVG9FOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRW1iZWRkZWRHb3RvQWN0aW9uKGFjdGlvbixkb2MsZW5naW5lLEpSKTtcbiAgICAgICAgICAgIGNhc2UgQWN0aW9uVHlwZS5lX1R5cGVVbmtub3duOlxuICAgICAgICAgICAgY2FzZSBBY3Rpb25UeXBlLmVfVHlwZVNvdW5kOlxuICAgICAgICAgICAgY2FzZSBBY3Rpb25UeXBlLmVfVHlwZU1vdmllOlxuICAgICAgICAgICAgY2FzZSBBY3Rpb25UeXBlLmVfVHlwZVNldE9DR1N0YXRlOlxuICAgICAgICAgICAgY2FzZSBBY3Rpb25UeXBlLmVfVHlwZVRyYW5zOlxuICAgICAgICAgICAgY2FzZSBBY3Rpb25UeXBlLmVfVHlwZUdvVG8zRFZpZXcgOlxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEFjdGlvbihhY3Rpb24sZG9jLGVuZ2luZSxKUik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGUocGRmRG9jLHR5cGUpe1xuICAgICAgICBsZXQgZW5naW5lID0gdGhpcy5lbmdpbmU7XG4gICAgICAgIGxldCBBY3Rpb25UeXBlID0gZW5naW5lLkFjdGlvblR5cGU7XG4gICAgICAgIHJldHVybiBBY3Rpb24uY3JlYXRlKHRoaXMuZW5naW5lLHBkZkRvYyxBY3Rpb25UeXBlW1wiZV9cIit0eXBlXSk7XG4gICAgfVxuICAgIGdldEFjdGlvbkJ5RGljdChwZGZEb2MsZGljdCl7XG4gICAgICAgIGxldCBlbmdpbmUgPSB0aGlzLmVuZ2luZTtcbiAgICAgICAgcmV0dXJuIG5ldyBlbmdpbmUuQWN0aW9uKHBkZkRvYyxkaWN0KTtcbiAgICB9XG59IiwiaW1wb3J0IEFjdGlvbiBmcm9tICcuL0FjdGlvbic7XG5pbXBvcnQgRGVzdGluYXRpb24gZnJvbSBcIi4uL2Jhc2UvRGVzdGluYXRpb25cIjtcbmltcG9ydCBGaWxlU3BlYyBmcm9tIFwiLi4vYmFzZS9GaWxlU3BlY1wiO1xuaW1wb3J0IEVtYmVkZGVkR290b1RhcmdldCBmcm9tICcuL0VtYmVkZGVkR290b1RhcmdldCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVtYmVkZGVkR290b0FjdGlvbiBleHRlbmRzIEFjdGlvbntcbiAgICBjb25zdHJ1Y3RvcihhY3Rpb24sZG9jLGVuZ2luZSxKUil7XG4gICAgICAgIHN1cGVyKGFjdGlvbixkb2MsZW5naW5lLEpSKTtcbiAgICAgICAgdGhpcy5hY3Rpb249bmV3IHRoaXMuZW5naW5lLkVtYmVkZGVkR290b0FjdGlvbihhY3Rpb24pO1xuICAgIH1cbiAgICB0b0pzb24oKXtcbiAgICAgICAgbGV0IGpzb249c3VwZXIudG9Kc29uKCk7XG4gICAgICAgIGpzb24uZGVzdGluYXRpb25OYW1lPXRoaXMuZ2V0RGVzdGluYXRpb25OYW1lKCk7XG4gICAgICAgIGxldCBkZXN0aW5hdGlvbj10aGlzLmdldERlc3RpbmF0aW9uKCk7XG4gICAgICAgIGpzb24uZGVzdGluYXRpb249ZGVzdGluYXRpb24udG9Kc29uKCk7XG4gICAgICAgIGxldCByb290RmlsZT10aGlzLmdldFJvb3RGaWxlKCk7XG4gICAgICAgIGpzb24ucm9vdEZpbGU9cm9vdEZpbGUudG9Kc29uKCk7XG4gICAgICAgIGpzb24ubmV3V2luZG93RmxhZz10aGlzLmdldE5ld1dpbmRvd0ZsYWcoKTtcbiAgICAgICAgaWYoIXRoaXMuYWN0aW9uLkdldFRhcmdldCgpLklzRW1wdHkoKSl7XG4gICAgICAgICAgICBqc29uLnRhcmdldD10aGlzLmdldFRhcmdldCgpLnRvSnNvbigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBqc29uO1xuICAgIH1cbiAgICBnZXREZXN0aW5hdGlvbk5hbWUoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWN0aW9uLkdldERlc3RpbmF0aW9uTmFtZSgpLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGdldERlc3RpbmF0aW9uKCl7XG4gICAgICAgIHJldHVybiBuZXcgRGVzdGluYXRpb24odGhpcy5hY3Rpb24uR2V0RGVzdGluYXRpb24oKSx0aGlzLmRvYyx0aGlzLmVuZ2luZSk7XG4gICAgfVxuICAgIGdldFJvb3RGaWxlKCl7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbGVTcGVjPW5ldyBGaWxlU3BlYyh0aGlzLmFjdGlvbi5HZXRSb290RmlsZSgpLHRoaXMpO1xuICAgIH1cbiAgICBnZXROZXdXaW5kb3dGbGFnKCl7XG4gICAgICAgIHJldHVybiB0aGlzLmFjdGlvbi5HZXROZXdXaW5kb3dGbGFnKCkudmFsdWU7XG4gICAgfVxuICAgIGdldFRhcmdldCgpe1xuICAgICAgICByZXR1cm4gbmV3IEVtYmVkZGVkR290b1RhcmdldCh0aGlzLmFjdGlvbi5HZXRUYXJnZXQoKSx0aGlzLmVuZ2luZSx0aGlzLmRvYyk7XG4gICAgfVxuICAgIHNldEFjdGlvbkRhdGEoZGF0YSl7XG4gICAgICAgIHRoaXMuc2V0RGVzdGluYXRpb24oZGF0YSk7XG4gICAgICAgIGRhdGEuZGVzdGluYXRpb25OYW1lJiZ0aGlzLnNldERlc3RpbmF0aW9uTmFtZShkYXRhLmRlc3RpbmF0aW9uTmFtZSk7XG4gICAgICAgIGRhdGEuYnVmZmVyJiZ0aGlzLnNldFJvb3RGaWxlKGRhdGEuYnVmZmVyLGRhdGEuZmlsZU5hbWUpO1xuICAgICAgICBkYXRhLm5ld1dpbmRvd0ZsYWcmJnRoaXMuc2V0TmV3V2luZG93RmxhZyhkYXRhLm5ld1dpbmRvd0ZsYWcpO1xuICAgICAgICB0aGlzLnNldFRhcmdldChkYXRhLnRhcmdldCk7XG4gICAgfVxuXG4gICAgc2V0RGVzdGluYXRpb24oZGF0YSl7XG4gICAgICAgIGxldCBwZGZEb2M9dGhpcy5kb2M7XG4gICAgICAgIGxldCBkZXN0Rm49bnVsbDtcbiAgICAgICAgc3dpdGNoIChkYXRhLnR5cGUpe1xuICAgICAgICAgICAgY2FzZSBcIlpvb21YWVpcIjpcbiAgICAgICAgICAgICAgICBkZXN0Rm49RGVzdGluYXRpb24uY3JlYXRlWFlaO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIlpvb21GaXRQYWdlXCI6XG4gICAgICAgICAgICAgICAgZGVzdEZuPURlc3RpbmF0aW9uLmNyZWF0ZUZpdFBhZ2U7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiWm9vbUZpdEhvcnpcIjpcbiAgICAgICAgICAgICAgICBkZXN0Rm49RGVzdGluYXRpb24uY3JlYXRlRml0SG9yejtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJab29tRml0VmVydFwiOlxuICAgICAgICAgICAgICAgIGRlc3RGbj1EZXN0aW5hdGlvbi5jcmVhdGVGaXRWZXJ0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIlpvb21GaXRSZWN0XCI6XG4gICAgICAgICAgICAgICAgZGVzdEZuPURlc3RpbmF0aW9uLmNyZWF0ZUZpdFJlY3Q7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiWm9vbUZpdEJCb3hcIjpcbiAgICAgICAgICAgICAgICBkZXN0Rm49RGVzdGluYXRpb24uY3JlYXRlRml0QkJveDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJab29tRml0QkhvcnpcIjpcbiAgICAgICAgICAgICAgICBkZXN0Rm49RGVzdGluYXRpb24uY3JlYXRlRml0Qkhvcno7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGRlc3RGbj1EZXN0aW5hdGlvbi5jcmVhdGVGaXRCVmVydDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBsZXQgZGVzdGluYXRpb249ZGVzdEZuKHRoaXMuZW5naW5lLHBkZkRvYyxkYXRhKTtcbiAgICAgICAgdGhpcy5hY3Rpb24uU2V0RGVzdGluYXRpb24oZGVzdGluYXRpb24pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgc2V0RGVzdGluYXRpb25OYW1lKG5hbWUpe1xuICAgICAgICB0aGlzLmFjdGlvbi5TZXREZXN0aW5hdGlvbk5hbWUobmFtZSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBzZXRSb290RmlsZShidWZmZXIsZmlsZU5hbWUpe1xuICAgICAgICBsZXQgZmlsZT1GaWxlU3BlYy5jcmVhdGVGaWxlKHRoaXMuZW5naW5lLHRoaXMuZG9jLGJ1ZmZlcik7XG4gICAgICAgIGxldCBmaWxlU3BlYz1uZXcgRmlsZVNwZWMoZmlsZSx0aGlzKTtcbiAgICAgICAgZmlsZVNwZWMuc2V0RmlsZU5hbWUoZmlsZU5hbWUpO1xuICAgICAgICAvL3RoaXMuYWN0aW9uLlNldFJvb3RGaWxlKGZpbGUpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5hY3Rpb24uU2V0Um9vdEZpbGUoZmlsZSk7XG4gICAgICAgIH1jYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBpZiAoIWlzTmFOIChlcnIpKSB7XG4gICAgICAgICAgICAgICAgZXJyID0gdGhpcy5lbmdpbmUuZ2V0RXJyb3JDb2RlIChlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc29sZS53YXJuIChlcnIpO1xuICAgICAgICB9XG5cbiAgICB9XG4gICAgc2V0TmV3V2luZG93RmxhZyhmbGFnKXtcbiAgICAgICAgbGV0IGZsYWdUeXBlPVt0aGlzLmVuZ2luZS5OZXdXaW5kb3dGbGFnLmVfTmV3V2luZG93RmxhZ0ZhbHNlLHRoaXMuZW5naW5lLk5ld1dpbmRvd0ZsYWcuZV9OZXdXaW5kb3dGbGFnVHJ1ZSx0aGlzLmVuZ2luZS5OZXdXaW5kb3dGbGFnLmVfTmV3V2luZG93RmxhZ05vbmVdO1xuICAgICAgICB0aGlzLmFjdGlvbi5TZXROZXdXaW5kb3dGbGFnKGZsYWdUeXBlW2ZsYWddKTtcbiAgICB9XG4gICAgc2V0VGFyZ2V0KGRhdGEpe1xuICAgICAgICBsZXQge2F0dGFjaGVkRmlsZU5hbWUsZmlsZUF0dGFjaG1lbnRBbm5vdEluZGV4LHBhZ2VJbmRleCxyZWxhdGlvbnNoaXAsdGFyZ2V0fT1kYXRhO1xuICAgICAgICBsZXQgZW1iZWRlZEdvdG9UYXJnZXQ9RW1iZWRkZWRHb3RvVGFyZ2V0LmNyZWF0ZSh0aGlzLmVuZ2luZSx0aGlzLmRvYyk7XG4gICAgICAgIGxldCBlbWJlZGVkVGFyZ2V0PW5ldyBFbWJlZGRlZEdvdG9UYXJnZXQoZW1iZWRlZEdvdG9UYXJnZXQsdGhpcy5lbmdpbmUsdGhpcy5kb2MpO1xuICAgICAgICBhdHRhY2hlZEZpbGVOYW1lJiZlbWJlZGVkVGFyZ2V0LnNldEF0dGFjaGVkRmlsZU5hbWUoYXR0YWNoZWRGaWxlTmFtZSk7XG4gICAgICAgIChmaWxlQXR0YWNobWVudEFubm90SW5kZXg+PTApJiZlbWJlZGVkVGFyZ2V0LnNldEZpbGVBdHRhY2htZW50QW5ub3RJbmRleChmaWxlQXR0YWNobWVudEFubm90SW5kZXgpO1xuICAgICAgICAocGFnZUluZGV4Pj0wKSYmZW1iZWRlZFRhcmdldC5zZXRQYWdlSW5kZXgocGFnZUluZGV4KTtcbiAgICAgICAgcmVsYXRpb25zaGlwJiZlbWJlZGVkVGFyZ2V0LnNldFJlbGF0aW9uc2hpcChyZWxhdGlvbnNoaXApO1xuICAgICAgICB0YXJnZXQmJmVtYmVkZWRUYXJnZXQuc2V0VGFyZ2V0KHRhcmdldCk7XG4gICAgICAgIHRoaXMuYWN0aW9uLlNldFRhcmdldChlbWJlZGVkR290b1RhcmdldCk7XG4gICAgfVxufSIsIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbWJlZGRlZEdvdG9UYXJnZXQge1xuICAgIHN0YXRpYyBjcmVhdGUoZW5naW5lLGRvYyl7XG4gICAgICAgIHJldHVybiBuZXcgZW5naW5lLkVtYmVkZGVkR290b1RhcmdldChkb2MpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihlbWJlZGRlZEdvdG9UYXJnZXQsZW5naW5lLGRvYyl7XG4gICAgICAgIHRoaXMuZW5naW5lPWVuZ2luZTtcbiAgICAgICAgdGhpcy5kb2M9ZG9jO1xuICAgICAgICB0aGlzLmVtYmVkZGVkR290b1RhcmdldD1lbWJlZGRlZEdvdG9UYXJnZXQ7XG4gICAgfVxuICAgIHRvSnNvbigpe1xuICAgICAgICBsZXQgYXR0YWNoZWRGaWxlTmFtZT10aGlzLmdldEF0dGFjaGVkRmlsZU5hbWUoKSxcbiAgICAgICAgICAgIGZpbGVBdHRhY2htZW50QW5ub3RJbmRleD10aGlzLmdldEZpbGVBdHRhY2htZW50QW5ub3RJbmRleCgpLFxuICAgICAgICAgICAgcGFnZUluZGV4PXRoaXMuZ2V0UGFnZUluZGV4KCksXG4gICAgICAgICAgICByZWxhdGlvbnNoaXA9dGhpcy5nZXRSZWxhdGlvbnNoaXAoKTtcbiAgICAgICAgbGV0IHRhcmdldDtcbiAgICAgICAgaWYoIXRoaXMuZW1iZWRkZWRHb3RvVGFyZ2V0LkdldFRhcmdldCgpLklzRW1wdHkoKSl7XG4gICAgICAgICAgICB0YXJnZXQ9dGhpcy5nZXRUYXJnZXQoKS50b0pzb24oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYXR0YWNoZWRGaWxlTmFtZSxcbiAgICAgICAgICAgIGZpbGVBdHRhY2htZW50QW5ub3RJbmRleCxcbiAgICAgICAgICAgIHBhZ2VJbmRleCxcbiAgICAgICAgICAgIHJlbGF0aW9uc2hpcCxcbiAgICAgICAgICAgIHRhcmdldFxuICAgICAgICB9XG4gICAgfVxuICAgIGdldEF0dGFjaGVkRmlsZU5hbWUoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW1iZWRkZWRHb3RvVGFyZ2V0LkdldEF0dGFjaGVkRmlsZU5hbWUoKS50b1N0cmluZygpO1xuICAgIH1cbiAgICBnZXRGaWxlQXR0YWNobWVudEFubm90SW5kZXgoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW1iZWRkZWRHb3RvVGFyZ2V0LkdldEZpbGVBdHRhY2htZW50QW5ub3RJbmRleCgpO1xuICAgIH1cbiAgICBnZXRQYWdlSW5kZXgoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW1iZWRkZWRHb3RvVGFyZ2V0LkdldFBhZ2VJbmRleCgpO1xuICAgIH1cbiAgICBnZXRSZWxhdGlvbnNoaXAoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW1iZWRkZWRHb3RvVGFyZ2V0LkdldFJlbGF0aW9uc2hpcCgpLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGdldFRhcmdldCgpe1xuICAgICAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5lbWJlZGRlZEdvdG9UYXJnZXQuR2V0VGFyZ2V0KCkpO1xuICAgIH1cblxuICAgIHNldEF0dGFjaGVkRmlsZU5hbWUoZmlsZU5hbWUpe1xuICAgICAgICB0aGlzLmVtYmVkZGVkR290b1RhcmdldC5TZXRBdHRhY2hlZEZpbGVOYW1lKG5ldyB0aGlzLmVuZ2luZS5XU3RyaW5nKGZpbGVOYW1lKSk7XG4gICAgfVxuICAgIHNldEZpbGVBdHRhY2htZW50QW5ub3RJbmRleChhbm5vdEluZGV4KXtcbiAgICAgICAgdGhpcy5lbWJlZGRlZEdvdG9UYXJnZXQuU2V0RmlsZUF0dGFjaG1lbnRBbm5vdEluZGV4KGFubm90SW5kZXgpO1xuICAgIH1cbiAgICBzZXRQYWdlSW5kZXgocGFnZUluZGV4KXtcbiAgICAgICAgdGhpcy5lbWJlZGRlZEdvdG9UYXJnZXQuU2V0UGFnZUluZGV4KHBhZ2VJbmRleCk7XG4gICAgfVxuICAgIHNldFJlbGF0aW9uc2hpcChyZWxhdGlvbnNoaXApe1xuICAgICAgICB0aGlzLmVtYmVkZGVkR290b1RhcmdldC5TZXRSZWxhdGlvbnNoaXAobmV3IHRoaXMuZW5naW5lLlN0cmluZyhyZWxhdGlvbnNoaXApKTtcbiAgICB9XG4gICAgc2V0VGFyZ2V0KGRhdGEpe1xuICAgICAgICBsZXQge2F0dGFjaGVkRmlsZU5hbWUsZmlsZUF0dGFjaG1lbnRBbm5vdEluZGV4LHBhZ2VJbmRleCxyZWxhdGlvbnNoaXAsdGFyZ2V0fT1kYXRhO1xuICAgICAgICBsZXQgZW1iZWRlZEdvdG9UYXJnZXQ9dGhpcy5jb25zdHJ1Y3Rvci5jcmVhdGUodGhpcy5lbmdpbmUsdGhpcy5kb2MpO1xuICAgICAgICBsZXQgZW1iZWRlZFRhcmdldD1uZXcgdGhpcy5jb25zdHJ1Y3RvcihlbWJlZGVkR290b1RhcmdldCx0aGlzLmVuZ2luZSx0aGlzLmRvYyk7XG4gICAgICAgIGF0dGFjaGVkRmlsZU5hbWUmJmVtYmVkZWRUYXJnZXQuc2V0QXR0YWNoZWRGaWxlTmFtZShhdHRhY2hlZEZpbGVOYW1lKTtcbiAgICAgICAgKGZpbGVBdHRhY2htZW50QW5ub3RJbmRleD49MCkmJmVtYmVkZWRUYXJnZXQuc2V0RmlsZUF0dGFjaG1lbnRBbm5vdEluZGV4KGZpbGVBdHRhY2htZW50QW5ub3RJbmRleCk7XG4gICAgICAgIChwYWdlSW5kZXg+PTApJiZlbWJlZGVkVGFyZ2V0LnNldFBhZ2VJbmRleChwYWdlSW5kZXgpO1xuICAgICAgICByZWxhdGlvbnNoaXAmJmVtYmVkZWRUYXJnZXQuc2V0UmVsYXRpb25zaGlwKHJlbGF0aW9uc2hpcCk7XG4gICAgICAgIHRhcmdldCYmZW1iZWRlZFRhcmdldC5zZXRUYXJnZXQodGFyZ2V0KTtcbiAgICAgICAgdGhpcy5lbWJlZGRlZEdvdG9UYXJnZXQuU2V0VGFyZ2V0KGVtYmVkZWRHb3RvVGFyZ2V0KTtcbiAgICB9XG59IiwiaW1wb3J0IEFjdGlvbiBmcm9tICcuL0FjdGlvbic7XG5pbXBvcnQgRGVzdGluYXRpb24gZnJvbSAgJy4uL2Jhc2UvRGVzdGluYXRpb24nO1xuaW1wb3J0IFBERkRvYyBmcm9tIFwiLi4vUERGRG9jXCI7XG5pbXBvcnQgQW5ub3QgZnJvbSAnLi4vYW5ub3QvQW5ub3QnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHb3RvQWN0aW9uIGV4dGVuZHMgQWN0aW9ue1xuICAgIGNvbnN0cnVjdG9yKGFjdGlvbixkb2MsZW5naW5lLEpSKXtcbiAgICAgICAgc3VwZXIoYWN0aW9uLGRvYyxlbmdpbmUsSlIpO1xuICAgICAgICB0aGlzLmFjdGlvbj1uZXcgdGhpcy5lbmdpbmUuR290b0FjdGlvbihhY3Rpb24pO1xuICAgIH1cblxuICAgIHRvSnNvbigpe1xuICAgICAgICBsZXQganNvbj1zdXBlci50b0pzb24oKTtcbiAgICAgICAgbGV0IGRlc3RpbmF0aW9uPXRoaXMuZ2V0RGVzdGluYXRpb24oKTtcbiAgICAgICAganNvbi5kZXN0aW5hdGlvbj1kZXN0aW5hdGlvbi50b0pzb24oKTtcbiAgICAgICAgcmV0dXJuIGpzb247XG4gICAgfVxuXG4gICAgZ2V0RGVzdGluYXRpb24oKXtcbiAgICAgICAgcmV0dXJuIG5ldyBEZXN0aW5hdGlvbih0aGlzLmFjdGlvbi5HZXREZXN0aW5hdGlvbigpLHRoaXMuZG9jLHRoaXMuZW5naW5lKTtcbiAgICB9XG4gICAgc2V0QWN0aW9uRGF0YShkYXRhKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0RGVzdGluYXRpb24oZGF0YSk7XG4gICAgfVxuICAgIHNldERlc3RpbmF0aW9uKGRhdGEpe1xuICAgICAgICBsZXQgcGRmRG9jPXRoaXMuZG9jO1xuICAgICAgICBsZXQgZGVzdEZuPW51bGw7XG4gICAgICAgIHN3aXRjaCAoZGF0YS50eXBlKXtcbiAgICAgICAgICAgIGNhc2UgXCJab29tWFlaXCI6XG4gICAgICAgICAgICAgICAgZGVzdEZuPURlc3RpbmF0aW9uLmNyZWF0ZVhZWjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJab29tRml0UGFnZVwiOlxuICAgICAgICAgICAgICAgIGRlc3RGbj1EZXN0aW5hdGlvbi5jcmVhdGVGaXRQYWdlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIlpvb21GaXRIb3J6XCI6XG4gICAgICAgICAgICAgICAgZGVzdEZuPURlc3RpbmF0aW9uLmNyZWF0ZUZpdEhvcno7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiWm9vbUZpdFZlcnRcIjpcbiAgICAgICAgICAgICAgICBkZXN0Rm49RGVzdGluYXRpb24uY3JlYXRlRml0VmVydDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJab29tRml0UmVjdFwiOlxuICAgICAgICAgICAgICAgIGRlc3RGbj1EZXN0aW5hdGlvbi5jcmVhdGVGaXRSZWN0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIlpvb21GaXRCQm94XCI6XG4gICAgICAgICAgICAgICAgZGVzdEZuPURlc3RpbmF0aW9uLmNyZWF0ZUZpdEJCb3g7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiWm9vbUZpdEJIb3J6XCI6XG4gICAgICAgICAgICAgICAgZGVzdEZuPURlc3RpbmF0aW9uLmNyZWF0ZUZpdEJIb3J6O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBkZXN0Rm49RGVzdGluYXRpb24uY3JlYXRlRml0QlZlcnQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGRlc3RpbmF0aW9uPWRlc3RGbih0aGlzLmVuZ2luZSxwZGZEb2MsZGF0YSk7XG4gICAgICAgIHRoaXMuYWN0aW9uLlNldERlc3RpbmF0aW9uKGRlc3RpbmF0aW9uKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufSIsImltcG9ydCBBY3Rpb24gZnJvbSAnLi9BY3Rpb24nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIaWRlQWN0aW9uIGV4dGVuZHMgQWN0aW9ue1xuICAgIGNvbnN0cnVjdG9yKGFjdGlvbixkb2MsZW5naW5lLEpSKXtcbiAgICAgICAgc3VwZXIoYWN0aW9uLGRvYyxlbmdpbmUsSlIpO1xuICAgICAgICB0aGlzLmFjdGlvbj1uZXcgdGhpcy5lbmdpbmUuSGlkZUFjdGlvbihhY3Rpb24pO1xuICAgIH1cblxuICAgIHRvSnNvbigpe1xuICAgICAgICBsZXQganNvbj1zdXBlci50b0pzb24oKTtcbiAgICAgICAganNvbi5maWVsZE5hbWVzPXRoaXMuZ2V0RmllbGROYW1lcygpO1xuICAgICAgICBqc29uLmhpZGVTdGF0ZT10aGlzLmdldEhpZGVTdGF0ZSgpO1xuICAgICAgICByZXR1cm4ganNvbjtcbiAgICB9XG5cbiAgICBnZXRGaWVsZE5hbWVzKCl7XG4gICAgICAgIGxldCB3U3RyaW5nQXJyYXk9dGhpcy5hY3Rpb24uR2V0RmllbGROYW1lcygpO1xuICAgICAgICBsZXQgZmllbGROYW1lcz1bXTtcbiAgICAgICAgZm9yKGxldCBpPTA7aTx3U3RyaW5nQXJyYXkuR2V0U2l6ZSgpO2krKyl7XG4gICAgICAgICAgICBmaWVsZE5hbWVzLnB1c2god1N0cmluZ0FycmF5LkdldEF0KGkpLnRvU3RyaW5nKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWVsZE5hbWVzO1xuICAgIH1cblxuICAgIGdldEhpZGVTdGF0ZSgpe1xuICAgICAgICByZXR1cm4gdGhpcy5hY3Rpb24uR2V0SGlkZVN0YXRlKCk7XG4gICAgfVxuXG4gICAgc2V0QWN0aW9uRGF0YShkYXRhKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuc2V0RmllbGROYW1lcyhkYXRhLmZpZWxkTmFtZXMpO1xuICAgICAgICAgICAgdGhpcy5zZXRIaWRlU3RhdGUoZGF0YS5oaWRlU3RhdGUpO1xuICAgICAgICB9Y2F0Y2goZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBzZXRGaWVsZE5hbWVzKGZpZWxkTmFtZXMpe1xuICAgICAgICBsZXQgZmllbGRXU3RyaW5nQXJyYXk9bmV3IHRoaXMuZW5naW5lLldTdHJpbmdBcnJheSgpO1xuICAgICAgICBmaWVsZE5hbWVzLmZvckVhY2goKGZpZWxkTmFtZSk9PntcbiAgICAgICAgICAgIGZpZWxkV1N0cmluZ0FycmF5LkFkZChuZXcgdGhpcy5lbmdpbmUuV1N0cmluZyhmaWVsZE5hbWUpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLmFjdGlvbi5TZXRGaWVsZE5hbWVzKGZpZWxkV1N0cmluZ0FycmF5KTtcbiAgICB9XG4gICAgc2V0SGlkZVN0YXRlKGhpZGVTdGF0ZSl7XG4gICAgICAgIHJldHVybiB0aGlzLmFjdGlvbi5TZXRIaWRlU3RhdGUoaGlkZVN0YXRlKTtcbiAgICB9XG59IiwiaW1wb3J0IEFjdGlvbiBmcm9tICcuL0FjdGlvbic7XG5pbXBvcnQgRmlsZVNwZWMgZnJvbSAnLi4vYmFzZS9GaWxlU3BlYyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEltcG9ydERhdGFBY3Rpb24gZXh0ZW5kcyBBY3Rpb257XG4gICAgY29uc3RydWN0b3IoYWN0aW9uLGRvYyxlbmdpbmUsSlIpe1xuICAgICAgICBzdXBlcihhY3Rpb24sZG9jLGVuZ2luZSxKUik7XG4gICAgICAgIHRoaXMuYWN0aW9uPW5ldyB0aGlzLmVuZ2luZS5JbXBvcnREYXRhQWN0aW9uKGFjdGlvbik7XG4gICAgfVxuXG4gICAgdG9Kc29uKCl7XG4gICAgICAgIGxldCBqc29uPXN1cGVyLnRvSnNvbigpO1xuICAgICAgICBsZXQgZmlsZVNwZWM9dGhpcy5nZXRGREZGaWxlU3BlYygpO1xuICAgICAgICBqc29uLmZpbGVTcGVjPWZpbGVTcGVjLnRvSnNvbigpO1xuICAgICAgICByZXR1cm4ganNvbjtcbiAgICB9XG5cbiAgICBzZXRBY3Rpb25EYXRhKGRhdGEpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZGF0YS5idWZmZXImJnRoaXMuc2V0RkRGRmlsZVNwZWMoZGF0YSk7XG4gICAgICAgIH1jYXRjaChlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZ2V0RkRGRmlsZVNwZWMoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsZVNwZWM9bmV3IEZpbGVTcGVjKHRoaXMuYWN0aW9uLkdldEZERkZpbGVTcGVjKCksdGhpcyk7XG4gICAgfVxuXG4gICAgc2V0RkRGRmlsZVNwZWMoZGF0YSl7XG4gICAgICAgIGxldCBmaWxlPUZpbGVTcGVjLmNyZWF0ZUZpbGUodGhpcy5lbmdpbmUsdGhpcy5ob3N0LmRvYyxkYXRhLmJ1ZmZlcik7XG4gICAgICAgIGxldCBmaWxlU3BlYz1uZXcgRmlsZVNwZWMoZmlsZSx0aGlzKTtcbiAgICAgICAgZmlsZVNwZWMuc2V0RmlsZU5hbWUoZGF0YS5maWxlTmFtZSk7XG4gICAgICAgIHRoaXMuYWN0aW9uLlNldEZERkZpbGVTcGVjKGZpbGUpO1xuICAgIH1cblxufSIsImltcG9ydCBBY3Rpb24gZnJvbSAnLi9BY3Rpb24nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBKYXZhU2NyaXB0QWN0aW9uIGV4dGVuZHMgQWN0aW9ue1xuICAgIGNvbnN0cnVjdG9yKGFjdGlvbixkb2MsZW5naW5lLEpSKXtcbiAgICAgICAgc3VwZXIoYWN0aW9uLGRvYyxlbmdpbmUsSlIpO1xuICAgICAgICB0aGlzLmFjdGlvbj1uZXcgdGhpcy5lbmdpbmUuSmF2YVNjcmlwdEFjdGlvbihhY3Rpb24pO1xuICAgIH1cbiAgICB0b0pzb24oKXtcbiAgICAgICAgbGV0IGpzb249c3VwZXIudG9Kc29uKCk7XG4gICAgICAgIGpzb24uamF2YXNjcmlwdD10aGlzLmdldFNjcmlwdCgpO1xuICAgICAgICByZXR1cm4ganNvbjtcbiAgICB9XG4gICAgc2V0QWN0aW9uRGF0YShkYXRhKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuc2V0U2NyaXB0KGRhdGEuc2NyaXB0KTtcbiAgICAgICAgfWNhdGNoKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZ2V0U2NyaXB0KCl7XG4gICAgICAgIHJldHVybiB0aGlzLmFjdGlvbi5HZXRTY3JpcHQoKS50b1N0cmluZygpO1xuICAgIH1cbiAgICBzZXRTY3JpcHQoc2NyaXB0KXtcbiAgICAgICAgdGhpcy5hY3Rpb24uU2V0U2NyaXB0KG5ldyB0aGlzLmVuZ2luZS5XU3RyaW5nKHNjcmlwdCkpO1xuICAgIH1cbn0iLCJpbXBvcnQgQWN0aW9uIGZyb20gJy4vQWN0aW9uJztcbmltcG9ydCBGaWxlU3BlYyBmcm9tICcuLi9iYXNlL0ZpbGVTcGVjJztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExhdW5jaEFjdGlvbiBleHRlbmRzIEFjdGlvbntcbiAgICBjb25zdHJ1Y3RvcihhY3Rpb24sZG9jLGVuZ2luZSxKUil7XG4gICAgICAgIHN1cGVyKGFjdGlvbixkb2MsZW5naW5lLEpSKTtcbiAgICAgICAgdGhpcy5hY3Rpb249bmV3IHRoaXMuZW5naW5lLkxhdW5jaEFjdGlvbihhY3Rpb24pO1xuICAgIH1cbiAgICB0b0pzb24oKXtcbiAgICAgICAgbGV0IGpzb249c3VwZXIudG9Kc29uKCk7XG4gICAgICAgIGxldCBmaWxlU3BlYz10aGlzLmdldEZpbGVTcGVjKCk7XG4gICAgICAgIGpzb24uZmlsZVNwZWM9ZmlsZVNwZWMudG9Kc29uKCk7XG4gICAgICAgIHJldHVybiBqc29uO1xuICAgIH1cbiAgICBnZXRGaWxlU3BlYygpe1xuICAgICAgICByZXR1cm4gdGhpcy5maWxlU3BlYz1uZXcgRmlsZVNwZWModGhpcy5hY3Rpb24uR2V0RmlsZVNwZWMoKSx0aGlzKTtcbiAgICB9XG4gICAgc2V0QWN0aW9uRGF0YShkYXRhKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGRhdGEuYnVmZmVyJiZ0aGlzLnNldEZpbGVTcGVjKGRhdGEpO1xuICAgICAgICB9Y2F0Y2goZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBzZXRGaWxlU3BlYyhkYXRhKXtcbiAgICAgICAgbGV0IGZpbGU9RmlsZVNwZWMuY3JlYXRlRmlsZSh0aGlzLmVuZ2luZSx0aGlzLmhvc3QuZG9jLGRhdGEuYnVmZmVyKTtcbiAgICAgICAgbGV0IGZpbGVTcGVjPW5ldyBGaWxlU3BlYyhmaWxlLHRoaXMpO1xuICAgICAgICBmaWxlU3BlYy5zZXRGaWxlTmFtZShkYXRhLmZpbGVOYW1lKTtcbiAgICAgICAgdGhpcy5hY3Rpb24uU2V0RmlsZVNwZWMoZmlsZSk7XG4gICAgfVxufSIsImltcG9ydCBBY3Rpb24gZnJvbSAnLi9BY3Rpb24nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOYW1lZEFjdGlvbiBleHRlbmRzIEFjdGlvbntcbiAgICBjb25zdHJ1Y3RvcihhY3Rpb24sZG9jLGVuZ2luZSxKUil7XG4gICAgICAgIHN1cGVyKGFjdGlvbixkb2MsZW5naW5lLEpSKTtcbiAgICAgICAgdGhpcy5hY3Rpb249bmV3IHRoaXMuZW5naW5lLk5hbWVkQWN0aW9uKGFjdGlvbik7XG4gICAgfVxuICAgIHRvSnNvbigpe1xuICAgICAgICBsZXQganNvbj1zdXBlci50b0pzb24oKTtcbiAgICAgICAganNvbi5uYW1lPXRoaXMuZ2V0TmFtZSgpO1xuICAgICAgICByZXR1cm4ganNvbjtcbiAgICB9XG4gICAgc2V0QWN0aW9uRGF0YShkYXRhKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuc2V0TmFtZShkYXRhLm5hbWUpO1xuICAgICAgICB9Y2F0Y2goZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBnZXROYW1lKCl7XG4gICAgICAgIHJldHVybiB0aGlzLmFjdGlvbi5HZXROYW1lKCkudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgc2V0TmFtZShuYW1lKXtcbiAgICAgICAgdGhpcy5hY3Rpb24uU2V0TmFtZShuZXcgdGhpcy5lbmdpbmUuU3RyaW5nKG5hbWUpKTtcbiAgICB9XG59IiwiaW1wb3J0IEFjdGlvbiBmcm9tICcuL0FjdGlvbic7XG5pbXBvcnQgRGVzdGluYXRpb24gZnJvbSBcIi4uL2Jhc2UvRGVzdGluYXRpb25cIjtcbmltcG9ydCBGaWxlU3BlYyBmcm9tIFwiLi4vYmFzZS9GaWxlU3BlY1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZW1vdGVHb3RvQWN0aW9uIGV4dGVuZHMgQWN0aW9ue1xuICAgIGNvbnN0cnVjdG9yKGFjdGlvbixkb2MsZW5naW5lLEpSKXtcbiAgICAgICAgc3VwZXIoYWN0aW9uLGRvYyxlbmdpbmUsSlIpO1xuICAgICAgICB0aGlzLmFjdGlvbj1uZXcgdGhpcy5lbmdpbmUuUmVtb3RlR290b0FjdGlvbihhY3Rpb24pO1xuICAgIH1cblxuICAgIHRvSnNvbigpe1xuICAgICAgICBsZXQganNvbj1zdXBlci50b0pzb24oKTtcbiAgICAgICAganNvbi5kZXN0aW5hdGlvbk5hbWU9dGhpcy5nZXREZXN0aW5hdGlvbk5hbWUoKTtcbiAgICAgICAgbGV0IGRlc3RpbmF0aW9uPXRoaXMuZ2V0RGVzdGluYXRpb24oKTtcbiAgICAgICAganNvbi5kZXN0aW5hdGlvbj1kZXN0aW5hdGlvbi50b0pzb24oKTtcbiAgICAgICAgbGV0IGZpbGVTcGVjPXRoaXMuZ2V0RmlsZVNwZWMoKTtcbiAgICAgICAganNvbi5maWxlU3BlYz1maWxlU3BlYy50b0pzb24oKTtcbiAgICAgICAganNvbi5uZXdXaW5kb3dGbGFnPXRoaXMuZ2V0TmV3V2luZG93RmxhZygpO1xuICAgICAgICByZXR1cm4ganNvbjtcbiAgICB9XG4gICAgZ2V0RGVzdGluYXRpb25OYW1lKCl7XG4gICAgICAgIHJldHVybiB0aGlzLmFjdGlvbi5HZXREZXN0aW5hdGlvbk5hbWUoKS50b1N0cmluZygpO1xuICAgIH1cbiAgICBnZXREZXN0aW5hdGlvbigpe1xuICAgICAgICByZXR1cm4gbmV3IERlc3RpbmF0aW9uKHRoaXMuYWN0aW9uLkdldERlc3RpbmF0aW9uKCksdGhpcy5kb2MsdGhpcy5lbmdpbmUpO1xuICAgIH1cbiAgICBnZXRGaWxlU3BlYygpe1xuICAgICAgICByZXR1cm4gdGhpcy5maWxlU3BlYz1uZXcgRmlsZVNwZWModGhpcy5hY3Rpb24uR2V0RmlsZVNwZWMoKSx0aGlzKTtcbiAgICB9XG4gICAgZ2V0TmV3V2luZG93RmxhZygpe1xuICAgICAgICByZXR1cm4gdGhpcy5hY3Rpb24uR2V0TmV3V2luZG93RmxhZygpLnZhbHVlO1xuICAgIH1cbiAgICBzZXRBY3Rpb25EYXRhKGRhdGEpe1xuICAgICAgICB0aGlzLnNldERlc3RpbmF0aW9uKGRhdGEpO1xuICAgICAgICBkYXRhLmRlc3RpbmF0aW9uTmFtZSYmdGhpcy5zZXREZXN0aW5hdGlvbk5hbWUoZGF0YS5kZXN0aW5hdGlvbk5hbWUpO1xuICAgICAgICB0aGlzLnNldEZpbGVTcGVjKGRhdGEuYnVmZmVyLGRhdGEuZmlsZU5hbWUpO1xuICAgICAgICBkYXRhLm5ld1dpbmRvd0ZsYWcmJnRoaXMuc2V0TmV3V2luZG93RmxhZyhkYXRhLm5ld1dpbmRvd0ZsYWcpO1xuICAgIH1cbiAgICBzZXREZXN0aW5hdGlvbihkYXRhKXtcbiAgICAgICAgbGV0IHBkZkRvYz10aGlzLmRvYztcbiAgICAgICAgbGV0IGRlc3RGbj1udWxsO1xuICAgICAgICBzd2l0Y2ggKGRhdGEudHlwZSl7XG4gICAgICAgICAgICBjYXNlIFwiWm9vbVhZWlwiOlxuICAgICAgICAgICAgICAgIGRlc3RGbj1EZXN0aW5hdGlvbi5jcmVhdGVYWVo7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiWm9vbUZpdFBhZ2VcIjpcbiAgICAgICAgICAgICAgICBkZXN0Rm49RGVzdGluYXRpb24uY3JlYXRlRml0UGFnZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJab29tRml0SG9yelwiOlxuICAgICAgICAgICAgICAgIGRlc3RGbj1EZXN0aW5hdGlvbi5jcmVhdGVGaXRIb3J6O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIlpvb21GaXRWZXJ0XCI6XG4gICAgICAgICAgICAgICAgZGVzdEZuPURlc3RpbmF0aW9uLmNyZWF0ZUZpdFZlcnQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiWm9vbUZpdFJlY3RcIjpcbiAgICAgICAgICAgICAgICBkZXN0Rm49RGVzdGluYXRpb24uY3JlYXRlRml0UmVjdDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJab29tRml0QkJveFwiOlxuICAgICAgICAgICAgICAgIGRlc3RGbj1EZXN0aW5hdGlvbi5jcmVhdGVGaXRCQm94O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIlpvb21GaXRCSG9yelwiOlxuICAgICAgICAgICAgICAgIGRlc3RGbj1EZXN0aW5hdGlvbi5jcmVhdGVGaXRCSG9yejtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgZGVzdEZuPURlc3RpbmF0aW9uLmNyZWF0ZUZpdEJWZXJ0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGxldCBkZXN0aW5hdGlvbj1kZXN0Rm4odGhpcy5lbmdpbmUscGRmRG9jLGRhdGEpO1xuICAgICAgICB0aGlzLmFjdGlvbi5TZXREZXN0aW5hdGlvbihkZXN0aW5hdGlvbik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBzZXREZXN0aW5hdGlvbk5hbWUobmFtZSl7XG4gICAgICAgIHRoaXMuYWN0aW9uLlNldERlc3RpbmF0aW9uTmFtZShuYW1lKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHNldEZpbGVTcGVjKGJ1ZmZlcixmaWxlTmFtZSl7XG4gICAgICAgIGxldCBmaWxlPUZpbGVTcGVjLmNyZWF0ZUZpbGUodGhpcy5lbmdpbmUsdGhpcy5kb2MsYnVmZmVyKTtcbiAgICAgICAgbGV0IGZpbGVTcGVjPW5ldyBGaWxlU3BlYyhmaWxlLHRoaXMpO1xuICAgICAgICBmaWxlU3BlYy5zZXRGaWxlTmFtZShmaWxlTmFtZSk7XG4gICAgICAgIHRoaXMuYWN0aW9uLlNldEZpbGVTcGVjKGZpbGUpO1xuICAgIH1cbiAgICBzZXROZXdXaW5kb3dGbGFnKGZsYWcpe1xuICAgICAgICBsZXQgZmxhZ1R5cGU9W3RoaXMuZW5naW5lLk5ld1dpbmRvd0ZsYWcuZV9OZXdXaW5kb3dGbGFnRmFsc2UsdGhpcy5lbmdpbmUuTmV3V2luZG93RmxhZy5lX05ld1dpbmRvd0ZsYWdUcnVlLHRoaXMuZW5naW5lLk5ld1dpbmRvd0ZsYWcuZV9OZXdXaW5kb3dGbGFnTm9uZV07XG4gICAgICAgIHRoaXMuYWN0aW9uLlNldE5ld1dpbmRvd0ZsYWcoZmxhZ1R5cGVbZmxhZ10pO1xuICAgIH1cbn0iLCJpbXBvcnQgQWN0aW9uIGZyb20gJy4vQWN0aW9uJztcbmltcG9ydCBGaWxlU3BlYyBmcm9tICcuLi9iYXNlL0ZpbGVTcGVjJztcbmltcG9ydCBEZXN0aW5hdGlvbiBmcm9tICAnLi4vYmFzZS9EZXN0aW5hdGlvbic7XG5pbXBvcnQgUERGRG9jIGZyb20gXCIuLi9QREZEb2NcIjtcbmltcG9ydCBBbm5vdCBmcm9tICcuLi9hbm5vdC9Bbm5vdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlbmRpdGlvbkFjdGlvbiBleHRlbmRzIEFjdGlvbntcbiAgICBjb25zdHJ1Y3RvcihhY3Rpb24sZG9jLGVuZ2luZSxKUil7XG4gICAgICAgIHN1cGVyKGFjdGlvbixkb2MsZW5naW5lLEpSKTtcbiAgICAgICAgdGhpcy5hY3Rpb24gPSBuZXcgdGhpcy5lbmdpbmUuUmVuZGl0aW9uQWN0aW9uKGFjdGlvbik7XG4gICAgfVxuXG4gICAgdG9Kc29uKCl7XG4gICAgICAgIGxldCBqc29uPXN1cGVyLnRvSnNvbigpO1xuICAgICAgICBsZXQgcmVuZGl0aW9uQ291bnQgPSB0aGlzLmFjdGlvbi5HZXRSZW5kaXRpb25Db3VudCgpO1xuICAgICAgICBsZXQgcmVuZGl0aW9ucyA9IFtdO1xuICAgICAgICBmb3IobGV0IGkgPTA7IGk8IHJlbmRpdGlvbkNvdW50OyBpKyspe1xuICAgICAgICAgICAgbGV0IGNfcmVuZGl0aW9uID0gdGhpcy5hY3Rpb24uR2V0UmVuZGl0aW9uKGkpO1xuICAgICAgICAgICAgbGV0IGNvbnRlbnRUeXBlU3RyID0gY19yZW5kaXRpb24uR2V0TWVkaWFDbGlwQ29udGVudFR5cGUoKTtcblxuICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIGxldCBjb250ZW50VHlwZTtcbiAgICAgICAgICAgIHRyeXtcbiAgICAgICAgICAgICAgICBjb250ZW50VHlwZSA9IGNvbnRlbnRUeXBlU3RyLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB9Y2F0Y2goZXJyKXtcbiAgICAgICAgICAgICAgICBsZXQgaGV4U3RySUQgPSAnJztcbiAgICAgICAgICAgICAgICBsZXQgc3RyTGVuZ3RoID0gY29udGVudFR5cGVTdHIuR2V0TGVuZ3RoKCk7XG4gICAgICAgICAgICAgICAgbGV0IHN0ckJ1ZmZlciA9IGNvbnRlbnRUeXBlU3RyLkdldEJ1ZmZlcigpO1xuICAgICAgICAgICAgICAgIGZvcihsZXQgaiA9IDA7ajxzdHJMZW5ndGg7aisrKXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvZGUgPSAodGhpcy5lbmdpbmUuSEVBUDhbc3RyQnVmZmVyK2pdPj4+MCkmMHgwMGZmXG4gICAgICAgICAgICAgICAgICAgIGhleFN0cklEKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250ZW50VHlwZSA9IGhleFN0cklEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgbGV0IGNfZmlsZVNwZWMgPSBjX3JlbmRpdGlvbi5HZXRNZWRpYUNsaXBGaWxlKCk7XG4gICAgICAgICAgICBsZXQgZmlsZU5hbWUgPSBjX2ZpbGVTcGVjLkdldEZpbGVOYW1lKCkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIGxldCBmaWxlU3BlYyA9IG5ldyBGaWxlU3BlYyhjX2ZpbGVTcGVjLCB0aGlzKTtcbiAgICAgICAgICAgIGxldCBmaWxlU2l6ZSA9IGZpbGVTcGVjLmdldEZpbGVTaXplKCk7XG4gICAgICAgICAgICBsZXQgZmlsZUJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KGZpbGVTaXplKTtcbiAgICAgICAgICAgIGZpbGVTcGVjLmdldFN0cmVhbSgoYnVmZmVyLCBvZmZzZXQsIHNpemUpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgdTggPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xuICAgICAgICAgICAgICAgIGZpbGVCdWZmZXIuc2V0KHU4LCBvZmZzZXQpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHJlbmRpdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgZmlsZVNpemU6IGZpbGVTaXplLFxuICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBmaWxlTmFtZSxcbiAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogY29udGVudFR5cGUsXG4gICAgICAgICAgICAgICAgYnVmZmVyOiBmaWxlQnVmZmVyLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAganNvbi5yZW5kaXRpb25zID0gcmVuZGl0aW9ucztcbiAgICAgICAgcmV0dXJuIGpzb247XG4gICAgfVxufSIsImltcG9ydCBBY3Rpb24gZnJvbSAnLi9BY3Rpb24nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXNldEZvcm1BY3Rpb24gZXh0ZW5kcyBBY3Rpb257XG4gICAgY29uc3RydWN0b3IoYWN0aW9uLGRvYyxlbmdpbmUsSlIpe1xuICAgICAgICBzdXBlcihhY3Rpb24sZG9jLGVuZ2luZSxKUik7XG4gICAgICAgIHRoaXMuYWN0aW9uPW5ldyB0aGlzLmVuZ2luZS5SZXNldEZvcm1BY3Rpb24oYWN0aW9uKTtcbiAgICB9XG4gICAgdG9Kc29uKCl7XG4gICAgICAgIGxldCBqc29uPXN1cGVyLnRvSnNvbigpO1xuICAgICAgICBqc29uLmZsYWdzPXRoaXMuZ2V0RmxhZ3MoKTtcbiAgICAgICAganNvbi5maWVsZE5hbWVzPXRoaXMuZ2V0RmllbGROYW1lcygpO1xuICAgICAgICByZXR1cm4ganNvbjtcbiAgICB9XG4gICAgc2V0QWN0aW9uRGF0YShkYXRhKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGRhdGEuZmxhZ3MmJnRoaXMuc2V0RmxhZ3MoZGF0YS5mbGFncyk7XG4gICAgICAgICAgICBkYXRhLmZpZWxkTmFtZXMmJnRoaXMuc2V0RmllbGROYW1lcyhkYXRhLmZpZWxkTmFtZXMpO1xuICAgICAgICB9Y2F0Y2goZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGdldEZpZWxkTmFtZXMoKXtcbiAgICAgICAgbGV0IGZpZWxkTmFtZXM9dGhpcy5hY3Rpb24uR2V0RmllbGROYW1lcygpLFxuICAgICAgICAgICAgZmllbGROYW1lc0Fycj1bXSxcbiAgICAgICAgICAgIHNpemU9ZmllbGROYW1lcy5HZXRTaXplKCk7XG4gICAgICAgIGZvcihsZXQgaT0wO2k8c2l6ZTtpKyspe1xuICAgICAgICAgICAgZmllbGROYW1lc0Fyci5wdXNoKGZpZWxkTmFtZXMuR2V0QXQoaSkudG9TdHJpbmcoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZpZWxkTmFtZXNBcnI7XG4gICAgfVxuICAgIGdldEZsYWdzKCl7XG4gICAgICAgIHJldHVybiB0aGlzLmFjdGlvbi5HZXRGbGFncygpO1xuICAgIH1cbiAgICBzZXRGaWVsZE5hbWVzKGZpZWxkTmFtZXMpe1xuICAgICAgICBsZXQgZmllbGRXU3RyaW5nQXJyYXk9bmV3IHRoaXMuZW5naW5lLldTdHJpbmdBcnJheSgpO1xuICAgICAgICBmaWVsZE5hbWVzLmZvckVhY2goKGZpZWxkTmFtZSk9PntcbiAgICAgICAgICAgIGZpZWxkV1N0cmluZ0FycmF5LkFkZChuZXcgdGhpcy5lbmdpbmUuV1N0cmluZyhmaWVsZE5hbWUpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLmFjdGlvbi5TZXRGaWVsZE5hbWVzKGZpZWxkV1N0cmluZ0FycmF5KTtcbiAgICB9XG4gICAgc2V0RmxhZ3MoZmxhZ3Mpe1xuICAgICAgICByZXR1cm4gdGhpcy5hY3Rpb24uU2V0RmxhZ3MoTnVtYmVyKGZsYWdzKSk7XG4gICAgfVxufSIsImltcG9ydCBBY3Rpb24gZnJvbSAnLi9BY3Rpb24nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdWJtaXRGb3JtQWN0aW9uIGV4dGVuZHMgQWN0aW9ue1xuICAgIGNvbnN0cnVjdG9yKGFjdGlvbixkb2MsZW5naW5lLEpSKXtcbiAgICAgICAgc3VwZXIoYWN0aW9uLGRvYyxlbmdpbmUsSlIpO1xuICAgICAgICB0aGlzLmFjdGlvbj1uZXcgdGhpcy5lbmdpbmUuU3VibWl0Rm9ybUFjdGlvbihhY3Rpb24pO1xuICAgIH1cbiAgICB0b0pzb24oKXtcblxuICAgICAgICBsZXQganNvbj1zdXBlci50b0pzb24oKTtcbiAgICAgICAganNvbi5mbGFncz10aGlzLmdldEZsYWdzKCk7XG4gICAgICAgIGpzb24udXJsPXRoaXMuZ2V0VVJMKCk7XG4gICAgICAgIGpzb24uZmllbGROYW1lcz10aGlzLmdldEZpZWxkTmFtZXMoKTtcbiAgICAgICAgcmV0dXJuIGpzb247XG4gICAgfVxuICAgIHNldEFjdGlvbkRhdGEoZGF0YSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBkYXRhLmZsYWdzJiZ0aGlzLnNldEZsYWdzKGRhdGEuZmxhZ3MpO1xuICAgICAgICAgICAgZGF0YS51cmwmJnRoaXMuc2V0VVJMKGRhdGEudXJsKTtcbiAgICAgICAgICAgIGRhdGEuZmllbGROYW1lcyYmdGhpcy5zZXRGaWVsZE5hbWVzKGRhdGEuZmllbGROYW1lcyk7XG4gICAgICAgIH1jYXRjaChlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZ2V0RmllbGROYW1lcygpe1xuICAgICAgICBsZXQgZmllbGROYW1lcz10aGlzLmFjdGlvbi5HZXRGaWVsZE5hbWVzKCksXG4gICAgICAgICAgICBmaWVsZE5hbWVzQXJyPVtdLFxuICAgICAgICAgICAgc2l6ZT1maWVsZE5hbWVzLkdldFNpemUoKTtcbiAgICAgICAgZm9yKGxldCBpPTA7aTxzaXplO2krKyl7XG4gICAgICAgICAgICBmaWVsZE5hbWVzQXJyLnB1c2goZmllbGROYW1lcy5HZXRBdChpKS50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmllbGROYW1lc0FycjtcbiAgICB9XG4gICAgZ2V0RmxhZ3MoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWN0aW9uLkdldEZsYWdzKCk7XG4gICAgfVxuICAgIGdldFVSTCgpe1xuICAgICAgICBsZXQgdXJsPXRoaXMuYWN0aW9uLkdldFVSTCgpO1xuICAgICAgICBpZih1cmwuR2V0TGVuZ3RoKCk9PT0wKXtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1cmwudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgc2V0RmllbGROYW1lcyhmaWVsZE5hbWVzKXtcbiAgICAgICAgbGV0IGZpZWxkV1N0cmluZ0FycmF5PW5ldyB0aGlzLmVuZ2luZS5XU3RyaW5nQXJyYXkoKTtcbiAgICAgICAgZmllbGROYW1lcy5mb3JFYWNoKChmaWVsZE5hbWUpPT57XG4gICAgICAgICAgICBmaWVsZFdTdHJpbmdBcnJheS5BZGQobmV3IHRoaXMuZW5naW5lLldTdHJpbmcoZmllbGROYW1lKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5hY3Rpb24uU2V0RmllbGROYW1lcyhmaWVsZFdTdHJpbmdBcnJheSk7XG4gICAgfVxuICAgIHNldEZsYWdzKGZsYWdzKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWN0aW9uLlNldEZsYWdzKE51bWJlcihmbGFncykpO1xuICAgIH1cbiAgICBzZXRVUkwodXJsKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWN0aW9uLlNldFVSTChuZXcgdGhpcy5lbmdpbmUuU3RyaW5nKHVybCkpO1xuICAgIH1cblxufSIsImltcG9ydCBBY3Rpb24gZnJvbSAnLi9BY3Rpb24nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVUklBY3Rpb24gZXh0ZW5kcyBBY3Rpb257XG4gICAgY29uc3RydWN0b3IoYWN0aW9uLGRvYyxlbmdpbmUsSlIpe1xuICAgICAgICBzdXBlcihhY3Rpb24sZG9jLGVuZ2luZSxKUik7XG4gICAgICAgIHRoaXMuYWN0aW9uPW5ldyB0aGlzLmVuZ2luZS5VUklBY3Rpb24oYWN0aW9uKTtcbiAgICB9XG4gICAgdG9Kc29uKCl7XG4gICAgICAgIGxldCBqc29uPXN1cGVyLnRvSnNvbigpO1xuICAgICAgICBqc29uLnVyaT10aGlzLmdldFVSSSgpO1xuICAgICAgICByZXR1cm4ganNvbjtcbiAgICB9XG4gICAgc2V0QWN0aW9uRGF0YShkYXRhKXtcbiAgICAgICAgdGhpcy5zZXRVUkkoZGF0YS51cmkpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZ2V0VVJJKCl7XG4gICAgICAgIGxldCB1cmlPYmogPXRoaXMuYWN0aW9uLkdldFVSSSgpO1xuICAgICAgICBsZXQgdXJpO1xuICAgICAgICB0cnl7XG4gICAgICAgICAgICB1cmkgPSB1cmlPYmoudG9TdHJpbmcoKTtcbiAgICAgICAgfWNhdGNoKGVycil7XG4gICAgICAgICAgICBpZiAoIWlzTmFOIChlcnIpKSB7XG4gICAgICAgICAgICAgIGVyciA9IHRoaXMuZW5naW5lLmdldEVycm9yQ29kZSAoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnNvbGUud2FybiAoZXJyKTtcblxuICAgICAgICAgICAgbGV0IGhleFN0cklEID0gJyc7XG4gICAgICAgICAgICBsZXQgc3RyTGVuZ3RoID0gdXJpT2JqLkdldExlbmd0aCgpO1xuICAgICAgICAgICAgbGV0IHN0ckJ1ZmZlciA9IHVyaU9iai5HZXRCdWZmZXIoKTtcbiAgICAgICAgICAgIGZvcihsZXQgaiA9IDA7ajxzdHJMZW5ndGg7aisrKXtcbiAgICAgICAgICAgICAgICBsZXQgY29kZSA9ICh0aGlzLmVuZ2luZS5IRUFQOFtzdHJCdWZmZXIral0+Pj4wKSYweDAwZmZcbiAgICAgICAgICAgICAgICBoZXhTdHJJRCs9U3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVyaSA9IGhleFN0cklEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1cmk7XG4gICAgfVxuICAgIHNldFVSSSh1cmkpe1xuICAgICAgICB0aGlzLmFjdGlvbi5TZXRVUkkobmV3IHRoaXMuZW5naW5lLlN0cmluZyh1cmkpKTtcbiAgICB9XG59IiwiaW1wb3J0IFJlY3RPcGVyYXRvciBmcm9tIFwiLi4vc2hhcmUvUmVjdE9wZXJhdG9yXCI7XG5pbXBvcnQgeyBCT1JERVJfU1RZTEUgfSBmcm9tIFwiLi4vLi4vc2hhcmVkL2NvbnN0c1wiO1xuaW1wb3J0IGd1aWQgZnJvbSAnLi4vLi4vc2hhcmVkL2d1aWQnO1xuaW1wb3J0IExvZ2dlckZhY3RvcnkgZnJvbSBcIi4uLy4uL3NoYXJlZC9sb2dnZXIvTG9nZ2VyRmFjdG9yeVwiO1xuY29uc3QgbG9nZ2VyID0gTG9nZ2VyRmFjdG9yeS5nZXRMb2dnZXIoJ3BkZi1qci5Bbm5vdCcpO1xuXG5jbGFzcyBBbm5vdCB7XG4gICAgY29uc3RydWN0b3IgKGFubm90LCBwZGZQYWdlKSB7XG4gICAgICAgIHRoaXMuYW5ub3QgPSBhbm5vdDtcbiAgICAgICAgdGhpcy5wZGZQYWdlID0gcGRmUGFnZTtcbiAgICAgICAgdGhpcy5KUiA9IHBkZlBhZ2UuSlI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAdHlwZSBHU0RLXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmVuZ2luZSA9IHBkZlBhZ2UuZW5naW5lO1xuICAgICAgICB0aGlzLmRvYz1wZGZQYWdlLmRvYztcbiAgICB9XG4gICAgdG9Kc29uICgpIHtcbiAgICAgICAgbGV0IGFubm90ID0gdGhpcy5hbm5vdDtcblxuICAgICAgICBsZXQgZmxhZyA9IGFubm90LkdldEZsYWdzKCk7XG5cbiAgICAgICAgbGV0IHJlY3RJbmZvID0gdGhpcy5KUi5nZXRSb3RhdGVkQW5ub3RSZWN0KGFubm90KTtcbiAgICAgICAgbGV0IHJlY3RMZWZ0ID0gcmVjdEluZm8ubGVmdDtcbiAgICAgICAgbGV0IHJlY3RSaWdodCA9IHJlY3RJbmZvLnJpZ2h0O1xuICAgICAgICBsZXQgcmVjdFRvcCA9IHJlY3RJbmZvLnRvcDtcbiAgICAgICAgbGV0IHJlY3RCb3R0b20gPSByZWN0SW5mby5ib3R0b207XG4gICAgICAgIGxldCByb3RhdGUgPSByZWN0SW5mby5yb3RhdGU7XG4gICAgICAgIFxuICAgICAgICBsZXQgdHlwZUluRW5naW5lID0gYW5ub3QuR2V0VHlwZSgpLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgICAgIGxldCB0eXBlID0gdGhpcy5nZXRUeXBlKCk7XG5cbiAgICAgICAgbGV0IGJvcmRlckluZm8gPSBhbm5vdC5HZXRCb3JkZXJJbmZvKCk7XG4gICAgICAgIGxldCBkYXNoZXMgPSBbXTtcbiAgICAgICAgZm9yKGxldCBpbmRleCA9IDA7aW5kZXg8Ym9yZGVySW5mby5kYXNoZXMuR2V0U2l6ZSgpO2luZGV4Kyspe1xuICAgICAgICAgICAgZGFzaGVzLnB1c2goYm9yZGVySW5mby5kYXNoZXMuR2V0QXQoaW5kZXgpKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgbGV0IGlkID0gYW5ub3QuR2V0VW5pcXVlSUQoKS50b1N0cmluZygpO1xuICAgICAgICAvL2lmICghaWQgJiYgdHlwZSE9XCJXYXRlcm1hcmtcIikge1xuICAgICAgICAvLyAgICBpZCA9IGd1aWQoKTtcbiAgICAgICAgLy8gICAgdGhpcy5zZXRVbmlxdWVJZChpZCk7XG4gICAgICAgIC8vfVxuICAgICAgICBsZXQgYm9yZGVyV2lkdGggPSBib3JkZXJJbmZvLndpZHRoO1xuXG4gICAgICAgIGxldCBib3JkZXJDb2xvciA9IGFubm90LkdldEJvcmRlckNvbG9yKCk7XG4gICAgICAgIGlmKGJvcmRlckNvbG9yID09PSAwKSB7XG4gICAgICAgICAgICBib3JkZXJDb2xvciA9IC0xO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYm9yZGVyQ29sb3IgPSBib3JkZXJDb2xvciAmIDB4RkZGRkZGOyBcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IG1vZGlmaWVkRGF0ZVRpbWU7XG4gICAgICAgIGxldCBtb2RpZmllZFRpbWVzdGFtcCA9IC0xO1xuICAgICAgICBpZih0eXBlICE9IFwicG9wdXBcIil7XG4gICAgICAgICAgICB0cnl7XG4gICAgICAgICAgICAgICAgbW9kaWZpZWREYXRlVGltZT0gYW5ub3QuR2V0TW9kaWZpZWREYXRlVGltZSgpO1xuICAgICAgICAgICAgICAgIGlmKG1vZGlmaWVkRGF0ZVRpbWUgJiYgbW9kaWZpZWREYXRlVGltZS5Jc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kaWZpZWREYXRlVGltZSA9IG1vZGlmaWVkRGF0ZVRpbWUuVG9VVENUaW1lKCk7XG4gICAgICAgICAgICAgICAgICAgIG1vZGlmaWVkVGltZXN0YW1wID0gRGF0ZS5VVEMoXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RpZmllZERhdGVUaW1lLnllYXIsIFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kaWZpZWREYXRlVGltZS5tb250aCAtIDEsIFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kaWZpZWREYXRlVGltZS5kYXksIFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kaWZpZWREYXRlVGltZS5ob3VyLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGlmaWVkRGF0ZVRpbWUubWludXRlLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGlmaWVkRGF0ZVRpbWUuc2Vjb25kLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGlmaWVkRGF0ZVRpbWUubWlsbGlzZWNvbmRzXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc05hTiAoZXJyKSkge1xuICAgICAgICAgICAgICAgICAgICBlcnIgPSB0aGlzLmVuZ2luZS5nZXRFcnJvckNvZGUgKGVycik7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4gKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGxldCBkaWN0ID0gYW5ub3QuR2V0RGljdCAoKTtcbiAgICAgICAgbGV0IG9iak51bWJlciA9IGRpY3QuR2V0T2JqTnVtKCk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC8vIHByb3BlcnR5OiB7XG4gICAgICAgICAgICAvLyAgICAgbW9kaWZpZWREYXRlOiBhbm5vdC5Qcm9wZXJ0eS5lX1Byb3BlcnR5TW9kaWZpZWREYXRlLFxuICAgICAgICAgICAgLy8gICAgIGNyZWF0aW9uRGF0ZTogYW5ub3QuUHJvcGVydHkuZV9Qcm9wZXJ0eUNyZWF0aW9uRGF0ZSxcbiAgICAgICAgICAgIC8vICAgICBib3JkZXJDb2xvcjogYW5ub3QuUHJvcGVydHkuZV9Qcm9wZXJ0eUJvcmRlckNvbG9yLFxuICAgICAgICAgICAgLy8gICAgIGZpbGxDb2xvcjogYW5ub3QuUHJvcGVydHkuZV9Qcm9wZXJ0eUZpbGxDb2xvcixcbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICBvYmpOdW1iZXIsXG4gICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICB0eXBlSW5FbmdpbmU6IHR5cGVJbkVuZ2luZSxcbiAgICAgICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgICAgICB0eXBlQWxpYXM6IHR5cGUsXG4gICAgICAgICAgICByZWN0OiB7XG4gICAgICAgICAgICAgICAgdG9wOiByZWN0VG9wLFxuICAgICAgICAgICAgICAgIHJpZ2h0OiByZWN0UmlnaHQsXG4gICAgICAgICAgICAgICAgYm90dG9tOiByZWN0Qm90dG9tLFxuICAgICAgICAgICAgICAgIGxlZnQ6IHJlY3RMZWZ0LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlY3RJc0VtcHR5OiByZWN0VG9wID09PSByZWN0UmlnaHQgJiYgcmVjdFJpZ2h0ID09PSByZWN0Qm90dG9tICYmIHJlY3RCb3R0b20gPT09IHJlY3RMZWZ0LFxuICAgICAgICAgICAgaXNNYXJrdXA6IGFubm90LklzTWFya3VwKCksXG4gICAgICAgICAgICBpc0RlbGV0ZWQ6IGFubm90LmlzRGVsZXRlZCgpLFxuICAgICAgICAgICAgaW5kZXg6IGFubm90LkdldEluZGV4KCksXG4gICAgICAgICAgICBjb250ZW50OiBhbm5vdC5HZXRDb250ZW50KCkudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGJvcmRlckNvbG9yOiBib3JkZXJDb2xvcixcbiAgICAgICAgICAgIGJvcmRlckluZm86e1xuICAgICAgICAgICAgICAgIGNsb3VkSW50ZW5zaXR5OiBib3JkZXJJbmZvLmNsb3VkX2ludGVuc2l0eSxcbiAgICAgICAgICAgICAgICBkYXNoUGhhc2U6IGJvcmRlckluZm8uZGFzaF9waGFzZSxcbiAgICAgICAgICAgICAgICBkYXNoZXM6IGRhc2hlcyxcbiAgICAgICAgICAgICAgICBzdHlsZTogYm9yZGVySW5mby5zdHlsZS52YWx1ZSxcbiAgICAgICAgICAgICAgICB3aWR0aDogYm9yZGVyV2lkdGhcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmbGFnLFxuICAgICAgICAgICAgbW9kaWZpZWRUaW1lc3RhbXBcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZ2V0SWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFubm90LkdldFVuaXF1ZUlEKCkudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgZ2V0SW5kZXgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFubm90LkdldEluZGV4KCk7XG4gICAgfVxuICAgIGdldFN1bW1hcnkgKGFubm90ID0gdGhpcy5hbm5vdCxpZ25vcmVJRCkge1xuICAgICAgICBsZXQgaWQgPSBhbm5vdC5HZXRVbmlxdWVJRCgpLnRvU3RyaW5nKCk7XG4gICAgICAgIGlmICghaWQgJiYgIWlnbm9yZUlEKSB7XG4gICAgICAgICAgICBpZCA9IGd1aWQoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0VW5pcXVlSWQoaWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICBpbmRleDogYW5ub3QuR2V0SW5kZXgoKSxcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRUeXBlKCl7XG4gICAgICAgIGxldCB0eXBlSW5FbmdpbmUgPSB0aGlzLmFubm90LkdldFR5cGUoKS5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgICAgICBsZXQgdHlwZSA9IHR5cGVJbkVuZ2luZS5yZXBsYWNlKC9eQW5ub3RUeXBlX2VfLywgJycpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmICh0eXBlID09PSAnbm90ZScpIHtcbiAgICAgICAgICAgIHR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgfVxuICAgIHNldENvbnRlbnQgKGNvbnRlbnQpIHtcbiAgICAgICAgbGV0IGFubm90ID0gdGhpcy5hbm5vdDtcbiAgICAgICAgYW5ub3QuU2V0Q29udGVudChuZXcgdGhpcy5lbmdpbmUuV1N0cmluZyhjb250ZW50KSk7XG4gICAgICAgIHJldHVybiBhbm5vdC5HZXRVbmlxdWVJRCgpLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjb2xvciBudW1iZXIgdHlwZSBjb2xvciB2YWx1ZSBpbiBSUkdHQkIgZm9ybWF0XG4gICAgICogQG1lbWJlcm9mIEFubm90XG4gICAgICovXG4gICAgc2V0Qm9yZGVyQ29sb3IgKGNvbG9yKSB7XG4gICAgICAgIGxldCBhbm5vdCA9IHRoaXMuYW5ub3Q7XG4gICAgICAgIGlmKGNvbG9yIDwgMCkge1xuICAgICAgICAgICAgY29sb3IgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhbm5vdC5Jc0dyb3VwZWQgJiYgYW5ub3QuSXNHcm91cGVkKCkpIHtcbiAgICAgICAgICAgIGxldCBncm91cEVsZW1lbnRzID0gYW5ub3QuR2V0R3JvdXBFbGVtZW50cygpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IGdyb3VwRWxlbWVudHMuR2V0U2l6ZSgpOyBpLS07KSB7XG4gICAgICAgICAgICAgICAgbGV0IG1hcmt1cCA9IGdyb3VwRWxlbWVudHMuR2V0QXQoaSk7XG4gICAgICAgICAgICAgICAgbWFya3VwLlNldEJvcmRlckNvbG9yKGNvbG9yKTtcbiAgICAgICAgICAgICAgICBtYXJrdXAuUmVzZXRBcHBlYXJhbmNlU3RyZWFtKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhbm5vdC5TZXRCb3JkZXJDb2xvcihjb2xvcik7XG4gICAgICAgICAgICBhbm5vdC5SZXNldEFwcGVhcmFuY2VTdHJlYW0oKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZW1vdmUgKCkge1xuICAgICAgICBsZXQgaWQgPSB0aGlzLmdldElkKCk7XG4gICAgICAgIHJldHVybiB0aGlzLnBkZlBhZ2UucmVtb3ZlQW5ub3RCeUlkKGlkKS50aGVuKChpc1N1Y2Nlc3MpID0+IHtcbiAgICAgICAgICAgIGlmIChpc1N1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW2lkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHNldFJlY3QocmVjdCl7XG4gICAgICAgIGNvbnN0IGRlc3RpbmF0aW9uID0gbmV3IHRoaXMuZW5naW5lLkNGWF9GbG9hdFJlY3QocmVjdC5sZWZ0LHJlY3QuYm90dG9tLHJlY3QucmlnaHQscmVjdC50b3ApO1xuICAgICAgICByZXR1cm4gdGhpcy5hbm5vdC5Nb3ZlKGRlc3RpbmF0aW9uKSAmJiB0aGlzLmFubm90LlJlc2V0QXBwZWFyYW5jZVN0cmVhbSgpO1xuICAgIH1cbiAgICBtb3ZlKG9mZnNldExlZnQsIG9mZnNldFRvcCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogQHR5cGUge0dTREtDaXJjbGVBbm5vdH1cbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IGFubm90ID0gdGhpcy5hbm5vdDtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGRlc3RpbmF0aW9uID0gUmVjdE9wZXJhdG9yLm9uKGFubm90LkdldFJlY3QoKSkgLy9cbiAgICAgICAgICAgIC5tb3ZlKG9mZnNldExlZnQsIG9mZnNldFRvcCkgLy9cbiAgICAgICAgICAgIC5leHRyYWN0KCk7XG4gICAgICAgIHJldHVybiB0aGlzLmFubm90Lk1vdmUoZGVzdGluYXRpb24pICYmIHRoaXMuYW5ub3QuUmVzZXRBcHBlYXJhbmNlU3RyZWFtKCk7XG4gICAgfVxuICAgIG1vdmVUbyhsZWZ0LCB0b3ApIHtcbiAgICAgICAgY29uc3QgcmVjdCA9IHRoaXMuSlIuZ2V0Um90YXRlZEFubm90UmVjdCh0aGlzLmFubm90KTtcbiAgICAgICAgdGhpcy5tb3ZlKGxlZnQgLSByZWN0LmxlZnQsIHRvcCAtIHJlY3QudG9wKTtcbiAgICAgICAgcmV0dXJuIFt0aGlzLmdldElkKCldO1xuICAgIH1cbiAgICBzZXRCb3JkZXJTdHlsZShzdHlsZSxzdHlsZVBhcmFtKXtcbiAgICAgICAgbGV0IGJvcmRlckluZm8gPSB0aGlzLmFubm90LkdldEJvcmRlckluZm8oKTtcbiAgICAgICAgbGV0IEJvcmRlckluZm9TdHlsZSA9IHRoaXMuZW5naW5lLkJvcmRlckluZm9TdHlsZTtcbiAgICAgICAgc3dpdGNoKHN0eWxlKXtcbiAgICAgICAgICAgIGNhc2UgQk9SREVSX1NUWUxFLkRBU0hFRDpcbiAgICAgICAgICAgICAgICBib3JkZXJJbmZvLnN0eWxlID0gQm9yZGVySW5mb1N0eWxlLnZhbHVlc1tCb3JkZXJJbmZvU3R5bGUuZV9EYXNoZWQudmFsdWVdO1xuICAgICAgICAgICAgICAgIGxldCBkYXNocyA9IG5ldyB0aGlzLmVuZ2luZS5GbG9hdEFycmF5KCk7XG4gICAgICAgICAgICAgICAgZGFzaHMuU2V0U2l6ZShzdHlsZVBhcmFtLmxlbmd0aCwtMSk7XG4gICAgICAgICAgICAgICAgZm9yKGxldCBlbGVJbmRleCA9IDA7ZWxlSW5kZXg8c3R5bGVQYXJhbS5sZW5ndGg7ZWxlSW5kZXgrKyl7XG4gICAgICAgICAgICAgICAgICAgIGRhc2hzLlNldEF0KGVsZUluZGV4LHN0eWxlUGFyYW1bZWxlSW5kZXhdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYm9yZGVySW5mby5kYXNoZXMgPSBkYXNocztcbiAgICAgICAgICAgICAgICBib3JkZXJJbmZvLmRhc2hfcGhhc2UgPSAwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEJPUkRFUl9TVFlMRS5CRVZFTEVEOlxuICAgICAgICAgICAgYm9yZGVySW5mby5zdHlsZSA9IEJvcmRlckluZm9TdHlsZS52YWx1ZXNbQm9yZGVySW5mb1N0eWxlLmVfQmV2ZWxlZC52YWx1ZV07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgQk9SREVSX1NUWUxFLlNPTElEOlxuICAgICAgICAgICAgYm9yZGVySW5mby5zdHlsZSA9IEJvcmRlckluZm9TdHlsZS52YWx1ZXNbQm9yZGVySW5mb1N0eWxlLmVfU29saWQudmFsdWVdO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEJPUkRFUl9TVFlMRS5DTE9VRFk6XG4gICAgICAgICAgICBib3JkZXJJbmZvLnN0eWxlID0gQm9yZGVySW5mb1N0eWxlLnZhbHVlc1tCb3JkZXJJbmZvU3R5bGUuZV9DbG91ZHkudmFsdWVdO1xuICAgICAgICAgICAgYm9yZGVySW5mby5jbG91ZF9pbnRlbnNpdHkgPSBzdHlsZVBhcmFtO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gXG4gICAgICAgIHRoaXMuYW5ub3QuU2V0Qm9yZGVySW5mbyhib3JkZXJJbmZvKTtcbiAgICAgICAgdGhpcy5hbm5vdC5SZXNldEFwcGVhcmFuY2VTdHJlYW0oKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHNldEJvcmRlcldpZHRoKHdpZHRoKXtcbiAgICAgICAgdHJ5e1xuICAgICAgICAgICAgbGV0IGJvcmRlckluZm8gPSB0aGlzLmFubm90LkdldEJvcmRlckluZm8oKTtcbiAgICAgICAgICAgIGJvcmRlckluZm8ud2lkdGg9cGFyc2VJbnQod2lkdGgpO1xuICAgICAgICAgICAgdGhpcy5hbm5vdC5TZXRCb3JkZXJJbmZvKGJvcmRlckluZm8pO1xuICAgICAgICAgICAgdGhpcy5hbm5vdC5SZXNldEFwcGVhcmFuY2VTdHJlYW0oKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBpZiAoIWlzTmFOKGVycikpIHtcbiAgICAgICAgICAgICAgICAvLyBqcyBkaXJlY3RseSB0aHJvd3MgZXJyb3IgY29kZSwgd2hpbGUgYysrIHRocm93cyBleGNlcHRpb25cbiAgICAgICAgICAgICAgICBlcnIgPSBnc2RrLmdldEVycm9yQ29kZShlcnIpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsb2dnZXIud2FybihlcnIpXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBzZXRNb2RpZmllZERhdGVUaW1lIChkYXRlKSB7XG4gICAgICAgIGNvbnN0IGRhdGVUaW1lID0gdGhpcy5Ub0RhdGVUaW1lKGRhdGUpO1xuICAgICAgICB0aGlzLmFubm90LlNldE1vZGlmaWVkRGF0ZVRpbWUoZGF0ZVRpbWUpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgVG9EYXRlVGltZShkKXtcbiAgICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKGQpO1xuICAgICAgICBsZXQgeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgbGV0IG1vbnRoID0gZGF0ZS5nZXRNb250aCgpICsgMTtcbiAgICAgICAgbGV0IGRheSA9IGRhdGUuZ2V0RGF0ZSgpO1xuICAgICAgICBsZXQgaG91ciA9IGRhdGUuZ2V0SG91cnMoKTtcbiAgICAgICAgbGV0IG1pbnV0ZSA9IGRhdGUuZ2V0TWludXRlcygpO1xuICAgICAgICBsZXQgc2Vjb25kID0gZGF0ZS5nZXRTZWNvbmRzKCk7XG4gICAgICAgIGxldCBtaWxsaSA9IGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCk7XG4gICAgICAgIGxldCBob3VyVGltZVpvbmVPZmZzZXQgPSAtZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpLzYwO1xuICAgICAgICBsZXQgbWludXRlVGltZVpvbmVPZmZzZXQgPSAwO1xuICAgICAgICBjb25zdCBkYXRlVGltZSA9IG5ldyB0aGlzLmVuZ2luZS5EYXRlVGltZSh5ZWFyLG1vbnRoLGRheSxob3VyLG1pbnV0ZSxzZWNvbmQsbWlsbGksaG91clRpbWVab25lT2Zmc2V0LG1pbnV0ZVRpbWVab25lT2Zmc2V0KTtcbiAgICAgICAgcmV0dXJuIGRhdGVUaW1lO1xuICAgIH1cbiAgICBzZXRGbGFncyhmbGFnKXtcbiAgICAgICAgdGhpcy5hbm5vdC5TZXRGbGFncyhmbGFnKTtcbiAgICB9XG4gICAgc2V0VW5pcXVlSWQgKG5hbWUpIHtcbiAgICAgICAgdGhpcy5hbm5vdC5TZXRVbmlxdWVJRChuZXcgdGhpcy5lbmdpbmUuV1N0cmluZyhuYW1lKSk7XG4gICAgfVxuICAgIGNyZWF0ZSAoanNvbikge1xuICAgICAgICBsZXQgY29sb3I7XG4gICAgICAgIGlmIChjb2xvciA9IGpzb24uY29sb3IpIHtcbiAgICAgICAgICAgIGNvbG9yID0gcGFyc2VJbnQoY29sb3IsIDE2KTtcbiAgICAgICAgICAgIHRoaXMuc2V0Qm9yZGVyQ29sb3IoY29sb3IpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzdHlsZTtcbiAgICAgICAgaWYgKHN0eWxlID0ganNvbi5zdHlsZSkge1xuICAgICAgICAgICAgdGhpcy5zZXRCb3JkZXJTdHlsZShzdHlsZSwganNvbi5pbnRlbnNpdHkpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBjb250ZW50cztcbiAgICAgICAgaWYgKGNvbnRlbnRzID0ganNvbi5jb250ZW50cykge1xuICAgICAgICAgICAgdGhpcy5zZXRDb250ZW50KGNvbnRlbnRzKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZGF0ZTtcbiAgICAgICAgaWYgKGRhdGUgPSBqc29uLmRhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0TW9kaWZpZWREYXRlVGltZShkYXRlKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbmFtZTtcbiAgICAgICAgaWYgKG5hbWUgPSBqc29uLm5hbWUpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0VW5pcXVlSWQobmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNldFVuaXF1ZUlkKGd1aWQoKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGpzb24uZGljdHMpIHtcbiAgICAgICAgICAgIGxldCBkaWN0cyA9IGpzb24uZGljdHM7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEB0eXBlIEdTREsuUERGRGljdGlvbmFyeVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBsZXQgZGljdCA9IHRoaXMuYW5ub3QuR2V0RGljdCgpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSBpbiBkaWN0cykge1xuICAgICAgICAgICAgICAgIGRpY3QuU2V0QXRTdHJpbmcobmV3IHRoaXMuZW5naW5lLlN0cmluZyhpKSwgbmV3IHRoaXMuZW5naW5lLlN0cmluZyhkaWN0c1tpXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbdGhpc107XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBBbm5vdDsiLCJpbXBvcnQgQW5ub3QgZnJvbSAnLi9Bbm5vdCc7XHJcbmltcG9ydCBNYXJrdXBBbm5vdCBmcm9tICcuL01hcmt1cEFubm90JztcclxuaW1wb3J0IFRleHRNYXJrdXBBbm5vdCBmcm9tICcuL1RleHRNYXJrdXBBbm5vdCc7XHJcbmltcG9ydCBIaWdobGlnaHQgZnJvbSAnLi9IaWdobGlnaHQnO1xyXG5pbXBvcnQgU3RyaWtlT3V0IGZyb20gJy4vU3RyaWtlT3V0JztcclxuaW1wb3J0IFVuZGVybGluZSBmcm9tICcuL1VuZGVybGluZSc7XHJcbmltcG9ydCBMaW5lIGZyb20gJy4vTGluZSc7XHJcbmltcG9ydCBQb2x5TGluZSBmcm9tICcuL1BvbHlMaW5lJ1xyXG5pbXBvcnQgUG9seWdvbiBmcm9tICcuL1BvbHlnb24nXHJcbmltcG9ydCBTcXVpZ2dseSBmcm9tICcuL1NxdWlnZ2x5JztcclxuaW1wb3J0IE5vdGUgZnJvbSAnLi9Ob3RlJztcclxuaW1wb3J0IENpcmNsZSBmcm9tICcuL0NpcmNsZSc7XHJcbmltcG9ydCBGaWxlQXR0YWNobWVudCBmcm9tICcuL0ZpbGVBdHRhY2htZW50JztcclxuaW1wb3J0IENhcmV0IGZyb20gJy4vQ2FyZXQnO1xyXG5pbXBvcnQgU3F1YXJlIGZyb20gJy4vU3F1YXJlJztcclxuaW1wb3J0IEZyZWVUZXh0IGZyb20gJy4vRnJlZVRleHQnO1xyXG5pbXBvcnQgU3RhbXAgZnJvbSAnLi9TdGFtcCc7XHJcbmltcG9ydCBMaW5rIGZyb20gJy4vTGluayc7XHJcbmltcG9ydCBJbmsgZnJvbSAnLi9JbmsnO1xyXG5pbXBvcnQgV2lkZ2V0IGZyb20gJy4vV2lkZ2V0JztcclxuaW1wb3J0IFNjcmVlbiBmcm9tICcuL1NjcmVlbic7XHJcbmltcG9ydCBQb3B1cCBmcm9tICcuL1BvcHVwJztcclxuaW1wb3J0IFJlZGFjdCBmcm9tICcuL1JlZGFjdCc7XHJcblxyXG4vKlxyXG4gZV9Vbmtub3duVHlwZSBcdFx0QW5ub3RhdGlvbiB0eXBlOiB1bmtub3duLlxyXG4gZV9Ob3RlIFx0ICAgIFx0QW5ub3RhdGlvbiB0eXBlOiBub3RlIGFubm90YXRpb24sIHdoaWNoIGlzIGp1c3QgXCJUZXh0XCIgYW5ub3RhdGlvbiAtIG9uZSBvZiBzdGFuZGFyZCBhbm5vdGF0aW9uIGluIDxQREYgcmVmZXJlbmNlIDEuNz4uXHJcbiBlX0xpbmsgXHQgICAgXHRBbm5vdGF0aW9uIHR5cGU6IGxpbmsgYW5ub3RhdGlvbi4gT25lIG9mIHN0YW5kYXJkIGFubm90YXRpb24gaW4gPFBERiByZWZlcmVuY2UgMS43Pi5cclxuIGVfRnJlZVRleHQgXHRcdEFubm90YXRpb24gdHlwZTogZnJlZSB0ZXh0IGFubm90YXRpb24uIE9uZSBvZiBzdGFuZGFyZCBhbm5vdGF0aW9uIGluIDxQREYgcmVmZXJlbmNlIDEuNz4uXHJcbiBlX0xpbmUgXHQgICAgXHRBbm5vdGF0aW9uIHR5cGU6IGxpbmUgYW5ub3RhdGlvbi4gT25lIG9mIHN0YW5kYXJkIGFubm90YXRpb24gaW4gPFBERiByZWZlcmVuY2UgMS43Pi5cclxuIGVfU3F1YXJlIFx0ICAgIFx0QW5ub3RhdGlvbiB0eXBlOiBzcXVhcmUgYW5ub3RhdGlvbi4gT25lIG9mIHN0YW5kYXJkIGFubm90YXRpb24gaW4gPFBERiByZWZlcmVuY2UgMS43Pi5cclxuIGVfQ2lyY2xlIFx0ICAgIFx0QW5ub3RhdGlvbiB0eXBlOiBjaXJjbGUgYW5ub3RhdGlvbi4gT25lIG9mIHN0YW5kYXJkIGFubm90YXRpb24gaW4gPFBERiByZWZlcmVuY2UgMS43Pi5cclxuIGVfUG9seWdvbiBcdCAgICBcdEFubm90YXRpb24gdHlwZTogcG9seWdvbiBhbm5vdGF0aW9uLiBPbmUgb2Ygc3RhbmRhcmQgYW5ub3RhdGlvbiBpbiA8UERGIHJlZmVyZW5jZSAxLjc+LlxyXG4gZV9Qb2x5TGluZSBcdFx0QW5ub3RhdGlvbiB0eXBlOiBwb2x5bGluZSBhbm5vdGF0aW9uLiBPbmUgb2Ygc3RhbmRhcmQgYW5ub3RhdGlvbiBpbiA8UERGIHJlZmVyZW5jZSAxLjc+LlxyXG4gZV9IaWdobGlnaHQgXHRcdEFubm90YXRpb24gdHlwZTogaGlnaGxpZ2h0IGFubm90YXRpb24uIE9uZSBvZiBzdGFuZGFyZCBhbm5vdGF0aW9uIGluIDxQREYgcmVmZXJlbmNlIDEuNz4uXHJcbiBlX1VuZGVybGluZSBcdFx0QW5ub3RhdGlvbiB0eXBlOiB1bmRlcmxpbmUgYW5ub3RhdGlvbi4gT25lIG9mIHN0YW5kYXJkIGFubm90YXRpb24gaW4gPFBERiByZWZlcmVuY2UgMS43Pi5cclxuIGVfU3F1aWdnbHkgXHRcdEFubm90YXRpb24gdHlwZTogc3F1aWdnbHkgYW5ub3RhdGlvbi4gT25lIG9mIHN0YW5kYXJkIGFubm90YXRpb24gaW4gPFBERiByZWZlcmVuY2UgMS43Pi5cclxuIGVfU3RyaWtlT3V0IFx0XHRBbm5vdGF0aW9uIHR5cGU6IHN0cmlrZW91dCBhbm5vdGF0aW9uLiBPbmUgb2Ygc3RhbmRhcmQgYW5ub3RhdGlvbiBpbiA8UERGIHJlZmVyZW5jZSAxLjc+LlxyXG4gZV9TdGFtcCBcdCAgICBcdEFubm90YXRpb24gdHlwZTogc3RhbXAgYW5ub3RhdGlvbi4gT25lIG9mIHN0YW5kYXJkIGFubm90YXRpb24gaW4gPFBERiByZWZlcmVuY2UgMS43Pi5cclxuIGVfQ2FyZXQgXHQgICAgXHRBbm5vdGF0aW9uIHR5cGU6IGNhcmV0IGFubm90YXRpb24uIE9uZSBvZiBzdGFuZGFyZCBhbm5vdGF0aW9uIGluIDxQREYgcmVmZXJlbmNlIDEuNz4uXHJcbiBlX0luayBcdCAgICAgICAgXHRBbm5vdGF0aW9uIHR5cGU6IGluayBhbm5vdGF0aW9uLiBPbmUgb2Ygc3RhbmRhcmQgYW5ub3RhdGlvbiBpbiA8UERGIHJlZmVyZW5jZSAxLjc+LlxyXG4gZV9QU0luayBcdCAgICBcdEFubm90YXRpb24gdHlwZTogcHJlc3N1cmUgc2Vuc2l0aXZlIGluayBhbm5vdGF0aW9uLlxyXG4gZV9GaWxlQXR0YWNobWVudCBcdEFubm90YXRpb24gdHlwZTogZmlsZSBhdHRhY2htZW50IGFubm90YXRpb24uIE9uZSBvZiBzdGFuZGFyZCBhbm5vdGF0aW9uIGluIDxQREYgcmVmZXJlbmNlIDEuNz4uXHJcbiBlX1NvdW5kIFx0ICAgIFx0QW5ub3RhdGlvbiB0eXBlOiBzb3VuZCBhbm5vdGF0aW9uLiBPbmUgb2Ygc3RhbmRhcmQgYW5ub3RhdGlvbiBpbiA8UERGIHJlZmVyZW5jZSAxLjc+LlxyXG4gZV9Nb3ZpZSBcdCAgICBcdEFubm90YXRpb24gdHlwZTogbW92aWUgYW5ub3RhdGlvbi4gT25lIG9mIHN0YW5kYXJkIGFubm90YXRpb24gaW4gPFBERiByZWZlcmVuY2UgMS43Pi5cclxuIGVfV2lkZ2V0IFx0ICAgIFx0QW5ub3RhdGlvbiB0eXBlOiB3aWRnZXQgYW5ub3RhdGlvbi4gT25lIG9mIHN0YW5kYXJkIGFubm90YXRpb24gaW4gPFBERiByZWZlcmVuY2UgMS43Pi5cclxuICAgICBOb3RlXHJcbiAgICAgRm94aXQgUERGIFNESyB0cmVhdHMgd2lkZ2V0IGFubm90YXRpb24gYXMgZm9ybSBjb250cm9sLlxyXG4gZV9TY3JlZW4gXHQgICAgXHRBbm5vdGF0aW9uIHR5cGU6IHNjcmVlbiBhbm5vdGF0aW9uLiBPbmUgb2Ygc3RhbmRhcmQgYW5ub3RhdGlvbiBpbiA8UERGIHJlZmVyZW5jZSAxLjc+LlxyXG4gZV9QcmludGVyTWFyayBcdFx0QW5ub3RhdGlvbiB0eXBlOiBwcmludGVyJ3MgbWFyayBhbm5vdGF0aW9uLiBPbmUgb2Ygc3RhbmRhcmQgYW5ub3RhdGlvbiBpbiA8UERGIHJlZmVyZW5jZSAxLjc+LlxyXG4gZV9UcmFwTmV0IFx0ICAgIFx0QW5ub3RhdGlvbiB0eXBlOiB0cmFwIG5ldHdvcmsgYW5ub3RhdGlvbi4gT25lIG9mIHN0YW5kYXJkIGFubm90YXRpb24gaW4gPFBERiByZWZlcmVuY2UgMS43Pi5cclxuIGVfV2F0ZXJtYXJrIFx0XHRBbm5vdGF0aW9uIHR5cGU6IHdhdGVybWFyayBhbm5vdGF0aW9uLiBPbmUgb2Ygc3RhbmRhcmQgYW5ub3RhdGlvbiBpbiA8UERGIHJlZmVyZW5jZSAxLjc+LlxyXG4gZV8zRCBcdCAgICAgICAgXHRBbm5vdGF0aW9uIHR5cGU6IDNEIGFubm90YXRpb24uIE9uZSBvZiBzdGFuZGFyZCBhbm5vdGF0aW9uIGluIDxQREYgcmVmZXJlbmNlIDEuNz4uXHJcbiBlX1BvcHVwIFx0ICAgIFx0QW5ub3RhdGlvbiB0eXBlOiBwb3AtdXAgYW5ub3RhdGlvbi4gT25lIG9mIHN0YW5kYXJkIGFubm90YXRpb24gaW4gPFBERiByZWZlcmVuY2UgMS43Pi5cclxuIGVfUmVkYWN0IFx0ICAgIFx0QW5ub3RhdGlvbiB0eXBlOiByZWRhY3QgYW5ub3RhdGlvbi5cclxuICovXHJcbmNsYXNzIEFubm90TWFuYWdlciB7XHJcbiAgICBjb25zdHJ1Y3RvcihlbmdpbmUpIHtcclxuICAgICAgICB0aGlzLmVuZ2luZSA9IGVuZ2luZTtcclxuICAgIH1cclxuICAgIGdldCAoYW5ub3QsIHBkZlBhZ2UpIHtcclxuICAgICAgICBsZXQgZW5naW5lID0gdGhpcy5lbmdpbmU7XHJcbiAgICAgICAgbGV0IEFubm90VHlwZSA9IGVuZ2luZS5Bbm5vdFR5cGU7XHJcbiAgICAgICAgc3dpdGNoIChhbm5vdC5HZXRUeXBlKCkpIHtcclxuICAgICAgICAgICAgY2FzZSBBbm5vdFR5cGUuZV9IaWdobGlnaHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEhpZ2hsaWdodChhbm5vdCwgcGRmUGFnZSk7XHJcbiAgICAgICAgICAgIGNhc2UgQW5ub3RUeXBlLmVfU3F1aWdnbHk6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFNxdWlnZ2x5KGFubm90LHBkZlBhZ2UpO1xyXG4gICAgICAgICAgICBjYXNlIEFubm90VHlwZS5lX1N0cmlrZU91dDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU3RyaWtlT3V0KGFubm90LCBwZGZQYWdlKTtcclxuICAgICAgICAgICAgY2FzZSBBbm5vdFR5cGUuZV9VbmRlcmxpbmU6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFVuZGVybGluZShhbm5vdCwgcGRmUGFnZSk7XHJcbiAgICAgICAgICAgIGNhc2UgQW5ub3RUeXBlLmVfTGluZTpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgTGluZShhbm5vdCxwZGZQYWdlKTtcclxuICAgICAgICAgICAgY2FzZSBBbm5vdFR5cGUuZV9Qb2x5TGluZTpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUG9seUxpbmUoYW5ub3QscGRmUGFnZSk7XHJcbiAgICAgICAgICAgIGNhc2UgQW5ub3RUeXBlLmVfRmlsZUF0dGFjaG1lbnQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEZpbGVBdHRhY2htZW50KGFubm90LHBkZlBhZ2UpO1xyXG4gICAgICAgICAgICBjYXNlIEFubm90VHlwZS5lX05vdGU6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IE5vdGUoYW5ub3QsIHBkZlBhZ2UpO1xyXG4gICAgICAgICAgICBjYXNlIEFubm90VHlwZS5lX0NpcmNsZTpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ2lyY2xlKGFubm90LCBwZGZQYWdlKTtcclxuICAgICAgICAgICAgY2FzZSBBbm5vdFR5cGUuZV9DYXJldDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ2FyZXQoYW5ub3QsIHBkZlBhZ2UpO1xyXG4gICAgICAgICAgICBjYXNlIEFubm90VHlwZS5lX1BvbHlnb246XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFBvbHlnb24oYW5ub3QscGRmUGFnZSk7XHJcbiAgICAgICAgICAgIGNhc2UgQW5ub3RUeXBlLmVfRnJlZVRleHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEZyZWVUZXh0KGFubm90LCBwZGZQYWdlKTtcclxuICAgICAgICAgICAgY2FzZSBBbm5vdFR5cGUuZV9TcXVhcmU6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFNxdWFyZShhbm5vdCwgcGRmUGFnZSk7XHJcbiAgICAgICAgICAgIGNhc2UgQW5ub3RUeXBlLmVfSW5rOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBJbmsoYW5ub3QsIHBkZlBhZ2UpO1xyXG4gICAgICAgICAgICBjYXNlIEFubm90VHlwZS5lX1N0YW1wOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTdGFtcChhbm5vdCwgcGRmUGFnZSk7XHJcbiAgICAgICAgICAgIGNhc2UgQW5ub3RUeXBlLmVfTGluazpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgTGluayhhbm5vdCwgcGRmUGFnZSk7XHJcbiAgICAgICAgICAgIGNhc2UgQW5ub3RUeXBlLmVfU2NyZWVuOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTY3JlZW4oYW5ub3QsIHBkZlBhZ2UpO1xyXG4gICAgICAgICAgICBjYXNlIEFubm90VHlwZS5lX1dpZGdldDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgV2lkZ2V0KGFubm90LCBwZGZQYWdlKTtcclxuICAgICAgICAgICAgY2FzZSBBbm5vdFR5cGUuZV9Qb3B1cDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUG9wdXAoYW5ub3QsIHBkZlBhZ2UpO1xyXG4gICAgICAgICAgICBjYXNlIEFubm90VHlwZS5lX1JlZGFjdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVkYWN0KGFubm90LCBwZGZQYWdlKTtcclxuICAgICAgICAgICAgZGVmYXVsdCA6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEFubm90KGFubm90LCBwZGZQYWdlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEFubm90TWFuYWdlcjsiLCJpbXBvcnQgTWFya3VwQW5ub3QgZnJvbSAnLi9NYXJrdXBBbm5vdCc7XG5cbmNsYXNzIENhcmV0IGV4dGVuZHMgTWFya3VwQW5ub3Qge1xuICAgIGNvbnN0cnVjdG9yIChhbm5vdCwgcGRmUGFnZSkge1xuICAgICAgICBzdXBlcihhbm5vdCwgcGRmUGFnZSk7XG4gICAgICAgIHRoaXMuYW5ub3QgPSBuZXcgdGhpcy5lbmdpbmUuQ2FyZXQodGhpcy5hbm5vdCk7XG4gICAgfVxuXG4gICAgbW92ZVJlY3RCeUNoYXJJbmRleChjaGFySW5kZXgpe1xuICAgICAgICBsZXQgYW5ub3Q9dGhpcy5hbm5vdDtcbiAgICAgICAgbGV0IHRleHRQYWdlID0gdGhpcy5wZGZQYWdlLmdldE5vcm1hbFRleHRQYWdlU3luYygpO1xuICAgICAgICBsZXQgdGV4dFJlY3RDb3VudCA9IHRleHRQYWdlLkdldFRleHRSZWN0Q291bnQoY2hhckluZGV4LDEpO1xuICAgICAgICBsZXQgdGV4dFJlY3QgPSB0ZXh0UGFnZS5HZXRUZXh0UmVjdCgwKTtcbiAgICAgICAgbGV0IGFubm90UmVjdD1hbm5vdC5HZXRSZWN0KCksXG4gICAgICAgICAgICBuZXdBbm5vdFJlY3Q9bmV3IHRoaXMuZW5naW5lLkNGWF9GbG9hdFJlY3QoKTtcbiAgICAgICAgY29uc3QgYW5ub3RXaWR0aD1hbm5vdFJlY3QucmlnaHQtYW5ub3RSZWN0LmxlZnQsXG4gICAgICAgICAgICBhbm5vdEhlaWdodD1hbm5vdFJlY3QudG9wLWFubm90UmVjdC5ib3R0b207XG4gICAgICAgIG5ld0Fubm90UmVjdC5sZWZ0PXRleHRSZWN0LnJpZ2h0LWFubm90V2lkdGgvMjtcbiAgICAgICAgbmV3QW5ub3RSZWN0LnJpZ2h0PXRleHRSZWN0LnJpZ2h0K2Fubm90V2lkdGgvMjtcbiAgICAgICAgbmV3QW5ub3RSZWN0LnRvcD10ZXh0UmVjdC5ib3R0b20rYW5ub3RIZWlnaHQvNTtcbiAgICAgICAgbmV3QW5ub3RSZWN0LmJvdHRvbT10ZXh0UmVjdC5ib3R0b20tYW5ub3RIZWlnaHQqNC81O1xuICAgICAgICBhbm5vdC5Nb3ZlKG5ld0Fubm90UmVjdCk7XG4gICAgICAgIGFubm90LlJlc2V0QXBwZWFyYW5jZVN0cmVhbSgpO1xuICAgIH1cbiAgICB0b0pzb24oKXtcbiAgICAgICAgbGV0IGJhc2VKc29uID0gc3VwZXIudG9Kc29uKCk7XG4gICAgICAgIGxldCBpbm5lclJlY3QgPSB0aGlzLmFubm90LkdldElubmVyUmVjdCgpO1xuICAgICAgICBiYXNlSnNvbi5pbm5lclJlY3QgPSB7XG4gICAgICAgICAgICB0b3A6IGlubmVyUmVjdC50b3AsXG4gICAgICAgICAgICByaWdodDogaW5uZXJSZWN0LnJpZ2h0LFxuICAgICAgICAgICAgYm90dG9tOiBpbm5lclJlY3QuYm90dG9tLFxuICAgICAgICAgICAgbGVmdDogaW5uZXJSZWN0LmxlZnQsXG4gICAgICAgIH1cbiAgICAgICAgaWYodGhpcy5pc1JlcGxhY2UoKSYmYmFzZUpzb24uaW50ZW50PT0nJyl7XG4gICAgICAgICAgICBiYXNlSnNvbi5pbnRlbnQ9J1JlcGxhY2UnXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJhc2VKc29uO1xuICAgIH1cblxuICAgIGNyZWF0ZShqc29uKXtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHN1cGVyLmNyZWF0ZShqc29uKTtcbiAgICAgICAgaWYoanNvbi5zdWJqZWN0JiZqc29uLnN1YmplY3QudG9Mb2NhbGVMb3dlckNhc2UoKT09PVwicmVwbGFjZVwiKXtcbiAgICAgICAgICAgIHRoaXMuc2V0Qm9yZGVyQ29sb3IoanNvbi5jb2xvcnx8MHgwMDAwZmYpO1xuICAgICAgICB9ZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNldEJvcmRlckNvbG9yKGpzb24uY29sb3J8fDB4OTkzMzk5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAdHlwZSBHU0RLLkNhcmV0XG4gICAgICAgICAqL1xuICAgICAgICAvLyBsZXQgYW5ub3Q9dGhpcy5hbm5vdDtcbiAgICAgICAgLy8gbGV0IHBhZ2UgPSBhbm5vdC5HZXRQYWdlKCk7XG4gICAgICAgIC8vIGFubm90LkdldERpY3QoKS5TZXRBdEludGVnZXIobmV3IHRoaXMuZW5naW5lLlN0cmluZyhcIlJvdGF0ZVwiKSwgMCk7XG4gICAgICAgIC8vIGFubm90LlJlc2V0QXBwZWFyYW5jZVN0cmVhbSgpO1xuXG4gICAgICAgIGlmKGpzb24uX3JvdGF0ZSl7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEB0eXBlIEdTREtcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgbGV0IGVuZ2luZSA9IHRoaXMuZW5naW5lO1xuICAgICAgICAgICAgbGV0IG1hdHJpeCA9IG5ldyBlbmdpbmUuTWF0cml4KCk7XG4gICAgICAgICAgICBtYXRyaXguUm90YXRlKC1qc29uLl9yb3RhdGUsZmFsc2UpO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQHR5cGUgR1NESy5DYXJldFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBsZXQgYW5ub3Q9dGhpcy5hbm5vdDtcbiAgICAgICAgICAgIGxldCBhcCA9IGFubm90LkdldERpY3QoKS5HZXRFbGVtZW50KG5ldyBlbmdpbmUuU3RyaW5nKCdBUCcpKS5HZXREaWN0KCk7XG4gICAgICAgICAgICBsZXQgbj1hcC5HZXRFbGVtZW50KG5ldyBlbmdpbmUuU3RyaW5nKCdOJykpLkdldERpY3QoKTtcbiAgICAgICAgICAgIG4uU2V0QXRNYXRyaXgobmV3IGVuZ2luZS5TdHJpbmcoJ01hdHJpeCcpLG1hdHJpeCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBpc1JlcGxhY2UgKCkge1xuICAgICAgICAvLyDliKTmlq3mmK/lkKbmmK9SZXBsYWNlXG4gICAgICAgIGxldCBhbm5vdCA9IHRoaXMuYW5ub3Q7XG4gICAgICAgIGxldCBncm91cEVsZW1lbnRzO1xuICAgICAgICBsZXQgZ3JvdXBFbGVtZW50c0NvdW50O1xuICAgICAgICBpZiAoYW5ub3QuSXNHcm91cGVkKCkgJiYgKGdyb3VwRWxlbWVudHMgPSBhbm5vdC5HZXRHcm91cEVsZW1lbnRzKCkpICYmICgoZ3JvdXBFbGVtZW50c0NvdW50ID0gZ3JvdXBFbGVtZW50cy5HZXRTaXplKCkpID09PSAyKSkge1xuICAgICAgICAgICAgbGV0IHJlcGxhY2VUeXBlcyA9IFsnQW5ub3RUeXBlX2VfU3RyaWtlT3V0JywgJ0Fubm90VHlwZV9lX0NhcmV0J107XG4gICAgICAgICAgICBsZXQgaXNSZXBsYWNlID0gdHJ1ZTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBncm91cEVsZW1lbnRzQ291bnQ7IGktLTspIHtcbiAgICAgICAgICAgICAgICBsZXQgbWFya3VwID0gZ3JvdXBFbGVtZW50cy5HZXRBdChpKTtcbiAgICAgICAgICAgICAgICBsZXQgaW5kZXhPZiA9IHJlcGxhY2VUeXBlcy5pbmRleE9mKG1hcmt1cC5HZXRUeXBlKCkuY29uc3RydWN0b3IubmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4T2YgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2FyZXQ7IiwiaW1wb3J0IE1hcmt1cEFubm90IGZyb20gXCIuL01hcmt1cEFubm90XCI7XG5pbXBvcnQge1xuICAgIGNvbnZlcnRGcm9tTnVtYmVyVG9IZXhcbn0gZnJvbSBcIi4uLy4uL3NoYXJlZC9jb2xvclwiO1xuaW1wb3J0IFJlY3RPcGVyYXRvciBmcm9tIFwiLi4vc2hhcmUvUmVjdE9wZXJhdG9yXCI7XG5cblxuLyoqXG4gKiBAaWdub3JlXG4gKiBAdHlwZWRlZiBHU0RLQ2lyY2xlQW5ub3RcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IEdldEZpbGxDb2xvclxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gU2V0RmlsbENvbG9yXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBHZXRJbm5lclJlY3RcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFNldElubmVyUmVjdFxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gR2V0UG9wdXBcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFNldFBvcHVwXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBHZXRUaXRsZVxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gU2V0VGl0bGVcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IEdldFN1YmplY3RcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFNldFN1YmplY3RcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IEdldE9wYWNpdHlcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFNldE9wYWNpdHlcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IEdldEludGVudFxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gU2V0SW50ZW50XG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBHZXRDcmVhdGlvbkRhdGVUaW1lXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBTZXRDcmVhdGlvbkRhdGVUaW1lXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBHZXRSZXBseUNvdW50XG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBHZXRSZXBseVxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gQWRkUmVwbHlcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFJlbW92ZVJlcGx5XG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBSZW1vdmVBbGxSZXBsaWVzXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBJc0dyb3VwZWRcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IEdldEdyb3VwSGVhZGVyXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBHZXRHcm91cEVsZW1lbnRzXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBVbmdyb3VwXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBHZXRTdGF0ZUFubm90Q291bnRcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IEdldFN0YXRlQW5ub3RcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IEFkZFN0YXRlQW5ub3RcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFJlbW92ZUFsbFN0YXRlQW5ub3RzXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBJc0VtcHR5XG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBHZXRQYWdlXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBJc01hcmt1cFxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gR2V0VHlwZVxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gR2V0SW5kZXhcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IEdldENvbnRlbnRcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFNldENvbnRlbnRcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IEdldE1vZGlmaWVkRGF0ZVRpbWVcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFNldE1vZGlmaWVkRGF0ZVRpbWVcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IEdldEZsYWdzXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBTZXRGbGFnc1xuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gR2V0VW5pcXVlSURcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFNldFVuaXF1ZUlEXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBHZXRSZWN0XG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBNb3ZlXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBHZXRCb3JkZXJJbmZvXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBTZXRCb3JkZXJJbmZvXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBHZXRCb3JkZXJDb2xvclxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gU2V0Qm9yZGVyQ29sb3JcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFJlc2V0QXBwZWFyYW5jZVN0cmVhbVxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gR2V0RGV2aWNlUmVjdFxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gR2V0RGljdFxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gUmVtb3ZlUHJvcGVydHlcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IEdldE9wdGlvbmFsQ29udGVudFxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gR2V0QXBwZWFyYW5jZVN0cmVhbVxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gaXNBbGlhc09mXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBjbG9uZVxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gZGVsZXRlXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBpc0RlbGV0ZWRcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IGRlbGV0ZUxhdGVyXG4gKi9cblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDaXJjbGUgZXh0ZW5kcyBNYXJrdXBBbm5vdCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBDaXJjbGUuXG4gICAgICogQHBhcmFtIHtHU0RLQ2lyY2xlQW5ub3R9IGFubm90XG4gICAgICogQHBhcmFtIHtvYmplY3R9IHBkZlBhZ2VcbiAgICAgKiBAbWVtYmVyb2YgQ2lyY2xlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoYW5ub3QsIHBkZlBhZ2UpIHtcbiAgICAgICAgc3VwZXIoYW5ub3QsIHBkZlBhZ2UpO1xuICAgICAgICB0aGlzLmFubm90ID0gbmV3IHRoaXMuZW5naW5lLkNpcmNsZShhbm5vdCk7XG4gICAgfVxuICAgIF9jYWxjdWxhdGVSZWN0RGlmZmVyKCl7XG4gICAgICAgIGNvbnN0IHJlY3QgPSB0aGlzLmFubm90LkdldFJlY3QoKTtcbiAgICAgICAgY29uc3QgaW5uZXJSZWN0ID0gdGhpcy5hbm5vdC5HZXRJbm5lclJlY3QoKTtcbiAgICAgICAgcmV0dXJuIFJlY3RPcGVyYXRvci5zdWJ0cmFjdChyZWN0LCBpbm5lclJlY3QpO1xuICAgIH1cbiAgICBtb3ZlKG9mZnNldExlZnQsIG9mZnNldFRvcCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogQHR5cGUge0dTREtDaXJjbGVBbm5vdH1cbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IGFubm90ID0gdGhpcy5hbm5vdDtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGRlc3RpbmF0aW9uID0gUmVjdE9wZXJhdG9yLm9uKGFubm90LkdldFJlY3QoKSkgLy9cbiAgICAgICAgICAgIC5tb3ZlKG9mZnNldExlZnQsIG9mZnNldFRvcCkgLy9cbiAgICAgICAgICAgIC5leHRyYWN0KCk7XG4gICAgICAgIHJldHVybiB0aGlzLmFubm90Lk1vdmUoZGVzdGluYXRpb24pO1xuICAgIH1cbiAgICBzZXRSZWN0KHJlY3Qpe1xuICAgICAgICBjb25zdCBkZXN0aW5hdGlvbiA9IG5ldyB0aGlzLmVuZ2luZS5DRlhfRmxvYXRSZWN0KHJlY3QubGVmdCxyZWN0LmJvdHRvbSxyZWN0LnJpZ2h0LHJlY3QudG9wKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYW5ub3QuTW92ZShkZXN0aW5hdGlvbik7XG4gICAgfVxuICAgIHNldElubmVyUmVjdChyZWN0KSB7XG4gICAgICAgIGxldCBkZXN0aW5hdGlvbiA9IG5ldyB0aGlzLmVuZ2luZS5DRlhfRmxvYXRSZWN0KHJlY3QubGVmdCwgcmVjdC5ib3R0b20sIHJlY3QucmlnaHQsIHJlY3QudG9wKTtcbiAgICAgICAgdGhpcy5hbm5vdC5TZXRJbm5lclJlY3QoZGVzdGluYXRpb24pO1xuICAgICAgICB0aGlzLmFubm90LlJlc2V0QXBwZWFyYW5jZVN0cmVhbSgpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZ2V0SW5uZXJSZWN0KCkge1xuICAgICAgICByZXR1cm4gUmVjdE9wZXJhdG9yLm9uKHRoaXMuYW5ub3QuR2V0SW5uZXJSZWN0KCkpLnRvUGxhaW5PYmplY3QoKTtcbiAgICB9XG4gICAgdG9Kc29uKCkge1xuICAgICAgICBjb25zdCBqc29uID0gc3VwZXIudG9Kc29uKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAdHlwZSB7R1NES0NpcmNsZUFubm90fVxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3QgYW5ub3QgPSB0aGlzLmFubm90O1xuXG4gICAgICAgIGxldCBmaWxsQ29sb3IgPSBhbm5vdC5HZXRGaWxsQ29sb3IoKTtcblxuICAgICAgICBqc29uLmZpbGxDb2xvciA9IGZpbGxDb2xvcjtcblxuICAgICAgICBqc29uLmlubmVyUmVjdCA9IFJlY3RPcGVyYXRvci5vbihhbm5vdC5HZXRJbm5lclJlY3QoKSkudG9QbGFpbk9iamVjdCgpO1xuICAgICAgICByZXR1cm4ganNvbjtcbiAgICB9XG4gICAgc2V0RmlsbENvbG9yIChjb2xvcikge1xuICAgICAgICByZXR1cm4gc3VwZXIuX3NldEZpbGxDb2xvcihjb2xvcik7XG4gICAgfVxufSIsImltcG9ydCBNYXJrdXBBbm5vdCBmcm9tICcuL01hcmt1cEFubm90JztcbmltcG9ydCBGaWxlU3BlYyBmcm9tIFwiLi4vYmFzZS9GaWxlU3BlY1wiO1xuaW1wb3J0IExvZ2dlckZhY3RvcnkgZnJvbSAnLi4vLi4vc2hhcmVkL2xvZ2dlci9Mb2dnZXJGYWN0b3J5JztcbmNvbnN0IGxvZ2dlciA9IExvZ2dlckZhY3RvcnkuZ2V0TG9nZ2VyKCdwZGYtanIuRmlsZUF0dHJjaG1lbnQnKTtcbmNsYXNzIEZpbGVBdHRhY2htZW50IGV4dGVuZHMgTWFya3VwQW5ub3Qge1xuICAgIGNvbnN0cnVjdG9yIChhbm5vdCwgcGRmUGFnZSkge1xuICAgICAgICBzdXBlcihhbm5vdCwgcGRmUGFnZSk7XG4gICAgICAgIHRoaXMuYW5ub3QgPSBuZXcgdGhpcy5lbmdpbmUuRmlsZUF0dGFjaG1lbnQodGhpcy5hbm5vdCk7XG4gICAgfVxuXG4gICAgdG9Kc29uKCl7XG4gICAgICAgIGNvbnN0IGpzb24gPSBzdXBlci50b0pzb24oKTtcbiAgICAgICAgbGV0IGZpbGVTcGVjPW5ldyBGaWxlU3BlYyh0aGlzLmdldEZpbGVTcGVjKCksdGhpcyk7XG4gICAgICAgIGpzb24uZmlsZVNwZWM9ZmlsZVNwZWMudG9Kc29uKCk7XG4gICAgICAgIHJldHVybiBqc29uO1xuICAgIH1cblxuICAgIHNldEljb25OYW1lKGljb25OYW1lKXtcbiAgICAgICAgbGV0IGFubm90ID0gdGhpcy5hbm5vdDtcbiAgICAgICAgYW5ub3QuU2V0SWNvbk5hbWUobmV3IHRoaXMuZW5naW5lLlN0cmluZyhpY29uTmFtZSkpO1xuICAgICAgICBhbm5vdC5SZXNldEFwcGVhcmFuY2VTdHJlYW0oKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZ2V0RmlsZVNwZWMoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuYW5ub3QuR2V0RmlsZVNwZWMoKTtcbiAgICB9XG5cbiAgICBjcmVhdGUoanNvbil7XG4gICAgICAgIHRoaXMuc2V0RmxhZ3MoMjApO1xuICAgICAgICBsZXQgcmVzdWx0ID0gc3VwZXIuY3JlYXRlKGpzb24pO1xuICAgICAgICB0aGlzLnNldEZpbGUoanNvbilcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgc2V0RmlsZShkYXRhKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCBmaWxlPUZpbGVTcGVjLmNyZWF0ZUZpbGUodGhpcy5lbmdpbmUsdGhpcy5hbm5vdC5HZXRQYWdlKCkuR2V0RG9jdW1lbnQoKSxkYXRhLmJ1ZmZlcik7XG4gICAgICAgICAgICBsZXQgZmlsZVNwZWM9bmV3IEZpbGVTcGVjKGZpbGUsdGhpcyk7XG4gICAgICAgICAgICBmaWxlU3BlYy5zZXRGaWxlTmFtZShkYXRhLmZpbGVOYW1lKTtcbiAgICAgICAgICAgIHRoaXMuYW5ub3QuU2V0RmlsZVNwZWMoZmlsZSk7XG4gICAgICAgIH1jYXRjaCAoZSkge1xuICAgICAgICAgICAgbGV0IGVuZ2luZSA9IHRoaXMuZW5naW5lO1xuICAgICAgICAgICAgbGV0IGVycm9yQ29kZSA9IGUgaW5zdGFuY2VvZiBlbmdpbmUuRXJyb3JDb2RlID8gZSA6IGVuZ2luZS5nZXRFcnJvckNvZGUgKGUpO1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4gKGVycm9yQ29kZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGdldFN0cmVhbSh7d3JpdGVTdHJlYW19KXtcbiAgICAgICAgbGV0IGZpbGVTcGVjPW5ldyBGaWxlU3BlYyh0aGlzLmdldEZpbGVTcGVjKCksdGhpcyk7XG4gICAgICAgIHJldHVybiBmaWxlU3BlYy5nZXRTdHJlYW0od3JpdGVTdHJlYW0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRmlsZUF0dGFjaG1lbnQ7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGxpbmMgb24gMjAxOC8xMi8xMi5cbiAqL1xuaW1wb3J0IE1hcmt1cEFubm90IGZyb20gJy4vTWFya3VwQW5ub3QnO1xuaW1wb3J0IHsgSW50ZW50cyB9IGZyb20gJy4uLy4uL3NoYXJlZC9jb25zdHMnO1xuaW1wb3J0IFBERkZvbnRNZ3IgZnJvbSAnLi4vUERGRm9udE1ncic7XG5pbXBvcnQgRm9udEVudW1zIGZyb20gJy4uL2dldFRoaXJkUGFydHlGb250QnVmZmVyJztcblxuY2xhc3MgRnJlZVRleHQgZXh0ZW5kcyBNYXJrdXBBbm5vdCB7XG4gICAgY29uc3RydWN0b3IgKGFubm90LCBwZGZQYWdlKSB7XG4gICAgICAgIHN1cGVyKGFubm90LCBwZGZQYWdlKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIEdTREsuRnJlZVRleHRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYW5ub3QgPSBuZXcgdGhpcy5lbmdpbmUuRnJlZVRleHQodGhpcy5hbm5vdCk7XG4gICAgfVxuICAgIHRvSnNvbiAoKSB7XG4gICAgICAgIGxldCBqc29uID0gc3VwZXIudG9Kc29uKCk7XG4gICAgICAgIGxldCBhbm5vdCA9IHRoaXMuYW5ub3Q7XG4gICAgICAgIGlmIChqc29uLmludGVudCA9PT0gSW50ZW50cy5GUkVFVEVYVF9DQUxMT1VUKSB7XG4gICAgICAgICAgICBsZXQgY2FsbG91dExpbmVFbmRpbmdTdHlsZSA9IGFubm90LkdldENhbGxvdXRMaW5lRW5kaW5nU3R5bGUoKS52YWx1ZTtcbiAgICAgICAgICAgIGxldCBjYWxsb3V0TGluZVBvaW50cyA9IGFubm90LkdldENhbGxvdXRMaW5lUG9pbnRzKCk7XG4gICAgICAgICAgICBsZXQgcG9pbnRzID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gY2FsbG91dExpbmVQb2ludHMuR2V0U2l6ZSgpOyBpLS07KSB7XG4gICAgICAgICAgICAgICAgbGV0IHBvaW50ID0gY2FsbG91dExpbmVQb2ludHMuR2V0QXQoaSk7XG4gICAgICAgICAgICAgICAgcG9pbnRzW2ldID0ge1xuICAgICAgICAgICAgICAgICAgICB4OiBwb2ludC54LFxuICAgICAgICAgICAgICAgICAgICB5OiBwb2ludC55XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAganNvbi5jYWxsb3V0TGluZUVuZGluZ1N0eWxlID0gY2FsbG91dExpbmVFbmRpbmdTdHlsZTtcbiAgICAgICAgICAgIGpzb24uY2FsbG91dExpbmVQb2ludHMgPSBwb2ludHM7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGp1c3RpZmljYXRpb24gPSBhbm5vdC5HZXRBbGlnbm1lbnQoKS52YWx1ZTtcbiAgICAgICAganNvbi5qdXN0aWZpY2F0aW9uID0ganVzdGlmaWNhdGlvbjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQHR5cGUgR1NESy5EZWZhdWx0QXBwZWFyYW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgbGV0IGRlZmF1bHRBcHBlYXJhbmNlID0gYW5ub3QuR2V0RGVmYXVsdEFwcGVhcmFuY2UoKTtcblxuICAgICAgICBqc29uLmRlZmF1bHRBcHBlYXJhbmNlID0ge1xuICAgICAgICAgICAgZmxhZ3M6IGRlZmF1bHRBcHBlYXJhbmNlLmZsYWdzLFxuICAgICAgICAgICAgdGV4dENvbG9yOiBkZWZhdWx0QXBwZWFyYW5jZS50ZXh0X2NvbG9yLFxuICAgICAgICAgICAgdGV4dFNpemU6IGRlZmF1bHRBcHBlYXJhbmNlLnRleHRfc2l6ZVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vaWYoIWRlZmF1bHRBcHBlYXJhbmNlLmZvbnQuSXNFbXB0eSgpKXtcbiAgICAgICAgLy8gICAgLyoqXG4gICAgICAgIC8vICAgICAqIEB0eXBlIEdTREsuRnJlZVRleHRcbiAgICAgICAgLy8gICAgICovXG4gICAgICAgIC8vICAgIC8vbGV0IGFubm90ID0gdGhpcy5hbm5vdDtcbiAgICAgICAgLy8gICAgLy9sZXQgU3RyaW5nID0gdGhpcy5lbmdpbmUuU3RyaW5nO1xuICAgICAgICAvLyAgICAvL1xuICAgICAgICAvLyAgICBsZXQgZGEgPSBhbm5vdC5HZXREaWN0KCkuR2V0RWxlbWVudChuZXcgdGhpcy5lbmdpbmUuU3RyaW5nKCdEQScpKS5HZXRTdHJpbmcoKS50b1N0cmluZygpKycgJztcbiAgICAgICAgLy8gICAgLy9cbiAgICAgICAgLy8gICAgbGV0IG5hbWU9Jyc7XG4gICAgICAgIC8vICAgIC8vbGV0IHVybD0nJztcbiAgICAgICAgLy8gICAgbGV0IG1hdGNoID0gZGEubWF0Y2goL1xcLyhbXlxcc10qKSAvKTtcbiAgICAgICAgLy8gICAgaWYobWF0Y2gmJm1hdGNoLmxlbmd0aD4xKXtcbiAgICAgICAgLy8gICAgICAgIG5hbWUgPSBtYXRjaFsxXS5yZXBsYWNlKC8jMjAvZyxcIiBcIik7XG4gICAgICAgIC8vICAgICAgICAvL2xldCBidWZmZXIgPSB0aGlzLkpSLmdldEZvbnRCdWZmZXIobmFtZS50b1N0cmluZygpLDUyNDMyMik7XG4gICAgICAgIC8vICAgICAgICAvL2lmKGJ1ZmZlcil7XG4gICAgICAgIC8vICAgICAgICAvLyAgICBsZXQgYmxvYiA9IG5ldyBCbG9iKFtidWZmZXJdLHt0eXBlOlwiYXBwbGljYXRpb24vd29mZlwifSk7XG4gICAgICAgIC8vICAgICAgICAvLyAgICB1cmw9VVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgICAgICAgLy8gICAgICAgIC8vfVxuICAgICAgICAvLyAgICB9XG4gICAgICAgIC8vXG4gICAgICAgIC8vICAgIGxldCBmb250ID0gZGVmYXVsdEFwcGVhcmFuY2UuZm9udDtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gICAganNvbi5kZWZhdWx0QXBwZWFyYW5jZS5mb250PXtcbiAgICAgICAgLy8gICAgICAgIC8vdXJsLFxuICAgICAgICAvLyAgICAgICAgZm9udE5hbWU6bmFtZSxcbiAgICAgICAgLy8gICAgICAgIGlzSXRhbGljOmZvbnQuSXNJdGFsaWMoKSxcbiAgICAgICAgLy8gICAgICAgIGlzQmxvZDpmb250LklzQm9sZCgpLFxuICAgICAgICAvLyAgICAgICAgZGVzY2VudDpmb250LkdldERlc2NlbnQoKSxcbiAgICAgICAgLy8gICAgICAgIGFzY2VudDpmb250LkdldEFzY2VudCgpXG4gICAgICAgIC8vICAgIH1cbiAgICAgICAgLy99XG5cbiAgICAgICAgbGV0IGZvbnRKc29uID0ge307XG4gICAgICAgIGxldCBlbmdpbmUgPSB0aGlzLmVuZ2luZTtcbiAgICAgICAgbGV0IGNfZG9jID0gdGhpcy5wZGZQYWdlLmRvY1xuICAgICAgICBsZXQgZm9udCA9IGRlZmF1bHRBcHBlYXJhbmNlLmZvbnQ7XG4gICAgICAgIGlmICghZm9udC5Jc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIGZvbnRKc29uLm5hbWUgPSBmb250LkdldE5hbWUoKS50b1N0cmluZygpO1xuICAgICAgICAgICAgbGV0IGZhbWlseU5hbWUgPSBmb250LkdldEZhbWlseU5hbWUoKS50b1N0cmluZygpO1xuICAgICAgICAgICAgZm9udEpzb24uZmFtaWx5TmFtZSA9IGZhbWlseU5hbWU7XG4gICAgICAgICAgICBsZXQgYmFzZU5hbWUgPSBmb250SnNvbi5iYXNlTmFtZSA9IGZvbnQuR2V0QmFzZUZvbnROYW1lKGNfZG9jKS50b1N0cmluZygpO1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnZmFtaWx5TmFtZScsIGZhbWlseU5hbWUpXG4gICAgICAgICAgICBmb250SnNvbi5hc2NlbnQgPSBmb250LkdldEFzY2VudCgpO1xuICAgICAgICAgICAgZm9udEpzb24uZGVzY2VudCA9IGZvbnQuR2V0RGVzY2VudCgpO1xuICAgICAgICAgICAgZm9udEpzb24uaXNJdGFsaWMgPSBmb250LklzSXRhbGljKCk7XG4gICAgICAgICAgICBsZXQgaXNCb2xkID0gZm9udEpzb24uaXNCb2xkID0gZm9udC5Jc0JvbGQoKTtcbiAgICAgICAgICAgIGxldCB3ZWlnaHQgPSBpc0JvbGQgPyA3MDAgOiA0MDA7XG4gICAgICAgICAgICBsZXQgbmFtZUtleTtcblxuICAgICAgICAgICAgbGV0IHN0eWxlcyA9IGZvbnRKc29uLnN0eWxlcyA9IGZvbnQuR2V0U3R5bGVzKGNfZG9jKTtcbiAgICAgICAgICAgIGxldCBjaGFyc2V0ID0gZW5naW5lLkNoYXJzZXQuZV9DaGFyc2V0RGVmYXVsdC52YWx1ZTtcbiAgICAgICAgICAgIGlmIChmb250LkdldEZvbnRUeXBlKGNfZG9jKSA9PSBlbmdpbmUuRm9udFR5cGVzLmVfRm9udFR5cGVDSURGb250KSB7XG4gICAgICAgICAgICAgICAgY2hhcnNldCA9IGZvbnQuR2V0Rm9udFR5cGUoY19kb2MpLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9udEpzb24uY2hhcnNldCA9IGNoYXJzZXQ7XG4gICAgICAgICAgICBpZiAoZm9udC5Jc0VtYmVkZGVkIChjX2RvYykpIHtcbiAgICAgICAgICAgICAgICBmb250SnNvbi5pc0VtYmVkZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBmb250SnNvbi5uYW1lS2V5ID0gJ2Z2XycgKyB0aGlzLmlkO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChmb250LklzU3RhbmRhcmRGb250KGNfZG9jKSkge1xuICAgICAgICAgICAgICAgIGZvbnRKc29uLmlzU3RhbmRhcmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGZvbnRKc29uLnN0YW5kYXJkSWQgPSBmb250LkdldFN0YW5kYXJkMTRGb250KGNfZG9jKS52YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAobmFtZUtleSA9IEZvbnRFbnVtcy5nZXRGb250TWF0Y2goYmFzZU5hbWUsIGNoYXJzZXQsIDAsIHdlaWdodCwgc3R5bGVzKSkge1xuICAgICAgICAgICAgICAgICAgICBuYW1lS2V5ID0gJ2Z2XycgKyBuYW1lS2V5LnJlcGxhY2UoL1xcLi9nLCAnXycpO1xuICAgICAgICAgICAgICAgICAgICBmb250SnNvbi5uYW1lS2V5ID0gbmFtZUtleTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5hbWVLZXkgPSBGb250RW51bXMuZ2V0Rm9udE1hdGNoKGJhc2VOYW1lLCBjaGFyc2V0LCAwLCB3ZWlnaHQsIHN0eWxlcykpIHtcbiAgICAgICAgICAgICAgICBuYW1lS2V5ID0gJ2Z2XycgKyBuYW1lS2V5LnJlcGxhY2UoL1xcLi9nLCAnXycpO1xuICAgICAgICAgICAgICAgIGZvbnRKc29uLm5hbWVLZXkgPSBuYW1lS2V5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBsZXQgZmlsbENvbG9yID0gYW5ub3QuR2V0RmlsbENvbG9yKCk7XG5cbiAgICAgICAganNvbi5zdHlsZUZpbGxDb2xvciA9IGZpbGxDb2xvcjtcblxuICAgICAgICBsZXQgaW5uZXJSZWN0ID0gYW5ub3QuR2V0SW5uZXJSZWN0KCk7XG4gICAgICAgIGpzb24uaW5uZXJSZWN0ID0ge1xuICAgICAgICAgICAgdG9wOiBpbm5lclJlY3QudG9wLFxuICAgICAgICAgICAgcmlnaHQ6IGlubmVyUmVjdC5yaWdodCxcbiAgICAgICAgICAgIGJvdHRvbTogaW5uZXJSZWN0LmJvdHRvbSxcbiAgICAgICAgICAgIGxlZnQ6IGlubmVyUmVjdC5sZWZ0XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBqc29uO1xuICAgIH1cbiAgICBzZXRDYWxsb3V0TGluZUVuZGluZ1N0eWxlKGVuZGluZ1N0eWxlKXtcbiAgICAgICAgdGhpcy5hbm5vdC5TZXRDYWxsb3V0TGluZUVuZGluZ1N0eWxlKHtcInZhbHVlXCI6ZW5kaW5nU3R5bGV9KTtcbiAgICAgICAgdGhpcy5hbm5vdC5SZXNldEFwcGVhcmFuY2VTdHJlYW0oKTtcbiAgICB9XG4gICAgc2V0SW5uZXJSZWN0KHJlY3Qpe1xuICAgICAgICBsZXQgZGVzdGluYXRpb24gPSBuZXcgdGhpcy5lbmdpbmUuQ0ZYX0Zsb2F0UmVjdChyZWN0LmxlZnQsIHJlY3QuYm90dG9tLCByZWN0LnJpZ2h0LCByZWN0LnRvcCk7XG4gICAgICAgIHRoaXMuYW5ub3QuU2V0SW5uZXJSZWN0KGRlc3RpbmF0aW9uKTtcbiAgICAgICAgdGhpcy5hbm5vdC5SZXNldEFwcGVhcmFuY2VTdHJlYW0oKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHNldENhbGxvdXRMaW5lUG9pbnRzKGNhbGxvdXRMaW5lUG9pbnRzKXtcbiAgICAgICAgY29uc3QgcG9pbnRGQXJyYXk9IG5ldyB0aGlzLmVuZ2luZS5Qb2ludEZBcnJheSgpO1xuICAgICAgICBjb25zdCBQb2ludEYgPSB0aGlzLmVuZ2luZS5Qb2ludEY7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IGNhbGxvdXRMaW5lUG9pbnRzLmxlbmd0aDtcbiAgICAgICAgZm9yKGxldCBpID0gMDtpIDwgbGVuZ3RoO2krKyl7XG4gICAgICAgICAgICBsZXQgcG9pbnQgPSBuZXcgUG9pbnRGKGNhbGxvdXRMaW5lUG9pbnRzW2ldLngsY2FsbG91dExpbmVQb2ludHNbaV0ueSk7XG4gICAgICAgICAgICBwb2ludEZBcnJheS5BZGQocG9pbnQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYW5ub3QuU2V0Q2FsbG91dExpbmVQb2ludHMocG9pbnRGQXJyYXkpO1xuICAgICAgICB0aGlzLmFubm90LlJlc2V0QXBwZWFyYW5jZVN0cmVhbSgpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgc2V0RGVmYXVsdEFwIChkZWZhdWx0QXBwZWFyYW5jZSkge1xuICAgICAgICBjb25zdCB7ZmxhZ3MsdGV4dENvbG9yLHRleHRTaXplfSA9IGRlZmF1bHRBcHBlYXJhbmNlO1xuICAgICAgICBjb25zdCBkZWZhdWx0Rm9udCA9IG5ldyB0aGlzLmVuZ2luZS5Gb250KDEpO1xuICAgICAgICBjb25zdCBuZXdEZWZhdWx0QXAgPSBuZXcgdGhpcy5lbmdpbmUuRGVmYXVsdEFwcGVhcmFuY2UoZmxhZ3MsZGVmYXVsdEZvbnQsdGV4dENvbG9yLHRleHRTaXplKTtcbiAgICAgICAgdGhpcy5hbm5vdC5TZXREZWZhdWx0QXBwZWFyYW5jZShuZXdEZWZhdWx0QXApO1xuICAgICAgICB0aGlzLmFubm90LlJlc2V0QXBwZWFyYW5jZVN0cmVhbSgpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgc2V0RmlsbENvbG9yIChjb2xvcikge1xuICAgICAgICByZXR1cm4gc3VwZXIuX3NldEZpbGxDb2xvcihjb2xvcik7XG4gICAgfVxuICAgIGNyZWF0ZShqc29uKXtcbiAgICAgICAgc3VwZXIuY3JlYXRlKGpzb24pO1xuICAgICAgICBpZihqc29uLnJvdGF0ZSl7XG4gICAgICAgICAgICB0aGlzLmFubm90LlNldFJvdGF0aW9uKHRoaXMuZW5naW5lLlJvdGF0aW9uLnZhbHVlc1soNC1qc29uLnJvdGF0ZSklNF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGZpbGxDb2xvcjtcbiAgICAgICAgaWYgKGZpbGxDb2xvciA9IGpzb25bJ2ludGVyaW9yLWNvbG9yJ10pIHtcbiAgICAgICAgICAgIHRoaXMuc2V0RmlsbENvbG9yKGZpbGxDb2xvcik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRSZWN0KGpzb24ucmVjdCk7XG4gICAgICAgIGxldCBjYWxsb3V0TGluZVBvaW50cztcbiAgICAgICAgaWYgKGNhbGxvdXRMaW5lUG9pbnRzID0ganNvbi5jYWxsb3V0TGluZVBvaW50cykge1xuICAgICAgICAgICAgdGhpcy5zZXRDYWxsb3V0TGluZVBvaW50cyhjYWxsb3V0TGluZVBvaW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGxldCBpbm5lclJlY3Q7XG4gICAgICAgIGlmIChpbm5lclJlY3QgPSBqc29uLmlubmVyUmVjdCkge1xuICAgICAgICAgICAgdGhpcy5zZXRJbm5lclJlY3QoaW5uZXJSZWN0KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldFJlY3QoanNvbi5yZWN0KTtcbiAgICAgICAgaWYgKGNhbGxvdXRMaW5lUG9pbnRzID0ganNvbi5jYWxsb3V0TGluZVBvaW50cykge1xuICAgICAgICAgICAgdGhpcy5zZXRDYWxsb3V0TGluZVBvaW50cyhjYWxsb3V0TGluZVBvaW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChpbm5lclJlY3QgPSBqc29uLmlubmVyUmVjdCkge1xuICAgICAgICAgICAgdGhpcy5zZXRJbm5lclJlY3QoaW5uZXJSZWN0KTtcbiAgICAgICAgfVxuICAgICAgICBpZihqc29uLmludGVudCA9PSBcIkZyZWVUZXh0Q2FsbG91dFwiKXtcbiAgICAgICAgICAgIHRoaXMuc2V0Q2FsbG91dExpbmVFbmRpbmdTdHlsZSg0KTtcbiAgICAgICAgfVxuICAgICAgICBcblxuICAgICAgICByZXR1cm4gW3RoaXNdXG4gICAgfVxuICAgIHNldENvbnRlbnQgKGNvbnRlbnQpIHtcbiAgICAgICAgbGV0IGFubm90ID0gdGhpcy5hbm5vdDtcbiAgICAgICAgYW5ub3QuU2V0Q29udGVudChuZXcgdGhpcy5lbmdpbmUuV1N0cmluZyhjb250ZW50KSk7XG4gICAgICAgIGFubm90LlJlc2V0QXBwZWFyYW5jZVN0cmVhbSgpO1xuICAgICAgICByZXR1cm4gYW5ub3QuR2V0VW5pcXVlSUQoKS50b1N0cmluZygpO1xuICAgIH1cbiAgICBcbiAgICBnZXRXb2ZmQmxvYiAoKSB7XG4gICAgICAgIGxldCBhbm5vdCA9IHRoaXMuYW5ub3Q7XG4gICAgICAgIGxldCBkZWZhdWx0QXBwZWFyYW5jZSA9IGFubm90LkdldERlZmF1bHRBcHBlYXJhbmNlKCk7XG5cbiAgICAgICAgaWYoIWRlZmF1bHRBcHBlYXJhbmNlLmZvbnQuSXNFbXB0eSgpKXtcblxuICAgICAgICAgICAgbGV0IGRhID0gYW5ub3QuR2V0RGljdCgpLkdldEVsZW1lbnQobmV3IHRoaXMuZW5naW5lLlN0cmluZygnREEnKSkuR2V0U3RyaW5nKCkudG9TdHJpbmcoKSsnICc7XG5cbiAgICAgICAgICAgIGxldCBuYW1lPScnO1xuICAgICAgICAgICAgbGV0IG1hdGNoID0gZGEubWF0Y2goL1xcLyhbXlxcc10qKSAvKTtcbiAgICAgICAgICAgIGlmKG1hdGNoJiZtYXRjaC5sZW5ndGg+MSl7XG4gICAgICAgICAgICAgICAgbmFtZSA9IG1hdGNoWzFdLnJlcGxhY2UoLyMyMC9nLFwiIFwiKTtcbiAgICAgICAgICAgICAgICBsZXQgYnVmZmVyID0gdGhpcy5KUi5nZXRGb250QnVmZmVyKG5hbWUudG9TdHJpbmcoKSw1MjQzMjIpO1xuICAgICAgICAgICAgICAgIGlmKGJ1ZmZlcil7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQmxvYihbYnVmZmVyXSx7dHlwZTpcImFwcGxpY2F0aW9uL3dvZmZcIn0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0V29mZiAoKSB7XG4gICAgICAgIGxldCBlbmdpbmUgPSB0aGlzLmVuZ2luZTtcbiAgICAgICAgbGV0IGFubm90ID0gdGhpcy5hbm5vdDtcbiAgICAgICAgbGV0IGRlZmF1bHRBcHBlYXJhbmNlID0gYW5ub3QuR2V0RGVmYXVsdEFwcGVhcmFuY2UoKTtcbiAgICAgICAgbGV0IGNfZG9jID0gdGhpcy5wZGZQYWdlLmRvYztcbiAgICAgICAgbGV0IGZvbnQgPSBkZWZhdWx0QXBwZWFyYW5jZS5mb250O1xuICAgICAgICBpZiAoZm9udC5Jc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKGZvbnQuSXNFbWJlZGRlZChjX2RvYykpIHtcbiAgICAgICAgICAgIHJldHVybiBQREZGb250TWdyLmdldFdvZmZEYXRhQnVmZmVyKGZvbnQuR2V0V29mZkRhdGEoY19kb2MpLCB0aGlzLmVuZ2luZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBjaGFyc2V0ID0gZW5naW5lLkNoYXJzZXQuZV9DaGFyc2V0RGVmYXVsdC52YWx1ZTtcbiAgICAgICAgICAgIGlmIChmb250LkdldEZvbnRUeXBlKGNfZG9jKSA9PSBlbmdpbmUuRm9udFR5cGVzLmVfRm9udFR5cGVDSURGb250KSB7XG4gICAgICAgICAgICAgICAgY2hhcnNldCA9IGZvbnQuR2V0Rm9udFR5cGUoY19kb2MpLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGJ1ZmZlciA9IHRoaXMuanIuZ2V0Rm9udEJ1ZmZlciAoXG4gICAgICAgICAgICAgICAgZm9udC5HZXRCYXNlRm9udE5hbWUoY19kb2MpLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgZm9udC5HZXRTdHlsZXMoY19kb2MpLFxuICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgY2hhcnNldCxcbiAgICAgICAgICAgICAgICBmb250LklzQm9sZCgpID8gNzAwIDogNDAwLFxuICAgICAgICAgICAgICAgIHRydWVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoYnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtidWZmZXJ9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgRnJlZVRleHQ7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGxpbmMgb24gMjAxOC8xMS83LlxuICovXG5pbXBvcnQgVGV4dE1hcmt1cEFubm90IGZyb20gJy4vVGV4dE1hcmt1cEFubm90JztcblxuY2xhc3MgSGlnaGxpZ2h0IGV4dGVuZHMgVGV4dE1hcmt1cEFubm90IHtcbiAgICBjb25zdHJ1Y3RvciAoYW5ub3QsIHBkZlBhZ2UpIHtcbiAgICAgICAgc3VwZXIoYW5ub3QsIHBkZlBhZ2UpO1xuICAgICAgICB0aGlzLmFubm90ID0gbmV3IHRoaXMuZW5naW5lLkhpZ2hsaWdodCh0aGlzLmFubm90KTtcbiAgICB9XG5cbiAgICB0b0pzb24gKCkge1xuICAgICAgICBsZXQganNvbiA9IHN1cGVyLnRvSnNvbigpO1xuICAgICAgICBsZXQgYW5ub3QgPSB0aGlzLmFubm90O1xuICAgICAgICBsZXQgZW5naW5lID0gdGhpcy5lbmdpbmU7XG4gICAgICAgIGlmIChhbm5vdC5HZXREaWN0KCkuSGFzS2V5KG5ldyBlbmdpbmUuU3RyaW5nKCdBcmVhSGknKSkpIHtcbiAgICAgICAgICAgIGpzb24uaXNBcmVhID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ganNvbjtcbiAgICB9XG5cbiAgICBzZXRSZWN0KHJlY3Qpe1xuICAgICAgICBsZXQgZW5naW5lID0gdGhpcy5lbmdpbmU7XG4gICAgICAgIGxldCBxdWFkUG9pbnRzQXJyYXkgPSBuZXcgZW5naW5lLlF1YWRQb2ludHNBcnJheSgpO1xuICAgICAgICBsZXQgUXVhZFBvaW50cyA9IGVuZ2luZS5RdWFkUG9pbnRzO1xuICAgICAgICBsZXQgUG9pbnRGID0gZW5naW5lLlBvaW50RjtcbiAgICAgICAgcXVhZFBvaW50c0FycmF5LkFkZChuZXcgUXVhZFBvaW50cyhuZXcgUG9pbnRGKHJlY3QubGVmdCwgcmVjdC50b3ApLCBuZXcgUG9pbnRGKHJlY3QucmlnaHQsIHJlY3QudG9wKSwgbmV3IFBvaW50RihyZWN0LmxlZnQscmVjdC5ib3R0b20pLCBuZXcgUG9pbnRGKHJlY3QucmlnaHQscmVjdC5ib3R0b20pKSk7XG4gICAgICAgIHRoaXMuYW5ub3QuU2V0UXVhZFBvaW50cyhxdWFkUG9pbnRzQXJyYXkpO1xuICAgICAgICB0aGlzLmFubm90LlJlc2V0QXBwZWFyYW5jZVN0cmVhbSgpO1xuICAgICAgICByZXR1cm4gc3VwZXIuc2V0UmVjdChyZWN0KTtcbiAgICB9XG5cbiAgICBtb3ZlKG9mZnNldExlZnQsIG9mZnNldFRvcCl7XG4gICAgICAgIGNvbnN0IHJlY3QgPSB0aGlzLmFubm90LkdldFJlY3QoKTtcbiAgICAgICAgY29uc3QgbGVmdCA9IHJlY3QubGVmdCArIG9mZnNldExlZnQ7XG4gICAgICAgIGNvbnN0IHJpZ2h0ID0gcmVjdC5yaWdodCArIG9mZnNldExlZnQ7XG4gICAgICAgIGNvbnN0IHRvcCA9IHJlY3QudG9wICsgb2Zmc2V0VG9wO1xuICAgICAgICBjb25zdCBib3R0b20gPSByZWN0LmJvdHRvbSArIG9mZnNldFRvcDtcbiAgICAgICAgbGV0IGVuZ2luZSA9IHRoaXMuZW5naW5lO1xuICAgICAgICBsZXQgcXVhZFBvaW50c0FycmF5ID0gbmV3IGVuZ2luZS5RdWFkUG9pbnRzQXJyYXkoKTtcbiAgICAgICAgbGV0IFF1YWRQb2ludHMgPSBlbmdpbmUuUXVhZFBvaW50cztcbiAgICAgICAgbGV0IFBvaW50RiA9IGVuZ2luZS5Qb2ludEY7XG4gICAgICAgIHF1YWRQb2ludHNBcnJheS5BZGQobmV3IFF1YWRQb2ludHMobmV3IFBvaW50RihsZWZ0LCB0b3ApLCBuZXcgUG9pbnRGKHJpZ2h0LHRvcCksIG5ldyBQb2ludEYobGVmdCxib3R0b20pLCBuZXcgUG9pbnRGKHJpZ2h0LGJvdHRvbSkpKTtcbiAgICAgICAgdGhpcy5hbm5vdC5TZXRRdWFkUG9pbnRzKHF1YWRQb2ludHNBcnJheSk7XG4gICAgICAgIHRoaXMuYW5ub3QuUmVzZXRBcHBlYXJhbmNlU3RyZWFtKCk7XG4gICAgICAgIGxldCBkZXN0aW5hdGlvbiA9IG5ldyB0aGlzLmVuZ2luZS5DRlhfRmxvYXRSZWN0KGxlZnQsYm90dG9tLHJpZ2h0LHRvcCk7XG4gICAgICAgIHJldHVybiB0aGlzLmFubm90Lk1vdmUoZGVzdGluYXRpb24pO1xuICAgIH1cblxuICAgIGNyZWF0ZShqc29uKXtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHN1cGVyLmNyZWF0ZShqc29uKTtcbiAgICAgICAgdGhpcy5zZXRCb3JkZXJDb2xvcigranNvbi5jb2xvcnx8MHhmZmZmMDApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSGlnaGxpZ2h0OyIsImltcG9ydCBNYXJrdXBBbm5vdCBmcm9tICcuL01hcmt1cEFubm90JztcblxuY2xhc3MgSW5rIGV4dGVuZHMgTWFya3VwQW5ub3Qge1xuICAgIGNvbnN0cnVjdG9yIChhbm5vdCwgcGRmUGFnZSkge1xuICAgICAgICBzdXBlcihhbm5vdCwgcGRmUGFnZSk7XG4gICAgICAgIHRoaXMuYW5ub3QgPSBuZXcgdGhpcy5lbmdpbmUuSW5rKHRoaXMuYW5ub3QpO1xuICAgIH1cblxuICAgIHRvSnNvbigpe1xuICAgICAgICBsZXQganNvbj1zdXBlci50b0pzb24oKTtcbiAgICAgICAgbGV0IGlua0xpc3RQYXRoPXRoaXMuYW5ub3QuR2V0SW5rTGlzdCgpO1xuICAgICAgICBsZXQgaW5rTGlzdD1bXTtcbiAgICAgICAgaWYoIWlua0xpc3RQYXRoLklzRW1wdHkoKSl7XG4gICAgICAgICAgICBsZXQgY291bnQ9aW5rTGlzdFBhdGguR2V0UG9pbnRDb3VudCgpO1xuICAgICAgICAgICAgZm9yKGxldCBpPTA7aTxjb3VudDtpKyspe1xuICAgICAgICAgICAgICAgIGxldCBwb2ludD1pbmtMaXN0UGF0aC5HZXRQb2ludChpKTtcbiAgICAgICAgICAgICAgICBsZXQgdHlwZT1pbmtMaXN0UGF0aC5HZXRQb2ludFR5cGUoaSk7XG4gICAgICAgICAgICAgICAgaW5rTGlzdC5wdXNoKHt4OnBvaW50LngseTpwb2ludC55LHR5cGU6dHlwZS52YWx1ZX0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGpzb24uaW5rTGlzdD1pbmtMaXN0O1xuICAgICAgICByZXR1cm4ganNvbjtcbiAgICB9XG5cbiAgICBzZXRJbmtMaXN0KGlua0xpc3Qpe1xuICAgICAgICBsZXQgcGF0aD1uZXcgdGhpcy5lbmdpbmUuUGF0aCgpO1xuICAgICAgICBpbmtMaXN0LmZvckVhY2goKGlua1BvaW50KT0+e1xuICAgICAgICAgICAgbGV0IHBvaW50PW5ldyB0aGlzLmVuZ2luZS5Qb2ludEYoaW5rUG9pbnQueCxpbmtQb2ludC55KTtcbiAgICAgICAgICAgIGlmKGlua1BvaW50LnR5cGU9PT0xKXtcbiAgICAgICAgICAgICAgICBwYXRoLk1vdmVUbyhwb2ludCk7XG4gICAgICAgICAgICB9ZWxzZSB7XG4gICAgICAgICAgICAgICAgcGF0aC5MaW5lVG8ocG9pbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcG9pbnQuZGVsZXRlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmFubm90LlNldElua0xpc3QocGF0aCk7XG4gICAgICAgIHBhdGguZGVsZXRlKCk7XG4gICAgICAgIHRoaXMuYW5ub3QuUmVzZXRBcHBlYXJhbmNlU3RyZWFtKCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGNyZWF0ZShqc29uKXtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHN1cGVyLmNyZWF0ZShqc29uKTtcbiAgICAgICAgbGV0IGlua0xpc3Q9anNvbi5pbmtMaXN0O1xuICAgICAgICB0aGlzLnNldElua0xpc3QoaW5rTGlzdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJbms7IiwiaW1wb3J0IE1hcmt1cEFubm90IGZyb20gJy4vTWFya3VwQW5ub3QnO1xuaW1wb3J0IHsgTGluZUVuZGluZ05hbWUgfSBmcm9tICcuLi8uLi9zaGFyZWQvY29uc3RzJztcblxuY2xhc3MgTGluZSBleHRlbmRzIE1hcmt1cEFubm90IHtcbiAgICBjb25zdHJ1Y3Rvcihhbm5vdCwgcGRmUGFnZSl7XG4gICAgICAgIHN1cGVyKGFubm90LHBkZlBhZ2UpO1xuICAgICAgICAvKipcbiAgICAgICAgICogQHR5cGUgR1NESy5MaW5lXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmFubm90ID0gbmV3IHRoaXMuZW5naW5lLkxpbmUodGhpcy5hbm5vdCk7XG4gICAgfVxuICAgIGNhbGN1bGF0ZUxlbnRoKCl7XG4gICAgICAgIGxldCBtZWFzdXJlUmF0aW8gPSB0aGlzLmFubm90LkdldE1lYXN1cmVSYXRpbygpLnRvU3RyaW5nKCk7XG4gICAgICAgIGxldCBtZWFzdXJlVW5pdCA9IHRoaXMuYW5ub3QuR2V0TWVhc3VyZVVuaXQoMCkudG9TdHJpbmcoKTsgXG4gICAgICAgIGlmKG1lYXN1cmVSYXRpby5sZW5ndGggPT0gMCl7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZW5kUG9pbnQgPSB0aGlzLmFubm90LkdldEVuZFBvaW50KCk7IC8vcG9pbnRmXG4gICAgICAgIGxldCBzdGFydFBvaW50ID0gdGhpcy5hbm5vdC5HZXRTdGFydFBvaW50KCk7IC8vcG9pbnRmXG4gICAgICAgIFxuICAgICAgICBsZXQgZGVsdGFYID0gZW5kUG9pbnQueC1zdGFydFBvaW50Lng7XG4gICAgICAgIGxldCBkZWx0YVkgPSBlbmRQb2ludC55LXN0YXJ0UG9pbnQueTtcbiAgICAgICAgbGV0IGxlbmd0aCA9IE1hdGguc3FydChkZWx0YVgqZGVsdGFYK2RlbHRhWSpkZWx0YVkpO1xuXG4gICAgICAgIGxldCB0cmFuc1VuaXQgPSBtZWFzdXJlUmF0aW8ubWF0Y2goLyhcXGQrKSAoXFx3KykgPSAoXFxkKykgKFxcdyspLyk7XG4gICAgICAgIHRyYW5zVW5pdFsxXSA9IHBhcnNlSW50KHRyYW5zVW5pdFsxXSk7XG4gICAgICAgIHRyYW5zVW5pdFszXSA9IHBhcnNlSW50KHRyYW5zVW5pdFszXSk7XG5cbiAgICAgICAgbGV0IGxlZnRMZW5ndGhJblB0O1xuICAgICAgICBzd2l0Y2godHJhbnNVbml0WzJdKXtcbiAgICAgICAgICAgIGNhc2UgJ3B0JzpcbiAgICAgICAgICAgIGxlZnRMZW5ndGhJblB0ID0gdHJhbnNVbml0WzFdO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdpbmNoJzpcbiAgICAgICAgICAgIGxlZnRMZW5ndGhJblB0ID0gdHJhbnNVbml0WzFdKjcyO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdjbSc6XG4gICAgICAgICAgICBsZWZ0TGVuZ3RoSW5QdCA9IHRyYW5zVW5pdFsxXSo3Mi8yLjU0O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdwJzpcbiAgICAgICAgICAgIGxlZnRMZW5ndGhJblB0ID0gdHJhbnNVbml0WzFdKjEyO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtbSc6XG4gICAgICAgICAgICBsZWZ0TGVuZ3RoSW5QdCA9IHRyYW5zVW5pdFsxXSo3Mi8yNS40O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2godHJhbnNVbml0WzRdKXtcbiAgICAgICAgICAgIGNhc2UgJ2luY2gnOlxuICAgICAgICAgICAgbGVuZ3RoID0gbGVuZ3RoKnRyYW5zVW5pdFszXS9sZWZ0TGVuZ3RoSW5QdFxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdwdCc6XG4gICAgICAgICAgICBsZW5ndGggPSBsZW5ndGgqdHJhbnNVbml0WzNdL2xlZnRMZW5ndGhJblB0XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2NtJzpcbiAgICAgICAgICAgIGxlbmd0aCA9IGxlbmd0aCp0cmFuc1VuaXRbM10vbGVmdExlbmd0aEluUHRcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncCc6XG4gICAgICAgICAgICBsZW5ndGggPSBsZW5ndGgqdHJhbnNVbml0WzNdL2xlZnRMZW5ndGhJblB0XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21tJzpcbiAgICAgICAgICAgIGxlbmd0aCA9IGxlbmd0aCp0cmFuc1VuaXRbM10vbGVmdExlbmd0aEluUHRcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZnQnOlxuICAgICAgICAgICAgbGVuZ3RoID0gbGVuZ3RoKnRyYW5zVW5pdFszXS9sZWZ0TGVuZ3RoSW5QdFxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd5ZCc6XG4gICAgICAgICAgICBsZW5ndGggPSBsZW5ndGgqdHJhbnNVbml0WzNdL2xlZnRMZW5ndGhJblB0XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgbGVuZ3RoID0gbGVuZ3RoKnRyYW5zVW5pdFszXS9sZWZ0TGVuZ3RoSW5QdFxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmFubm90LlNldENvbnRlbnQobmV3IHRoaXMuZW5naW5lLldTdHJpbmcobGVuZ3RoLnRvRml4ZWQoMikrJyAnK21lYXN1cmVVbml0KSk7XG4gICAgfVxuICAgIGVuYWJsZUNhcHRpb24oZW5hYmxlKXtcbiAgICAgICAgdGhpcy5hbm5vdC5FbmFibGVDYXB0aW9uKGVuYWJsZSk7XG4gICAgICAgIHRoaXMuYW5ub3QuUmVzZXRBcHBlYXJhbmNlU3RyZWFtKCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBzZXRGaWxsQ29sb3IoY29sb3Ipe1xuICAgICAgICBpZih0eXBlb2YgY29sb3IgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEluY29ycmVjdCBjb2xvciB2YWx1ZTogJHtjb2xvcn1gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29sb3IgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuYW5ub3QuUmVtb3ZlUHJvcGVydHkoe3ZhbHVlOjN9KTtcbiAgICAgICAgICAgIHRoaXMuYW5ub3QuUmVzZXRBcHBlYXJhbmNlU3RyZWFtKCk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgdGhpcy5hbm5vdC5TZXRTdHlsZUZpbGxDb2xvcihjb2xvcik7XG4gICAgICAgICAgICB0aGlzLmFubm90LlJlc2V0QXBwZWFyYW5jZVN0cmVhbSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbdGhpc107XG4gICAgfVxuICAgIHNldENhcHRpb25PZmZzZXQoeCwgeSkge1xuXG4gICAgfVxuICAgIHNldENhcHRpb25Qb3NpdGlvblR5cGUoY2FwX3Bvc2l0aW9uKSB7XG5cbiAgICB9XG4gICAgc2V0RW5kUG9pbnQoeCwgeSkge1xuICAgICAgICBsZXQgcG9pbnQgPSBuZXcgdGhpcy5lbmdpbmUuUG9pbnRGKHgseSk7XG4gICAgICAgIHRoaXMuYW5ub3QuU2V0RW5kUG9pbnQocG9pbnQpO1xuICAgICAgICB0aGlzLmNhbGN1bGF0ZUxlbnRoKCk7XG4gICAgICAgIHRoaXMuYW5ub3QuUmVzZXRBcHBlYXJhbmNlU3RyZWFtKCk7XG4gICAgfVxuICAgIHNldExlYWRlckxpbmVFeHRlbnNpb25MZW5ndGgoZXh0ZW5zaW9uX2xlbmd0aCkge1xuXG4gICAgfVxuICAgIHNldExlYWRlckxpbmVMZW5ndGgobGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuYW5ub3QuU2V0TGVhZGVyTGluZUxlbmd0aChsZW5ndGgpO1xuICAgICAgICB0aGlzLmFubm90LlJlc2V0QXBwZWFyYW5jZVN0cmVhbSgpO1xuICAgIH1cbiAgICBzZXRMZWFkZXJMaW5lT2Zmc2V0KG9mZnNldCkge1xuXG4gICAgfVxuICAgIHNldExpbmVFbmRTdHlsZShlbmRpbmdfc3R5bGUpIHtcbiAgICAgICAgbGV0IGVudW1UeXBlID0gdGhpcy5lbmdpbmUuRW5kaW5nU3R5bGUudmFsdWVzW2VuZGluZ19zdHlsZV07XG4gICAgICAgIHRoaXMuYW5ub3QuU2V0TGluZUVuZFN0eWxlKGVudW1UeXBlKTtcbiAgICAgICAgdGhpcy5hbm5vdC5SZXNldEFwcGVhcmFuY2VTdHJlYW0oKTtcbiAgICB9XG4gICAgc2V0TGluZVN0YXJ0U3R5bGUoZW5kaW5nX3N0eWxlKSB7XG4gICAgICAgIGxldCBlbnVtVHlwZSA9IHRoaXMuZW5naW5lLkVuZGluZ1N0eWxlLnZhbHVlc1tlbmRpbmdfc3R5bGVdO1xuICAgICAgICB0aGlzLmFubm90LlNldExpbmVTdGFydFN0eWxlKGVudW1UeXBlKTtcbiAgICAgICAgdGhpcy5hbm5vdC5SZXNldEFwcGVhcmFuY2VTdHJlYW0oKTtcbiAgICB9XG4gICAgc2V0TWVhc3VyZUNvbnZlcnNpb25GYWN0b3IobWVhc3VyZV90eXBlLCBmYWN0b3IpIHtcblxuICAgIH1cbiAgICBzZXRNZWFzdXJlUmF0aW8ocmF0aW8pIHtcblxuICAgIH1cbiAgICBzZXRNZWFzdXJlVW5pdChtZWFzdXJlX3R5cGUsIHVuaXQpIHtcblxuICAgIH1cbiAgICBzZXRTdGFydFBvaW50KHgseSkge1xuICAgICAgICBsZXQgcG9pbnQgPSBuZXcgdGhpcy5lbmdpbmUuUG9pbnRGKHgseSk7XG4gICAgICAgIHRoaXMuYW5ub3QuU2V0U3RhcnRQb2ludChwb2ludCk7XG4gICAgICAgIHRoaXMuY2FsY3VsYXRlTGVudGgoKTtcbiAgICAgICAgdGhpcy5hbm5vdC5SZXNldEFwcGVhcmFuY2VTdHJlYW0oKTtcbiAgICB9XG4gICAgY3JlYXRlKGpzb24pIHtcbiAgICAgICAgY29uc3Qge3N0YXJ0U3R5bGUsIGVuZFN0eWxlLCByZWN0LCBlbmFibGVDYXB0aW9ufSA9IGpzb247XG4gICAgICAgIGlmKExpbmVFbmRpbmdOYW1lW3N0YXJ0U3R5bGVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0TGluZVN0YXJ0U3R5bGUoc3RhcnRTdHlsZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYoTGluZUVuZGluZ05hbWVbZW5kU3R5bGVdKSB7XG4gICAgICAgICAgICB0aGlzLnNldExpbmVFbmRTdHlsZShlbmRTdHlsZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYodHlwZW9mIGVuYWJsZUNhcHRpb24gPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgdGhpcy5hbm5vdC5FbmFibGVDYXB0aW9uKGVuYWJsZUNhcHRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRTdGFydFBvaW50KHJlY3QubGVmdCwgcmVjdC5ib3R0b20pO1xuICAgICAgICB0aGlzLnNldEVuZFBvaW50KHJlY3QucmlnaHQsIHJlY3QudG9wKTtcblxuICAgICAgICBpZihqc29uLm1lYXN1cmUpe1xuICAgICAgICAgICAgdGhpcy5hbm5vdC5TZXRNZWFzdXJlQ29udmVyc2lvbkZhY3RvcigwLDEpO1xuICAgICAgICAgICAgdGhpcy5hbm5vdC5TZXRNZWFzdXJlVW5pdCgwLG5ldyB0aGlzLmVuZ2luZS5TdHJpbmcoanNvbi5tZWFzdXJlLnVuaXQpKTtcbiAgICAgICAgICAgIHRoaXMuYW5ub3QuU2V0TWVhc3VyZVJhdGlvKG5ldyB0aGlzLmVuZ2luZS5TdHJpbmcoanNvbi5tZWFzdXJlLnJhdGlvKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jYWxjdWxhdGVMZW50aCgpO1xuICAgICAgICByZXR1cm4gc3VwZXIuY3JlYXRlKGpzb24pO1xuICAgIH1cbiAgICB0b0pzb24oKSB7XG4gICAgICAgIFxuICAgICAgICBsZXQgbWFya3VwQW5ub3RKc29uID0gc3VwZXIudG9Kc29uKCk7XG5cbiAgICAgICAgaWYobWFya3VwQW5ub3RKc29uLmJvcmRlckluZm8ud2lkdGggPT0gMCl7XG4gICAgICAgICAgICBtYXJrdXBBbm5vdEpzb24uYm9yZGVySW5mby53aWR0aCA9IDE7XG4gICAgICAgICAgICBsZXQgYm9yZGVySW5mbyA9IHRoaXMuYW5ub3QuR2V0Qm9yZGVySW5mbygpO1xuICAgICAgICAgICAgYm9yZGVySW5mby53aWR0aCA9IDE7XG4gICAgICAgICAgICB0aGlzLmFubm90LlNldEJvcmRlckluZm8oYm9yZGVySW5mbyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgb2Zmc2V0ID0gdGhpcy5hbm5vdC5HZXRDYXB0aW9uT2Zmc2V0KCk7XG4gICAgICAgIGxldCBjYXBQb3MgPSB0aGlzLmFubm90LkdldENhcHRpb25Qb3NpdGlvblR5cGUoKTsgLy9lbnVtXG5cbiAgICAgICAgbGV0IGVuZFBvaW50ID0gdGhpcy5hbm5vdC5HZXRFbmRQb2ludCgpOyAvL3BvaW50ZlxuICAgICAgICBsZXQgbGVhZGVyTGluZUV4dGVuc2lvbkxlbmd0aCA9IHRoaXMuYW5ub3QuR2V0TGVhZGVyTGluZUV4dGVuc2lvbkxlbmd0aCgpOyAvL2Zsb2F0XG4gICAgICAgIGxldCBsZWFkZXJMaW5lTGVuZ3RoID0gdGhpcy5hbm5vdC5HZXRMZWFkZXJMaW5lTGVuZ3RoKCk7IC8vZmxvYXRcbiAgICAgICAgbGV0IGxlYWRlckxpbmVPZmZzZXQgPSB0aGlzLmFubm90LkdldExlYWRlckxpbmVPZmZzZXQoKTsgLy9mbG9hdFxuICAgICAgICBsZXQgZW5kaW5nU3R5bGUgPSB0aGlzLmFubm90LkdldExpbmVFbmRTdHlsZSAoKTsgLy9lbnVtXG4gICAgICAgIGxldCBzdGFydFN0eWxlID0gdGhpcy5hbm5vdC5HZXRMaW5lU3RhcnRTdHlsZSgpOyAvL2VudW1cbiAgICAgICAgbGV0IG1lYXN1cmVDb252ZXJzaW9uRmFjdG9yID0gdGhpcy5hbm5vdC5HZXRNZWFzdXJlQ29udmVyc2lvbkZhY3RvcigwKTsgLy9mbG9hdFxuICAgICAgICBsZXQgbWVhc3VyZVJhdGlvO1xuICAgICAgICBsZXQgbWVhc3VyZVVuaXQ7XG4gICAgICAgIFxuICAgICAgICB0cnl7XG4gICAgICAgICAgICBtZWFzdXJlUmF0aW8gPSB0aGlzLmFubm90LkdldE1lYXN1cmVSYXRpbygpLnRvU3RyaW5nKCk7IC8vc3RyaW5nXG4gICAgICAgICAgICBtZWFzdXJlVW5pdCA9IHRoaXMuYW5ub3QuR2V0TWVhc3VyZVVuaXQoMCkudG9TdHJpbmcoKTsgLy9zdHJpbmdcbiAgICAgICAgfWNhdGNoKGVycil7XG4gICAgICAgICAgICBtZWFzdXJlUmF0aW8gPSB0aGlzLkpSLmdldEhleFN0cmluZyh0aGlzLmFubm90LkdldE1lYXN1cmVSYXRpbygpKVxuICAgICAgICAgICAgbWVhc3VyZVVuaXQgPSB0aGlzLkpSLmdldEhleFN0cmluZyh0aGlzLmFubm90LkdldE1lYXN1cmVVbml0KDApKVxuICAgICAgICB9XG4gICAgICAgIGxldCBzdGFydFBvaW50ID0gdGhpcy5hbm5vdC5HZXRTdGFydFBvaW50KCk7IC8vcG9pbnRmXG4gICAgICAgIGxldCBzdHlsZUZpbGxDb2xvciA9IHRoaXMuYW5ub3QuR2V0U3R5bGVGaWxsQ29sb3IgKCk7IC8vZW51bVxuICAgICAgICBsZXQgaGFzQ2FwdGlvbiA9IHRoaXMuYW5ub3QuSGFzQ2FwdGlvbigpO1xuXG4gICAgICAgIGxldCBsaW5lSnNvbiA9IHtcbiAgICAgICAgICAgIGNhcHRpb25PZmZzZXQ6e1xuICAgICAgICAgICAgICAgIHg6b2Zmc2V0LngsXG4gICAgICAgICAgICAgICAgeTpvZmZzZXQueVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNhcFBvcyxcbiAgICAgICAgICAgIGVuZFBvaW50OntcbiAgICAgICAgICAgICAgICB4OmVuZFBvaW50LngsXG4gICAgICAgICAgICAgICAgeTplbmRQb2ludC55XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGVhZGVyTGluZUV4dGVuc2lvbkxlbmd0aCxcbiAgICAgICAgICAgIGxlYWRlckxpbmVMZW5ndGgsXG4gICAgICAgICAgICBsZWFkZXJMaW5lT2Zmc2V0LFxuICAgICAgICAgICAgZW5kaW5nU3R5bGU6ZW5kaW5nU3R5bGUudmFsdWUsXG4gICAgICAgICAgICBzdGFydFN0eWxlOnN0YXJ0U3R5bGUudmFsdWUsXG4gICAgICAgICAgICBtZWFzdXJlQ29udmVyc2lvbkZhY3RvcixcbiAgICAgICAgICAgIG1lYXN1cmVSYXRpbzptZWFzdXJlUmF0aW8sXG4gICAgICAgICAgICBtZWFzdXJlVW5pdDptZWFzdXJlVW5pdCxcbiAgICAgICAgICAgIHN0YXJ0UG9pbnQ6e1xuICAgICAgICAgICAgICAgIHg6c3RhcnRQb2ludC54LFxuICAgICAgICAgICAgICAgIHk6c3RhcnRQb2ludC55XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3R5bGVGaWxsQ29sb3I6c3R5bGVGaWxsQ29sb3IsXG4gICAgICAgICAgICBoYXNDYXB0aW9uXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obGluZUpzb24gLCBtYXJrdXBBbm5vdEpzb24pO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTGluZTsiLCJpbXBvcnQgQW5ub3QgZnJvbSAnLi9Bbm5vdCc7XG5cbmNsYXNzIExpbmsgZXh0ZW5kcyBBbm5vdHtcbiAgICBjb25zdHJ1Y3RvciAoYW5ub3QsIHBkZlBhZ2UpIHtcbiAgICAgICAgc3VwZXIoYW5ub3QsIHBkZlBhZ2UpO1xuICAgICAgICB0aGlzLmFubm90ID0gbmV3IHRoaXMuZW5naW5lLkxpbmsodGhpcy5hbm5vdCk7XG4gICAgICAgIGxldCBhY3Rpb24gID0gdGhpcy5hbm5vdC5HZXRBY3Rpb24oKTtcbiAgICAgICAgaWYoIWFjdGlvbi5Jc0VtcHR5KCkpe1xuICAgICAgICAgICAgdGhpcy5hY3Rpb249dGhpcy5KUi5hY3Rpb25NYW5hZ2VyLmdldChhY3Rpb24sdGhpcy5kb2MsdGhpcy5KUik7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHN0ciA9IG5ldyB0aGlzLmVuZ2luZS5TdHJpbmcoJ0FQJyk7XG4gICAgICAgIGxldCBhcCA9IHRoaXMuYW5ub3QuR2V0RGljdCgpLkdldEVsZW1lbnQgKHN0cik7XG4gICAgICAgIHN0ci5kZWxldGUoKTtcblxuICAgICAgICBzdHIgPSBuZXcgdGhpcy5lbmdpbmUuU3RyaW5nKCdOJylcbiAgICAgICAgaWYoIWFwfHwhYXAuR2V0RGljdCgpLkhhc0tleShzdHIpKVxuICAgICAgICAgICAgdGhpcy5hbm5vdC5SZXNldEFwcGVhcmFuY2VTdHJlYW0oKTtcbiAgICAgICAgc3RyLmRlbGV0ZSgpO1xuICAgIH1cbiAgICB0b0pzb24gKCkge1xuICAgICAgICBsZXQganNvbiA9IHN1cGVyLnRvSnNvbigpO1xuICAgICAgICBsZXQgaGlnaGxpZ2h0aW5nTW9kZSA9IHRoaXMuYW5ub3QuR2V0SGlnaGxpZ2h0aW5nTW9kZSgpIHx8IHt2YWx1ZTowfTtcbiAgICAgICAganNvbi5oaWdobGlnaHRpbmdNb2RlID0gaGlnaGxpZ2h0aW5nTW9kZS52YWx1ZTtcbiAgICAgICAganNvbi5hY3Rpb249dGhpcy5hY3Rpb24mJnRoaXMuYWN0aW9uLnRvSnNvbigpO1xuICAgICAgICByZXR1cm4ganNvbjtcbiAgICB9XG4gICAgc2V0SGlnaGxpZ2h0aW5nTW9kZShoaWdobGlnaHRpbmdNb2RlKXtcbiAgICAgICAgbGV0IEhpZ2hsaWdodGluZ01vZGU9dGhpcy5lbmdpbmUuSGlnaGxpZ2h0aW5nTW9kZTtcbiAgICAgICAgbGV0IG1vZGVBcnI9W0hpZ2hsaWdodGluZ01vZGUuZV9IaWdobGlnaHRpbmdOb25lLEhpZ2hsaWdodGluZ01vZGUuZV9IaWdobGlnaHRpbmdJbnZlcnQsSGlnaGxpZ2h0aW5nTW9kZS5lX0hpZ2hsaWdodGluZ091dGxpbmUsSGlnaGxpZ2h0aW5nTW9kZS5lX0hpZ2hsaWdodGluZ1B1c2gsSGlnaGxpZ2h0aW5nTW9kZS5lX0hpZ2hsaWdodGluZ1RvZ2dsZV07XG4gICAgICAgIHRoaXMuYW5ub3QuU2V0SGlnaGxpZ2h0aW5nTW9kZShtb2RlQXJyW2hpZ2hsaWdodGluZ01vZGVdKTtcbiAgICAgICAgdGhpcy5hbm5vdC5SZXNldEFwcGVhcmFuY2VTdHJlYW0oKTtcbiAgICAgICAgcmV0dXJuIFt0aGlzLmdldElkKCldO1xuICAgIH1cbiAgICBzZXRBY3Rpb24odHlwZSl7XG4gICAgICAgIGxldCBwZGZEb2M9dGhpcy5hbm5vdC5HZXRQYWdlKCkuR2V0RG9jdW1lbnQoKTtcbiAgICAgICAgbGV0IGFjdGlvbj10aGlzLkpSLmFjdGlvbk1hbmFnZXIuY3JlYXRlKHBkZkRvYyx0eXBlKTtcbiAgICAgICAgdGhpcy5hbm5vdC5TZXRBY3Rpb24oYWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuSlIuYWN0aW9uTWFuYWdlci5nZXQodGhpcy5hbm5vdC5HZXRBY3Rpb24oKSx0aGlzLmRvYyx0aGlzLkpSKTtcbiAgICB9XG4gICAgY3JlYXRlKGpzb24pe1xuICAgICAgICBsZXQgcmVzdWx0ID0gc3VwZXIuY3JlYXRlKGpzb24pO1xuICAgICAgICB0aGlzLmFubm90LlJlc2V0QXBwZWFyYW5jZVN0cmVhbSgpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBzZXRCb3JkZXJTdHlsZShzdHlsZSxzdHlsZVBhcmFtKXtcbiAgICAgICAgc3VwZXIuc2V0Qm9yZGVyU3R5bGUoc3R5bGUsc3R5bGVQYXJhbSk7XG4gICAgICAgIHJldHVybiBbdGhpcy5nZXRJZCgpXTtcbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBMaW5rOyIsImltcG9ydCBBbm5vdCBmcm9tICcuL0Fubm90JztcbmltcG9ydCBSZWN0T3BlcmF0b3IgZnJvbSBcIi4uL3NoYXJlL1JlY3RPcGVyYXRvclwiO1xuaW1wb3J0IGd1aWQgZnJvbSAnLi4vLi4vc2hhcmVkL2d1aWQnO1xuaW1wb3J0IHsgTUFSS1VQX0FOTk9UQVRJT05fU1RBVEUgfSBmcm9tICcuLi8uLi9zaGFyZWQvY29uc3RzJztcblxuY2xhc3MgTWFya3VwQW5ub3QgZXh0ZW5kcyBBbm5vdCB7XG4gICAgY29uc3RydWN0b3IgKGFubm90LCBwZGZQYWdlKSB7XG4gICAgICAgIHN1cGVyKGFubm90LCBwZGZQYWdlKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIEdTREsuTWFya3VwXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmFubm90ID0gbmV3IHRoaXMuZW5naW5lLk1hcmt1cCh0aGlzLmFubm90KTtcbiAgICB9XG4gICAgdG9Kc29uICgpIHtcbiAgICAgICAgbGV0IGpzb24gPSBzdXBlci50b0pzb24oKTtcbiAgICAgICAgbGV0IGFubm90ID0gdGhpcy5hbm5vdDtcbiAgICAgICAgbGV0IGVuZ2luZSA9IHRoaXMuZW5naW5lO1xuICAgICAgICBsZXQgZ2V0U3VtbWFyeSA9IHRoaXMuZ2V0U3VtbWFyeS5iaW5kKHRoaXMpO1xuXG4gICAgICAgIGxldCBpbnRlbnQgPSBhbm5vdC5HZXRJbnRlbnQoKS50b1N0cmluZygpO1xuXG4gICAgICAgIGxldCBwb3B1cFN1bW1hcnk7XG4gICAgICAgIGxldCBwb3B1cCA9IGFubm90LkdldFBvcHVwKCk7XG4gICAgICAgIGlmICghcG9wdXAuSXNFbXB0eSgpKSB7XG4gICAgICAgICAgICBwb3B1cFN1bW1hcnkgPSBnZXRTdW1tYXJ5KHBvcHVwLHRydWUpO1xuICAgICAgICAgICAgXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZ3JvdXBFbGVtZW50c1N1bW1hcnkgPSBbXTtcbiAgICAgICAgbGV0IGdyb3VwSGVhZGVyU3VtbWFyeTtcbiAgICAgICAgbGV0IGlzR3JvdXBlZCA9IGFubm90LklzR3JvdXBlZCgpO1xuICAgICAgICBsZXQgaXNHcm91cEhlYWRlciA9IGZhbHNlO1xuICAgICAgICBsZXQgZ3JvdXBFbGVtZW50cyA9IGFubm90LkdldEdyb3VwRWxlbWVudHMoKTtcbiAgICAgICAgaWYgKGlzR3JvdXBlZCYmZ3JvdXBFbGVtZW50cy5HZXRTaXplKCk+MCkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IGdyb3VwRWxlbWVudHMuR2V0U2l6ZSgpOyBpLS07KSB7XG4gICAgICAgICAgICAgICAgbGV0IG1hcmt1cCA9IGdyb3VwRWxlbWVudHMuR2V0QXQoaSk7XG4gICAgICAgICAgICAgICAgZ3JvdXBFbGVtZW50c1N1bW1hcnlbaV0gPSBnZXRTdW1tYXJ5KG1hcmt1cCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBncm91cEhlYWRlciA9IGFubm90LkdldEdyb3VwSGVhZGVyKCk7XG4gICAgICAgICAgICBncm91cEhlYWRlclN1bW1hcnkgPSBnZXRTdW1tYXJ5KGdyb3VwSGVhZGVyKTtcbiAgICAgICAgICAgIGlzR3JvdXBIZWFkZXIgPSBncm91cEhlYWRlclN1bW1hcnkuaWQgPT09IGpzb24uaWQ7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmVwbGllc1N1bW1hcnkgPSBbXTtcbiAgICAgICAgbGV0IHJlcGx5Q291bnQgPSBhbm5vdC5HZXRSZXBseUNvdW50KCk7XG4gICAgICAgIGZvciAobGV0IGkgPSByZXBseUNvdW50OyBpLS07KSB7XG4gICAgICAgICAgICBsZXQgcmVwbHlOb3RlID0gYW5ub3QuR2V0UmVwbHkoaSk7XG4gICAgICAgICAgICBsZXQgc3VtbWFyeSA9IGdldFN1bW1hcnkocmVwbHlOb3RlKTtcbiAgICAgICAgICAgIHN1bW1hcnkuY29udGVudCA9IHJlcGx5Tm90ZS5HZXRDb250ZW50KCk7XG4gICAgICAgICAgICByZXBsaWVzU3VtbWFyeVtpXSA9IHN1bW1hcnk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbWFya2VkU3RhdGVzU3VtbWFyeSA9IFtdO1xuICAgICAgICBsZXQgcmV2aWV3U3RhdGVzU3VtbWFyeSA9IFtdO1xuICAgICAgICBsZXQgU3RhdGVNb2RlbCA9IGVuZ2luZS5TdGF0ZU1vZGVsO1xuICAgICAgICBsZXQgZV9TdGF0ZU1vZGVsTWFya2VkID0gU3RhdGVNb2RlbC5lX1N0YXRlTW9kZWxNYXJrZWQ7XG4gICAgICAgIGxldCBlX1N0YXRlTW9kZWxSZXZpZXcgID0gU3RhdGVNb2RlbC5lX1N0YXRlTW9kZWxSZXZpZXcgO1xuICAgICAgICBsZXQgbWFya2VkU3RhdGVDb3VudCA9IGFubm90LkdldFN0YXRlQW5ub3RDb3VudChlX1N0YXRlTW9kZWxNYXJrZWQpO1xuICAgICAgICBmb3IgKGxldCBpID0gbWFya2VkU3RhdGVDb3VudDsgaS0tOykge1xuICAgICAgICAgICAgbGV0IG1hcmtlZFN0YXRlTm90ZSA9IGFubm90LkdldFN0YXRlQW5ub3QoZV9TdGF0ZU1vZGVsTWFya2VkLCBpKTtcbiAgICAgICAgICAgIG1hcmtlZFN0YXRlc1N1bW1hcnlbaV0gPSBnZXRTdW1tYXJ5KG1hcmtlZFN0YXRlTm90ZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJldmlld1N0YXRlQ291bnQgPSBhbm5vdC5HZXRTdGF0ZUFubm90Q291bnQoZV9TdGF0ZU1vZGVsUmV2aWV3KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHJldmlld1N0YXRlQ291bnQ7IGktLTspIHtcbiAgICAgICAgICAgIGxldCByZXZpZXdTdGF0ZU5vdGUgPSBhbm5vdC5HZXRTdGF0ZUFubm90KGVfU3RhdGVNb2RlbFJldmlldywgaSk7XG4gICAgICAgICAgICByZXZpZXdTdGF0ZXNTdW1tYXJ5W2ldID0gZ2V0U3VtbWFyeShyZXZpZXdTdGF0ZU5vdGUpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBsZXQgY3JlYXRlRGF0ZVRpbWUgPSBhbm5vdC5HZXRDcmVhdGlvbkRhdGVUaW1lKCk7XG4gICAgICAgIGxldCBjcmVhdGlvblRpbWVzdGFtcCA9IDA7XG4gICAgICAgIGlmKGNyZWF0ZURhdGVUaW1lLklzVmFsaWQoKSkge1xuICAgICAgICAgICAgY3JlYXRlRGF0ZVRpbWUgPSBjcmVhdGVEYXRlVGltZS5Ub1VUQ1RpbWUoKTtcbiAgICAgICAgICAgIGNyZWF0aW9uVGltZXN0YW1wID0gRGF0ZS5VVEMoXG4gICAgICAgICAgICAgICAgY3JlYXRlRGF0ZVRpbWUueWVhcixcbiAgICAgICAgICAgICAgICBjcmVhdGVEYXRlVGltZS5tb250aCAtIDEsXG4gICAgICAgICAgICAgICAgY3JlYXRlRGF0ZVRpbWUuZGF5LFxuICAgICAgICAgICAgICAgIGNyZWF0ZURhdGVUaW1lLmhvdXIsXG4gICAgICAgICAgICAgICAgY3JlYXRlRGF0ZVRpbWUubWludXRlLFxuICAgICAgICAgICAgICAgIGNyZWF0ZURhdGVUaW1lLnNlY29uZCxcbiAgICAgICAgICAgICAgICBjcmVhdGVEYXRlVGltZS5taWxsaXNlY29uZHNcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZGljdCA9IGFubm90LkdldERpY3QgKCk7XG5cbiAgICAgICAgbGV0IFJUT2JqID0gZGljdC5HZXRFbGVtZW50KG5ldyBlbmdpbmUuU3RyaW5nKFwiUlRcIikpO1xuICAgICAgICBsZXQgUlQ7XG4gICAgICAgIGxldCBJUlQ7XG4gICAgICAgIGlmKFJUT2JqKXtcbiAgICAgICAgICAgIFJUID0gUlRPYmouR2V0TmFtZSgpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICBpZihSVE9iai5HZXROYW1lKCkudG9TdHJpbmcoKT09XCJHcm91cFwiKVxuICAgICAgICAgICAgSVJUID0gZ3JvdXBIZWFkZXJTdW1tYXJ5LmlkO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG1vcmUgPSB7XG4gICAgICAgICAgICBjcmVhdGlvblRpbWVzdGFtcCxcbiAgICAgICAgICAgIG9wYWNpdHk6IGFubm90LkdldE9wYWNpdHkoKSxcbiAgICAgICAgICAgIHN1YmplY3Q6IGFubm90LkdldFN1YmplY3QoKS50b1N0cmluZygpLFxuICAgICAgICAgICAgdGl0bGU6IGFubm90LkdldFRpdGxlKCkudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGlzR3JvdXBlZCxcbiAgICAgICAgICAgIGlzR3JvdXBIZWFkZXIsXG4gICAgICAgICAgICBncm91cEVsZW1lbnRzU3VtbWFyeSxcbiAgICAgICAgICAgIGdyb3VwSGVhZGVyU3VtbWFyeSxcbiAgICAgICAgICAgIHJlcGxpZXNTdW1tYXJ5LFxuICAgICAgICAgICAgbWFya2VkU3RhdGVzU3VtbWFyeSxcbiAgICAgICAgICAgIHJldmlld1N0YXRlc1N1bW1hcnksXG4gICAgICAgICAgICBwb3B1cFN1bW1hcnksXG4gICAgICAgICAgICBpbnRlbnQsXG4gICAgICAgICAgICBSVCxcbiAgICAgICAgICAgIElSVFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihqc29uLCBtb3JlKTtcbiAgICB9XG4gICAgc2V0T3BhY2l0eSAob3BhY2l0eSkge1xuICAgICAgICBsZXQgYW5ub3RzID0gdGhpcy5nZXRTaG91bGRNb2RpZnlBbm5vdHModGhpcyk7XG4gICAgICAgIG9wYWNpdHkgPSArb3BhY2l0eTtcbiAgICAgICAgZm9yIChsZXQgaSA9IGFubm90cy5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgICAgIGxldCBhbm5vdCA9IGFubm90c1tpXS5hbm5vdDtcbiAgICAgICAgICAgIGFubm90LlNldE9wYWNpdHkob3BhY2l0eSk7XG4gICAgICAgICAgICBhbm5vdC5SZXNldEFwcGVhcmFuY2VTdHJlYW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ2V0SnJBbm5vdEFycmF5SWRzKGFubm90cyk7XG4gICAgfVxuICAgIHNldFN1YmplY3Qoc3ViamVjdCl7XG4gICAgICAgIGxldCBhbm5vdHMgPSB0aGlzLmdldFNob3VsZE1vZGlmeUFubm90cyh0aGlzKTtcbiAgICAgICAgc3ViamVjdCA9IG5ldyB0aGlzLmVuZ2luZS5XU3RyaW5nKHN1YmplY3QpO1xuICAgICAgICBmb3IgKGxldCBpID0gYW5ub3RzLmxlbmd0aDsgaS0tOykge1xuICAgICAgICAgICAgbGV0IGFubm90ID0gYW5ub3RzW2ldLmFubm90O1xuICAgICAgICAgICAgYW5ub3QuU2V0U3ViamVjdChzdWJqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ2V0SnJBbm5vdEFycmF5SWRzKGFubm90cyk7XG4gICAgfVxuICAgIHNldFRpdGxlKHRpdGxlKXtcbiAgICAgICAgbGV0IGFubm90cyA9IHRoaXMuZ2V0U2hvdWxkTW9kaWZ5QW5ub3RzKHRoaXMpO1xuICAgICAgICB0aXRsZSA9IG5ldyB0aGlzLmVuZ2luZS5XU3RyaW5nKHRpdGxlKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IGFubm90cy5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgICAgIGxldCBhbm5vdCA9IGFubm90c1tpXS5hbm5vdDtcbiAgICAgICAgICAgIGFubm90LlNldFRpdGxlKHRpdGxlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ2V0SnJBbm5vdEFycmF5SWRzKGFubm90cyk7XG4gICAgfVxuICAgIHNldENyZWF0ZURhdGVUaW1lIChkYXRlKSB7XG4gICAgICAgIGxldCBhbm5vdHMgPSB0aGlzLmdldFNob3VsZE1vZGlmeUFubm90cyh0aGlzKTtcbiAgICAgICAgY29uc3QgZGF0ZVRpbWUgPSB0aGlzLlRvRGF0ZVRpbWUoZGF0ZSk7XG4gICAgICAgIGZvciAobGV0IGkgPSBhbm5vdHMubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgICAgICBhbm5vdHNbaV0uYW5ub3QuU2V0Q3JlYXRpb25EYXRlVGltZShkYXRlVGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdldEpyQW5ub3RBcnJheUlkcyhhbm5vdHMpO1xuICAgIH1cbiAgICBhZGRSZXBseSAoY29udGVudCkge1xuICAgICAgICBsZXQgYW5ub3QgPSB0aGlzLmFubm90O1xuICAgICAgICBpZiAoYW5ub3QuSXNHcm91cGVkKCkpIHtcbiAgICAgICAgICAgIGFubm90ID0gYW5ub3QuR2V0R3JvdXBIZWFkZXIoKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVwbHlBbm5vdCA9IGFubm90LkFkZFJlcGx5KCk7XG4gICAgICAgIHJlcGx5QW5ub3QuU2V0VW5pcXVlSUQobmV3IHRoaXMuZW5naW5lLldTdHJpbmcoZ3VpZCgpKSk7XG4gICAgICAgIHJlcGx5QW5ub3QuU2V0Q29udGVudChuZXcgdGhpcy5lbmdpbmUuV1N0cmluZyhjb250ZW50KSk7XG4gICAgICAgIGNvbnN0IG5vdyA9IHRoaXMuVG9EYXRlVGltZShuZXcgRGF0ZSgpKVxuICAgICAgICByZXBseUFubm90LlNldENyZWF0aW9uRGF0ZVRpbWUobm93KTtcbiAgICAgICAgcmVwbHlBbm5vdC5TZXRNb2RpZmllZERhdGVUaW1lKG5vdyk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRVc2VyTmFtZSA9IHRoaXMuSlIuZ2V0VXNlck5hbWUoKSB8fCAnR3Vlc3QnO1xuICAgICAgICByZXBseUFubm90LlNldFRpdGxlKG5ldyB0aGlzLmVuZ2luZS5XU3RyaW5nKGN1cnJlbnRVc2VyTmFtZSkpO1xuICAgICAgICByZXR1cm4gdGhpcy5KUi5hbm5vdE1hbmFnZXIuZ2V0KHJlcGx5QW5ub3QsIHRoaXMucGRmUGFnZSk7XG4gICAgfVxuICAgIGFkZFJldmlld1N0YXRlKG5hbWUpIHtcbiAgICAgICAgc3dpdGNoKG5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgTUFSS1VQX0FOTk9UQVRJT05fU1RBVEUuQUNDRVBURUQ6XG4gICAgICAgICAgICBjYXNlIE1BUktVUF9BTk5PVEFUSU9OX1NUQVRFLkNBTkNFTExFRDpcbiAgICAgICAgICAgIGNhc2UgTUFSS1VQX0FOTk9UQVRJT05fU1RBVEUuQ09NUExFVEVEOlxuICAgICAgICAgICAgY2FzZSBNQVJLVVBfQU5OT1RBVElPTl9TVEFURS5OT05FOlxuICAgICAgICAgICAgY2FzZSBNQVJLVVBfQU5OT1RBVElPTl9TVEFURS5SRUpFQ1RFRDpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSWxsZWdhbCBhcmd1bWVudDogdW5leHBlY3RlZCByZXZpZXcgc3RhdGUgbmFtZTogJHtuYW1lfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRTdGF0ZSh0aGlzLmVuZ2luZS5TdGF0ZU1vZGVsLmVfU3RhdGVNb2RlbFJldmlldywgbmFtZSk7XG4gICAgfVxuICAgIGFkZE1hcmtlZFN0YXRlKG5hbWUpIHtcbiAgICAgICAgc3dpdGNoKG5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgTUFSS1VQX0FOTk9UQVRJT05fU1RBVEUuTUFSS0VEOlxuICAgICAgICAgICAgY2FzZSBNQVJLVVBfQU5OT1RBVElPTl9TVEFURS5VTk1BUktFRDpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSWxsZWdhbCBBcmd1bWVudDogdW5leHBlY3RlZCBtYXJrZWQgc3RhdGUgbmFtZSA6ICR7bmFtZX0sIGl0IHNob3VsZCBiZSAnbWFya2VkJyBvciAndW5tYXJrZWQnYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZFN0YXRlKHRoaXMuZW5naW5lLlN0YXRlTW9kZWwuZV9TdGF0ZU1vZGVsTWFya2VkLCBuYW1lKTtcbiAgICB9XG4gICAgX2FkZFN0YXRlKHN0YXRlTW9kZWwsIG5hbWUpIHtcbiAgICAgICAgbGV0IGFubm90ID0gdGhpcy5hbm5vdDtcbiAgICAgICAgaWYoYW5ub3QuSXNHcm91cGVkKCkpIHtcbiAgICAgICAgICAgIGFubm90ID0gYW5ub3QuR2V0R3JvdXBIZWFkZXIoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdGF0ZUFubm90ID0gYW5ub3QuQWRkU3RhdGVBbm5vdChzdGF0ZU1vZGVsLCB0aGlzLmNvbnZlcnRUb0VuZ2luZVN0YXRlVmFsdWUobmFtZSkpO1xuICAgICAgICBzdGF0ZUFubm90LlNldFVuaXF1ZUlEKG5ldyB0aGlzLmVuZ2luZS5XU3RyaW5nKGd1aWQoKSkpO1xuICAgICAgICBjb25zdCBub3cgPSB0aGlzLlRvRGF0ZVRpbWUobmV3IERhdGUoKSlcbiAgICAgICAgc3RhdGVBbm5vdC5TZXRDcmVhdGlvbkRhdGVUaW1lKG5vdyk7XG4gICAgICAgIHN0YXRlQW5ub3QuU2V0TW9kaWZpZWREYXRlVGltZShub3cpO1xuICAgICAgICBjb25zdCBjdXJyZW50VXNlck5hbWUgPSB0aGlzLkpSLmdldFVzZXJOYW1lKCkgfHwgJ0d1ZXN0JztcbiAgICAgICAgc3RhdGVBbm5vdC5TZXRUaXRsZShuZXcgdGhpcy5lbmdpbmUuV1N0cmluZyhjdXJyZW50VXNlck5hbWUpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuSlIuYW5ub3RNYW5hZ2VyLmdldChzdGF0ZUFubm90LCB0aGlzLnBkZlBhZ2UpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgICAqL1xuICAgIHJlbW92ZUFsbFN0YXRlQW5ub3RzKCl7XG4gICAgICAgIGxldCBhbm5vdCA9IHRoaXMuYW5ub3Q7XG4gICAgICAgIGlmKGFubm90LklzR3JvdXBlZCgpKSB7XG4gICAgICAgICAgICBhbm5vdCA9IGFubm90LkdldEdyb3VwSGVhZGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFubm90LlJlbW92ZUFsbFN0YXRlQW5ub3RzKCk7XG4gICAgfVxuICAgIGNvbnZlcnRUb0VuZ2luZVN0YXRlVmFsdWUoc3RhdGVOYW1lKSB7XG4gICAgICAgIHN3aXRjaChzdGF0ZU5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgTUFSS1VQX0FOTk9UQVRJT05fU1RBVEUuQUNDRVBURUQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW5naW5lLk1hcmt1cFN0YXRlLmVfU3RhdGVBY2NlcHRlZDtcbiAgICAgICAgICAgIGNhc2UgTUFSS1VQX0FOTk9UQVRJT05fU1RBVEUuQ0FOQ0VMTEVEOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVuZ2luZS5NYXJrdXBTdGF0ZS5lX1N0YXRlQ2FuY2VsbGVkO1xuICAgICAgICAgICAgY2FzZSBNQVJLVVBfQU5OT1RBVElPTl9TVEFURS5DT01QTEVURUQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW5naW5lLk1hcmt1cFN0YXRlLmVfU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICBjYXNlIE1BUktVUF9BTk5PVEFUSU9OX1NUQVRFLk5PTkU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW5naW5lLk1hcmt1cFN0YXRlLmVfU3RhdGVOb25lO1xuICAgICAgICAgICAgY2FzZSBNQVJLVVBfQU5OT1RBVElPTl9TVEFURS5SRUpFQ1RFRDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lbmdpbmUuTWFya3VwU3RhdGUuZV9TdGF0ZVJlamVjdGVkO1xuICAgICAgICAgICAgY2FzZSBNQVJLVVBfQU5OT1RBVElPTl9TVEFURS5VTk1BUktFRDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lbmdpbmUuTWFya3VwU3RhdGUuZV9TdGF0ZVVubWFya2VkO1xuICAgICAgICAgICAgY2FzZSBNQVJLVVBfQU5OT1RBVElPTl9TVEFURS5NQVJLRUQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW5naW5lLk1hcmt1cFN0YXRlLmVfU3RhdGVNYXJrZWQ7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgdW5zdXBwb3J0ZWQgc3RhdGU6ICR7c3RhdGVOYW1lfWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlbW92ZSAoKSB7XG4gICAgICAgIGxldCBhbm5vdCA9IHRoaXMuYW5ub3Q7XG4gICAgICAgIGxldCBwYWdlID0gYW5ub3QuR2V0UGFnZSgpO1xuICAgICAgICBsZXQgZ3JvdXBIZWFkZXI7XG4gICAgICAgIGlmICgoZ3JvdXBIZWFkZXIgPSBhbm5vdC5HZXRHcm91cEhlYWRlcigpKSAmJiAhZ3JvdXBIZWFkZXIuSXNFbXB0eSgpKSB7XG4gICAgICAgICAgICBhbm5vdCA9IGdyb3VwSGVhZGVyO1xuICAgICAgICB9XG4gICAgICAgIGxldCByZW1vdmVkSWRzID0gdGhpcy5yZW1vdmVSZWxhdGl2ZXMoKTtcblxuICAgICAgICBpZiAoYW5ub3QuSXNHcm91cGVkKCkpIHtcbiAgICAgICAgICAgIGxldCBncm91cEVsZW1lbnRzID0gYW5ub3QuR2V0R3JvdXBFbGVtZW50cygpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IGdyb3VwRWxlbWVudHMuR2V0U2l6ZSgpOyBpLS07KSB7XG4gICAgICAgICAgICAgICAgbGV0IG1hcmt1cCA9IGdyb3VwRWxlbWVudHMuR2V0QXQoaSk7XG4gICAgICAgICAgICAgICAgbGV0IG1hcmt1cElkID0gbWFya3VwLkdldFVuaXF1ZUlEKCkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBqckFubm90ID0gdGhpcy5wZGZQYWdlLmFubm90TWFuYWdlci5nZXQobWFya3VwLCB0aGlzLnBkZlBhZ2UpO1xuICAgICAgICAgICAgICAgIC8qaWYgKHBhZ2UuUmVtb3ZlQW5ub3QobWFya3VwKSkge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVkSWRzLnB1c2gobWFya3VwSWQpO1xuICAgICAgICAgICAgICAgICAgICBpZihtYXJrdXBJZCAhPT0gdGhpcy5nZXRJZCgpICYmIGpyQW5ub3QgaW5zdGFuY2VvZiBNYXJrdXBBbm5vdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsvL+e7hOWIoOmZpOaXtu+8jOmHjeWkjeWIoOmZpOWFs+iBlEdTREvmiqXplJnvvIzlhYjmjZXojrflpITnkIZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBnUmVtb3ZlZElkcyA9IGpyQW5ub3QucmVtb3ZlUmVsYXRpdmVzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlZElkcy5wdXNoLmFwcGx5KHJlbW92ZWRJZHMsIGdSZW1vdmVkSWRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1jYXRjaCAoZSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9Ki9cbiAgICAgICAgICAgICAgICBpZihtYXJrdXBJZCAhPT0gdGhpcy5nZXRJZCgpICYmIGpyQW5ub3QgaW5zdGFuY2VvZiBNYXJrdXBBbm5vdCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBnUmVtb3ZlZElkcyA9IGpyQW5ub3QucmVtb3ZlUmVsYXRpdmVzKCk7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZWRJZHMucHVzaC5hcHBseShyZW1vdmVkSWRzLCBnUmVtb3ZlZElkcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwYWdlLlJlbW92ZUFubm90KG1hcmt1cCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlZElkcy5wdXNoKG1hcmt1cElkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgcmVtb3ZlZElkID0gYW5ub3QuR2V0VW5pcXVlSUQoKS50b1N0cmluZygpO1xuICAgICAgICAgICAgaWYgKHBhZ2UuUmVtb3ZlQW5ub3QoYW5ub3QpKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlZElkcy5wdXNoKHJlbW92ZWRJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucGRmUGFnZS51cGRhdGUoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiByZW1vdmVkSWRzO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmVtb3ZlUmVsYXRpdmVzKCkge1xuICAgICAgICBjb25zdCBlbmdpbmUgPSB0aGlzLmVuZ2luZTtcbiAgICAgICAgY29uc3QgYW5ub3QgPSB0aGlzLmFubm90O1xuICAgICAgICBjb25zdCByZW1vdmVkSWRzID0gW107XG4gICAgICAgIGxldCBwYWdlID0gYW5ub3QuR2V0UGFnZSgpO1xuICAgICAgICAvLyDlhYjnp7vpmaTlhbPogZTnmoRhbm5vdGF0aW9uXG4gICAgICAgIGxldCBwb3B1cDtcbiAgICAgICAgaWYgKChwb3B1cCA9IGFubm90LkdldFBvcHVwKCkpICYmICFwb3B1cC5Jc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIGxldCBwb3B1cElkID0gcG9wdXAuR2V0VW5pcXVlSUQoKS50b1N0cmluZygpO1xuICAgICAgICAgICAgaWYgKHBhZ2UuUmVtb3ZlQW5ub3QocG9wdXApKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlZElkcy5wdXNoKHBvcHVwSWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCByZXBseUlkcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gYW5ub3QuR2V0UmVwbHlDb3VudCgpOyBpLS07KSB7XG4gICAgICAgICAgICByZXBseUlkc1tpXSA9IGFubm90LkdldFJlcGx5KGkpLkdldFVuaXF1ZUlEKCkudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYW5ub3QuUmVtb3ZlQWxsUmVwbGllcygpKSB7XG4gICAgICAgICAgICByZW1vdmVkSWRzLnB1c2goLi4ucmVwbHlJZHMpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBtYXJrZWRTdGF0ZXNJZHMgPSBbXTtcbiAgICAgICAgbGV0IHJldmlld1N0YXRlc0lkcyA9IFtdO1xuICAgICAgICBsZXQgU3RhdGVNb2RlbCA9IGVuZ2luZS5TdGF0ZU1vZGVsO1xuICAgICAgICBsZXQgZV9TdGF0ZU1vZGVsTWFya2VkID0gU3RhdGVNb2RlbC5lX1N0YXRlTW9kZWxNYXJrZWQ7XG4gICAgICAgIGxldCBlX1N0YXRlTW9kZWxSZXZpZXcgID0gU3RhdGVNb2RlbC5lX1N0YXRlTW9kZWxSZXZpZXcgO1xuICAgICAgICBsZXQgbWFya2VkU3RhdGVDb3VudCA9IGFubm90LkdldFN0YXRlQW5ub3RDb3VudChlX1N0YXRlTW9kZWxNYXJrZWQpO1xuICAgICAgICBmb3IgKGxldCBpID0gbWFya2VkU3RhdGVDb3VudDsgaS0tOykge1xuICAgICAgICAgICAgbGV0IG1hcmtlZFN0YXRlTm90ZSA9IGFubm90LkdldFN0YXRlQW5ub3QoZV9TdGF0ZU1vZGVsTWFya2VkLCBpKTtcbiAgICAgICAgICAgIG1hcmtlZFN0YXRlc0lkc1tpXSA9IG1hcmtlZFN0YXRlTm90ZS5HZXRVbmlxdWVJRCgpLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJldmlld1N0YXRlQ291bnQgPSBhbm5vdC5HZXRTdGF0ZUFubm90Q291bnQoZV9TdGF0ZU1vZGVsUmV2aWV3KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHJldmlld1N0YXRlQ291bnQ7IGktLTspIHtcbiAgICAgICAgICAgIGxldCByZXZpZXdTdGF0ZU5vdGUgPSBhbm5vdC5HZXRTdGF0ZUFubm90KGVfU3RhdGVNb2RlbFJldmlldywgaSk7XG4gICAgICAgICAgICByZXZpZXdTdGF0ZXNJZHNbaV0gPSByZXZpZXdTdGF0ZU5vdGUuR2V0VW5pcXVlSUQoKS50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhbm5vdC5SZW1vdmVBbGxTdGF0ZUFubm90cygpKSB7XG4gICAgICAgICAgICByZW1vdmVkSWRzLnB1c2goLi4ubWFya2VkU3RhdGVzSWRzKTtcbiAgICAgICAgICAgIHJlbW92ZWRJZHMucHVzaCguLi5yZXZpZXdTdGF0ZXNJZHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZW1vdmVkSWRzO1xuICAgIH1cbiAgICBtb3ZlVG8obGVmdCwgdG9wKXtcbiAgICAgICAgbGV0IGFubm90ID0gdGhpcy5hbm5vdDtcbiAgICAgICAgbGV0IGlzR3JvdXBlZCA9IGFubm90LklzR3JvdXBlZCgpO1xuICAgICAgICBpZihpc0dyb3VwZWQpe1xuICAgICAgICAgICAgY29uc3QgcmVjdCA9IHRoaXMuYW5ub3QuR2V0UmVjdCgpO1xuICAgICAgICAgICAgbGV0IG9mZnNldExlZnQ9bGVmdCAtIHJlY3QubGVmdCxcbiAgICAgICAgICAgICAgICBvZmZzZXRUb3A9dG9wIC0gcmVjdC50b3A7XG4gICAgICAgICAgICBsZXQgYW5ub3RzID0gdGhpcy5nZXRTaG91bGRNb2RpZnlBbm5vdHModGhpcyk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gYW5ub3RzLmxlbmd0aDsgaS0tOykge1xuICAgICAgICAgICAgICAgIGxldCBtYXJrdXAgPSBhbm5vdHNbaV0uYW5ub3Q7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVzdGluYXRpb24gPSBSZWN0T3BlcmF0b3Iub24obWFya3VwLkdldFJlY3QoKSkubW92ZShvZmZzZXRMZWZ0LCBvZmZzZXRUb3ApLmV4dHJhY3QoKTtcbiAgICAgICAgICAgICAgICBtYXJrdXAuTW92ZShkZXN0aW5hdGlvbik7XG4gICAgICAgICAgICAgICAgbWFya3VwLlJlc2V0QXBwZWFyYW5jZVN0cmVhbSgpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZ2V0SnJBbm5vdEFycmF5SWRzKGFubm90cyk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgcmV0dXJuIHN1cGVyLm1vdmVUbyhsZWZ0LCB0b3ApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldEludGVudCAoaW50ZW50KSB7XG4gICAgICAgIGxldCBhbm5vdCA9IHRoaXMuYW5ub3Q7XG4gICAgICAgIGFubm90LlNldEludGVudChuZXcgdGhpcy5lbmdpbmUuU3RyaW5nKGludGVudCkpO1xuICAgICAgICBpZih0aGlzLmFubm90LkdldFR5cGUoKS52YWx1ZSAhPSAzKXtcbiAgICAgICAgICAgIGFubm90LlJlc2V0QXBwZWFyYW5jZVN0cmVhbSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbdGhpcy5nZXRJZCgpXTtcbiAgICB9XG4gICAgY3JlYXRlIChqc29uKSB7XG4gICAgICAgIGxldCBpbnRlbnQ7XG4gICAgICAgIGlmIChpbnRlbnQgPSBqc29uLmludGVudCkge1xuICAgICAgICAgICAgdGhpcy5zZXRJbnRlbnQoaW50ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN1cGVyLmNyZWF0ZShqc29uKTtcbiAgICAgICAgbGV0IGNyZWF0aW9uVGltZXN0YW1wID0ganNvbi5jcmVhdGlvblRpbWVzdGFtcDtcbiAgICAgICAgbGV0IGNyZWF0aW9uRGF0ZTtcbiAgICAgICAgaWYgKGNyZWF0aW9uVGltZXN0YW1wID4gMCkge1xuICAgICAgICAgICAgY3JlYXRpb25EYXRlID0gbmV3IERhdGUoY3JlYXRpb25UaW1lc3RhbXApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3JlYXRpb25EYXRlID0gbmV3IERhdGUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldENyZWF0ZURhdGVUaW1lKGNyZWF0aW9uRGF0ZSk7XG4gICAgICAgIHRoaXMuc2V0TW9kaWZpZWREYXRlVGltZShjcmVhdGlvbkRhdGUpO1xuICAgICAgICBcbiAgICAgICAgaWYgKHR5cGVvZiBqc29uLm9wYWNpdHkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBsZXQgb3BhY2l0eSA9ICgranNvbi5vcGFjaXR5KTtcbiAgICAgICAgICAgIHRoaXMuc2V0T3BhY2l0eShvcGFjaXR5KTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgc3ViamVjdDtcbiAgICAgICAgaWYgKHN1YmplY3QgPSBqc29uLnN1YmplY3QpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3ViamVjdChzdWJqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdGl0bGU7XG4gICAgICAgIGlmICh0aXRsZSA9ICh0eXBlb2YganNvbi50aXRsZSA9PT0gJ3VuZGVmaW5lZCcgPyB0aGlzLkpSLmdldFVzZXJOYW1lKCkgOiBqc29uLnRpdGxlKSkge1xuICAgICAgICAgICAgdGhpcy5zZXRUaXRsZSh0aXRsZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYoanNvbi5ub1BvcHVwKXtcbiAgICAgICAgICAgIHJldHVybiBbdGhpc107XG4gICAgICAgIH1cbiAgICAgICAgaWYoanNvbi50eXBlIT0nZnJlZXRleHQnKXtcbiAgICAgICAgICAgIGxldCBhbm5vdCA9IHRoaXMuYW5ub3Q7XG4gICAgICAgICAgICBsZXQgcGFnZSA9IGFubm90LkdldFBhZ2UoKTtcbiAgICAgICAgICAgIGxldCBlbmdpbmUgPSB0aGlzLmVuZ2luZTtcbiAgICAgICAgICAgIGxldCBwb3B1cCA9IHBhZ2UuQWRkQW5ub3QoZW5naW5lLkFubm90VHlwZS5lX1BvcHVwLCBhbm5vdC5HZXRSZWN0KCkpO1xuICAgICAgICAgICAgYW5ub3QuU2V0UG9wdXAobmV3IGVuZ2luZS5Qb3B1cChwb3B1cCkpO1xuICAgICAgICAgICAgcG9wdXAgPSB0aGlzLkpSLmFubm90TWFuYWdlci5nZXQocG9wdXAsIHRoaXMucGRmUGFnZSk7XG4gICAgICAgICAgICAvL3BvcHVwLmNyZWF0ZShqc29uKTtcbiAgICAgICAgICAgIGpzb24ubmFtZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHJldHVybiBbdGhpcywgcG9wdXAuY3JlYXRlKGpzb24pWzBdXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW3RoaXNdO1xuICAgIH1cbiAgICBfc2V0RmlsbENvbG9yKGNvbG9yKXtcbiAgICAgICAgaWYodHlwZW9mIGNvbG9yICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbmNvcnJlY3QgY29sb3IgdmFsdWU6ICR7Y29sb3J9YCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYoY29sb3IgPCAwKSB7XG4gICAgICAgICAgICBjb2xvciA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGFubm90ID0gdGhpcy5hbm5vdDtcbiAgICAgICAgbGV0IHNldFZhbHVlO1xuICAgICAgICBpZiAoY29sb3IgPT09IDApIHtcbiAgICAgICAgICAgIHNldFZhbHVlID0gZnVuY3Rpb24gKGFubm90KSB7XG4gICAgICAgICAgICAgICAgYW5ub3QuUmVtb3ZlUHJvcGVydHkoe3ZhbHVlOjN9KTtcbiAgICAgICAgICAgICAgICBhbm5vdC5SZXNldEFwcGVhcmFuY2VTdHJlYW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNldFZhbHVlID0gZnVuY3Rpb24gKGFubm90KSB7XG4gICAgICAgICAgICAgICAgYW5ub3QuU2V0RmlsbENvbG9yJiZhbm5vdC5TZXRGaWxsQ29sb3IoY29sb3IpO1xuICAgICAgICAgICAgICAgIGFubm90LlJlc2V0QXBwZWFyYW5jZVN0cmVhbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBlbmdpbmUgPSB0aGlzLmVuZ2luZTtcbiAgICAgICAgbGV0IEFubm90VHlwZSA9IGVuZ2luZS5Bbm5vdFR5cGU7XG4gICAgICAgIGxldCBmaWx0ZXJUeXBlID0gW0Fubm90VHlwZS5lX1NxdWFyZSwgQW5ub3RUeXBlLmVfQ2lyY2xlLCBBbm5vdFR5cGUuZV9GcmVlVGV4dCwgQW5ub3RUeXBlLmVfUG9seWdvbiwgQW5ub3RUeXBlLmVfUmVkYWN0XTtcbiAgICAgICAgbGV0IGFubm90cyA9IHRoaXMuZ2V0U2hvdWxkTW9kaWZ5QW5ub3RzKHRoaXMsIGZ1bmN0aW9uIChqckFubm90KSB7XG4gICAgICAgICAgICBsZXQgYW5ub3QgPSBqckFubm90LmFubm90O1xuICAgICAgICAgICAgcmV0dXJuIGZpbHRlclR5cGUuaW5kZXhPZlthbm5vdC5HZXRUeXBlKCldICE9PSAtMTtcbiAgICAgICAgfSk7XG4gICAgICAgIGZvciAobGV0IGkgPSBhbm5vdHMubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgICAgICBzZXRWYWx1ZShhbm5vdHNbaV0uYW5ub3QpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbm5vdHM7XG4gICAgfVxuICAgIGdldFNob3VsZE1vZGlmeUFubm90cyAoanJBbm5vdCwgZmlsdGVyID0gZnVuY3Rpb24gKGFubm90KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pIHtcbiAgICAgICAgbGV0IGFubm90ID0ganJBbm5vdC5hbm5vdDtcbiAgICAgICAgaWYgKCFhbm5vdC5Jc0dyb3VwZWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIFtqckFubm90XTtcbiAgICAgICAgfVxuICAgICAgICAvL2xldCBncm91cEhlYWRlciA9IGFubm90LkdldEdyb3VwSGVhZGVyKCk7XG4gICAgICAgIC8vaWYgKGdyb3VwSGVhZGVyLkdldFVuaXF1ZUlEKCkudG9TdHJpbmcoKSAhPT0gYW5ub3QuR2V0VW5pcXVlSUQoKS50b1N0cmluZygpKSB7XG4gICAgICAgIC8vICAgIHJldHVybiBbanJBbm5vdF07XG4gICAgICAgIC8vfVxuICAgICAgICAvLyBncm91cEhlYWRlcuiuvue9ruS6huWAvO+8jGdyb3VwRWxlbWVudHPkuZ/kuIDotbforr7nva5cbiAgICAgICAgbGV0IGFubm90cyA9IFtdO1xuICAgICAgICBsZXQgZ3JvdXBFbGVtZW50cyA9IGFubm90LkdldEdyb3VwRWxlbWVudHMoKTtcbiAgICAgICAgbGV0IGFubm90TWFuYWdlciA9IHRoaXMuSlIuYW5ub3RNYW5hZ2VyO1xuICAgICAgICBsZXQgcGRmUGFnZSA9IGpyQW5ub3QucGRmUGFnZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IGdyb3VwRWxlbWVudHMuR2V0U2l6ZSgpOyBpLS07KSB7XG4gICAgICAgICAgICBhbm5vdHNbaV0gPSBhbm5vdE1hbmFnZXIuZ2V0KGdyb3VwRWxlbWVudHMuR2V0QXQoaSksIHBkZlBhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbm5vdHMuZmlsdGVyKGZpbHRlcik7XG4gICAgfVxuXG4gICAgc2V0Q29udGVudCAoY29udGVudCkge1xuICAgICAgICBsZXQgYW5ub3QgPSB0aGlzLmFubm90O1xuICAgICAgICBpZiAoYW5ub3QuSXNHcm91cGVkKCkpIHtcbiAgICAgICAgICAgIGFubm90ID0gYW5ub3QuR2V0R3JvdXBIZWFkZXIoKTtcbiAgICAgICAgfVxuICAgICAgICBhbm5vdC5TZXRDb250ZW50KG5ldyB0aGlzLmVuZ2luZS5XU3RyaW5nKGNvbnRlbnQpKTtcbiAgICAgICAgc3dpdGNoKGFubm90LkdldFR5cGUoKSkge1xuICAgICAgICAgICAgY2FzZSB0aGlzLmVuZ2luZS5Bbm5vdFR5cGUuZV9GcmVlVGV4dDpcbiAgICAgICAgICAgIGNhc2UgdGhpcy5lbmdpbmUuQW5ub3RUeXBlLmVfTGluZTpcbiAgICAgICAgICAgICAgICBhbm5vdC5SZXNldEFwcGVhcmFuY2VTdHJlYW0oKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYW5ub3QuR2V0VW5pcXVlSUQoKS50b1N0cmluZygpO1xuICAgIH1cblxuICAgIHNldEJvcmRlclN0eWxlKHN0eWxlLCBzdHlsZVBhcmFtKSB7XG4gICAgICAgIGxldCBhbm5vdHMgPSB0aGlzLmdldFNob3VsZE1vZGlmeUFubm90cyh0aGlzKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IGFubm90cy5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgICAgIGFubm90c1tpXS5fc2V0Qm9yZGVyU3R5bGUoc3R5bGUsIHN0eWxlUGFyYW0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBnZXRKckFubm90QXJyYXlJZHMoYW5ub3RzKTtcbiAgICB9XG4gICAgX3NldEJvcmRlclN0eWxlIChzdHlsZSwgc3R5bGVQYXJhbSkge1xuICAgICAgICByZXR1cm4gc3VwZXIuc2V0Qm9yZGVyU3R5bGUoc3R5bGUsIHN0eWxlUGFyYW0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTWFya3VwQW5ub3Q7XG5cbmZ1bmN0aW9uIGdldEpyQW5ub3RBcnJheUlkcyAoYW5ub3RzKSB7XG4gICAgbGV0IGlkcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSBhbm5vdHMubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgIGlkc1tpXSA9IGFubm90c1tpXS5nZXRJZCgpO1xuICAgIH1cbiAgICByZXR1cm4gaWRzO1xufSIsImltcG9ydCBNYXJrdXBBbm5vdCBmcm9tICcuL01hcmt1cEFubm90JztcbmltcG9ydCB7IE1BUktVUF9BTk5PVEFUSU9OX1NUQVRFIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2NvbnN0cyc7XG5cbmNsYXNzIE5vdGUgZXh0ZW5kcyBNYXJrdXBBbm5vdCB7XG4gICAgY29uc3RydWN0b3IgKGFubm90LCBwZGZQYWdlKSB7XG4gICAgICAgIHN1cGVyKGFubm90LCBwZGZQYWdlKTtcbiAgICAgICAgdGhpcy5hbm5vdCA9IG5ldyB0aGlzLmVuZ2luZS5Ob3RlKHRoaXMuYW5ub3QpO1xuICAgIH1cblxuICAgIHNldEljb25OYW1lKGljb25OYW1lKXtcbiAgICAgICAgbGV0IGFubm90ID0gdGhpcy5hbm5vdDtcbiAgICAgICAgYW5ub3QuU2V0SWNvbk5hbWUobmV3IHRoaXMuZW5naW5lLlN0cmluZyhpY29uTmFtZSkpO1xuICAgICAgICBhbm5vdC5SZXNldEFwcGVhcmFuY2VTdHJlYW0oKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIFxuICAgIHNldE9wZW5TdGF0dXMoaXNPcGVuKSB7XG4gICAgICAgIHRoaXMuYW5ub3QuU2V0T3BlblN0YXR1cyhpc09wZW4pO1xuICAgICAgICBhbm5vdC5SZXNldEFwcGVhcmFuY2VTdHJlYW0oKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgc2V0U3RhdGVOYW1lKG5hbWUpIHtcbiAgICAgICAgY29uc3QgYW5ub3QgPSB0aGlzLmFubm90O1xuICAgICAgICBpZighYW5ub3QuSXNTdGF0ZUFubm90KCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbmV3U3RhdGVOYW1lO1xuICAgICAgICBzd2l0Y2goYW5ub3QuR2V0U3RhdGVNb2RlbCgpKSB7XG4gICAgICAgICAgICBjYXNlIHRoaXMuZW5naW5lLlN0YXRlTW9kZWwuZV9TdGF0ZU1vZGVsTWFya2VkOlxuICAgICAgICAgICAgICAgIHN3aXRjaChuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgTUFSS1VQX0FOTk9UQVRJT05fU1RBVEUuVU5NQVJLRUQ6XG4gICAgICAgICAgICAgICAgICAgIG5ld1N0YXRlTmFtZSA9IHRoaXMuZW5naW5lLk1hcmt1cFN0YXRlLmVfU3RhdGVVbm1hcmtlZDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgTUFSS1VQX0FOTk9UQVRJT05fU1RBVEUuTUFSS0VEOlxuICAgICAgICAgICAgICAgICAgICBuZXdTdGF0ZU5hbWUgPSB0aGlzLmVuZ2luZS5NYXJrdXBTdGF0ZS5lX1N0YXRlTWFya2VkO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSWxsZWdhbCBhcmd1bWVudDogaW5jb3JyZWN0IHN0YXRlIG5hbWUgaW4gbWFya2VkIHN0YXRlIG1vZGVsOiAke25hbWV9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHRoaXMuZW5naW5lLlN0YXRlTW9kZWwuZV9TdGF0ZU1vZGVsUmV2aWV3OlxuICAgICAgICAgICAgICAgIHN3aXRjaChuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgTUFSS1VQX0FOTk9UQVRJT05fU1RBVEUuQUNDRVBURUQ6XG4gICAgICAgICAgICAgICAgICAgIG5ld1N0YXRlTmFtZSA9IHRoaXMuZW5naW5lLk1hcmt1cFN0YXRlLmVfU3RhdGVBY2NlcHRlZDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgTUFSS1VQX0FOTk9UQVRJT05fU1RBVEUuQ0FOQ0VMTEVEOlxuICAgICAgICAgICAgICAgICAgICBuZXdTdGF0ZU5hbWUgPSB0aGlzLmVuZ2luZS5NYXJrdXBTdGF0ZS5lX1N0YXRlQ2FuY2VsbGVkO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBNQVJLVVBfQU5OT1RBVElPTl9TVEFURS5DT01QTEVURUQ6XG4gICAgICAgICAgICAgICAgICAgIG5ld1N0YXRlTmFtZSA9IHRoaXMuZW5naW5lLk1hcmt1cFN0YXRlLmVfU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIE1BUktVUF9BTk5PVEFUSU9OX1NUQVRFLk5PTkU6XG4gICAgICAgICAgICAgICAgICAgIG5ld1N0YXRlTmFtZSA9IHRoaXMuZW5naW5lLk1hcmt1cFN0YXRlLmVfU3RhdGVOb25lO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBNQVJLVVBfQU5OT1RBVElPTl9TVEFURS5SRUpFQ1RFRDpcbiAgICAgICAgICAgICAgICAgICAgbmV3U3RhdGVOYW1lID0gdGhpcy5lbmdpbmUuTWFya3VwU3RhdGUuZV9TdGF0ZVJlamVjdGVkO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSWxsZWdhbCBhcmd1bWVudDogaW5jb3JyZWN0IHN0YXRlIG5hbWUgaW4gcmV2aWV3IHN0YXRlIG1vZGVsOiAke25hbWV9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgYW5ub3QuU2V0U3RhdGUobmV3U3RhdGVOYW1lKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdG9Kc29uKCl7XG4gICAgICAgIGxldCBiYXNpY0luZm8gPSBzdXBlci50b0pzb24oKTtcbiAgICAgICAgYmFzaWNJbmZvLmZsYWcgfD0gMjQ7XG4gICAgICAgIGJhc2ljSW5mby5pY29uTmFtZSA9IHRoaXMuYW5ub3QuR2V0SWNvbk5hbWUoKS50b1N0cmluZygpO1xuICAgICAgICBpZih0aGlzLmFubm90LklzU3RhdGVBbm5vdCgpKSB7XG4gICAgICAgICAgICBiYXNpY0luZm8uaXNTdGF0ZUFubm90ID0gdHJ1ZTtcbiAgICAgICAgICAgIHN3aXRjaCh0aGlzLmFubm90LkdldFN0YXRlKCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuZW5naW5lLk1hcmt1cFN0YXRlLmVfU3RhdGVBY2NlcHRlZDpcbiAgICAgICAgICAgICAgICBiYXNpY0luZm8uc3RhdGUgPSBNQVJLVVBfQU5OT1RBVElPTl9TVEFURS5BQ0NFUFRFRDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuZW5naW5lLk1hcmt1cFN0YXRlLmVfU3RhdGVDYW5jZWxsZWQ6XG4gICAgICAgICAgICAgICAgYmFzaWNJbmZvLnN0YXRlID0gTUFSS1VQX0FOTk9UQVRJT05fU1RBVEUuQ0FOQ0VMTEVEO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5lbmdpbmUuTWFya3VwU3RhdGUuZV9TdGF0ZUNvbXBsZXRlZDpcbiAgICAgICAgICAgICAgICBiYXNpY0luZm8uc3RhdGUgPSBNQVJLVVBfQU5OT1RBVElPTl9TVEFURS5DT01QTEVURUQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLmVuZ2luZS5NYXJrdXBTdGF0ZS5lX1N0YXRlTm9uZTpcbiAgICAgICAgICAgICAgICBiYXNpY0luZm8uc3RhdGUgPSBNQVJLVVBfQU5OT1RBVElPTl9TVEFURS5OT05FO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5lbmdpbmUuTWFya3VwU3RhdGUuZV9TdGF0ZVJlamVjdGVkOlxuICAgICAgICAgICAgICAgIGJhc2ljSW5mby5zdGF0ZSA9IE1BUktVUF9BTk5PVEFUSU9OX1NUQVRFLlJFSkVDVEVEO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5lbmdpbmUuTWFya3VwU3RhdGUuZV9TdGF0ZVVubWFya2VkOlxuICAgICAgICAgICAgICAgIGJhc2ljSW5mby5zdGF0ZSA9IE1BUktVUF9BTk5PVEFUSU9OX1NUQVRFLlVOTUFSS0VEO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5lbmdpbmUuTWFya3VwU3RhdGUuZV9TdGF0ZU1hcmtlZDpcbiAgICAgICAgICAgICAgICBiYXNpY0luZm8uc3RhdGUgPSBNQVJLVVBfQU5OT1RBVElPTl9TVEFURS5NQVJLRUQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBiYXNpY0luZm8uaXNTdGF0ZUFubm90ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgYmFzaWNJbmZvLmlzT3BlbiA9IHRoaXMuYW5ub3QuR2V0T3BlblN0YXR1cygpO1xuICAgICAgICByZXR1cm4gYmFzaWNJbmZvO1xuICAgIH1cbiAgICBjcmVhdGUgKGpzb24pIHtcbiAgICAgICAgdGhpcy5zZXRGbGFncygyNCk7XG4gICAgICAgIGxldCByZXN1bHQgPSBzdXBlci5jcmVhdGUoanNvbik7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBOb3RlOyIsImltcG9ydCBNYXJrdXBBbm5vdCBmcm9tICcuL01hcmt1cEFubm90JztcblxuY2xhc3MgUG9seUxpbmUgZXh0ZW5kcyBNYXJrdXBBbm5vdCB7XG4gICAgY29uc3RydWN0b3IoYW5ub3QsIHBkZlBhZ2Upe1xuICAgICAgICBzdXBlcihhbm5vdCxwZGZQYWdlKTtcbiAgICAgICAgdGhpcy5hbm5vdCA9IG5ldyB0aGlzLmVuZ2luZS5Qb2x5TGluZSh0aGlzLmFubm90KTtcbiAgICB9XG4gICAgXG4gICAgc2V0TGluZUVuZFN0eWxlKGVuZGluZ19zdHlsZSkge1xuICAgICAgICBsZXQgZW51bVR5cGUgPSB0aGlzLmVuZ2luZS5FbmRpbmdTdHlsZS52YWx1ZXNbZW5kaW5nX3N0eWxlXTtcbiAgICAgICAgdGhpcy5hbm5vdC5TZXRMaW5lRW5kU3R5bGUoZW51bVR5cGUpO1xuICAgICAgICB0aGlzLmFubm90LlJlc2V0QXBwZWFyYW5jZVN0cmVhbSgpO1xuICAgIH1cbiAgICBzZXRMaW5lU3RhcnRTdHlsZShlbmRpbmdfc3R5bGUpIHtcbiAgICAgICAgbGV0IGVudW1UeXBlID0gdGhpcy5lbmdpbmUuRW5kaW5nU3R5bGUudmFsdWVzW2VuZGluZ19zdHlsZV07XG4gICAgICAgIHRoaXMuYW5ub3QuU2V0TGluZVN0YXJ0U3R5bGUoZW51bVR5cGUpO1xuICAgICAgICB0aGlzLmFubm90LlJlc2V0QXBwZWFyYW5jZVN0cmVhbSgpO1xuICAgIH1cbiAgICBzZXRGaWxsQ29sb3IoY29sb3Ipe1xuICAgICAgICBpZih0eXBlb2YgY29sb3IgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEluY29ycmVjdCBjb2xvciB2YWx1ZTogJHtjb2xvcn1gKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFubm90LlNldFN0eWxlRmlsbENvbG9yKGNvbG9yKTtcbiAgICAgICAgdGhpcy5hbm5vdC5SZXNldEFwcGVhcmFuY2VTdHJlYW0oKTtcbiAgICAgICAgcmV0dXJuIFt0aGlzXTtcbiAgICB9XG4gICAgdXBkYXRlVmVydGV4ZXMoaW5kZXgseCx5KSB7XG4gICAgICAgIGxldCB2ZXJ0ZXhlcyA9IHRoaXMuYW5ub3QuR2V0VmVydGV4ZXMoKTtcbiAgICAgICAgbGV0IHBvaW50ID0gbmV3IHRoaXMuZW5naW5lLlBvaW50Rih4LHkpO1xuICAgICAgICB2ZXJ0ZXhlcy5TZXRBdChwYXJzZUludChpbmRleCkscG9pbnQpO1xuXG4gICAgICAgIHRoaXMuYW5ub3QuU2V0VmVydGV4ZXModmVydGV4ZXMpO1xuICAgICAgICB0aGlzLmFubm90LlJlc2V0QXBwZWFyYW5jZVN0cmVhbSgpO1xuICAgIH1cbiAgICBzZXRWZXJ0ZXhlcyh2ZXJ0ZXhlcykge1xuICAgICAgICBjb25zdCBlbmdpbmVWZXJ0ZXhlcyA9IHZlcnRleGVzLnJlZHVjZSgoYXJyYXksIHt4LHl9KSA9PiB7XG4gICAgICAgICAgICBhcnJheS5BZGQobmV3IHRoaXMuZW5naW5lLlBvaW50Rih4LCB5KSk7XG4gICAgICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgICAgIH0sIG5ldyB0aGlzLmVuZ2luZS5Qb2ludEZBcnJheSgpKTtcbiAgICAgICAgdGhpcy5hbm5vdC5TZXRWZXJ0ZXhlcyhlbmdpbmVWZXJ0ZXhlcyk7XG4gICAgICAgIHRoaXMuYW5ub3QuUmVzZXRBcHBlYXJhbmNlU3RyZWFtKCk7XG4gICAgfVxuICAgIGNyZWF0ZShqc29uKSB7XG4gICAgICAgIGlmKGpzb24udmVydGV4ZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGVuZ2luZVZlcnRleGVzID0ganNvbi52ZXJ0ZXhlcy5yZWR1Y2UoKGFycmF5LCB7eCwgeX0pID0+IHtcbiAgICAgICAgICAgICAgICBhcnJheS5BZGQobmV3IHRoaXMuZW5naW5lLlBvaW50Rih4LCB5KSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgICAgICAgICAgfSwgbmV3IHRoaXMuZW5naW5lLlBvaW50RkFycmF5KCkpO1xuICAgICAgICAgICAgdGhpcy5hbm5vdC5TZXRWZXJ0ZXhlcyhlbmdpbmVWZXJ0ZXhlcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1cGVyLmNyZWF0ZShqc29uKTtcbiAgICB9XG4gICAgdG9Kc29uKCkge1xuICAgICAgICBsZXQgbWFya3VwQW5ub3RKc29uID0gc3VwZXIudG9Kc29uKCk7XG5cbiAgICAgICAgbGV0IGVuZGluZ1N0eWxlID0gdGhpcy5hbm5vdC5HZXRMaW5lRW5kU3R5bGUoKTsgLy9lbnVtXG4gICAgICAgIGxldCBzdGFydFN0eWxlID0gdGhpcy5hbm5vdC5HZXRMaW5lU3RhcnRTdHlsZSgpOyAvL2VudW1cblxuICAgICAgICBsZXQgdmVydGV4ZXMgPSB0aGlzLmFubm90LkdldFZlcnRleGVzKCk7XG4gICAgICAgIGxldCBmaWxsQ29sb3IgPSB0aGlzLmFubm90LkdldFN0eWxlRmlsbENvbG9yKCk7XG5cbiAgICAgICAgbGV0IGpzb25WZXJ0ZXhlcyA9IFtdO1xuICAgICAgICBmb3IobGV0IGluZGV4ID0gMDtpbmRleDx2ZXJ0ZXhlcy5HZXRTaXplKCk7aW5kZXgrKyl7XG4gICAgICAgICAgICBsZXQgcG9pbnQgPSB2ZXJ0ZXhlcy5HZXRBdChpbmRleCk7XG4gICAgICAgICAgICBqc29uVmVydGV4ZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgeDpwb2ludC54LFxuICAgICAgICAgICAgICAgIHk6cG9pbnQueVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcG9seUxpbmVKc29uID0ge1xuICAgICAgICAgICAgZW5kaW5nU3R5bGU6ZW5kaW5nU3R5bGUudmFsdWUsXG4gICAgICAgICAgICBzdGFydFN0eWxlOnN0YXJ0U3R5bGUudmFsdWUsXG4gICAgICAgICAgICBmaWxsQ29sb3IsXG4gICAgICAgICAgICB2ZXJ0ZXhlczpqc29uVmVydGV4ZXNcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ocG9seUxpbmVKc29uICwgbWFya3VwQW5ub3RKc29uKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBvbHlMaW5lOyIsImltcG9ydCBNYXJrdXBBbm5vdCBmcm9tICcuL01hcmt1cEFubm90JztcblxuY2xhc3MgUG9seWdvbiBleHRlbmRzIE1hcmt1cEFubm90IHtcbiAgICBjb25zdHJ1Y3Rvcihhbm5vdCwgcGRmUGFnZSl7XG4gICAgICAgIHN1cGVyKGFubm90LHBkZlBhZ2UpO1xuICAgICAgICB0aGlzLmFubm90ID0gbmV3IHRoaXMuZW5naW5lLlBvbHlnb24odGhpcy5hbm5vdCk7XG4gICAgfVxuICAgIHVwZGF0ZVZlcnRleGVzKGluZGV4LHgseSkge1xuICAgICAgICBsZXQgdmVydGV4ZXMgPSB0aGlzLmFubm90LkdldFZlcnRleGVzKCk7XG4gICAgICAgIGxldCBwb2ludCA9IG5ldyB0aGlzLmVuZ2luZS5Qb2ludEYoeCx5KTtcbiAgICAgICAgdmVydGV4ZXMuU2V0QXQocGFyc2VJbnQoaW5kZXgpLHBvaW50KTtcblxuICAgICAgICB0aGlzLmFubm90LlNldFZlcnRleGVzKHZlcnRleGVzKTtcbiAgICAgICAgdGhpcy5hbm5vdC5SZXNldEFwcGVhcmFuY2VTdHJlYW0oKTtcbiAgICB9XG4gICAgc2V0VmVydGV4ZXModmVydGV4ZXMpIHtcbiAgICAgICAgY29uc3QgZW5naW5lVmVydGV4ZXMgPSB2ZXJ0ZXhlcy5yZWR1Y2UoKGFycmF5LCB7eCx5fSkgPT4ge1xuICAgICAgICAgICAgYXJyYXkuQWRkKG5ldyB0aGlzLmVuZ2luZS5Qb2ludEYoeCwgeSkpO1xuICAgICAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgICAgICB9LCBuZXcgdGhpcy5lbmdpbmUuUG9pbnRGQXJyYXkoKSk7XG4gICAgICAgIHRoaXMuYW5ub3QuU2V0VmVydGV4ZXMoZW5naW5lVmVydGV4ZXMpO1xuICAgICAgICB0aGlzLmFubm90LlJlc2V0QXBwZWFyYW5jZVN0cmVhbSgpO1xuICAgIH1cbiAgICBjcmVhdGUoanNvbikge1xuICAgICAgICBpZihqc29uLnZlcnRleGVzKSB7XG4gICAgICAgICAgICBjb25zdCBlbmdpbmVWZXJ0ZXhlcyA9IGpzb24udmVydGV4ZXMucmVkdWNlKChhcnJheSwge3gsIHl9KSA9PiB7XG4gICAgICAgICAgICAgICAgYXJyYXkuQWRkKG5ldyB0aGlzLmVuZ2luZS5Qb2ludEYoeCwgeSkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBhcnJheTtcbiAgICAgICAgICAgIH0sIG5ldyB0aGlzLmVuZ2luZS5Qb2ludEZBcnJheSgpKTtcbiAgICAgICAgICAgIHRoaXMuYW5ub3QuU2V0VmVydGV4ZXMoZW5naW5lVmVydGV4ZXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmKGpzb24uYm9yZGVyU3R5bGUpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Qm9yZGVyU3R5bGUoanNvbi5ib3JkZXJTdHlsZSwganNvbi5ib3JkZXJTdHlsZVBhcmFtKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwZXIuY3JlYXRlKGpzb24pO1xuICAgIH1cbiAgICB0b0pzb24oKSB7XG4gICAgICAgIGxldCBtYXJrdXBBbm5vdEpzb24gPSBzdXBlci50b0pzb24oKTtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBsZXQgZmlsbENvbG9yID0gdGhpcy5hbm5vdC5HZXRGaWxsQ29sb3IoKTtcblxuICAgICAgICBsZXQgdmVydGV4ZXMgPSB0aGlzLmFubm90LkdldFZlcnRleGVzKCk7XG4gICAgICAgIGxldCBqc29uVmVydGV4ZXMgPSBbXTtcbiAgICAgICAgZm9yKGxldCBpbmRleCA9IDA7aW5kZXg8dmVydGV4ZXMuR2V0U2l6ZSgpO2luZGV4Kyspe1xuICAgICAgICAgICAgbGV0IHBvaW50ID0gdmVydGV4ZXMuR2V0QXQoaW5kZXgpO1xuICAgICAgICAgICAganNvblZlcnRleGVzLnB1c2goe1xuICAgICAgICAgICAgICAgIHg6cG9pbnQueCxcbiAgICAgICAgICAgICAgICB5OnBvaW50LnlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGxldCBwb2x5TGluZUpzb24gPSB7XG4gICAgICAgICAgICBmaWxsQ29sb3IsXG4gICAgICAgICAgICB2ZXJ0ZXhlczpqc29uVmVydGV4ZXNcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ocG9seUxpbmVKc29uICwgbWFya3VwQW5ub3RKc29uKTtcbiAgICB9XG4gICAgc2V0RmlsbENvbG9yIChjb2xvcikge1xuICAgICAgICByZXR1cm4gc3VwZXIuX3NldEZpbGxDb2xvcihjb2xvcik7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQb2x5Z29uOyIsIi8qKlxuICogQ3JlYXRlZCBieSBsaW5jIG9uIDIwMTkvMi8yOC5cbiAqL1xuaW1wb3J0IEFubm90IGZyb20gJy4vQW5ub3QnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cCBleHRlbmRzIEFubm90IHtcbiAgICBjb25zdHJ1Y3RvciAoYW5ub3QsIHBkZlBhZ2UpIHtcbiAgICAgICAgc3VwZXIoYW5ub3QsIHBkZlBhZ2UpO1xuICAgICAgICB0aGlzLmFubm90ID0gbmV3IHRoaXMuZW5naW5lLlBvcHVwKHRoaXMuYW5ub3QpO1xuICAgIH1cbiAgICB0b0pzb24gKCkge1xuICAgICAgICBsZXQganNvbiA9IHN1cGVyLnRvSnNvbigpO1xuICAgICAgICBsZXQgYW5ub3QgPSB0aGlzLmFubm90O1xuICAgICAgICBqc29uLm9wZW5TdGF0dXMgPSBhbm5vdC5HZXRPcGVuU3RhdHVzKCk7XG5cbiAgICAgICAgcmV0dXJuIGpzb247XG4gICAgfVxuICAgIGNyZWF0ZSAoanNvbikge1xuICAgICAgICBzdXBlci5jcmVhdGUoanNvbik7XG4gICAgICAgIGxldCBvcGVuID0gKGpzb24ub3BlbiB8fCAnbm8nKS50b1N0cmluZygpO1xuICAgICAgICBpZiAob3BlbiA9PT0gJ3llcycgfHwgb3BlbiA9PT0gJ3RydWUnKSB7XG4gICAgICAgICAgICB0aGlzLnNldE9wZW5TdGF0dXModHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNldE9wZW5TdGF0dXMoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbdGhpc107XG4gICAgfVxuICAgIHNldE9wZW5TdGF0dXMgKHN0YXR1cykge1xuICAgICAgICBsZXQgYW5ub3QgPSB0aGlzLmFubm90O1xuICAgICAgICBhbm5vdC5TZXRPcGVuU3RhdHVzKHN0YXR1cyk7XG4gICAgICAgIHJldHVybiBzdGF0dXM7XG4gICAgfVxufSIsIi8qKlxuICogQ3JlYXRlZCBieSBsaW5jIG9uIDIwMTgvMTEvNy5cbiAqL1xuaW1wb3J0IE1hcmt1cEFubm90IGZyb20gJy4vTWFya3VwQW5ub3QnO1xuXG5jbGFzcyBSZWRhY3QgZXh0ZW5kcyBNYXJrdXBBbm5vdCB7XG4gICAgY29uc3RydWN0b3IgKGFubm90LCBwZGZQYWdlKSB7XG4gICAgICAgIHN1cGVyKGFubm90LCBwZGZQYWdlKTtcbiAgICAgICAgdGhpcy5hbm5vdCA9IG5ldyB0aGlzLmVuZ2luZS5SZWRhY3QodGhpcy5hbm5vdCk7XG4gICAgfVxuICAgIGFwcGx5KCkge1xuICAgICAgICBsZXQgb2xkQW5ub3RzID0ge307XG4gICAgICAgIGxldCBkZWxldGVkQW5ub3RzID0gW107XG4gICAgICAgIHJldHVybiB0aGlzLnBkZlBhZ2UuZ2V0QW5ub3RzKCkudGhlbihhbm5vdHMgPT4ge1xuICAgICAgICAgICAgYW5ub3RzLmZvckVhY2goYW5ub3QgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBpZCA9IGFubm90LmFubm90LkdldFVuaXF1ZUlEKCkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICBpZihpZCl7XG4gICAgICAgICAgICAgICAgICAgIG9sZEFubm90c1tpZF0gPSBhbm5vdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSB0aGlzLmFubm90LkFwcGx5KCk7XG4gICAgICAgICAgICBpZighcmVzdWx0KSByZXR1cm4gbmV3IEVycm9yKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wZGZQYWdlLnVwZGF0ZSgpO1xuICAgICAgICB9KS50aGVuKHBhZ2VBbm5vdHMgPT4ge1xuICAgICAgICAgICAgZm9yKHZhciBpZCBpbiBvbGRBbm5vdHMpe1xuICAgICAgICAgICAgICAgIGxldCBhbm5vdCA9IG9sZEFubm90c1tpZF07XG4gICAgICAgICAgICAgICAgaWYocGFnZUFubm90cy5hbm5vdElkcy5pbmRleE9mKGlkKSA9PT0gLTEpe1xuICAgICAgICAgICAgICAgICAgICBkZWxldGVkQW5ub3RzLnB1c2goaWQpO1xuICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAvL+WkhOeQhumBl+eVmeeahE5vdGUgYW5ub3QuXG4gICAgICAgICAgICAgICAgICAgIGxldCB0eXBlID0gYW5ub3QuZ2V0VHlwZSgpO1xuICAgICAgICAgICAgICAgICAgICBpZih0eXBlID09IFwidGV4dFwiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtYXJrVXAgPSBhbm5vdC5hbm5vdC5HZXRSZXBseVRvKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVjdCA9IGFubm90LmFubm90LkdldFJlY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHJlY3QubGVmdCAhPT0gMCB8fCByZWN0LnRvcCAhPT0gMCB8fCByZWN0LnJpZ2h0ICE9PSAwIHx8IHJlY3QuYm90dG9tICE9PSAwKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhbm5vdElkID0gYW5ub3QuYW5ub3QuR2V0VW5pcXVlSUQoKS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYobWFya1VwLmlzRGVsZXRlZCgpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGVkQW5ub3RzLnB1c2goYW5ub3RJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpZCA9IG1hcmtVcC5HZXRVbmlxdWVJRCgpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHBhZ2VBbm5vdHMuYW5ub3RJZHMuaW5kZXhPZihpZCkgPT09IC0xKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhbm5vdElkID0gYW5ub3QuYW5ub3QuR2V0VW5pcXVlSUQoKS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlZEFubm90cy5wdXNoKGFubm90SWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfWNhdGNoKGUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlID0gdGhpcy5lbmdpbmUuZ2V0RXJyb3JDb2RlKGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZS52YWx1ZSAmJiBlLnZhbHVlID09IDQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlZEFubm90cy5wdXNoKGFubm90SWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ub3QucmVtb3ZlKCkudGhlbigoc3VjY2VzcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwicmVtb3ZlIHN1Y2Nlc3M6IFwiICsgc3VjY2Vzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRlbGV0ZWRBbm5vdHM7XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgc2V0UmVkYWN0QXBwbHlGaWxsQ29sb3IoY29sb3Ipe1xuICAgICAgICB0aGlzLmFubm90LlNldEFwcGx5RmlsbENvbG9yKGNvbG9yKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHRvSnNvbiAoKSB7XG4gICAgICAgIGxldCBlbmdpbmUgPSB0aGlzLmVuZ2luZTtcbiAgICAgICAgbGV0IGpzb24gPSBzdXBlci50b0pzb24oKTtcbiAgICAgICAganNvbi5xdWFkUG9pbnRzID0gdGhpcy5nZXRRdWFkUG9pbnRzQXJyYXkoKTtcbiAgICAgICAgaWYoanNvbi5xdWFkUG9pbnRzLmxlbmd0aCA9PT0gMCl7XG4gICAgICAgICAgICBqc29uLmlzQXJlYSA9IHRydWU7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAganNvbi5pc0FyZWEgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBqc29uLmFwcGx5RmlsbENvbG9yID0gdGhpcy5hbm5vdC5HZXRBcHBseUZpbGxDb2xvcigpO1xuXG4gICAgICAgIHJldHVybiBqc29uO1xuICAgICAgICBqc29uLnF1YWRQb2ludHMgPSB0aGlzLmdldFF1YWRQb2ludHNBcnJheSgpO1xuICAgICAgICBpZihqc29uLnF1YWRQb2ludHMubGVuZ3RoID09PSAwKSByZXR1cm4ganNvbjtcbnRyeXtcblxuICAgICAgICBsZXQgcXVhZFBvaW50cyA9IGpzb24ucXVhZFBvaW50cztcbiAgICAgICAgbGV0IHF1YWRQb2ludENvdW50ID0gcXVhZFBvaW50cy5sZW5ndGg7XG4gICAgICAgIC8vIGxldCBxdWFkUG9pbnRBcnIgPSBbXTtcbiAgICAgICAgbGV0IGlzQXJlYSA9IGZhbHNlO1xuICAgICAgICBsZXQgdGV4dEFyciA9IFtdO1xuICAgICAgICBsZXQgdGV4dFBhZ2UgPSB0aGlzLnBkZlBhZ2UuZ2V0Tm9ybWFsVGV4dFBhZ2VTeW5jKCk7XG4gICAgICAgIGZvciAobGV0IGkgPSBxdWFkUG9pbnRDb3VudDsgaS0tOykge1xuICAgICAgICAgICAgbGV0IHF1YWRQb2ludCA9IHF1YWRQb2ludHNbaV07XG4gICAgICAgICAgICAvLyBUaGUgZmlyc3QgcG9pbnQgaXMgdGhlIHBvaW50IGluIGxlZnQtdG9wIGNvcm5lciBvZiB0aGUgcXVhZHJpbGF0ZXJhbC5cbiAgICAgICAgICAgIC8vIFRoZSBzZWNvbmQgcG9pbnQgaXMgdGhlIHBvaW50IGluIHJpZ2h0LXRvcCBjb3JuZXIgb2YgdGhlIHF1YWRyaWxhdGVyYWwuXG4gICAgICAgICAgICAvLyBUaGUgdGhpcmQgcG9pbnQgaXMgdGhlIHBvaW50IGluIGxlZnQtYm90dG9tIGNvcm5lciBvZiB0aGUgcXVhZHJpbGF0ZXJhbC5cbiAgICAgICAgICAgIC8vIFRoZSBmb3VydGggcG9pbnQgaXMgdGhlIHBvaW50IGluIHJpZ2h0LWJvdHRvbSBjb3JuZXIgb2YgdGhlIHF1YWRyaWxhdGVyYWwuXG4gICAgICAgICAgICAvLyBxdWFkUG9pbnRBcnJbaV0gPSBbe1xuICAgICAgICAgICAgLy8gICAgIHg6IHF1YWRQb2ludFswXS54LFxuICAgICAgICAgICAgLy8gICAgIHk6IHF1YWRQb2ludFswXS55LFxuICAgICAgICAgICAgLy8gfSwge1xuICAgICAgICAgICAgLy8gICAgIHg6IHF1YWRQb2ludFsxXS54LFxuICAgICAgICAgICAgLy8gICAgIHk6IHF1YWRQb2ludFsxXS55LFxuICAgICAgICAgICAgLy8gfSwge1xuICAgICAgICAgICAgLy8gICAgIHg6IHF1YWRQb2ludFsyXS54LFxuICAgICAgICAgICAgLy8gICAgIHk6IHF1YWRQb2ludFsyXS55LFxuICAgICAgICAgICAgLy8gfSwge1xuICAgICAgICAgICAgLy8gICAgIHg6IHF1YWRQb2ludFszXS54LFxuICAgICAgICAgICAgLy8gICAgIHk6IHF1YWRQb2ludFszXS55LFxuICAgICAgICAgICAgLy8gfV07XG4gICAgICAgICAgICBsZXQgcmVjdCA9IG5ldyB0aGlzLmVuZ2luZS5DRlhfRmxvYXRSZWN0KHF1YWRQb2ludFswXS54LFxuICAgICAgICAgICAgICAgIHF1YWRQb2ludFszXS55LHF1YWRQb2ludFszXS54LHF1YWRQb2ludFswXS55KVxuICAgICAgICAgICAgcmVjdC5Ob3JtYWxpemUoKTtcbiAgICAgICAgICAgIGxldCByZWN0VGV4dCA9IHRleHRQYWdlLkdldFRleHRJblJlY3QocmVjdCkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIGlmICghcmVjdFRleHQgfHwgL1xcbi8udGVzdChyZWN0VGV4dCkpIHtcbiAgICAgICAgICAgICAgICBpc0FyZWEgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGV4dEFycltpXSA9IHJlY3RUZXh0O1xuICAgICAgICB9XG4gICAgICAgIGpzb24udGV4dCA9IHRleHRBcnIuam9pbignXFxyXFxuJyk7XG4gICAgICAgIGlmIChpc0FyZWEgfHwgIXF1YWRQb2ludENvdW50KSB7XG4gICAgICAgICAgICAvLyDkuI3lnKjmloflrZfkuIrnmoR0ZXh0bWFya3Vw77yM5oiW5Yy65Z2X55qEdGV4dG1hcmt1cFxuICAgICAgICAgICAganNvbi5zdGFydENoYXJJbmRleCA9IC0xO1xuICAgICAgICAgICAganNvbi5lbmRDaGFySW5kZXggPSAtMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBzdGFydFF1YWRQb2ludCA9IHF1YWRQb2ludHNbMF07XG4gICAgICAgICAgICBsZXQgc3RhcnRSYWRpYW4gPSBNYXRoLmF0YW4yKHN0YXJ0UXVhZFBvaW50WzBdLnkgLSBzdGFydFF1YWRQb2ludFsxXS55LCBzdGFydFF1YWRQb2ludFsxXS54IC0gc3RhcnRRdWFkUG9pbnRbMF0ueCk7XG4gICAgICAgICAgICBsZXQgc3RhcnRNYXRyaXggPSBuZXcgZW5naW5lLk1hdHJpeCgpO1xuICAgICAgICAgICAgc3RhcnRNYXRyaXguUm90YXRlKC1zdGFydFJhZGlhbiwgZmFsc2UpO1xuICAgICAgICAgICAgc3RhcnRNYXRyaXguUm90YXRlKC1NYXRoLlBJIC8gMiwgZmFsc2UpO1xuICAgICAgICAgICAgc3RhcnRNYXRyaXguVHJhbnNsYXRlKChzdGFydFF1YWRQb2ludFswXS54ICsgc3RhcnRRdWFkUG9pbnRbMl0ueCkgLyAyLCAoc3RhcnRRdWFkUG9pbnRbMF0ueSArIHN0YXJ0UXVhZFBvaW50WzJdLnkpIC8gMiwgZmFsc2UpO1xuICAgICAgICAgICAgbGV0IGhlaWdodCA9IE1hdGgubWluKDMsIE1hdGguc3FydChNYXRoLnBvdyhzdGFydFF1YWRQb2ludFsyXS55IC0gc3RhcnRRdWFkUG9pbnRbMF0ueSwgMikgKyBNYXRoLnBvdyhzdGFydFF1YWRQb2ludFsyXS54IC0gc3RhcnRRdWFkUG9pbnRbMF0ueCwgMikpKVxuICAgICAgICAgICAgbGV0IHggPSAwLCB5ID0gaGVpZ2h0O1xuICAgICAgICAgICAgbGV0IGZ4ID0gc3RhcnRNYXRyaXguYSAqIHggKyBzdGFydE1hdHJpeC5jICogeSArIHN0YXJ0TWF0cml4LmU7XG4gICAgICAgICAgICBsZXQgZnkgPSBzdGFydE1hdHJpeC5iICogeCArIHN0YXJ0TWF0cml4LmQgKiB5ICsgc3RhcnRNYXRyaXguZjtcbiAgICAgICAgICAgIGxldCBzdGFydENoYXJJbmRleCA9IGpzb24uc3RhcnRDaGFySW5kZXggPSB0ZXh0UGFnZS5HZXRJbmRleEF0UG9zKGZ4LCBmeSwgMCk7XG4gICAgICAgICAgICBpZiAoc3RhcnRDaGFySW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRleHRSZWN0Q291bnQgPSB0ZXh0UGFnZS5HZXRUZXh0UmVjdENvdW50KHN0YXJ0Q2hhckluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICBsZXQgcmVjdCA9IHRleHRQYWdlLkdldFRleHRSZWN0KDApO1xuICAgICAgICAgICAgICAgIGxldCByb3RhdGlvbiA9IHRleHRQYWdlLkdldEJhc2VsaW5lUm90YXRpb24oMCk7XG5cbiAgICAgICAgICAgICAgICBqc29uLnN0YXJ0Q2hhckluZm8gPSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYXJJbmRleDogc3RhcnRDaGFySW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IHJlY3QubGVmdCxcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IHJlY3QucmlnaHQsXG4gICAgICAgICAgICAgICAgICAgIHRvcDogcmVjdC50b3AsXG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbTogcmVjdC5ib3R0b20sXG4gICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiByb3RhdGlvbi52YWx1ZSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgZW5kUXVhZFBvaW50ID0gcXVhZFBvaW50c1txdWFkUG9pbnRDb3VudCAtIDFdO1xuICAgICAgICAgICAgbGV0IGVuZFJhZGlhbiA9IE1hdGguYXRhbjIoZW5kUXVhZFBvaW50WzBdLnkgLSBlbmRRdWFkUG9pbnRbMV0ueSwgZW5kUXVhZFBvaW50WzFdLnggLSBlbmRRdWFkUG9pbnRbMF0ueCk7XG4gICAgICAgICAgICBsZXQgZW5kTWF0cml4ID0gbmV3IGVuZ2luZS5NYXRyaXgoKTtcbiAgICAgICAgICAgIGVuZE1hdHJpeC5Sb3RhdGUoLWVuZFJhZGlhbiwgZmFsc2UpO1xuICAgICAgICAgICAgZW5kTWF0cml4LlJvdGF0ZSgtTWF0aC5QSSAvIDIsIGZhbHNlKTtcbiAgICAgICAgICAgIGVuZE1hdHJpeC5UcmFuc2xhdGUoKGVuZFF1YWRQb2ludFsxXS54ICsgZW5kUXVhZFBvaW50WzNdLngpIC8gMiwgKGVuZFF1YWRQb2ludFsxXS55ICsgZW5kUXVhZFBvaW50WzNdLnkpIC8gMiwgZmFsc2UpO1xuICAgICAgICAgICAgaGVpZ2h0ID0gTWF0aC5taW4oMywgTWF0aC5zcXJ0KE1hdGgucG93KGVuZFF1YWRQb2ludFszXS55IC0gZW5kUXVhZFBvaW50WzFdLnksIDIpICsgTWF0aC5wb3coZW5kUXVhZFBvaW50WzNdLnggLSBlbmRRdWFkUG9pbnRbMV0ueCwgMikpKVxuICAgICAgICAgICAgeCA9IDAsIHkgPSAtaGVpZ2h0O1xuICAgICAgICAgICAgZnggPSBlbmRNYXRyaXguYSAqIHggKyBlbmRNYXRyaXguYyAqIHkgKyBlbmRNYXRyaXguZTtcbiAgICAgICAgICAgIGZ5ID0gZW5kTWF0cml4LmIgKiB4ICsgZW5kTWF0cml4LmQgKiB5ICsgZW5kTWF0cml4LmY7XG4gICAgICAgICAgICBsZXQgZW5kQ2hhckluZGV4ID0ganNvbi5lbmRDaGFySW5kZXggPSB0ZXh0UGFnZS5HZXRJbmRleEF0UG9zKGZ4LCBmeSwgMCk7XG5cbiAgICAgICAgICAgIGlmIChlbmRDaGFySW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRleHRSZWN0Q291bnQgPSB0ZXh0UGFnZS5HZXRUZXh0UmVjdENvdW50KGVuZENoYXJJbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgbGV0IHJlY3QgPSB0ZXh0UGFnZS5HZXRUZXh0UmVjdCgwKTtcbiAgICAgICAgICAgICAgICBsZXQgcm90YXRpb24gPSB0ZXh0UGFnZS5HZXRCYXNlbGluZVJvdGF0aW9uKDApO1xuXG4gICAgICAgICAgICAgICAganNvbi5lbmRDaGFySW5mbyA9IHtcbiAgICAgICAgICAgICAgICAgICAgY2hhckluZGV4OiBlbmRDaGFySW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IHJlY3QubGVmdCxcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IHJlY3QucmlnaHQsXG4gICAgICAgICAgICAgICAgICAgIHRvcDogcmVjdC50b3AsXG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbTogcmVjdC5ib3R0b20sXG4gICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiByb3RhdGlvbi52YWx1ZSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGpzb24ucXVhZFBvaW50cyA9IHF1YWRQb2ludEFycjtcbiAgICAgICAgaWYgKGpzb24uc3RhcnRDaGFySW5kZXggPiBqc29uLmVuZENoYXJJbmRleCkge1xuICAgICAgICAgICAgbGV0IHRlbXAgPSBqc29uLnN0YXJ0Q2hhckluZGV4O1xuICAgICAgICAgICAganNvbi5zdGFydENoYXJJbmRleCA9IGpzb24uZW5kQ2hhckluZGV4O1xuICAgICAgICAgICAganNvbi5lbmRDaGFySW5kZXggPSB0ZW1wO1xuXG4gICAgICAgICAgICB0ZW1wID0ganNvbi5zdGFydENoYXJJbmZvO1xuICAgICAgICAgICAganNvbi5zdGFydENoYXJJbmZvID0ganNvbi5lbmRDaGFySW5mbztcbiAgICAgICAgICAgIGpzb24uZW5kQ2hhckluZm8gPSB0ZW1wO1xuICAgICAgICB9XG4gICAgICAgIGlmIChqc29uLnN0YXJ0Q2hhckluZGV4ID09PSAtMSB8fCBqc29uLmVuZENoYXJJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIGlzQXJlYSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBqc29uLmNvbnRpbnVvdXNUZXh0ID0gdGV4dFBhZ2UuR2V0Q2hhcnMoanNvbi5zdGFydENoYXJJbmRleCwganNvbi5lbmRDaGFySW5kZXggLSBqc29uLnN0YXJ0Q2hhckluZGV4ICsgMSlcbiAgICAgICAgfVxuICAgICAgICBqc29uLmNvbnRpbnVvdXNUZXh0ID0ganNvbi5jb250aW51b3VzVGV4dCB8fCBqc29uLnRleHQ7XG4gICAgICAgIGpzb24uaXNBcmVhID0gaXNBcmVhO1xuICAgICAgICByZXR1cm4ganNvbjtcblxuXG4gICAgfWNhdGNoKGUpe1xuICAgICAgICBpZighaXNOYU4oZSkpe1xuICAgICAgICAgICAgZSA9IHRoaXMuZW5naW5lLmdldEVycm9yQ29kZSAoZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgfVxuICAgIGdldFF1YWRQb2ludHNBcnJheSgpe1xuICAgICAgICBsZXQgcXVhZFBvaW50cyA9IFtdO1xuICAgICAgICBsZXQgY19kaWN0ID0gdGhpcy5hbm5vdC5HZXREaWN0KCk7XG4gICAgICAgIGlmKGNfZGljdC5IYXNLZXkobmV3IHRoaXMuZW5naW5lLlN0cmluZyhcIlF1YWRQb2ludHNcIikpKXtcbiAgICAgICAgICAgIGxldCBjX3F1YWRfcG9pbnRzID0gY19kaWN0LkdldEVsZW1lbnQobmV3IHRoaXMuZW5naW5lLlN0cmluZyhcIlF1YWRQb2ludHNcIikpO1xuICAgICAgICAgICAgbGV0IGNfYXJyYXkgPSBjX3F1YWRfcG9pbnRzLkdldEFycmF5KCk7XG4gICAgICAgICAgICBsZXQgY291bnQgPSBjX2FycmF5LkdldEVsZW1lbnRDb3VudCgpO1xuICAgICAgICAgICAgbGV0IHF1YWRQb2ludHNDb3VudCA9IGNvdW50Lzg7XG4gICAgICAgICAgICBmb3IobGV0IGkgPTA7IGk8cXVhZFBvaW50c0NvdW50OyBpKyspe1xuICAgICAgICAgICAgICAgIGxldCBwb2ludCA9IFtdO1xuICAgICAgICAgICAgICAgIHBvaW50LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB4OiBjX2FycmF5LkdldEVsZW1lbnQoaSo4KS5HZXRGbG9hdCgpLFxuICAgICAgICAgICAgICAgICAgICB5OiBjX2FycmF5LkdldEVsZW1lbnQoaSo4ICsgMSkuR2V0RmxvYXQoKSxcbiAgICAgICAgICAgICAgICB9LHtcbiAgICAgICAgICAgICAgICAgICAgeDogY19hcnJheS5HZXRFbGVtZW50KGkqOCArIDIpLkdldEZsb2F0KCksXG4gICAgICAgICAgICAgICAgICAgIHk6IGNfYXJyYXkuR2V0RWxlbWVudChpKjggKyAzKS5HZXRGbG9hdCgpLFxuICAgICAgICAgICAgICAgIH0se1xuICAgICAgICAgICAgICAgICAgICB4OiBjX2FycmF5LkdldEVsZW1lbnQoaSo4ICsgNCkuR2V0RmxvYXQoKSxcbiAgICAgICAgICAgICAgICAgICAgeTogY19hcnJheS5HZXRFbGVtZW50KGkqOCArIDUpLkdldEZsb2F0KCksXG4gICAgICAgICAgICAgICAgfSx7XG4gICAgICAgICAgICAgICAgICAgIHg6IGNfYXJyYXkuR2V0RWxlbWVudChpKjggKyA2KS5HZXRGbG9hdCgpLFxuICAgICAgICAgICAgICAgICAgICB5OiBjX2FycmF5LkdldEVsZW1lbnQoaSo4ICsgNykuR2V0RmxvYXQoKSxcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIHF1YWRQb2ludHMucHVzaChwb2ludCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHF1YWRQb2ludHM7XG4gICAgfVxuXG4gICAgdXBkYXRlUXVhZFBvaW50c0J5Q2hhckluZGV4IChzdGFydENoYXJJbmRleCwgZW5kQ2hhckluZGV4KSB7XG4gICAgICAgIHRyeXtcbiAgICAgICAgaWYgKHN0YXJ0Q2hhckluZGV4ID09PSAtMSB8fCBlbmRDaGFySW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXJ0Q2hhckluZGV4ID4gZW5kQ2hhckluZGV4KSB7XG4gICAgICAgICAgICBsZXQgdGVtcCA9IHN0YXJ0Q2hhckluZGV4O1xuICAgICAgICAgICAgc3RhcnRDaGFySW5kZXggPSBlbmRDaGFySW5kZXg7XG4gICAgICAgICAgICBlbmRDaGFySW5kZXggPSB0ZW1wO1xuICAgICAgICB9XG4gICAgICAgIGxldCB0ZXh0UGFnZSA9IHRoaXMucGRmUGFnZS5nZXROb3JtYWxUZXh0UGFnZVN5bmMoKTtcbiAgICAgICAgbGV0IHRleHRSZWN0Q291bnQgPSB0ZXh0UGFnZS5HZXRUZXh0UmVjdENvdW50KHN0YXJ0Q2hhckluZGV4LCBlbmRDaGFySW5kZXggLSBzdGFydENoYXJJbmRleCArIDEpO1xuICAgICAgICBpZiAodGV4dFJlY3RDb3VudCA8IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZW5naW5lID0gdGhpcy5lbmdpbmU7XG4gICAgICAgIGxldCBxdWFkUG9pbnRzQXJyYXkgPSBuZXcgZW5naW5lLlF1YWRQb2ludHNBcnJheSgpO1xuICAgICAgICBsZXQgUXVhZFBvaW50cyA9IGVuZ2luZS5RdWFkUG9pbnRzO1xuICAgICAgICBsZXQgUG9pbnRGID0gZW5naW5lLlBvaW50RjtcbiAgICAgICAgbGV0IGNfcGRmX2FycmF5ID0gZW5naW5lLlBERkFycmF5LkNyZWF0ZSgpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBqID0gdGV4dFJlY3RDb3VudDsgaSA8IGo7IGkrKykge1xuICAgICAgICAgICAgbGV0IHRleHRSZWN0ID0gdGV4dFBhZ2UuR2V0VGV4dFJlY3QoaSk7XG4gICAgICAgICAgICBsZXQgcm90YXRpb24gPSB0ZXh0UGFnZS5HZXRCYXNlbGluZVJvdGF0aW9uKGkpO1xuICAgICAgICAgICAgbGV0IG1hdHJpeCA9IG5ldyBlbmdpbmUuTWF0cml4KCk7XG4gICAgICAgICAgICBsZXQgdG9wID0gdGV4dFJlY3QudG9wO1xuICAgICAgICAgICAgbGV0IHJpZ2h0ID0gdGV4dFJlY3QucmlnaHQ7XG4gICAgICAgICAgICBsZXQgYm90dG9tID0gdGV4dFJlY3QuYm90dG9tO1xuICAgICAgICAgICAgbGV0IGxlZnQgPSB0ZXh0UmVjdC5sZWZ0O1xuICAgICAgICAgICAgLy9tYXRyaXgudHJhbnNsYXRlKGxlZnQsIHRvcCk7XG4gICAgICAgICAgICAvL21hdHJpeC5yb3RhdGUocm90YXRpb24gLyBNYXRoLlBJICogMTgwKTtcbiAgICAgICAgICAgIC8vbGV0IHJpZ2h0VG9wID0gW21hdHJpeC5hICogcmlnaHQgKyBtYXRyaXguYyAqIHRvcCArIG1hdHJpeC5lLCBtYXRyaXguYiAqIHJpZ2h0ICsgbWF0cml4LmQgKiB0b3AgKyBtYXRyaXguZl1cbiAgICAgICAgICAgIC8vbGV0IGxlZnRCb3R0b20gPSBbbWF0cml4LmEgKiBsZWZ0ICsgbWF0cml4LmMgKiBib3R0b20gKyBtYXRyaXguZSwgbWF0cml4LmIgKiBsZWZ0ICsgbWF0cml4LmQgKiBib3R0b20gKyBtYXRyaXguZl1cbiAgICAgICAgICAgIC8vbGV0IHJpZ2h0Qm90dG9tID0gW21hdHJpeC5hICogcmlnaHQgKyBtYXRyaXguYyAqIGJvdHRvbSArIG1hdHJpeC5lLCBtYXRyaXguYiAqIHJpZ2h0ICsgbWF0cml4LmQgKiBib3R0b20gKyBtYXRyaXguZl1cbiAgICAgICAgICAgIGxldCBxdWFkUG9pbnRBcnJheSA9IFtdO1xuXG4gICAgICAgICAgICBsZXQgbGVmdFRvcCA9IG5ldyBQb2ludEYobGVmdCwgdG9wKTtcbiAgICAgICAgICAgIGxldCByaWdodFRvcCA9IG5ldyBQb2ludEYocmlnaHQsIHRvcCk7XG4gICAgICAgICAgICBsZXQgbGVmdEJvdHRvbSA9IG5ldyBQb2ludEYobGVmdCwgYm90dG9tKTtcbiAgICAgICAgICAgIGxldCByaWdodEJvdHRvbSA9IG5ldyBQb2ludEYocmlnaHQsIGJvdHRvbSk7XG5cbiAgICAgICAgICAgIGxldCBmaXJzdFF1YWQ7XG4gICAgICAgICAgICBsZXQgc2Vjb25kUXVhZDtcbiAgICAgICAgICAgIGxldCB0aGlyZFF1YWQ7XG4gICAgICAgICAgICBsZXQgZm91cnRoUXVhZDtcbiAgICAgICAgICAgIHN3aXRjaCAocm90YXRpb24udmFsdWUgJSA0KSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBmaXJzdFF1YWQgPSBsZWZ0VG9wO1xuICAgICAgICAgICAgICAgICAgICBzZWNvbmRRdWFkID0gcmlnaHRUb3A7XG4gICAgICAgICAgICAgICAgICAgIHRoaXJkUXVhZCA9IGxlZnRCb3R0b207XG4gICAgICAgICAgICAgICAgICAgIGZvdXJ0aFF1YWQgPSByaWdodEJvdHRvbTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBmaXJzdFF1YWQgPSBsZWZ0VG9wO1xuICAgICAgICAgICAgICAgICAgICBzZWNvbmRRdWFkID0gbGVmdEJvdHRvbTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcmRRdWFkID0gcmlnaHRUb3A7XG4gICAgICAgICAgICAgICAgICAgIGZvdXJ0aFF1YWQgPSByaWdodEJvdHRvbTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBmaXJzdFF1YWQgPSByaWdodEJvdHRvbTtcbiAgICAgICAgICAgICAgICAgICAgc2Vjb25kUXVhZCA9IGxlZnRCb3R0b207XG4gICAgICAgICAgICAgICAgICAgIHRoaXJkUXVhZCA9IHJpZ2h0VG9wO1xuICAgICAgICAgICAgICAgICAgICBmb3VydGhRdWFkID0gbGVmdFRvcDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBmaXJzdFF1YWQgPSByaWdodEJvdHRvbTtcbiAgICAgICAgICAgICAgICAgICAgc2Vjb25kUXVhZCA9IHJpZ2h0VG9wO1xuICAgICAgICAgICAgICAgICAgICB0aGlyZFF1YWQgPSBsZWZ0Qm90dG9tO1xuICAgICAgICAgICAgICAgICAgICBmb3VydGhRdWFkID0gbGVmdFRvcDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjX3BkZl9hcnJheS5BZGRGbG9hdChmaXJzdFF1YWQueCk7XG4gICAgICAgICAgICBjX3BkZl9hcnJheS5BZGRGbG9hdChmaXJzdFF1YWQueSk7XG4gICAgICAgICAgICBjX3BkZl9hcnJheS5BZGRGbG9hdChzZWNvbmRRdWFkLngpO1xuICAgICAgICAgICAgY19wZGZfYXJyYXkuQWRkRmxvYXQoc2Vjb25kUXVhZC55KTtcbiAgICAgICAgICAgIGNfcGRmX2FycmF5LkFkZEZsb2F0KHRoaXJkUXVhZC54KTtcbiAgICAgICAgICAgIGNfcGRmX2FycmF5LkFkZEZsb2F0KHRoaXJkUXVhZC55KTtcbiAgICAgICAgICAgIGNfcGRmX2FycmF5LkFkZEZsb2F0KGZvdXJ0aFF1YWQueCk7XG4gICAgICAgICAgICBjX3BkZl9hcnJheS5BZGRGbG9hdChmb3VydGhRdWFkLnkpO1xuICAgICAgICAgICAgLy8gcXVhZFBvaW50c0FycmF5LkFkZChuZXcgUXVhZFBvaW50cyhmaXJzdFF1YWQsIHNlY29uZFF1YWQsIHRoaXJkUXVhZCwgZm91cnRoUXVhZCkpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBhbm5vdCA9IHRoaXMuYW5ub3Q7XG4gICAgICAgIGxldCBkaWN0ID0gYW5ub3QuR2V0RGljdCgpO1xuICAgICAgICBkaWN0LlNldEF0KG5ldyBlbmdpbmUuU3RyaW5nKFwiUXVhZFBvaW50c1wiKSwgY19wZGZfYXJyYXkpO1xuICAgICAgICAvLyBhbm5vdC5TZXRRdWFkUG9pbnRzKHF1YWRQb2ludHNBcnJheSk7XG4gICAgICAgIGFubm90LlJlc2V0QXBwZWFyYW5jZVN0cmVhbSgpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9Y2F0Y2goZSl7XG4gICAgICAgIGlmKCFpc05hTihlKSl7XG4gICAgICAgICAgICBlID0gdGhpcy5lbmdpbmUuZ2V0RXJyb3JDb2RlIChlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGUoanNvbil7XG4gICAgICAgIGxldCByZXN1bHQgPSBzdXBlci5jcmVhdGUoanNvbik7XG4gICAgICAgIC8vIHRoaXMuYW5ub3QuU2V0RmlsbENvbG9yKDB4MDAwMDAwKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlZGFjdDsiLCJpbXBvcnQgQW5ub3QgZnJvbSAnLi9Bbm5vdCc7XG5pbXBvcnQgSW1hZ2UgZnJvbSAnLi4vYmFzZS9JbWFnZSc7XG5pbXBvcnQgTG9nZ2VyRmFjdG9yeSBmcm9tICcuLi8uLi9zaGFyZWQvbG9nZ2VyL0xvZ2dlckZhY3RvcnknO1xuaW1wb3J0IEZpbGVTcGVjIGZyb20gJy4uL2Jhc2UvRmlsZVNwZWMnO1xuY29uc3QgbG9nZ2VyID0gTG9nZ2VyRmFjdG9yeS5nZXRMb2dnZXIoJ3BkZi1qci5TY3JlZW4nKTtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNjcmVlbiBleHRlbmRzIEFubm90e1xuICAgIGNvbnN0cnVjdG9yIChhbm5vdCwgcGRmUGFnZSkge1xuICAgICAgICBzdXBlcihhbm5vdCwgcGRmUGFnZSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAdHlwZSBHU0RLLlNjcmVlblxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5hbm5vdCA9IG5ldyB0aGlzLmVuZ2luZS5TY3JlZW4odGhpcy5hbm5vdCk7XG4gICAgICAgIGxldCBhY3Rpb24gID0gdGhpcy5hbm5vdC5HZXRBY3Rpb24oKTtcbiAgICAgICAgaWYoIWFjdGlvbi5Jc0VtcHR5KCkpe1xuICAgICAgICAgICAgdGhpcy5hY3Rpb249dGhpcy5KUi5hY3Rpb25NYW5hZ2VyLmdldChhY3Rpb24sdGhpcy5kb2MsdGhpcy5KUik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdG9Kc29uICgpIHtcbiAgICAgICAgbGV0IGpzb24gPSBzdXBlci50b0pzb24oKTtcbiAgICAgICAganNvbi5hY3Rpb249dGhpcy5hY3Rpb24mJnRoaXMuYWN0aW9uLnRvSnNvbigpO1xuICAgICAgICBqc29uLm9wYWNpdHk9dGhpcy5nZXRPcGFjaXR5KCk7XG4gICAgICAgIGpzb24ucm90YXRpb249dGhpcy5nZXRSb3RhdGlvbigpO1xuICAgICAgICBqc29uLnRpdGxlPXRoaXMuZ2V0VGl0bGUoKTtcbiAgICAgICAgcmV0dXJuIGpzb247XG4gICAgfVxuICAgIHNldEJvcmRlckNvbG9yIChjb2xvcikge1xuICAgICAgICBsZXQgYW5ub3QgPSB0aGlzLmFubm90O1xuICAgICAgICBpZihjb2xvciA9PSAwKXthbm5vdC5SZW1vdmVQcm9wZXJ0eSh7dmFsdWU6Mn0pO31cbiAgICAgICAgZWxzZXthbm5vdC5TZXRCb3JkZXJDb2xvcihjb2xvcik7fVxuICAgICAgICBhbm5vdC5SZXNldEFwcGVhcmFuY2VTdHJlYW0oKTtcbiAgICB9XG4gICAgc2V0QWN0aW9uKHR5cGUpe1xuICAgICAgICBsZXQgcGRmRG9jPXRoaXMuYW5ub3QuR2V0UGFnZSgpLkdldERvY3VtZW50KCk7XG4gICAgICAgIGxldCBhY3Rpb249dGhpcy5KUi5hY3Rpb25NYW5hZ2VyLmNyZWF0ZShwZGZEb2MsdHlwZSk7XG4gICAgICAgIHRoaXMuYW5ub3QuU2V0QWN0aW9uKGFjdGlvbik7XG4gICAgICAgIHJldHVybiB0aGlzLkpSLmFjdGlvbk1hbmFnZXIuZ2V0KHRoaXMuYW5ub3QuR2V0QWN0aW9uKCksdGhpcy5kb2MsdGhpcy5KUik7XG4gICAgfVxuXG4gICAgZ2V0T3BhY2l0eSgpe1xuICAgICAgICByZXR1cm4gdGhpcy5hbm5vdC5HZXRPcGFjaXR5KCk7XG4gICAgfVxuICAgIGdldFJvdGF0aW9uKCl7XG4gICAgICAgIHJldHVybiB0aGlzLmFubm90LkdldFJvdGF0aW9uKCkudmFsdWU7XG4gICAgfVxuICAgIGdldFRpdGxlKCl7XG4gICAgICAgIHJldHVybiB0aGlzLmFubm90LkdldFRpdGxlKCk7XG4gICAgfVxuICAgIGNyZWF0ZShqc29uKXtcbiAgICAgICAgaWYoanNvbi5yb3RhdGUpe1xuICAgICAgICAgICAgdGhpcy5hbm5vdC5TZXRSb3RhdGlvbih0aGlzLmVuZ2luZS5Sb3RhdGlvbi52YWx1ZXNbanNvbi5yb3RhdGVdKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzdWx0ID0gc3VwZXIuY3JlYXRlKGpzb24pO1xuICAgICAgICBpZihqc29uLm11bHRpQnVmZmVyKXtcbiAgICAgICAgICAgIHRoaXMuc2V0TXVsdGlNZWRpYShqc29uLm11bHRpQnVmZmVyLCBqc29uLmZpbGVOYW1lLCBqc29uLmNvbnRlbnRUeXBlICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYoanNvbi5idWZmZXIpe1xuICAgICAgICAgICAgdGhpcy5zZXRJbWFnZShqc29uLmJ1ZmZlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgc2V0TXVsdGlNZWRpYShidWZmZXIsIGZpbGVOYW1lLCBjb250ZW50VHlwZSl7XG4gICAgICAgIGxldCBjX2RvYyA9IHRoaXMuYW5ub3QuR2V0UGFnZSgpLkdldERvY3VtZW50KCk7XG4gICAgICAgIGxldCBjX2FjdGlvbiA9IHRoaXMuZW5naW5lLkFjdGlvbi5DcmVhdGUoY19kb2MsIHRoaXMuZW5naW5lLkFjdGlvblR5cGUuZV9UeXBlUmVuZGl0aW9uKTtcbiAgICAgICAgbGV0IGNfcmVuZGl0aW9uX2FjdGlvbiA9IG5ldyB0aGlzLmVuZ2luZS5SZW5kaXRpb25BY3Rpb24oY19hY3Rpb24pO1xuICAgICAgICBjX3JlbmRpdGlvbl9hY3Rpb24uU2V0T3BlcmF0aW9uVHlwZSh0aGlzLmVuZ2luZS5PcGVyYXRpb25UeXBlLmVfT3BUeXBlQXNzb2NpYXRlKTtcbiAgICAgICAgY19yZW5kaXRpb25fYWN0aW9uLlNldFNjcmVlbkFubm90KHRoaXMuYW5ub3QpO1xuXG4gICAgICAgIGxldCBjX3JlbmRpdGlvbiA9IG5ldyB0aGlzLmVuZ2luZS5SZW5kaXRpb24oY19kb2MsIG51bGwpO1xuICAgICAgICBjX3JlbmRpdGlvbi5TZXRSZW5kaXRpb25OYW1lKG5ldyB0aGlzLmVuZ2luZS5XU3RyaW5nKGZpbGVOYW1lKSk7XG4gICAgICAgIGNfcmVuZGl0aW9uLlNldE1lZGlhQ2xpcE5hbWUobmV3IHRoaXMuZW5naW5lLldTdHJpbmcoZmlsZU5hbWUpKTtcbiAgICAgICAgLy8gY19yZW5kaXRpb24uU2V0UGVybWlzc2lvbih0aGlzLmVuZ2luZS5SZW5kaXRpb24uZV9NZWRpYVBlcm1UZW1wQWNjZXNzKTtcblxuICAgICAgICBsZXQgY19maWxlX3NwZWMgPSBGaWxlU3BlYy5jcmVhdGVGaWxlKHRoaXMuZW5naW5lLCBjX2RvYywgYnVmZmVyKTtcbiAgICAgICAgY19maWxlX3NwZWMuU2V0RmlsZU5hbWUobmV3IHRoaXMuZW5naW5lLldTdHJpbmcoZmlsZU5hbWUpKTtcblxuICAgICAgICBjX3JlbmRpdGlvbi5TZXRNZWRpYUNsaXBGaWxlKGNfZmlsZV9zcGVjKTtcbiAgICAgICAgY19yZW5kaXRpb24uU2V0TWVkaWFDbGlwQ29udGVudFR5cGUobmV3IHRoaXMuZW5naW5lLlN0cmluZyhjb250ZW50VHlwZSkpO1xuICAgICAgICBjX3JlbmRpdGlvbl9hY3Rpb24uSW5zZXJ0UmVuZGl0aW9uKGNfcmVuZGl0aW9uLCAtMSk7XG4gICAgICAgIHRoaXMuYW5ub3QuU2V0QWN0aW9uKGNfcmVuZGl0aW9uX2FjdGlvbik7XG4gICAgICAgIHRoaXMuYW5ub3QuUmVzZXRBcHBlYXJhbmNlU3RyZWFtKCk7XG4gICAgICAgIHRoaXMuYWN0aW9uID0gdGhpcy5KUi5hY3Rpb25NYW5hZ2VyLmdldChjX2FjdGlvbiwgdGhpcy5kb2MsdGhpcy5KUik7XG4gICAgfVxuICAgIHNldEltYWdlKGJ1ZmZlcil7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgaW1hZ2U9SW1hZ2UuY3JlYXRlSW1hZ2UodGhpcy5lbmdpbmUsYnVmZmVyKTtcbiAgICAgICAgICAgIHRoaXMuYW5ub3QuU2V0SW1hZ2UoaW1hZ2UsMCAsMCk7XG4gICAgICAgICAgICB0aGlzLmFubm90LlJlc2V0QXBwZWFyYW5jZVN0cmVhbSgpO1xuICAgICAgICB9Y2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGxldCBlbmdpbmUgPSB0aGlzLmVuZ2luZTtcbiAgICAgICAgICAgIGxldCBlcnJvckNvZGUgPSBlIGluc3RhbmNlb2YgZW5naW5lLkVycm9yQ29kZSA/IGUgOiBlbmdpbmUuZ2V0RXJyb3JDb2RlIChlKTtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuIChlcnJvckNvZGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBzZXRPcGFjaXR5IChvcGFjaXR5KSB7XG4gICAgICAgIGxldCBhbm5vdCA9IHRoaXMuYW5ub3Q7XG4gICAgICAgIG9wYWNpdHkgPSArb3BhY2l0eTtcbiAgICAgICAgYW5ub3QuU2V0T3BhY2l0eShvcGFjaXR5KTtcbiAgICAgICAgYW5ub3QuUmVzZXRBcHBlYXJhbmNlU3RyZWFtKCk7XG4gICAgICAgIHJldHVybiBbdGhpcy5nZXRJZCgpXTtcbiAgICB9XG4gICAgc2V0Um90YXRpb24gKHJvdGF0aW9uKXtcbiAgICAgICAgbGV0IGFubm90ID0gdGhpcy5hbm5vdDtcbiAgICAgICAgbGV0IFJvdGF0aW9uPXRoaXMuZW5naW5lLlJvdGF0aW9uO1xuICAgICAgICBsZXQgcm90YXRpb25UeXBlPXtcIjBcIjpSb3RhdGlvbi5lX1JvdGF0aW9uMCxcIjkwXCI6Um90YXRpb24uZV9Sb3RhdGlvbjkwLFwiMTgwXCI6Um90YXRpb24uZV9Sb3RhdGlvbjE4MCxcIjI3MFwiOlJvdGF0aW9uLmVfUm90YXRpb24yNzB9O1xuICAgICAgICBhbm5vdC5TZXRSb3RhdGlvbihyb3RhdGlvblR5cGVbcm90YXRpb25dKTtcbiAgICAgICAgYW5ub3QuUmVzZXRBcHBlYXJhbmNlU3RyZWFtKCk7XG4gICAgICAgIHJldHVybiBbdGhpcy5nZXRJZCgpXTtcbiAgICB9XG4gICAgc2V0Qm9yZGVyU3R5bGUoc3R5bGUsc3R5bGVQYXJhbSl7XG4gICAgICAgIHN1cGVyLnNldEJvcmRlclN0eWxlKHN0eWxlLHN0eWxlUGFyYW0pO1xuICAgICAgICByZXR1cm4gW3RoaXMuZ2V0SWQoKV07XG4gICAgfVxufSIsImltcG9ydCBNYXJrdXBBbm5vdCBmcm9tIFwiLi9NYXJrdXBBbm5vdFwiO1xuaW1wb3J0IHtcbiAgICBjb252ZXJ0RnJvbU51bWJlclRvSGV4XG59IGZyb20gXCIuLi8uLi9zaGFyZWQvY29sb3JcIjtcbmltcG9ydCBSZWN0T3BlcmF0b3IgZnJvbSBcIi4uL3NoYXJlL1JlY3RPcGVyYXRvclwiO1xuXG4vKipcbiAqIEB0eXBlZGVmIEdTREtTcXVhcmVBbm5vdFxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gR2V0RmlsbENvbG9yXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBTZXRGaWxsQ29sb3JcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IEdldElubmVyUmVjdFxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gU2V0SW5uZXJSZWN0XG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBHZXRQb3B1cFxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gU2V0UG9wdXBcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IEdldFRpdGxlXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBTZXRUaXRsZVxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gR2V0U3ViamVjdFxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gU2V0U3ViamVjdFxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gR2V0T3BhY2l0eVxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gU2V0T3BhY2l0eVxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gR2V0SW50ZW50XG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBTZXRJbnRlbnRcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IEdldENyZWF0aW9uRGF0ZVRpbWVcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFNldENyZWF0aW9uRGF0ZVRpbWVcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IEdldFJlcGx5Q291bnRcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IEdldFJlcGx5XG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBBZGRSZXBseVxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gUmVtb3ZlUmVwbHlcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFJlbW92ZUFsbFJlcGxpZXNcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IElzR3JvdXBlZFxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gR2V0R3JvdXBIZWFkZXJcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IEdldEdyb3VwRWxlbWVudHNcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFVuZ3JvdXBcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IEdldFN0YXRlQW5ub3RDb3VudFxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gR2V0U3RhdGVBbm5vdFxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gQWRkU3RhdGVBbm5vdFxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gUmVtb3ZlQWxsU3RhdGVBbm5vdHNcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IElzRW1wdHlcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IEdldFBhZ2VcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IElzTWFya3VwXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBHZXRUeXBlXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBHZXRJbmRleFxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gR2V0Q29udGVudFxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gU2V0Q29udGVudFxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gR2V0TW9kaWZpZWREYXRlVGltZVxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gU2V0TW9kaWZpZWREYXRlVGltZVxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gR2V0RmxhZ3NcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFNldEZsYWdzXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBHZXRVbmlxdWVJRFxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gU2V0VW5pcXVlSURcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IEdldFJlY3RcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IE1vdmVcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IEdldEJvcmRlckluZm9cbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFNldEJvcmRlckluZm9cbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IEdldEJvcmRlckNvbG9yXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBTZXRCb3JkZXJDb2xvclxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gUmVzZXRBcHBlYXJhbmNlU3RyZWFtXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBHZXREZXZpY2VSZWN0XG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBHZXREaWN0XG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBSZW1vdmVQcm9wZXJ0eVxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gR2V0T3B0aW9uYWxDb250ZW50XG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBHZXRBcHBlYXJhbmNlU3RyZWFtXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBpc0FsaWFzT2ZcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IGNsb25lXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBkZWxldGVcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IGlzRGVsZXRlZFxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gZGVsZXRlTGF0ZXJcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTcXVhcmUgZXh0ZW5kcyBNYXJrdXBBbm5vdCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBTcXVhcmUuXG4gICAgICogQHBhcmFtIHtHU0RLU3F1YXJlQW5ub3R9IGFubm90XG4gICAgICogQHBhcmFtIHtvYmplY3R9IHBkZlBhZ2VcbiAgICAgKiBAbWVtYmVyb2YgU3F1YXJlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoYW5ub3QsIHBkZlBhZ2UpIHtcbiAgICAgICAgc3VwZXIoYW5ub3QsIHBkZlBhZ2UpO1xuICAgICAgICB0aGlzLmFubm90ID0gbmV3IHRoaXMuZW5naW5lLlNxdWFyZShhbm5vdCk7XG4gICAgfVxuICAgIF9jYWxjdWxhdGVSZWN0RGlmZmVyKCl7XG4gICAgICAgIGNvbnN0IHJlY3QgPSB0aGlzLmFubm90LkdldFJlY3QoKTtcbiAgICAgICAgY29uc3QgaW5uZXJSZWN0ID0gdGhpcy5hbm5vdC5HZXRJbm5lclJlY3QoKTtcbiAgICAgICAgcmV0dXJuIFJlY3RPcGVyYXRvci5zdWJ0cmFjdChyZWN0LCBpbm5lclJlY3QpO1xuICAgIH1cbiAgICBtb3ZlKG9mZnNldExlZnQsIG9mZnNldFRvcCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogQHR5cGUge0dTREtDaXJjbGVBbm5vdH1cbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IGFubm90ID0gdGhpcy5hbm5vdDtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGRlc3RpbmF0aW9uID0gUmVjdE9wZXJhdG9yLm9uKGFubm90LkdldFJlY3QoKSkgLy9cbiAgICAgICAgICAgIC5tb3ZlKG9mZnNldExlZnQsIG9mZnNldFRvcCkgLy9cbiAgICAgICAgICAgIC5leHRyYWN0KCk7XG4gICAgICAgIHJldHVybiB0aGlzLmFubm90Lk1vdmUoZGVzdGluYXRpb24pO1xuICAgIH1cbiAgICBzZXRSZWN0KHJlY3Qpe1xuICAgICAgICBjb25zdCBkZXN0aW5hdGlvbiA9IG5ldyB0aGlzLmVuZ2luZS5DRlhfRmxvYXRSZWN0KHJlY3QubGVmdCxyZWN0LmJvdHRvbSxyZWN0LnJpZ2h0LHJlY3QudG9wKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYW5ub3QuTW92ZShkZXN0aW5hdGlvbik7XG4gICAgfVxuICAgIHNldElubmVyUmVjdChyZWN0KSB7XG4gICAgICAgIGxldCBkZXN0aW5hdGlvbiA9IG5ldyB0aGlzLmVuZ2luZS5DRlhfRmxvYXRSZWN0KHJlY3QubGVmdCwgcmVjdC5ib3R0b20sIHJlY3QucmlnaHQsIHJlY3QudG9wKTtcbiAgICAgICAgdGhpcy5hbm5vdC5TZXRJbm5lclJlY3QoZGVzdGluYXRpb24pO1xuICAgICAgICB0aGlzLmFubm90LlJlc2V0QXBwZWFyYW5jZVN0cmVhbSgpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZ2V0SW5uZXJSZWN0KCkge1xuICAgICAgICByZXR1cm4gUmVjdE9wZXJhdG9yLm9uKHRoaXMuYW5ub3QuR2V0SW5uZXJSZWN0KCkpLnRvUGxhaW5PYmplY3QoKTtcbiAgICB9XG4gICAgdG9Kc29uKCkge1xuICAgICAgICBjb25zdCBqc29uID0gc3VwZXIudG9Kc29uKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAdHlwZSB7R1NES1NxdWFyZUFubm90fVxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3QgYW5ub3QgPSB0aGlzLmFubm90O1xuXG4gICAgICAgIGxldCBmaWxsQ29sb3IgPSBhbm5vdC5HZXRGaWxsQ29sb3IoKTtcbiAgICAgICAganNvbi5maWxsQ29sb3IgPSBmaWxsQ29sb3I7XG5cbiAgICAgICAganNvbi5pbm5lclJlY3QgPSBSZWN0T3BlcmF0b3Iub24oYW5ub3QuR2V0SW5uZXJSZWN0KCkpLnRvUGxhaW5PYmplY3QoKTtcbiAgICAgICAgcmV0dXJuIGpzb247XG4gICAgfVxuICAgIHNldEZpbGxDb2xvciAoY29sb3IpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLl9zZXRGaWxsQ29sb3IoY29sb3IpO1xuICAgIH1cbn0iLCIvKipcbiAqIENyZWF0ZWQgYnkgemogb24gMjAxOC8xMi81LlxuICovXG5pbXBvcnQgVGV4dE1hcmt1cEFubm90IGZyb20gJy4vVGV4dE1hcmt1cEFubm90JztcblxuY2xhc3MgU3F1aWdnbHkgZXh0ZW5kcyBUZXh0TWFya3VwQW5ub3Qge1xuICAgIGNvbnN0cnVjdG9yIChhbm5vdCwgcGRmUGFnZSkge1xuICAgICAgICBzdXBlcihhbm5vdCwgcGRmUGFnZSk7XG4gICAgICAgIHRoaXMuYW5ub3QgPSBuZXcgdGhpcy5lbmdpbmUuU3F1aWdnbHkodGhpcy5hbm5vdCk7XG4gICAgfVxuXG4gICAgY3JlYXRlKGpzb24pe1xuICAgICAgICBsZXQgcmVzdWx0ID0gc3VwZXIuY3JlYXRlKGpzb24pO1xuICAgICAgICB0aGlzLnNldEJvcmRlckNvbG9yKGpzb24uY29sb3J8fDB4ZmY2NjMzKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNxdWlnZ2x5OyIsImltcG9ydCBNYXJrdXBBbm5vdCBmcm9tICcuL01hcmt1cEFubm90JztcbmltcG9ydCBnZXRJY29uUHJvdmlkZXIgZnJvbSAnLi4vaWNvblByb3ZpZGVyJ1xuaW1wb3J0IExvZ2dlckZhY3RvcnkgZnJvbSAnLi4vLi4vc2hhcmVkL2xvZ2dlci9Mb2dnZXJGYWN0b3J5JztcblxuY29uc3QgbG9nZ2VyID0gTG9nZ2VyRmFjdG9yeS5nZXRMb2dnZXIoJ3BkZi1qci5TdGFtcCcpO1xuY2xhc3MgU3RhbXAgZXh0ZW5kcyBNYXJrdXBBbm5vdCB7XG4gICAgY29uc3RydWN0b3IgKGFubm90LCBwZGZQYWdlKSB7XG4gICAgICAgIHN1cGVyKGFubm90LCBwZGZQYWdlKTtcbiAgICAgICAgdGhpcy5hbm5vdCA9IG5ldyB0aGlzLmVuZ2luZS5TdGFtcCh0aGlzLmFubm90KTtcbiAgICB9XG5cbiAgICBzZXRJY29uTmFtZShpY29uTmFtZSl7XG4gICAgICAgIC8qbGV0IGFubm90ID0gdGhpcy5hbm5vdDtcbiAgICAgICAgYW5ub3QuU2V0SWNvbk5hbWUoaWNvbk5hbWUpO1xuICAgICAgICBhbm5vdC5SZXNldEFwcGVhcmFuY2VTdHJlYW0oKTsqL1xuICAgIH1cbiAgICBjcmVhdGUgKGpzb24pe1xuICAgICAgICBsZXQgYW5ub3RzID0gc3VwZXIuY3JlYXRlKGpzb24pO1xuICAgICAgICB0cnl7XG4gICAgICAgIGxldCBpY29uUHJvdmlkZXIgPSBnZXRJY29uUHJvdmlkZXIoKTtcbiAgICAgICAgaWNvblByb3ZpZGVyLnNldEljb25DYXRhbG9nKGpzb24uaWNvbkNhdGFnb3J5KTtcbiAgICAgICAgaWNvblByb3ZpZGVyLmVuYWJsZSh0cnVlKTtcbiAgICAgICAgdGhpcy5hbm5vdC5TZXRJY29uTmFtZShuZXcgdGhpcy5lbmdpbmUuU3RyaW5nKGpzb24uaWNvbikpO1xuXG4gICAgICAgIGpzb24ucm90YXRlJiZ0aGlzLnNldFJvdGF0aW9uKGpzb24ucm90YXRlKTtcbiAgICAgICAgdGhpcy5hbm5vdC5SZXNldEFwcGVhcmFuY2VTdHJlYW0oKTtcbiAgICAgICAgaWNvblByb3ZpZGVyLmVuYWJsZShmYWxzZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgIGlmICghaXNOYU4gKGVycikpIHtcbiAgICAgICAgICAgIGVyciA9IHRoaXMuZW5naW5lLmdldEVycm9yQ29kZSAoZXJyKTtcbiAgICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUud2FybiAoZXJyKTtcbiAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFubm90cztcbiAgICB9XG4gICAgc2V0QW5ub3RBUEJpdG1hcCh1cmwsc2l6ZSl7XG4gICAgICAgIGxldCByZWFkZXJDYWxsYmFjayA9IHRoaXMuZW5naW5lLlJlYWRlckNhbGxiYWNrLmltcGxlbWVudCh7XG4gICAgICAgICAgICBSZWxlYXNlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgR2V0U2l6ZTogKCkgPT57XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgUmVhZEJsb2NrOiAoYnVmZmVyLCBvZmZzZXQsIHNpemUpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgc3JjID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5KUi5yZXF1ZXN0RGF0YShcIkdFVFwiLGZhbHNlLHVybCxvZmZzZXQsc2l6ZSkpO1xuICAgICAgICAgICAgICAgIHRoaXMuZW5naW5lLkhFQVBVOC5zZXQoc3JjLCBidWZmZXIpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBsZXQgaW1hZ2UgPSBuZXcgdGhpcy5lbmdpbmUuSW1hZ2UocmVhZGVyQ2FsbGJhY2spO1xuXG4gICAgICAgIHRoaXMuYW5ub3QuU2V0SW1hZ2UoaW1hZ2UsMCwwKTtcbiAgICAgICAgdGhpcy5hbm5vdC5SZXNldEFwcGVhcmFuY2VTdHJlYW0oKTtcbiAgICB9XG4gICAgc2V0Um90YXRpb24ocm90YXRlKXtcbiAgICAgICAgbGV0IG9yaVJvdGF0ZSA9IHRoaXMuYW5ub3QuR2V0Um90YXRpb24oKTtcbiAgICAgICAgdGhpcy5hbm5vdC5Sb3RhdGUoKDM2MC1vcmlSb3RhdGUpJTM2MCk7XG4gICAgICAgIHRoaXMuYW5ub3QuUm90YXRlKHJvdGF0ZSk7XG4gICAgICAgIHRoaXMuYW5ub3QuUmVzZXRBcHBlYXJhbmNlU3RyZWFtKCk7XG4gICAgICAgIHJldHVybiBbdGhpcy5nZXRJZCgpXTtcbiAgICB9XG4gICAgdG9Kc29uKCl7XG4gICAgICAgIGxldCBiYXNlSW5mbyA9IHN1cGVyLnRvSnNvbigpO1xuICAgICAgICBiYXNlSW5mby5yb3RhdGlvbiA9IHRoaXMuYW5ub3QuR2V0Um90YXRpb24oKTtcbiAgICAgICAgcmV0dXJuIGJhc2VJbmZvO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU3RhbXA7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHpqIG9uIDIwMTgvMTIvNS5cbiAqL1xuaW1wb3J0IFRleHRNYXJrdXBBbm5vdCBmcm9tICcuL1RleHRNYXJrdXBBbm5vdCc7XG5cbmNsYXNzIFN0cmlrZU91dCBleHRlbmRzIFRleHRNYXJrdXBBbm5vdCB7XG4gICAgY29uc3RydWN0b3IgKGFubm90LCBwZGZQYWdlKSB7XG4gICAgICAgIHN1cGVyKGFubm90LCBwZGZQYWdlKTtcbiAgICAgICAgdGhpcy5hbm5vdCA9IG5ldyB0aGlzLmVuZ2luZS5TdHJpa2VPdXQodGhpcy5hbm5vdCk7XG4gICAgfVxuICAgIHRvSnNvbiAoKSB7XG4gICAgICAgIGxldCBqc29uID0gc3VwZXIudG9Kc29uKCk7XG5cbiAgICAgICAgaWYoanNvbi5JUlQmJmpzb24uUlQgPT0gJ0dyb3VwJyYmanNvbi5pbnRlbnQ9PVwiXCIpe1xuICAgICAgICAgICAganNvbi5pbnRlbnQ9J1N0cmlrZU91dFRleHRFZGl0J1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGFubm90ID0gdGhpcy5hbm5vdDtcbiAgICAgICAgbGV0IGdyb3VwRWxlbWVudHM7XG4gICAgICAgIGxldCBncm91cEVsZW1lbnRzQ291bnQ7XG4gICAgICAgIC8vIOWIpOaWreaYr+WQpuaYr1JlcGxhY2VcbiAgICAgICAgaWYgKHRoaXMuaXNSZXBsYWNlKCkpIHtcbiAgICAgICAgICAgIGpzb24udHlwZUFsaWFzID0gJ1JlcGxhY2UnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGpzb247XG4gICAgfVxuICAgIHVwZGF0ZVF1YWRQb2ludHNCeUNoYXJJbmRleCAoc3RhcnRDaGFySW5kZXgsIGVuZENoYXJJbmRleCkge1xuICAgICAgICByZXR1cm4gc3VwZXIudXBkYXRlUXVhZFBvaW50c0J5Q2hhckluZGV4KHN0YXJ0Q2hhckluZGV4LCBlbmRDaGFySW5kZXgpO1xuICAgIH1cbiAgICBpc1JlcGxhY2UgKCkge1xuICAgICAgICAvLyDliKTmlq3mmK/lkKbmmK9SZXBsYWNlXG4gICAgICAgIGxldCBhbm5vdCA9IHRoaXMuYW5ub3Q7XG4gICAgICAgIGxldCBncm91cEVsZW1lbnRzO1xuICAgICAgICBsZXQgZ3JvdXBFbGVtZW50c0NvdW50O1xuICAgICAgICBpZiAoYW5ub3QuSXNHcm91cGVkKCkgJiYgKGdyb3VwRWxlbWVudHMgPSBhbm5vdC5HZXRHcm91cEVsZW1lbnRzKCkpICYmICgoZ3JvdXBFbGVtZW50c0NvdW50ID0gZ3JvdXBFbGVtZW50cy5HZXRTaXplKCkpID09PSAyKSkge1xuICAgICAgICAgICAgbGV0IHJlcGxhY2VUeXBlcyA9IFsnQW5ub3RUeXBlX2VfU3RyaWtlT3V0JywgJ0Fubm90VHlwZV9lX0NhcmV0J107XG4gICAgICAgICAgICBsZXQgaXNSZXBsYWNlID0gdHJ1ZTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBncm91cEVsZW1lbnRzQ291bnQ7IGktLTspIHtcbiAgICAgICAgICAgICAgICBsZXQgbWFya3VwID0gZ3JvdXBFbGVtZW50cy5HZXRBdChpKTtcbiAgICAgICAgICAgICAgICBsZXQgaW5kZXhPZiA9IHJlcGxhY2VUeXBlcy5pbmRleE9mKG1hcmt1cC5HZXRUeXBlKCkuY29uc3RydWN0b3IubmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4T2YgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNyZWF0ZShqc29uKXtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHN1cGVyLmNyZWF0ZShqc29uKTtcbiAgICAgICAgaWYoanNvbi5zdWJqZWN0JiZqc29uLnN1YmplY3QudG9Mb2NhbGVMb3dlckNhc2UoKT09PVwicmVwbGFjZVwiKXtcbiAgICAgICAgICAgIHRoaXMuc2V0Qm9yZGVyQ29sb3IoanNvbi5jb2xvcnx8MHgwMDAwZmYpO1xuICAgICAgICB9ZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNldEJvcmRlckNvbG9yKGpzb24uY29sb3J8fDB4ZmYwMDAwKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU3RyaWtlT3V0OyIsImltcG9ydCBNYXJrdXBBbm5vdCBmcm9tICcuL01hcmt1cEFubm90JztcblxuY2xhc3MgVGV4dE1hcmt1cEFubm90IGV4dGVuZHMgTWFya3VwQW5ub3Qge1xuICAgIGNvbnN0cnVjdG9yIChhbm5vdCwgcGRmUGFnZSkge1xuICAgICAgICBzdXBlcihhbm5vdCwgcGRmUGFnZSk7XG4gICAgICAgIHRoaXMuYW5ub3QgPSBuZXcgdGhpcy5lbmdpbmUuVGV4dE1hcmt1cCh0aGlzLmFubm90KTtcbiAgICB9XG4gICAgdG9Kc29uICgpIHtcbiAgICAgICAgbGV0IGpzb24gPSBzdXBlci50b0pzb24oKTtcbiAgICAgICAgbGV0IGFubm90ID0gdGhpcy5hbm5vdDtcbiAgICAgICAgbGV0IGVuZ2luZSA9IHRoaXMuZW5naW5lO1xuXG4gICAgICAgIGxldCBxdWFkUG9pbnRzID0gYW5ub3QuR2V0UXVhZFBvaW50cygpO1xuICAgICAgICBsZXQgcXVhZFBvaW50Q291bnQgPSBxdWFkUG9pbnRzLkdldFNpemUoKTtcbiAgICAgICAgbGV0IHF1YWRQb2ludEFyciA9IFtdO1xuICAgICAgICBsZXQgaXNBcmVhID0gZmFsc2U7XG4gICAgICAgIGxldCB0ZXh0QXJyID0gW107XG4gICAgICAgIGxldCB0ZXh0UGFnZSA9IHRoaXMucGRmUGFnZS5nZXROb3JtYWxUZXh0UGFnZVN5bmMoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHF1YWRQb2ludENvdW50OyBpLS07KSB7XG4gICAgICAgICAgICBsZXQgcXVhZFBvaW50ID0gcXVhZFBvaW50cy5HZXRBdChpKTtcbiAgICAgICAgICAgIC8vIFRoZSBmaXJzdCBwb2ludCBpcyB0aGUgcG9pbnQgaW4gbGVmdC10b3AgY29ybmVyIG9mIHRoZSBxdWFkcmlsYXRlcmFsLlxuICAgICAgICAgICAgLy8gVGhlIHNlY29uZCBwb2ludCBpcyB0aGUgcG9pbnQgaW4gcmlnaHQtdG9wIGNvcm5lciBvZiB0aGUgcXVhZHJpbGF0ZXJhbC5cbiAgICAgICAgICAgIC8vIFRoZSB0aGlyZCBwb2ludCBpcyB0aGUgcG9pbnQgaW4gbGVmdC1ib3R0b20gY29ybmVyIG9mIHRoZSBxdWFkcmlsYXRlcmFsLlxuICAgICAgICAgICAgLy8gVGhlIGZvdXJ0aCBwb2ludCBpcyB0aGUgcG9pbnQgaW4gcmlnaHQtYm90dG9tIGNvcm5lciBvZiB0aGUgcXVhZHJpbGF0ZXJhbC5cbiAgICAgICAgICAgIHF1YWRQb2ludEFycltpXSA9IFt7XG4gICAgICAgICAgICAgICAgeDogcXVhZFBvaW50LmZpcnN0LngsXG4gICAgICAgICAgICAgICAgeTogcXVhZFBvaW50LmZpcnN0LnksXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgeDogcXVhZFBvaW50LnNlY29uZC54LFxuICAgICAgICAgICAgICAgIHk6IHF1YWRQb2ludC5zZWNvbmQueSxcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICB4OiBxdWFkUG9pbnQudGhpcmQueCxcbiAgICAgICAgICAgICAgICB5OiBxdWFkUG9pbnQudGhpcmQueSxcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICB4OiBxdWFkUG9pbnQuZm91cnRoLngsXG4gICAgICAgICAgICAgICAgeTogcXVhZFBvaW50LmZvdXJ0aC55LFxuICAgICAgICAgICAgfV07XG4gICAgICAgICAgICBsZXQgcmVjdCA9IG5ldyB0aGlzLmVuZ2luZS5DRlhfRmxvYXRSZWN0KHF1YWRQb2ludC5maXJzdC54LFxuICAgICAgICAgICAgICAgIHF1YWRQb2ludC5mb3VydGgueSxxdWFkUG9pbnQuZm91cnRoLngscXVhZFBvaW50LmZpcnN0LnkpXG4gICAgICAgICAgICByZWN0Lk5vcm1hbGl6ZSgpO1xuICAgICAgICAgICAgaWYocmVjdC5XaWR0aCgpPjEmJnJlY3QuSGVpZ2h0KCk+MSl7XG4gICAgICAgICAgICAgICAgbGV0IHJlY3RUZXh0ID0gdGV4dFBhZ2UuR2V0VGV4dEluUmVjdChyZWN0KS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIGlmICghcmVjdFRleHQgfHwgL1xcbi8udGVzdChyZWN0VGV4dCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNBcmVhID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGV4dEFycltpXSA9IHJlY3RUZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGpzb24udGV4dCA9IHRleHRBcnIuam9pbignXFxyXFxuJyk7XG4gICAgICAgIGlmIChpc0FyZWEgfHwgIXF1YWRQb2ludENvdW50KSB7XG4gICAgICAgICAgICAvLyDkuI3lnKjmloflrZfkuIrnmoR0ZXh0bWFya3Vw77yM5oiW5Yy65Z2X55qEdGV4dG1hcmt1cFxuICAgICAgICAgICAganNvbi5zdGFydENoYXJJbmRleCA9IC0xO1xuICAgICAgICAgICAganNvbi5lbmRDaGFySW5kZXggPSAtMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBzdGFydFF1YWRQb2ludCA9IHF1YWRQb2ludHMuR2V0QXQoMCk7XG4gICAgICAgICAgICBsZXQgc3RhcnRSYWRpYW4gPSBNYXRoLmF0YW4yKHN0YXJ0UXVhZFBvaW50LmZpcnN0LnkgLSBzdGFydFF1YWRQb2ludC5zZWNvbmQueSwgc3RhcnRRdWFkUG9pbnQuc2Vjb25kLnggLSBzdGFydFF1YWRQb2ludC5maXJzdC54KTtcbiAgICAgICAgICAgIGxldCBzdGFydE1hdHJpeCA9IG5ldyBlbmdpbmUuTWF0cml4KCk7XG4gICAgICAgICAgICBzdGFydE1hdHJpeC5Sb3RhdGUoLXN0YXJ0UmFkaWFuLCBmYWxzZSk7XG4gICAgICAgICAgICBzdGFydE1hdHJpeC5Sb3RhdGUoLU1hdGguUEkgLyAyLCBmYWxzZSk7XG4gICAgICAgICAgICBzdGFydE1hdHJpeC5UcmFuc2xhdGUoKHN0YXJ0UXVhZFBvaW50LmZpcnN0LnggKyBzdGFydFF1YWRQb2ludC50aGlyZC54KSAvIDIsIChzdGFydFF1YWRQb2ludC5maXJzdC55ICsgc3RhcnRRdWFkUG9pbnQudGhpcmQueSkgLyAyLCBmYWxzZSk7XG4gICAgICAgICAgICBsZXQgaGVpZ2h0ID0gTWF0aC5taW4oMywgTWF0aC5zcXJ0KE1hdGgucG93KHN0YXJ0UXVhZFBvaW50LnRoaXJkLnkgLSBzdGFydFF1YWRQb2ludC5maXJzdC55LCAyKSArIE1hdGgucG93KHN0YXJ0UXVhZFBvaW50LnRoaXJkLnggLSBzdGFydFF1YWRQb2ludC5maXJzdC54LCAyKSkpXG4gICAgICAgICAgICBsZXQgeCA9IDAsIHkgPSBoZWlnaHQ7XG4gICAgICAgICAgICBsZXQgZnggPSBzdGFydE1hdHJpeC5hICogeCArIHN0YXJ0TWF0cml4LmMgKiB5ICsgc3RhcnRNYXRyaXguZTtcbiAgICAgICAgICAgIGxldCBmeSA9IHN0YXJ0TWF0cml4LmIgKiB4ICsgc3RhcnRNYXRyaXguZCAqIHkgKyBzdGFydE1hdHJpeC5mO1xuICAgICAgICAgICAgbGV0IHN0YXJ0Q2hhckluZGV4ID0ganNvbi5zdGFydENoYXJJbmRleCA9IHRleHRQYWdlLkdldEluZGV4QXRQb3MoZngsIGZ5LCAyKTtcbiAgICAgICAgICAgIGlmIChzdGFydENoYXJJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBsZXQgdGV4dFJlY3RDb3VudCA9IHRleHRQYWdlLkdldFRleHRSZWN0Q291bnQoc3RhcnRDaGFySW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgIGxldCByZWN0ID0gdGV4dFBhZ2UuR2V0VGV4dFJlY3QoMCk7XG4gICAgICAgICAgICAgICAgbGV0IHJvdGF0aW9uID0gdGV4dFBhZ2UuR2V0QmFzZWxpbmVSb3RhdGlvbigwKTtcblxuICAgICAgICAgICAgICAgIGpzb24uc3RhcnRDaGFySW5mbyA9IHtcbiAgICAgICAgICAgICAgICAgICAgY2hhckluZGV4OiBzdGFydENoYXJJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogcmVjdC5sZWZ0LFxuICAgICAgICAgICAgICAgICAgICByaWdodDogcmVjdC5yaWdodCxcbiAgICAgICAgICAgICAgICAgICAgdG9wOiByZWN0LnRvcCxcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tOiByZWN0LmJvdHRvbSxcbiAgICAgICAgICAgICAgICAgICAgcm90YXRpb246IHJvdGF0aW9uLnZhbHVlLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBlbmRRdWFkUG9pbnQgPSBxdWFkUG9pbnRzLkdldEF0KHF1YWRQb2ludENvdW50IC0gMSk7XG4gICAgICAgICAgICBsZXQgZW5kUmFkaWFuID0gTWF0aC5hdGFuMihlbmRRdWFkUG9pbnQuZmlyc3QueSAtIGVuZFF1YWRQb2ludC5zZWNvbmQueSwgZW5kUXVhZFBvaW50LnNlY29uZC54IC0gZW5kUXVhZFBvaW50LmZpcnN0LngpO1xuICAgICAgICAgICAgbGV0IGVuZE1hdHJpeCA9IG5ldyBlbmdpbmUuTWF0cml4KCk7XG4gICAgICAgICAgICBlbmRNYXRyaXguUm90YXRlKC1lbmRSYWRpYW4sIGZhbHNlKTtcbiAgICAgICAgICAgIGVuZE1hdHJpeC5Sb3RhdGUoLU1hdGguUEkgLyAyLCBmYWxzZSk7XG4gICAgICAgICAgICBlbmRNYXRyaXguVHJhbnNsYXRlKChlbmRRdWFkUG9pbnQuc2Vjb25kLnggKyBlbmRRdWFkUG9pbnQuZm91cnRoLngpIC8gMiwgKGVuZFF1YWRQb2ludC5zZWNvbmQueSArIGVuZFF1YWRQb2ludC5mb3VydGgueSkgLyAyLCBmYWxzZSk7XG4gICAgICAgICAgICBoZWlnaHQgPSBNYXRoLm1pbigzLCBNYXRoLnNxcnQoTWF0aC5wb3coZW5kUXVhZFBvaW50LmZvdXJ0aC55IC0gZW5kUXVhZFBvaW50LnNlY29uZC55LCAyKSArIE1hdGgucG93KGVuZFF1YWRQb2ludC5mb3VydGgueCAtIGVuZFF1YWRQb2ludC5zZWNvbmQueCwgMikpKVxuICAgICAgICAgICAgeCA9IDAsIHkgPSAtaGVpZ2h0O1xuICAgICAgICAgICAgZnggPSBlbmRNYXRyaXguYSAqIHggKyBlbmRNYXRyaXguYyAqIHkgKyBlbmRNYXRyaXguZTtcbiAgICAgICAgICAgIGZ5ID0gZW5kTWF0cml4LmIgKiB4ICsgZW5kTWF0cml4LmQgKiB5ICsgZW5kTWF0cml4LmY7XG4gICAgICAgICAgICBsZXQgZW5kQ2hhckluZGV4ID0ganNvbi5lbmRDaGFySW5kZXggPSB0ZXh0UGFnZS5HZXRJbmRleEF0UG9zKGZ4LCBmeSwgMik7XG5cbiAgICAgICAgICAgIGlmIChlbmRDaGFySW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRleHRSZWN0Q291bnQgPSB0ZXh0UGFnZS5HZXRUZXh0UmVjdENvdW50KGVuZENoYXJJbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgbGV0IHJlY3QgPSB0ZXh0UGFnZS5HZXRUZXh0UmVjdCgwKTtcbiAgICAgICAgICAgICAgICBsZXQgcm90YXRpb24gPSB0ZXh0UGFnZS5HZXRCYXNlbGluZVJvdGF0aW9uKDApO1xuXG4gICAgICAgICAgICAgICAganNvbi5lbmRDaGFySW5mbyA9IHtcbiAgICAgICAgICAgICAgICAgICAgY2hhckluZGV4OiBlbmRDaGFySW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IHJlY3QubGVmdCxcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IHJlY3QucmlnaHQsXG4gICAgICAgICAgICAgICAgICAgIHRvcDogcmVjdC50b3AsXG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbTogcmVjdC5ib3R0b20sXG4gICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiByb3RhdGlvbi52YWx1ZSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGpzb24ucXVhZFBvaW50cyA9IHF1YWRQb2ludEFycjtcbiAgICAgICAgaWYgKGpzb24uc3RhcnRDaGFySW5kZXggPiBqc29uLmVuZENoYXJJbmRleCkge1xuICAgICAgICAgICAgbGV0IHRlbXAgPSBqc29uLnN0YXJ0Q2hhckluZGV4O1xuICAgICAgICAgICAganNvbi5zdGFydENoYXJJbmRleCA9IGpzb24uZW5kQ2hhckluZGV4O1xuICAgICAgICAgICAganNvbi5lbmRDaGFySW5kZXggPSB0ZW1wO1xuXG4gICAgICAgICAgICB0ZW1wID0ganNvbi5zdGFydENoYXJJbmZvO1xuICAgICAgICAgICAganNvbi5zdGFydENoYXJJbmZvID0ganNvbi5lbmRDaGFySW5mbztcbiAgICAgICAgICAgIGpzb24uZW5kQ2hhckluZm8gPSB0ZW1wO1xuICAgICAgICB9XG4gICAgICAgIGlmIChqc29uLnN0YXJ0Q2hhckluZGV4ID09PSAtMSB8fCBqc29uLmVuZENoYXJJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIGlzQXJlYSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBqc29uLmNvbnRpbnVvdXNUZXh0ID0gdGV4dFBhZ2UuR2V0Q2hhcnMoanNvbi5zdGFydENoYXJJbmRleCwganNvbi5lbmRDaGFySW5kZXggLSBqc29uLnN0YXJ0Q2hhckluZGV4ICsgMSlcbiAgICAgICAgfVxuICAgICAgICBqc29uLmNvbnRpbnVvdXNUZXh0ID0ganNvbi5jb250aW51b3VzVGV4dCB8fCBqc29uLnRleHQ7XG4gICAgICAgIGpzb24uaXNBcmVhID0gaXNBcmVhO1xuICAgICAgICByZXR1cm4ganNvbjtcbiAgICAgICAgLy9sZXQgbWF0cml4ID0gYW5ub3QuR2V0RGljdCgpLkdldE1hdHJpeCgpO1xuICAgICAgICAvL2pzb24ubWF0cml4ID0gW21hdHJpeC5hLCBtYXRyaXguYiwgbWF0cml4LmMsIG1hdHJpeC5kLCBtYXRyaXguZSwgbWF0cml4LmZdO1xuXG4gICAgICAgIC8vaWYgKCFxdWFkUG9pbnRDb3VudCkge1xuICAgICAgICAvLyAgICBqc29uLnN0YXJ0Q2hhckluZGV4ID0gLTE7XG4gICAgICAgIC8vICAgIGpzb24uZW5kQ2hhckluZGV4ID0gLTE7XG4gICAgICAgIC8vXG4gICAgICAgIC8vICAgIHJldHVybiBqc29uO1xuICAgICAgICAvL31cbiAgICAgICAgLy9cbiAgICAgICAgLy9mb3IgKGxldCBpID0gMDsgaSA8IHF1YWRQb2ludENvdW50OyBpKyspIHtcbiAgICAgICAgLy9cbiAgICAgICAgLy99XG4gICAgICAgIC8vbGV0IHRvbGVyYW5jZSA9IDM7XG4gICAgICAgIC8vZm9yKGxldCBpID0gMDsgaTxxdWFkUG9pbnRDb3VudDtpKyspe1xuICAgICAgICAvLyAgICBsZXQgcXVhZFBvaW5zdCA9ICBxdWFkUG9pbnRzLkdldEF0KGkpO1xuICAgICAgICAvL1xuICAgICAgICAvLyAgICBsZXQgZmlyc3RRdWFkID0gcXVhZFBvaW5zdDtcbiAgICAgICAgLy8gICAgdHJ5e1xuICAgICAgICAvLyAgICAgICAgbGV0IHJlY3QgPSBuZXcgdGhpcy5lbmdpbmUuQ0ZYX0Zsb2F0UmVjdChmaXJzdFF1YWQuZmlyc3QueCxcbiAgICAgICAgLy8gICAgICAgICAgICBmaXJzdFF1YWQuZm91cnRoLnksZmlyc3RRdWFkLmZvdXJ0aC54LGZpcnN0UXVhZC5maXJzdC55KVxuICAgICAgICAvLyAgICAgICAgcmVjdC5Ob3JtYWxpemUoKVxuICAgICAgICAvLyAgICAgICAgY29uc29sZS5sb2coJ3RleHRQYWdlLkdldFRleHRJblJlY3QnLCB0ZXh0UGFnZS5HZXRUZXh0SW5SZWN0KHJlY3QpLnRvU3RyaW5nKCkpXG4gICAgICAgIC8vICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAvLyAgICAgICAgY29uc29sZS5lcnJvcigndGV4dFBhZ2UuR2V0VGV4dEluUmVjdCcsIGUpXG4gICAgICAgIC8vICAgIH1cbiAgICAgICAgLy8gICAgbGV0IGxhc3RRdWFkID0gcXVhZFBvaW5zdDtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gICAgbGV0IGxlZnRUb3BQb2ludHMgPSBxdWFkUG9pbnN0LmZpcnN0O1xuICAgICAgICAvLyAgICBsZXQgcmlnaHRCb3R0b21Qb2ludHMgPSBxdWFkUG9pbnN0LmZvdXJ0aDtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gICAgbGV0IGxlZnRUb3BQb2ludEYgPSBuZXcgZW5naW5lLlBvaW50RihsZWZ0VG9wUG9pbnRzLnggKyAyLCAobGVmdFRvcFBvaW50cy55ICsgZmlyc3RRdWFkLnRoaXJkLnkpIC8gMik7XG4gICAgICAgIC8vICAgIGxldCByaWdodEJvdHRvbVBvaW50RiA9IG5ldyBlbmdpbmUuUG9pbnRGKHJpZ2h0Qm90dG9tUG9pbnRzLnggLSAyLCAocmlnaHRCb3R0b21Qb2ludHMueSArIGxhc3RRdWFkLnNlY29uZC55KSAvIDIpO1xuICAgICAgICAvLyAgICBsZXQgbGVmdFRvcENoYXJJbmRleCA9IHRleHRQYWdlLkdldEluZGV4QXRQb3MobGVmdFRvcFBvaW50Ri54LCBsZWZ0VG9wUG9pbnRGLnksIHRvbGVyYW5jZSAvKiB0b2xlcmFuY2UgKi8pXG4gICAgICAgIC8vICAgIGxldCByaWdodEJvdHRvbUNoYXJJbmRleCA9IHRleHRQYWdlLkdldEluZGV4QXRQb3MocmlnaHRCb3R0b21Qb2ludEYueCwgcmlnaHRCb3R0b21Qb2ludEYueSwgdG9sZXJhbmNlIC8qIHRvbGVyYW5jZSAqLylcbiAgICAgICAgLy9cbiAgICAgICAgLy8gICAganNvbi5zdGFydENoYXJJbmRleCA9IGpzb24uc3RhcnRDaGFySW5kZXh8fGxlZnRUb3BDaGFySW5kZXg7XG4gICAgICAgIC8vICAgIGlmKCFqc29uLmVuZENoYXJJbmRleCB8fCByaWdodEJvdHRvbUNoYXJJbmRleCAhPSAtMSl7XG4gICAgICAgIC8vICAgICAgICBqc29uLmVuZENoYXJJbmRleCA9IHJpZ2h0Qm90dG9tQ2hhckluZGV4O1xuICAgICAgICAvLyAgICB9XG4gICAgICAgIC8vXG4gICAgICAgIC8vICAgIGlmIChsZWZ0VG9wQ2hhckluZGV4ICE9PSAtMSAmJiByaWdodEJvdHRvbUNoYXJJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgLy8gICAgICAgIGxldCBhbm5vdFF1YWRSZWN0ID0gbmV3IHRoaXMuZW5naW5lLkNGWF9GbG9hdFJlY3QoZmlyc3RRdWFkLmZpcnN0LngsXG4gICAgICAgIC8vICAgICAgICAgICAgZmlyc3RRdWFkLmZvdXJ0aC55LGZpcnN0UXVhZC5mb3VydGgueCxmaXJzdFF1YWQuZmlyc3QueSk7XG4gICAgICAgIC8vXG4gICAgICAgIC8vICAgICAgICBsZXQgdGV4dFJlY3RDb3VudCA9IHRleHRQYWdlLkdldFRleHRSZWN0Q291bnQobGVmdFRvcENoYXJJbmRleCwgcmlnaHRCb3R0b21DaGFySW5kZXggLSBsZWZ0VG9wQ2hhckluZGV4ICsgMSk7XG4gICAgICAgIC8vXG4gICAgICAgIC8vICAgICAgICBsZXQgb3V0UmVjdCA9IG5ldyB0aGlzLmVuZ2luZS5DRlhfRmxvYXRSZWN0KDEwMDAwLDEwMDAwLDAsMCk7XG4gICAgICAgIC8vICAgICAgICBmb3IgKGxldCBpID0gMCwgaiA9IHRleHRSZWN0Q291bnQ7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgLy8gICAgICAgICAgICBsZXQgdGV4dFJlY3QgPSB0ZXh0UGFnZS5HZXRUZXh0UmVjdChpKTtcbiAgICAgICAgLy8gICAgICAgICAgICBjb25zb2xlLmxvZyh0ZXh0UmVjdC5sZWZ0LCB0ZXh0UmVjdC50b3AsIHRleHRSZWN0LnJpZ2h0LCB0ZXh0UmVjdC5ib3R0b20pXG4gICAgICAgIC8vXG4gICAgICAgIC8vICAgICAgICAgICAgaWYodGV4dFJlY3QubGVmdDxvdXRSZWN0LmxlZnQpe1xuICAgICAgICAvLyAgICAgICAgICAgICAgICBvdXRSZWN0LmxlZnQgPSB0ZXh0UmVjdC5sZWZ0O1xuICAgICAgICAvLyAgICAgICAgICAgIH1cbiAgICAgICAgLy8gICAgICAgICAgICBpZih0ZXh0UmVjdC5yaWdodD5vdXRSZWN0LnJpZ2h0KXtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgb3V0UmVjdC5yaWdodCA9IHRleHRSZWN0LnJpZ2h0O1xuICAgICAgICAvLyAgICAgICAgICAgIH1cbiAgICAgICAgLy8gICAgICAgICAgICBpZih0ZXh0UmVjdC50b3A+b3V0UmVjdC50b3Ape1xuICAgICAgICAvLyAgICAgICAgICAgICAgICBvdXRSZWN0LnRvcCA9IHRleHRSZWN0LnRvcDtcbiAgICAgICAgLy8gICAgICAgICAgICB9XG4gICAgICAgIC8vICAgICAgICAgICAgaWYodGV4dFJlY3QuYm90dG9tPG91dFJlY3QuYm90dG9tKXtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgb3V0UmVjdC5ib3R0b20gPSB0ZXh0UmVjdC5ib3R0b207XG4gICAgICAgIC8vICAgICAgICAgICAgfVxuICAgICAgICAvLyAgICAgICAgfVxuICAgICAgICAvL1xuICAgICAgICAvLyAgICAgICAgaWYoISgob3V0UmVjdC5sZWZ0IC0gYW5ub3RRdWFkUmVjdC5sZWZ0KTx0b2xlcmFuY2UpXG4gICAgICAgIC8vICAgICAgICB8fCAhKChvdXRSZWN0LnJpZ2h0IC0gYW5ub3RRdWFkUmVjdC5yaWdodCk8dG9sZXJhbmNlKVxuICAgICAgICAvLyAgICAgICAgfHwgISgob3V0UmVjdC50b3AgLSBhbm5vdFF1YWRSZWN0LnRvcCk8dG9sZXJhbmNlKVxuICAgICAgICAvLyAgICAgICAgfHwgISgob3V0UmVjdC5ib3R0b20gLSBhbm5vdFF1YWRSZWN0LmJvdHRvbSk8dG9sZXJhbmNlKVxuICAgICAgICAvLyAgICAgICAgKXtcbiAgICAgICAgLy8gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgLy8gICAgICAgIH1cbiAgICAgICAgLy9cbiAgICAgICAgLy8gICAgICAgIGpzb24udGV4dCA9IGpzb24udGV4dCB8fCAnJztcbiAgICAgICAgLy8gICAgICAgIGxldCBjaGFyID0gdGV4dFBhZ2UuR2V0Q2hhcnMobGVmdFRvcENoYXJJbmRleCwgcmlnaHRCb3R0b21DaGFySW5kZXggLSBsZWZ0VG9wQ2hhckluZGV4ICsgMSkudG9TdHJpbmcoKTtcbiAgICAgICAgLy8gICAgICAgIGpzb24udGV4dCArPSBjaGFyO1xuICAgICAgICAvLyAgICAgICAgY29uc29sZS5sb2coY2hhcilcbiAgICAgICAgLy8gICAgfVxuICAgICAgICAvL31cbiAgICAgICAgLy9cbiAgICAgICAgLy9pZighanNvbi50ZXh0KXtcbiAgICAgICAgLy8gICAganNvbi5pc0FyZWEgPSB0cnVlO1xuICAgICAgICAvLyAgICBqc29uLnN0YXJ0Q2hhckluZGV4ID0gLTE7XG4gICAgICAgIC8vICAgIGpzb24uZW5kQ2hhckluZGV4ID0gLTE7XG4gICAgICAgIC8vfWVsc2UgaWYoanNvbi5lbmRDaGFySW5kZXggLSBqc29uLnN0YXJ0Q2hhckluZGV4ICsgMSA+IGpzb24udGV4dC5sZW5ndGgpe1xuICAgICAgICAvLyAgICBqc29uLnRleHQgPSB0ZXh0UGFnZS5HZXRDaGFycyhqc29uLnN0YXJ0Q2hhckluZGV4LFxuICAgICAgICAvLyAgICAgICAganNvbi5lbmRDaGFySW5kZXggLSBqc29uLnN0YXJ0Q2hhckluZGV4ICsgMSkudG9TdHJpbmcoKTtcbiAgICAgICAgLy99XG4gICAgICAgIC8vXG4gICAgICAgIC8vcmV0dXJuIGpzb247XG4gICAgfVxuICAgIHVwZGF0ZVF1YWRQb2ludHNCeUNoYXJJbmRleCAoc3RhcnRDaGFySW5kZXgsIGVuZENoYXJJbmRleCkge1xuICAgICAgICBpZiAoc3RhcnRDaGFySW5kZXggPT09IC0xIHx8IGVuZENoYXJJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhcnRDaGFySW5kZXggPiBlbmRDaGFySW5kZXgpIHtcbiAgICAgICAgICAgIGxldCB0ZW1wID0gc3RhcnRDaGFySW5kZXg7XG4gICAgICAgICAgICBzdGFydENoYXJJbmRleCA9IGVuZENoYXJJbmRleDtcbiAgICAgICAgICAgIGVuZENoYXJJbmRleCA9IHRlbXA7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHRleHRQYWdlID0gdGhpcy5wZGZQYWdlLmdldE5vcm1hbFRleHRQYWdlU3luYygpO1xuICAgICAgICBsZXQgdGV4dFJlY3RDb3VudCA9IHRleHRQYWdlLkdldFRleHRSZWN0Q291bnQoc3RhcnRDaGFySW5kZXgsIGVuZENoYXJJbmRleCAtIHN0YXJ0Q2hhckluZGV4ICsgMSk7XG4gICAgICAgIGlmICh0ZXh0UmVjdENvdW50IDwgMSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBlbmdpbmUgPSB0aGlzLmVuZ2luZTtcbiAgICAgICAgbGV0IHF1YWRQb2ludHNBcnJheSA9IG5ldyBlbmdpbmUuUXVhZFBvaW50c0FycmF5KCk7XG4gICAgICAgIGxldCBRdWFkUG9pbnRzID0gZW5naW5lLlF1YWRQb2ludHM7XG4gICAgICAgIGxldCBQb2ludEYgPSBlbmdpbmUuUG9pbnRGO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgaiA9IHRleHRSZWN0Q291bnQ7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgICAgIGxldCB0ZXh0UmVjdCA9IHRleHRQYWdlLkdldFRleHRSZWN0KGkpO1xuICAgICAgICAgICAgbGV0IHJvdGF0aW9uID0gdGV4dFBhZ2UuR2V0QmFzZWxpbmVSb3RhdGlvbihpKTtcbiAgICAgICAgICAgIGxldCBtYXRyaXggPSBuZXcgZW5naW5lLk1hdHJpeCgpO1xuICAgICAgICAgICAgbGV0IHRvcCA9IHRleHRSZWN0LnRvcDtcbiAgICAgICAgICAgIGxldCByaWdodCA9IHRleHRSZWN0LnJpZ2h0O1xuICAgICAgICAgICAgbGV0IGJvdHRvbSA9IHRleHRSZWN0LmJvdHRvbTtcbiAgICAgICAgICAgIGxldCBsZWZ0ID0gdGV4dFJlY3QubGVmdDtcbiAgICAgICAgICAgIC8vbWF0cml4LnRyYW5zbGF0ZShsZWZ0LCB0b3ApO1xuICAgICAgICAgICAgLy9tYXRyaXgucm90YXRlKHJvdGF0aW9uIC8gTWF0aC5QSSAqIDE4MCk7XG4gICAgICAgICAgICAvL2xldCByaWdodFRvcCA9IFttYXRyaXguYSAqIHJpZ2h0ICsgbWF0cml4LmMgKiB0b3AgKyBtYXRyaXguZSwgbWF0cml4LmIgKiByaWdodCArIG1hdHJpeC5kICogdG9wICsgbWF0cml4LmZdXG4gICAgICAgICAgICAvL2xldCBsZWZ0Qm90dG9tID0gW21hdHJpeC5hICogbGVmdCArIG1hdHJpeC5jICogYm90dG9tICsgbWF0cml4LmUsIG1hdHJpeC5iICogbGVmdCArIG1hdHJpeC5kICogYm90dG9tICsgbWF0cml4LmZdXG4gICAgICAgICAgICAvL2xldCByaWdodEJvdHRvbSA9IFttYXRyaXguYSAqIHJpZ2h0ICsgbWF0cml4LmMgKiBib3R0b20gKyBtYXRyaXguZSwgbWF0cml4LmIgKiByaWdodCArIG1hdHJpeC5kICogYm90dG9tICsgbWF0cml4LmZdXG4gICAgICAgICAgICBsZXQgcXVhZFBvaW50QXJyYXkgPSBbXTtcblxuICAgICAgICAgICAgbGV0IGxlZnRUb3AgPSBuZXcgUG9pbnRGKGxlZnQsIHRvcCk7XG4gICAgICAgICAgICBsZXQgcmlnaHRUb3AgPSBuZXcgUG9pbnRGKHJpZ2h0LCB0b3ApO1xuICAgICAgICAgICAgbGV0IGxlZnRCb3R0b20gPSBuZXcgUG9pbnRGKGxlZnQsIGJvdHRvbSk7XG4gICAgICAgICAgICBsZXQgcmlnaHRCb3R0b20gPSBuZXcgUG9pbnRGKHJpZ2h0LCBib3R0b20pO1xuXG4gICAgICAgICAgICBsZXQgZmlyc3RRdWFkO1xuICAgICAgICAgICAgbGV0IHNlY29uZFF1YWQ7XG4gICAgICAgICAgICBsZXQgdGhpcmRRdWFkO1xuICAgICAgICAgICAgbGV0IGZvdXJ0aFF1YWQ7XG4gICAgICAgICAgICBzd2l0Y2ggKHJvdGF0aW9uLnZhbHVlICUgNCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RRdWFkID0gbGVmdFRvcDtcbiAgICAgICAgICAgICAgICAgICAgc2Vjb25kUXVhZCA9IHJpZ2h0VG9wO1xuICAgICAgICAgICAgICAgICAgICB0aGlyZFF1YWQgPSBsZWZ0Qm90dG9tO1xuICAgICAgICAgICAgICAgICAgICBmb3VydGhRdWFkID0gcmlnaHRCb3R0b207XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RRdWFkID0gbGVmdFRvcDtcbiAgICAgICAgICAgICAgICAgICAgc2Vjb25kUXVhZCA9IGxlZnRCb3R0b207XG4gICAgICAgICAgICAgICAgICAgIHRoaXJkUXVhZCA9IHJpZ2h0VG9wO1xuICAgICAgICAgICAgICAgICAgICBmb3VydGhRdWFkID0gcmlnaHRCb3R0b207XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RRdWFkID0gcmlnaHRCb3R0b207XG4gICAgICAgICAgICAgICAgICAgIHNlY29uZFF1YWQgPSBsZWZ0Qm90dG9tO1xuICAgICAgICAgICAgICAgICAgICB0aGlyZFF1YWQgPSByaWdodFRvcDtcbiAgICAgICAgICAgICAgICAgICAgZm91cnRoUXVhZCA9IGxlZnRUb3A7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RRdWFkID0gcmlnaHRCb3R0b207XG4gICAgICAgICAgICAgICAgICAgIHNlY29uZFF1YWQgPSByaWdodFRvcDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcmRRdWFkID0gbGVmdEJvdHRvbTtcbiAgICAgICAgICAgICAgICAgICAgZm91cnRoUXVhZCA9IGxlZnRUb3A7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcXVhZFBvaW50c0FycmF5LkFkZChuZXcgUXVhZFBvaW50cyhmaXJzdFF1YWQsIHNlY29uZFF1YWQsIHRoaXJkUXVhZCwgZm91cnRoUXVhZCkpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBhbm5vdCA9IHRoaXMuYW5ub3Q7XG4gICAgICAgIGFubm90LlNldFF1YWRQb2ludHMocXVhZFBvaW50c0FycmF5KTtcbiAgICAgICAgYW5ub3QuUmVzZXRBcHBlYXJhbmNlU3RyZWFtKCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjcmVhdGUgKGpzb24pIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHN1cGVyLmNyZWF0ZShqc29uKTtcbiAgICAgICAgaWYgKHR5cGVvZiBqc29uLnN0YXJ0Q2hhckluZGV4ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YganNvbi5lbmRDaGFySW5kZXggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVF1YWRQb2ludHNCeUNoYXJJbmRleChqc29uLnN0YXJ0Q2hhckluZGV4LCBqc29uLmVuZENoYXJJbmRleCk7XG4gICAgICAgIH0gZWxzZSBpZiAoanNvbi5jb29yZHMpIHtcbiAgICAgICAgICAgIGxldCBjb29yZHMgPSBqc29uLmNvb3JkcztcbiAgICAgICAgICAgIGxldCBlbmdpbmUgPSB0aGlzLmVuZ2luZTtcbiAgICAgICAgICAgIGxldCBxdWFkUG9pbnRzQXJyYXkgPSBuZXcgZW5naW5lLlF1YWRQb2ludHNBcnJheSgpO1xuICAgICAgICAgICAgbGV0IFF1YWRQb2ludHMgPSBlbmdpbmUuUXVhZFBvaW50cztcbiAgICAgICAgICAgIGxldCBQb2ludEYgPSBlbmdpbmUuUG9pbnRGO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEB0eXBlIEdTREsuVGV4dFBhZ2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgbGV0IGNfdGV4dFBhZ2UgPSB0aGlzLnBkZlBhZ2UuZ2V0Tm9ybWFsVGV4dFBhZ2VTeW5jKCk7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBqID0gY29vcmRzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCB0ZXh0UmVjdCA9IGNvb3Jkc1tpXTtcbiAgICAgICAgICAgICAgICBsZXQgdG9wID0gdGV4dFJlY3QudG9wO1xuICAgICAgICAgICAgICAgIGxldCByaWdodCA9IHRleHRSZWN0LnJpZ2h0O1xuICAgICAgICAgICAgICAgIGxldCBib3R0b20gPSB0ZXh0UmVjdC5ib3R0b207XG4gICAgICAgICAgICAgICAgbGV0IGxlZnQgPSB0ZXh0UmVjdC5sZWZ0O1xuXG4gICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gY190ZXh0UGFnZS5HZXRJbmRleEF0UG9zKChsZWZ0K3JpZ2h0KS8yLChib3R0b20rdG9wKS8yLDIpO1xuICAgICAgICAgICAgICAgIGxldCByb3RhdGlvbiA9IDA7XG4gICAgICAgICAgICAgICAgbGV0IGNvdW50ID0gY190ZXh0UGFnZS5HZXRUZXh0UmVjdENvdW50KGluZGV4LDMpO1xuICAgICAgICAgICAgICAgIGlmKGNvdW50PjApe1xuICAgICAgICAgICAgICAgICAgICByb3RhdGlvbiA9IGNfdGV4dFBhZ2UuR2V0QmFzZWxpbmVSb3RhdGlvbigwKS52YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3dpdGNoKHJvdGF0aW9uKXtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcXVhZFBvaW50c0FycmF5LkFkZChuZXcgUXVhZFBvaW50cyhuZXcgUG9pbnRGKGxlZnQsIHRvcCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFBvaW50RihyaWdodCwgdG9wKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgUG9pbnRGKGxlZnQsIGJvdHRvbSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFBvaW50RihyaWdodCwgYm90dG9tKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1YWRQb2ludHNBcnJheS5BZGQobmV3IFF1YWRQb2ludHMoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBQb2ludEYobGVmdCwgYm90dG9tKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBQb2ludEYobGVmdCwgdG9wKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBQb2ludEYocmlnaHQsIGJvdHRvbSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFBvaW50RihyaWdodCwgdG9wKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVhZFBvaW50c0FycmF5LkFkZChuZXcgUXVhZFBvaW50cyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFBvaW50RihyaWdodCwgYm90dG9tKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFBvaW50RihsZWZ0LCBib3R0b20pLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFBvaW50RihyaWdodCwgdG9wKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBQb2ludEYobGVmdCwgdG9wKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVhZFBvaW50c0FycmF5LkFkZChuZXcgUXVhZFBvaW50cyhuZXcgUG9pbnRGKHJpZ2h0LCB0b3ApLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgUG9pbnRGKHJpZ2h0LCBib3R0b20pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBQb2ludEYobGVmdCwgdG9wKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFBvaW50RihsZWZ0LCBib3R0b20pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBhbm5vdCA9IHRoaXMuYW5ub3Q7XG4gICAgICAgICAgICBhbm5vdC5TZXRRdWFkUG9pbnRzKHF1YWRQb2ludHNBcnJheSk7XG4gICAgICAgICAgICBhbm5vdC5SZXNldEFwcGVhcmFuY2VTdHJlYW0oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVGV4dE1hcmt1cEFubm90OyIsIi8qKlxuICogXG4gKi9cbmltcG9ydCBUZXh0TWFya3VwQW5ub3QgZnJvbSAnLi9UZXh0TWFya3VwQW5ub3QnO1xuXG5jbGFzcyBVbmRlcmxpbmUgZXh0ZW5kcyBUZXh0TWFya3VwQW5ub3R7XG4gICAgY29uc3RydWN0b3IgKGFubm90LCBwZGZQYWdlKSB7XG4gICAgICAgIHN1cGVyKGFubm90LCBwZGZQYWdlKTtcbiAgICAgICAgdGhpcy5hbm5vdCA9IG5ldyB0aGlzLmVuZ2luZS5VbmRlcmxpbmUodGhpcy5hbm5vdCk7XG4gICAgfVxuXG4gICAgY3JlYXRlKGpzb24pe1xuICAgICAgICBsZXQgcmVzdWx0ID0gc3VwZXIuY3JlYXRlKGpzb24pO1xuICAgICAgICB0aGlzLnNldEJvcmRlckNvbG9yKGpzb24uY29sb3J8fDB4NjZjYzMzKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFVuZGVybGluZTsiLCJpbXBvcnQgQW5ub3QgZnJvbSAnLi9Bbm5vdCc7XG5cbmNsYXNzIFdpZGdldCBleHRlbmRzIEFubm90IHtcbiAgY29uc3RydWN0b3IgKGVuZ2luZVdpZGdldCwgcGFnZSkge1xuICAgIHN1cGVyIChlbmdpbmVXaWRnZXQsIHBhZ2UpO1xuICAgIC8qKlxuKiBAdHlwZSBHU0RLLldpZGdldFxuKiovXG4gICAgdGhpcy5lbmdpbmVXaWRnZXQgPSBlbmdpbmVXaWRnZXQ7XG5cbiAgICB0aGlzLmVuZ2luZVdpZGdldCA9IG5ldyB0aGlzLmVuZ2luZS5XaWRnZXQgKGVuZ2luZVdpZGdldCk7XG4gIH1cbiAgdXBkYXRlTUtQcm9wZXJ0eShrZXksdmFsdWUpe1xuICAgIGxldCBkaWN0ID0gdGhpcy5lbmdpbmVXaWRnZXQuR2V0RGljdCgpO1xuICAgIFxuICAgIC8qKlxuKiBAdHlwZSBHU0RLLlBERkRvY1xuKiovXG4gICAgbGV0IGRvYyA9IHRoaXMucGRmUGFnZS5kb2M7XG4gICAgbGV0IHN0ck1LID0gbmV3IHRoaXMuZW5naW5lLlN0cmluZyhcIk1LXCIpO1xuICAgIGxldCBtayA9IGRpY3QuR2V0RWxlbWVudChzdHJNSykuR2V0RGljdCgpO1xuICAgIGlmKCFtayl7XG4gICAgICBtayA9IHRoaXMuZW5naW5lLlBERkRpY3Rpb25hcnkuQ3JlYXRlKCk7XG4gICAgICBkaWN0LlNldEF0UmVmZXJlbmNlKHN0ck1LLGRvYyxtaylcbiAgICB9XG4gICAgc3dpdGNoKGtleSl7XG4gICAgICBjYXNlICdib3JkZXJDb2xvcic6XG4gICAgICB0aGlzLmVuZ2luZVdpZGdldC5TZXRNS0JvcmRlckNvbG9yICh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2ZpbGxDb2xvcic6XG4gICAgICB0aGlzLmVuZ2luZVdpZGdldC5TZXRNS0JhY2tncm91bmRDb2xvciAodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdub3JtYWxDYXB0aW9uJzpcbiAgICAgIHRoaXMuZW5naW5lV2lkZ2V0LlNldE1LTm9ybWFsQ2FwdGlvbiAobmV3IHRoaXMuZW5naW5lLldTdHJpbmcodmFsdWUpKTtcbiAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZG93bkNhcHRpb24nOlxuICAgICAgdGhpcy5lbmdpbmVXaWRnZXQuU2V0TUtEb3duQ2FwdGlvbiAobmV3IHRoaXMuZW5naW5lLldTdHJpbmcodmFsdWUpKTtcbiAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncm9sbG92ZXJDYXB0aW9uJzpcbiAgICAgIHRoaXMuZW5naW5lV2lkZ2V0LlNldE1LUm9sbG92ZXJDYXB0aW9uIChuZXcgdGhpcy5lbmdpbmUuV1N0cmluZyh2YWx1ZSkpO1xuICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdub3JtYWxJY29uJzpcbiAgICAgICAgICBtay5TZXRBdFJlZmVyZW5jZShuZXcgdGhpcy5lbmdpbmUuU3RyaW5nKFwiSVwiKSxkb2MsZG9jLkdldEluZGlyZWN0T2JqZWN0KHZhbHVlKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdkb3duSWNvbic6XG4gICAgICAgICAgbWsuU2V0QXRSZWZlcmVuY2UobmV3IHRoaXMuZW5naW5lLlN0cmluZyhcIklYXCIpLGRvYyxkb2MuR2V0SW5kaXJlY3RPYmplY3QodmFsdWUpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3JvbGxvdmVySWNvbic6XG4gICAgICAgICAgbWsuU2V0QXRSZWZlcmVuY2UobmV3IHRoaXMuZW5naW5lLlN0cmluZyhcIlJJXCIpLGRvYyxkb2MuR2V0SW5kaXJlY3RPYmplY3QodmFsdWUpKTtcbiAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZW5naW5lV2lkZ2V0LlJlc2V0QXBwZWFyYW5jZVN0cmVhbSAoKTtcbiAgfVxuICBzZXRBUyhBUyl7XG4gICAgbGV0IGVuZ2luZVdpZGdldCA9IHRoaXMuZW5naW5lV2lkZ2V0O1xuICAgIC8qKlxuICAgICAqIEB0eXBlIEdTREsuUERGRGljdGlvbmFyeVxuICAgICAqL1xuICAgIGxldCB3aWRnZXREaWN0aW9uYXJ5ID0gZW5naW5lV2lkZ2V0LkdldERpY3QgKCk7XG5cbiAgICBsZXQgYXNTdHIgPSBuZXcgdGhpcy5lbmdpbmUuU3RyaW5nKFwiQVNcIik7XG4gICAgd2lkZ2V0RGljdGlvbmFyeS5TZXRBdChhc1N0cix0aGlzLmVuZ2luZS5QREZPYmplY3QuQ3JlYXRlRnJvbU5hbWUobmV3IHRoaXMuZW5naW5lLlN0cmluZyhBUykpKTtcbiAgfVxuICB0b0pzb24gKCkge1xuICAgIC8vIGNvbW1vbjo6Qml0bWFwICBHZXRNS0Rvd25JY29uQml0bWFwICgpXG4gICAgLy8gY29tbW9uOjpCaXRtYXAgIEdldE1LTm9ybWFsSWNvbkJpdG1hcCAoKVxuICAgIC8vIGNvbW1vbjo6Qml0bWFwICBHZXRNS1JvbGxvdmVySWNvbkJpdG1hcCAoKVxuICAgIGxldCBhbm5vdEpzb24gPSBzdXBlci50b0pzb24gKCk7XG4gICAgLyoqXG4gICAgICogQHR5cGUgR1NESy5XaWRnZXRcbiAgICAgKi9cbiAgICBsZXQgZW5naW5lV2lkZ2V0ID0gdGhpcy5lbmdpbmVXaWRnZXQ7XG5cbiAgICBsZXQgZmllbGQgPSBlbmdpbmVXaWRnZXQuR2V0RmllbGQgKCk7XG4gICAgbGV0IGNvbnRyb2wgPSBlbmdpbmVXaWRnZXQuR2V0Q29udHJvbCAoKTtcblxuICAgIGxldCBlbmdpbmVBY3Rpb24gPSBlbmdpbmVXaWRnZXQuR2V0QWN0aW9uICgpO1xuICAgIGxldCBhY3Rpb24gPSAnJztcbiAgICBpZiAoIWVuZ2luZUFjdGlvbi5Jc0VtcHR5ICgpKSB7XG4gICAgICBhY3Rpb24gPSB0aGlzLkpSLmFjdGlvbk1hbmFnZXIuZ2V0IChlbmdpbmVBY3Rpb24sIHRoaXMuZG9jLHRoaXMuSlIpLnRvSnNvbiAoKTtcbiAgICB9XG5cbiAgICBsZXQgQXBTdGF0ZXMgPSBbXTtcbiAgICBsZXQgQXBTdGF0ZTtcbiAgICBsZXQganNvbkFBID0ge307XG4gICAgbGV0IG5vcm1hbEljb247XG4gICAgbGV0IHJvbGxvdmVySWNvbjtcbiAgICBsZXQgZG93bkljb247XG4gICAgaWYgKCFlbmdpbmVXaWRnZXQuSXNFbXB0eSAoKSkge1xuICAgICAgbGV0IHdpZGdldERpY3Rpb25hcnkgPSBlbmdpbmVXaWRnZXQuR2V0RGljdCAoKTtcbiAgICAgIFxuICAgICAgbGV0IEFBT2JqID0gd2lkZ2V0RGljdGlvbmFyeS5HZXRFbGVtZW50KG5ldyB0aGlzLmVuZ2luZS5TdHJpbmcoJ0FBJykpO1xuICAgICAgaWYoQUFPYmope1xuICAgICAgICBsZXQgQUFEaWN0ID0gQUFPYmouR2V0RGljdCgpOyBcbiAgICAgICAgbGV0IEFBID0gbmV3IHRoaXMuZW5naW5lLkFkZGl0aW9uYWxBY3Rpb24gKFxuICAgICAgICAgIHRoaXMucGRmUGFnZS5kb2MsXG4gICAgICAgICAgQUFEaWN0XG4gICAgICAgICk7XG4gICAgICAgIGxldCB0cmlnZ2VycyA9IFtcbiAgICAgICAgICB0aGlzLmVuZ2luZS5UcmlnZ2VyRXZlbnQuZV9UcmlnZ2VyRmllbGRLZXlTdHJva2UsXG4gICAgICAgICAgdGhpcy5lbmdpbmUuVHJpZ2dlckV2ZW50LmVfVHJpZ2dlckZpZWxkV2lsbEZvcm1hdCxcbiAgICAgICAgICB0aGlzLmVuZ2luZS5UcmlnZ2VyRXZlbnQuZV9UcmlnZ2VyRmllbGRWYWx1ZUNoYW5nZWQsXG4gICAgICAgICAgdGhpcy5lbmdpbmUuVHJpZ2dlckV2ZW50LmVfVHJpZ2dlckZpZWxkUmVjYWxjdWxhdGVWYWx1ZSxcbiAgICAgICAgICB0aGlzLmVuZ2luZS5UcmlnZ2VyRXZlbnQuZV9UcmlnZ2VyQW5ub3RDdXJzb3JFbnRlcixcbiAgICAgICAgICB0aGlzLmVuZ2luZS5UcmlnZ2VyRXZlbnQuZV9UcmlnZ2VyQW5ub3RDdXJzb3JFeGl0LFxuICAgICAgICAgIHRoaXMuZW5naW5lLlRyaWdnZXJFdmVudC5lX1RyaWdnZXJBbm5vdE1vdXNlQnV0dG9uUHJlc3NlZCxcbiAgICAgICAgICB0aGlzLmVuZ2luZS5UcmlnZ2VyRXZlbnQuZV9UcmlnZ2VyQW5ub3RNb3VzZUJ1dHRvblJlbGVhc2VkLFxuICAgICAgICAgIHRoaXMuZW5naW5lLlRyaWdnZXJFdmVudC5lX1RyaWdnZXJBbm5vdFJlY2VpdmVJbnB1dEZvY3VzLFxuICAgICAgICAgIHRoaXMuZW5naW5lLlRyaWdnZXJFdmVudC5lX1RyaWdnZXJBbm5vdExvc2VJbnB1dEZvY3VzLFxuICAgICAgICBdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRyaWdnZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgbGV0IEEgPSBBQS5HZXRBY3Rpb24gKHRyaWdnZXJzW2ldKTtcbiAgICAgICAgICBpZiAoIUEuSXNFbXB0eSAoKSlcbiAgICAgICAgICAgIGpzb25BQVt0cmlnZ2Vyc1tpXS52YWx1ZV0gPSB0aGlzLkpSLmFjdGlvbk1hbmFnZXJcbiAgICAgICAgICAgICAgLmdldCAoQSwgdGhpcyx0aGlzLkpSKVxuICAgICAgICAgICAgICAudG9Kc29uICgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICAgIGxldCBhc1N0ciA9IG5ldyB0aGlzLmVuZ2luZS5TdHJpbmcoXCJBU1wiKTtcbiAgICAgIGlmKHdpZGdldERpY3Rpb25hcnkuSGFzS2V5KGFzU3RyKSl7XG4gICAgICAgIGxldCBBUyA9IHdpZGdldERpY3Rpb25hcnkuR2V0RWxlbWVudChhc1N0cik7XG4gICAgICAgIGlmKEFTKXtcbiAgICAgICAgICBBcFN0YXRlID0gQVMuR2V0U3RyaW5nKCkudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICBcbiAgICAgICAgbGV0IGFwID0gd2lkZ2V0RGljdGlvbmFyeS5HZXRFbGVtZW50IChuZXcgdGhpcy5lbmdpbmUuU3RyaW5nKCdBUCcpKTtcbiAgICAgICAgYXA9YXAuR2V0RGljdCgpO1xuICBcbiAgICAgICAgbGV0IE5SZWYgPSBhcC5HZXRFbGVtZW50IChuZXcgdGhpcy5lbmdpbmUuU3RyaW5nKCdOJykpO1xuICAgICAgICBsZXQgTlN0cmVhbSA9IE5SZWYuR2V0RGlyZWN0T2JqZWN0ICgpO1xuICAgICAgICBsZXQgdHlwZSA9IE5TdHJlYW0uR2V0VHlwZSAoKTtcbiAgICAgICAgaWYgKHR5cGUudmFsdWUgPT0gNikge1xuICAgICAgICAgIGxldCBORGljdCA9IE5TdHJlYW0uR2V0RGljdCgpO1xuICAgICAgICAgIGxldCBwb3MgPSBORGljdC5Nb3ZlTmV4dCAoMCk7XG4gICAgICAgICAgbGV0IGtleTtcbiAgICAgICAgICB3aGlsZSAocG9zKSB7XG4gICAgICAgICAgICBrZXkgPSBORGljdC5HZXRLZXkgKHBvcyk7XG4gICAgICAgICAgICBwb3MgPSBORGljdC5Nb3ZlTmV4dCAocG9zKTtcbiAgICAgICAgICAgIEFwU3RhdGVzLnB1c2ggKGtleS50b1N0cmluZyAoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsZXQgbWsgPSB3aWRnZXREaWN0aW9uYXJ5LkdldEVsZW1lbnQobmV3IHRoaXMuZW5naW5lLlN0cmluZyhcIk1LXCIpKTtcbiAgICAgIGlmKG1rKXtcbiAgICAgICAgbm9ybWFsSWNvbiA9IG1rLkdldERpY3QoKS5HZXRFbGVtZW50KG5ldyB0aGlzLmVuZ2luZS5TdHJpbmcoXCJJXCIpKVxuICAgICAgICBpZihub3JtYWxJY29uKW5vcm1hbEljb24gPSBub3JtYWxJY29uLkdldERpcmVjdE9iamVjdCgpLkdldE9iak51bSgpO1xuICAgICAgICByb2xsb3Zlckljb24gPSBtay5HZXREaWN0KCkuR2V0RWxlbWVudChuZXcgdGhpcy5lbmdpbmUuU3RyaW5nKFwiUklcIikpXG4gICAgICAgIGlmKHJvbGxvdmVySWNvbilyb2xsb3Zlckljb24gPSByb2xsb3Zlckljb24uR2V0RGlyZWN0T2JqZWN0KCkuR2V0T2JqTnVtKCk7XG4gICAgICAgIGRvd25JY29uID0gbWsuR2V0RGljdCgpLkdldEVsZW1lbnQobmV3IHRoaXMuZW5naW5lLlN0cmluZyhcIklYXCIpKVxuICAgICAgICBpZihkb3duSWNvbilkb3duSWNvbiA9IGRvd25JY29uLkdldERpcmVjdE9iamVjdCgpLkdldE9iak51bSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBoaWdobGlnaHRpbmdNb2RlID0gZW5naW5lV2lkZ2V0LkdldEhpZ2hsaWdodGluZ01vZGUgKCk7XG4gICAgaWYgKGhpZ2hsaWdodGluZ01vZGUpIHtcbiAgICAgIGhpZ2hsaWdodGluZ01vZGUgPSBoaWdobGlnaHRpbmdNb2RlLnZhbHVlO1xuICAgIH1cbiAgICBsZXQgZmlsbENvbG9yPTA7XG4gICAgaWYoZW5naW5lV2lkZ2V0Lkhhc01LRW50cnkodGhpcy5lbmdpbmUuTUtFbnRyeS5lX01LRW50cnlCYWNrZ3JvdW5kQ29sb3IpKXtcbiAgICAgIGZpbGxDb2xvcj1lbmdpbmVXaWRnZXQuR2V0TUtCYWNrZ3JvdW5kQ29sb3IgKCk7XG4gICAgfVxuXG4gICAgbGV0IGJvcmRlckNvbG9yID0gZW5naW5lV2lkZ2V0LkdldE1LQm9yZGVyQ29sb3IgKCk7XG4gICAgaWYoZW5naW5lV2lkZ2V0Lkhhc01LRW50cnkodGhpcy5lbmdpbmUuTUtFbnRyeS5lX01LRW50cnlCb3JkZXJDb2xvcikgJiYgYm9yZGVyQ29sb3IgPT09IDApe1xuICAgICAgYm9yZGVyQ29sb3I9KGJvcmRlckNvbG9yfDB4ZmYwMDAwMDApPj4+MDtcbiAgICB9XG4gICAgbGV0IGRvd25DYXB0aW9uID0gZW5naW5lV2lkZ2V0LkdldE1LRG93bkNhcHRpb24gKCkudG9TdHJpbmcgKCk7XG4gICAgbGV0IGNhcHRpb25SZWxhdGlvbiA9IGVuZ2luZVdpZGdldC5HZXRNS0ljb25DYXB0aW9uUmVsYXRpb24gKCkudmFsdWU7XG4gICAgbGV0IGljb25GaXQgPSBlbmdpbmVXaWRnZXQuR2V0TUtJY29uRml0ICgpO1xuICAgIGxldCBub3JtYWxDYXB0aW9uID0gZW5naW5lV2lkZ2V0LkdldE1LTm9ybWFsQ2FwdGlvbiAoKS50b1N0cmluZyAoKTtcbiAgICBsZXQgcm9sbG92ZXJDYXB0aW9uID0gZW5naW5lV2lkZ2V0LkdldE1LUm9sbG92ZXJDYXB0aW9uICgpLnRvU3RyaW5nICgpO1xuICAgIGxldCByb3RhdGlvbiA9IGVuZ2luZVdpZGdldC5HZXRNS1JvdGF0aW9uICgpLnZhbHVlO1xuICAgIC8vbGV0IGhhc01LID0gIHRoaXMuZW5naW5lV2lkZ2V0Lkhhc01LRW50cnkgKE1LRW50cnkgbWtfZW50cnkpO1xuXG4gICAgbGV0IGZpZWxkTmFtZSA9IFwiXCI7XG4gICAgbGV0IGZpZWxkVHlwZSA9IDA7XG4gICAgbGV0IGNvbnRyb2xJbmRleDtcbiAgICBpZighZmllbGQuSXNFbXB0eSgpKXtcbiAgICAgIGZpZWxkTmFtZSA9IGZpZWxkLkdldE5hbWUgKCkudG9TdHJpbmcgKCk7XG4gICAgICBmaWVsZFR5cGUgPSBmaWVsZC5HZXRUeXBlICgpLnZhbHVlO1xuICAgICAgY29udHJvbEluZGV4ID0gY29udHJvbC5HZXRJbmRleCgpO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbiAoYW5ub3RKc29uLCB7XG4gICAgICBoaWdobGlnaHRpbmdNb2RlLFxuICAgICAgZmlsbENvbG9yLFxuICAgICAgaWNvbkZpdDoge1xuICAgICAgICBmaXRCb3VuZHM6IGljb25GaXQuZml0X2JvdW5kcyxcbiAgICAgICAgaG9yaXpvbnRhbEZyYWN0aW9uOiBpY29uRml0Lmhvcml6b250YWxfZnJhY3Rpb24sXG4gICAgICAgIGlzUHJvcG9ydGlvbmFsU2NhbGluZzogaWNvbkZpdC5pc19wcm9wb3J0aW9uYWxfc2NhbGluZyxcbiAgICAgICAgc2NhbGVXYXlUeXBlOiBpY29uRml0LnNjYWxlX3dheV90eXBlLFxuICAgICAgICB2ZXJ0aWNhbEZyYWN0aW9uOiBpY29uRml0LnZlcnRpY2FsX2ZyYWN0aW9uLFxuICAgICAgfSxcbiAgICAgIE1LQm9yZGVyQ29sb3I6IGJvcmRlckNvbG9yLFxuICAgICAgZG93bkNhcHRpb24sXG4gICAgICBub3JtYWxDYXB0aW9uLFxuICAgICAgcm9sbG92ZXJDYXB0aW9uLFxuICAgICAgY2FwdGlvblJlbGF0aW9uLFxuICAgICAgcm90YXRpb24sXG4gICAgICBmaWVsZDogZmllbGROYW1lLFxuICAgICAgY29udHJvbDpjb250cm9sSW5kZXgsXG4gICAgICBmaWVsZFR5cGU6IGZpZWxkVHlwZSxcbiAgICAgIGFjdGlvbixcbiAgICAgIEFBOmpzb25BQSxcbiAgICAgIEFwU3RhdGVzLFxuICAgICAgQXBTdGF0ZSxcbiAgICAgIG5vcm1hbEljb24sXG4gICAgICByb2xsb3Zlckljb24sXG4gICAgICBkb3duSWNvbixcbiAgICB9KTtcbiAgfVxufVxuZXhwb3J0IGRlZmF1bHQgV2lkZ2V0O1xuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGxpbmMgb24gMjAxOS8xLzI4LlxuICovXG5mdW5jdGlvbiBnZXRFbmdpbmVBbm5vdFR5cGUgKGVuZ2luZSwgdHlwZSkge1xuICAgIGxldCBBbm5vdFR5cGUgPSBlbmdpbmUuQW5ub3RUeXBlO1xuICAgIGxldCBtYXAgPSB7XG4gICAgICAgIHRleHQ6IEFubm90VHlwZS5lX05vdGUsXG4gICAgICAgIGNhcmV0OiBBbm5vdFR5cGUuZV9DYXJldCxcbiAgICAgICAgZnJlZXRleHQ6IEFubm90VHlwZS5lX0ZyZWVUZXh0LFxuICAgICAgICBmaWxlYXR0YWNobWVudDogQW5ub3RUeXBlLmVfRmlsZUF0dGFjaG1lbnQsXG4gICAgICAgIGhpZ2hsaWdodDogQW5ub3RUeXBlLmVfSGlnaGxpZ2h0LFxuICAgICAgICBpbms6IEFubm90VHlwZS5lX0luayxcbiAgICAgICAgbGluZTogQW5ub3RUeXBlLmVfTGluZSxcbiAgICAgICAgbGluazogQW5ub3RUeXBlLmVfTGluayxcbiAgICAgICAgY2lyY2xlOiBBbm5vdFR5cGUuZV9DaXJjbGUsXG4gICAgICAgIHNxdWFyZTogQW5ub3RUeXBlLmVfU3F1YXJlLFxuICAgICAgICBwb2x5Z29uOiBBbm5vdFR5cGUuZV9Qb2x5Z29uLFxuICAgICAgICBwb2x5bGluZTogQW5ub3RUeXBlLmVfUG9seUxpbmUsXG4gICAgICAgIHNvdW5kOiBBbm5vdFR5cGUuZV9Tb3VuZCxcbiAgICAgICAgc3F1aWdnbHk6IEFubm90VHlwZS5lX1NxdWlnZ2x5LFxuICAgICAgICBzdGFtcDogQW5ub3RUeXBlLmVfU3RhbXAsXG4gICAgICAgIHN0cmlrZW91dDogQW5ub3RUeXBlLmVfU3RyaWtlT3V0LFxuICAgICAgICB1bmRlcmxpbmU6IEFubm90VHlwZS5lX1VuZGVybGluZSxcbiAgICAgICAgcmVkYWN0OiBBbm5vdFR5cGUuZV9SZWRhY3QsXG4gICAgICAgIHBvcHVwOiBBbm5vdFR5cGUuZV9Qb3B1cCxcbiAgICAgICAgcHNpbms6IEFubm90VHlwZS5lX1BTSW5rLFxuICAgICAgICBtb3ZpZTogQW5ub3RUeXBlLmVfTW92aWUsXG4gICAgICAgIHdpZGdldDogQW5ub3RUeXBlLmVfV2lkZ2V0LFxuICAgICAgICBzY3JlZW46IEFubm90VHlwZS5lX1NjcmVlbixcbiAgICAgICAgcHJpbnRlcm1hcms6IEFubm90VHlwZS5lX1ByaW50ZXJNYXJrLFxuICAgICAgICB0cmFwbmV0OiBBbm5vdFR5cGUuZV9UcmFwTmV0LFxuICAgICAgICB3YXRlcm1hcms6IEFubm90VHlwZS5lX1dhdGVybWFyayxcbiAgICAgICAgJzNkJzogQW5ub3RUeXBlLmVfM0QsXG4gICAgfVxuICAgIHJldHVybiBtYXBbdHlwZV0gfHwgQW5ub3RUeXBlLmVfVW5rbm93blR5cGU7XG59XG5cbmV4cG9ydCB7XG4gICAgZ2V0RW5naW5lQW5ub3RUeXBlLFxufSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIERlc3RpbmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihkZXN0aW5hdGlvbixkb2MsZW5naW5lKXtcbiAgICAgICAgdGhpcy5kb2M9ZG9jO1xuICAgICAgICBpZighKGRvYyBpbnN0YW5jZW9mIGVuZ2luZS5QREZEb2MpKXtcbiAgICAgICAgICAgIHRoaXMuZG9jPWRvYy5kb2M7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbmdpbmU9ZW5naW5lO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uPWRlc3RpbmF0aW9uO1xuICAgIH1cblxuICAgIHN0YXRpYyBjcmVhdGVGaXRCQm94KGVuZ2luZSxwZGZEb2MsZGF0YSl7XG4gICAgICAgIHJldHVybiBlbmdpbmUuRGVzdGluYXRpb24uQ3JlYXRlRml0QkJveChwZGZEb2MsZGF0YS5wYWdlSW5kZXgpO1xuICAgIH1cbiAgICBzdGF0aWMgY3JlYXRlRml0QkhvcnooZW5naW5lLHBkZkRvYyxkYXRhKXtcbiAgICAgICAgcmV0dXJuIGVuZ2luZS5EZXN0aW5hdGlvbi5DcmVhdGVGaXRCSG9yeihwZGZEb2MsZGF0YS5wYWdlSW5kZXgsZGF0YS50b3ApO1xuICAgIH1cbiAgICBzdGF0aWMgY3JlYXRlRml0QlZlcnQoZW5naW5lLHBkZkRvYyxkYXRhKXtcbiAgICAgICAgcmV0dXJuIGVuZ2luZS5EZXN0aW5hdGlvbi5DcmVhdGVGaXRCSG9yeihwZGZEb2MsZGF0YS5wYWdlSW5kZXgsZGF0YS5sZWZ0KTtcbiAgICB9XG4gICAgc3RhdGljIGNyZWF0ZUZpdEhvcnooZW5naW5lLHBkZkRvYyxkYXRhKXtcbiAgICAgICAgcmV0dXJuIGVuZ2luZS5EZXN0aW5hdGlvbi5DcmVhdGVGaXRIb3J6KHBkZkRvYyxkYXRhLnBhZ2VJbmRleCxkYXRhLnRvcCk7XG4gICAgfVxuICAgIHN0YXRpYyBjcmVhdGVGaXRQYWdlKGVuZ2luZSxwZGZEb2MsZGF0YSl7XG4gICAgICAgIHJldHVybiBlbmdpbmUuRGVzdGluYXRpb24uQ3JlYXRlRml0UGFnZShwZGZEb2MsZGF0YS5wYWdlSW5kZXgpO1xuICAgIH1cbiAgICBzdGF0aWMgY3JlYXRlRml0UmVjdChlbmdpbmUscGRmRG9jLGRhdGEpe1xuICAgICAgICByZXR1cm4gZW5naW5lLkRlc3RpbmF0aW9uLkNyZWF0ZUZpdFJlY3QocGRmRG9jLGRhdGEucGFnZUluZGV4LGRhdGEubGVmdCxkYXRhLmJvdHRvbSxkYXRhLnJpZ2h0LGRhdGEudG9wKTtcbiAgICB9XG4gICAgc3RhdGljIGNyZWF0ZUZpdFZlcnQoZW5naW5lLHBkZkRvYyxkYXRhKXtcbiAgICAgICAgcmV0dXJuIGVuZ2luZS5EZXN0aW5hdGlvbi5DcmVhdGVGaXRWZXJ0KHBkZkRvYyxkYXRhLnBhZ2VJbmRleCxkYXRhLmxlZnQpO1xuICAgIH1cbiAgICBzdGF0aWMgY3JlYXRlRnJvbVBERkFycmF5KGVuZ2luZSxwZGZEb2MsZGF0YSl7XG4gICAgICAgIHJldHVybiBlbmdpbmUuRGVzdGluYXRpb24uQ3JlYXRlRnJvbVBERkFycmF5KHBkZkRvYyxkYXRhLnBkZkFycmF5KTtcbiAgICB9XG4gICAgc3RhdGljIGNyZWF0ZVhZWihlbmdpbmUscGRmRG9jLGRhdGEpe1xuICAgICAgICByZXR1cm4gZW5naW5lLkRlc3RpbmF0aW9uLkNyZWF0ZVhZWihwZGZEb2MsZGF0YS5wYWdlSW5kZXgsZGF0YS5sZWZ0LGRhdGEudG9wLGRhdGEuem9vbUZhY3Rvcik7XG4gICAgfVxuXG4gICAgdG9Kc29uKCl7XG4gICAgICAgIGxldCBkZXN0aW5hdGlvbj1udWxsO1xuICAgICAgICBpZighdGhpcy5kZXN0aW5hdGlvbi5Jc0VtcHR5KCkpe1xuICAgICAgICAgICAgZGVzdGluYXRpb249e1xuICAgICAgICAgICAgICAgIHRvcDp0aGlzLmdldFRvcCgpLFxuICAgICAgICAgICAgICAgIGJvdHRvbTp0aGlzLmdldEJvdHRvbSgpLFxuICAgICAgICAgICAgICAgIGxlZnQ6dGhpcy5nZXRMZWZ0KCksXG4gICAgICAgICAgICAgICAgcmlnaHQ6dGhpcy5nZXRSaWdodCgpLFxuICAgICAgICAgICAgICAgIHBhZ2VJbmRleDp0aGlzLmdldFBhZ2VJbmRleCgpLFxuICAgICAgICAgICAgICAgIC8vIGRlc3RBcnJheTp0aGlzLmdldERlc3RBcnJheSgpLFxuICAgICAgICAgICAgICAgIHpvb21GYWN0b3I6dGhpcy5nZXRab29tRmFjdG9yKCksXG4gICAgICAgICAgICAgICAgem9vbU1vZGU6dGhpcy5nZXRab29tTW9kZSgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlc3RpbmF0aW9uO1xuICAgIH1cbiAgICBnZXRUb3AoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVzdGluYXRpb24uR2V0VG9wKCk7XG4gICAgfVxuICAgIGdldEJvdHRvbSgpe1xuICAgICAgICByZXR1cm4gdGhpcy5kZXN0aW5hdGlvbi5HZXRCb3R0b20oKTtcbiAgICB9XG4gICAgZ2V0TGVmdCgpe1xuICAgICAgICByZXR1cm4gdGhpcy5kZXN0aW5hdGlvbi5HZXRMZWZ0KCk7XG4gICAgfVxuICAgIGdldFJpZ2h0KCl7XG4gICAgICAgIHJldHVybiB0aGlzLmRlc3RpbmF0aW9uLkdldFJpZ2h0KCk7XG4gICAgfVxuICAgIGdldFBhZ2VJbmRleCgpe1xuICAgICAgICByZXR1cm4gdGhpcy5kZXN0aW5hdGlvbi5HZXRQYWdlSW5kZXgodGhpcy5kb2MpO1xuICAgIH1cbiAgICBnZXREZXN0QXJyYXkoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVzdGluYXRpb24uR2V0RGVzdEFycmF5KCk7XG4gICAgfVxuICAgIGdldFpvb21GYWN0b3IoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVzdGluYXRpb24uR2V0Wm9vbUZhY3RvcigpO1xuICAgIH1cbiAgICBnZXRab29tTW9kZSgpe1xuICAgICAgICByZXR1cm4gdGhpcy5kZXN0aW5hdGlvbi5HZXRab29tTW9kZSgpLmNvbnN0cnVjdG9yLm5hbWUucmVwbGFjZSgvXmVfLywgJycpO1xuICAgIH1cbn0iLCJpbXBvcnQgTG9nZ2VyRmFjdG9yeSBmcm9tIFwiLi4vLi4vc2hhcmVkL2xvZ2dlci9Mb2dnZXJGYWN0b3J5XCI7XG5pbXBvcnQgY3JlYXRlRGVmZXJyZWQgZnJvbSBcIi4uLy4uL3NoYXJlZC9jcmVhdGVEZWZlcnJlZFwiO1xuY29uc3QgbG9nZ2VyID0gTG9nZ2VyRmFjdG9yeS5nZXRMb2dnZXIoJ3BkZi1qci5GaWxlU3BlYycpO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGaWxlU3BlY3tcbiAgICBzdGF0aWMgY3JlYXRlRmlsZShlbmdpbmUsZG9jLGZpbGVCdWZmZXIpe1xuICAgICAgICBsZXQgZmlsZVNwZWM9bmV3IGVuZ2luZS5GaWxlU3BlYyhkb2MpO1xuICAgICAgICBmaWxlU3BlYy5FbWJlZChlbmdpbmUuU3RyZWFtQ2FsbGJhY2suaW1wbGVtZW50KHtcbiAgICAgICAgICAgIFJlbGVhc2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZWxlYXNlKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgR2V0U2l6ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmaWxlQnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgUmVhZEJsb2NrOiAoYnVmZmVyLCBvZmZzZXQsIHNpemUpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgc3JjID0gZmlsZUJ1ZmZlci5zbGljZShvZmZzZXQsIG9mZnNldCArIHNpemUpO1xuICAgICAgICAgICAgICAgIGVuZ2luZS5IRUFQVTguc2V0KHNyYywgYnVmZmVyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gZmlsZVNwZWM7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoZmlsZVNwZWMscGFyZW50KXtcbiAgICAgICAgdGhpcy5wYXJlbnQ9cGFyZW50O1xuICAgICAgICB0aGlzLmVuZ2luZT1wYXJlbnQuZW5naW5lO1xuICAgICAgICB0aGlzLmZpbGVTcGVjPWZpbGVTcGVjO1xuICAgIH1cblxuICAgIHRvSnNvbigpe1xuICAgICAgICBsZXQgZmlsZVNwZWM9bnVsbDtcbiAgICAgICAgaWYoIXRoaXMuZmlsZVNwZWMuSXNFbXB0eSgpKXtcbiAgICAgICAgICAgIGZpbGVTcGVjPXtcbiAgICAgICAgICAgICAgICAvL2NoZWNrc3VtOnRoaXMuZ2V0Q2hlY2tzdW0oKSxcbiAgICAgICAgICAgICAgICAvL2NyZWF0aW9uRGF0ZVRpbWU6dGhpcy5nZXRDcmVhdGlvbkRhdGVUaW1lKCksXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246dGhpcy5nZXREZXNjcmlwdGlvbigpLFxuICAgICAgICAgICAgICAgIGRpY3Q6dGhpcy5nZXREaWN0KCksXG4gICAgICAgICAgICAgICAgZmlsZURhdGE6dGhpcy5nZXRGaWxlRGF0YSgpLFxuICAgICAgICAgICAgICAgIGZpbGVOYW1lOnRoaXMuZ2V0RmlsZU5hbWUoKSxcbiAgICAgICAgICAgICAgICBmaWxlU2l6ZTp0aGlzLmdldEZpbGVTaXplKCksXG4gICAgICAgICAgICAgICAgLy9tb2RpZmllZERhdGVUaW1lOnRoaXMuZ2V0TW9kaWZpZWREYXRlVGltZSgpLFxuICAgICAgICAgICAgICAgIHN1YnR5cGU6dGhpcy5nZXRTdWJ0eXBlKCksXG4gICAgICAgICAgICAgICAgaXNFbWJlZGRlZDp0aGlzLmlzRW1iZWRkZWQoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWxlU3BlYztcbiAgICB9XG4gICAgZ3RBc3NvY2l0ZUZpbGVSZWxhdGlvbnNoaXAoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsZVNwZWMuR2V0QXNzb2NpdGVGaWxlUmVsYXRpb25zaGlwKCk7XG4gICAgfVxuICAgIGdldENoZWNrc3VtKCl7XG4gICAgICAgIGxldCBjaGVja3N1bT10aGlzLmZpbGVTcGVjLkdldENoZWNrc3VtKCk7XG4gICAgICAgIGlmKGNoZWNrc3VtLkdldExlbmd0aCgpPT09MCl7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGNoZWNrc3VtLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0Q3JlYXRpb25EYXRlVGltZSgpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IGNyZWF0ZVRpbWU9dGhpcy5maWxlU3BlYy5HZXRDcmVhdGlvbkRhdGVUaW1lKCk7XG4gICAgICAgICAgICBpZihjcmVhdGVUaW1lLklzVmFsaWQoKSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVRpbWU7XG4gICAgICAgICAgICB9ZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1jYXRjaCAoZSkge1xuICAgICAgICAgICAgbGV0IGVuZ2luZSA9IHRoaXMuZW5naW5lO1xuICAgICAgICAgICAgbGV0IGVycm9yQ29kZSA9IGUgaW5zdGFuY2VvZiBlbmdpbmUuRXJyb3JDb2RlID8gZSA6IGVuZ2luZS5nZXRFcnJvckNvZGUgKGUpO1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4gKGVycm9yQ29kZSk7XG4gICAgICAgIH1cblxuICAgIH1cbiAgICBnZXREZXNjcmlwdGlvbigpe1xuICAgICAgICBsZXQgZGVzPXRoaXMuZmlsZVNwZWMuR2V0RGVzY3JpcHRpb24oKTtcbiAgICAgICAgaWYoZGVzLkdldExlbmd0aCgpPT09MCl7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGRlcy50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldERpY3QoKXtcbiAgICAgICAgbGV0IGRpY3Q9dGhpcy5maWxlU3BlYy5HZXREaWN0KCk7XG4gICAgICAgIHJldHVybiBkaWN0O1xuICAgIH1cbiAgICBnZXRGaWxlRGF0YSgpe1xuICAgICAgICBsZXQgZmlsZURhdGE9dGhpcy5maWxlU3BlYy5HZXRGaWxlRGF0YSgpO1xuICAgICAgICByZXR1cm4gZmlsZURhdGE7XG4gICAgfVxuICAgIGdldEZpbGVOYW1lKCl7XG4gICAgICAgIGxldCBuYW1lPXRoaXMuZmlsZVNwZWMuR2V0RmlsZU5hbWUoKTtcbiAgICAgICAgaWYobmFtZS5HZXRMZW5ndGgoKT09PTApe1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1lbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuYW1lLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0RmlsZVNpemUoKXtcbiAgICAgICAgbGV0IGZpbGVTaXplPXRoaXMuZmlsZVNwZWMuR2V0RmlsZVNpemUoKTtcbiAgICAgICAgcmV0dXJuIGZpbGVTaXplO1xuICAgIH1cbiAgICBnZXRNb2RpZmllZERhdGVUaW1lKCl7XG4gICAgICAgIGxldCBtb2RpZmllZFRpbWU9dGhpcy5maWxlU3BlYy5HZXRNb2RpZmllZERhdGVUaW1lKCk7XG4gICAgICAgIGlmKG1vZGlmaWVkVGltZS5Jc1ZhbGlkKCkpe1xuICAgICAgICAgICAgcmV0dXJuIG1vZGlmaWVkVGltZTtcbiAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0U3VidHlwZSgpe1xuICAgICAgICBsZXQgc3VidHlwZT10aGlzLmZpbGVTcGVjLkdldFN1YnR5cGUoKTtcbiAgICAgICAgaWYoc3VidHlwZS5HZXRMZW5ndGgoKT09PTApe1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1lbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBzdWJ0eXBlLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaXNFbWJlZGRlZCgpe1xuICAgICAgICByZXR1cm4gdGhpcy5maWxlU3BlYy5Jc0VtYmVkZGVkKCk7XG4gICAgfVxuICAgIHNldEFzc29jaXRlRmlsZVJlbGF0aW9uc2hpcChyZWxhdGlvbnNoaXApe1xuICAgICAgICB0aGlzLmZpbGVTcGVjLlNldEFzc29jaXRlRmlsZVJlbGF0aW9uc2hpcChyZWxhdGlvbnNoaXApO1xuICAgIH1cbiAgICBzZXRDaGVja3N1bShjaGVja3N1bSl7XG4gICAgICAgIHRoaXMuZmlsZVNwZWMuU2V0Q2hlY2tzdW0oY2hlY2tzdW0pO1xuICAgIH1cbiAgICBzZXRDcmVhdGlvbkRhdGVUaW1lKGRhdGVUaW1lKXtcbiAgICAgICAgdGhpcy5maWxlU3BlYy5TZXRDcmVhdGlvbkRhdGVUaW1lKGRhdGVUaW1lKTtcbiAgICB9XG4gICAgc2V0RGVzY3JpcHRpb24oZGVzY3JpcHRpb24pe1xuICAgICAgICB0aGlzLmZpbGVTcGVjLlNldERlc2NyaXB0aW9uKGRlc2NyaXB0aW9uKTtcbiAgICB9XG4gICAgc2V0RmlsZU5hbWUoZmlsZU5hbWUpe1xuICAgICAgICB0aGlzLmZpbGVTcGVjLlNldEZpbGVOYW1lKG5ldyB0aGlzLmVuZ2luZS5XU3RyaW5nKGZpbGVOYW1lKSk7XG4gICAgfVxuICAgIHNldE1vZGlmaWVkRGF0ZVRpbWUoZGF0ZVRpbWUpe1xuICAgICAgICB0aGlzLmZpbGVTcGVjLlNldE1vZGlmaWVkRGF0ZVRpbWUoZGF0ZVRpbWUpO1xuICAgIH1cbiAgICBzZXRTdWJ0eXBlKHN1YnR5cGUpe1xuICAgICAgICB0aGlzLmZpbGVTcGVjLlNldFN1YnR5cGUoc3VidHlwZSk7XG4gICAgfVxuICAgIGdldFN0cmVhbSh3cml0ZVN0cmVhbSl7XG4gICAgICAgIGxldCBlbmdpbmUgPSB0aGlzLmVuZ2luZTtcbiAgICAgICAgbGV0IHdyaXR0ZW5TaXplID0gMDtcbiAgICAgICAgbGV0IGRlZmVycmVkID0gY3JlYXRlRGVmZXJyZWQoKTtcbiAgICAgICAgbGV0IHN0cmVhbUNhbGxiYWNrID0gZW5naW5lLlN0cmVhbUNhbGxiYWNrLmltcGxlbWVudCh7XG4gICAgICAgICAgICBSZWxlYXNlOiAoKSA9PiB7fSxcbiAgICAgICAgICAgIEZsdXNoOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgR2V0U2l6ZTooKT0+e1xuICAgICAgICAgICAgICAgIHJldHVybiB3cml0dGVuU2l6ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBXcml0ZUJsb2NrOihjdXJzb3IsIG9mZnNldCwgc2l6ZSk9PntcbiAgICAgICAgICAgICAgICB3cml0dGVuU2l6ZSArPSBzaXplO1xuICAgICAgICAgICAgICAgIGxldCBlbmdpbmVCdWZmZXIgPSBlbmdpbmUuSEVBUFU4LmJ1ZmZlcjtcbiAgICAgICAgICAgICAgICBsZXQgYXJyYXlCdWZmZXI7XG4gICAgICAgICAgICAgICAgaWYgKGVuZ2luZUJ1ZmZlci5zbGljZSkge1xuICAgICAgICAgICAgICAgICAgICBhcnJheUJ1ZmZlciA9IGVuZ2luZUJ1ZmZlci5zbGljZShjdXJzb3IsIGN1cnNvciArIHNpemUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFycmF5QnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoZW5naW5lQnVmZmVyLCBjdXJzb3IsIHNpemUpLmJ1ZmZlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgd3JpdGVTdHJlYW0oYXJyYXlCdWZmZXIsIG9mZnNldCwgc2l6ZSk7XG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSh3cml0dGVuU2l6ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmZpbGVTcGVjLkV4cG9ydFRvRmlsZVN0cmVhbShzdHJlYW1DYWxsYmFjayk7XG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBJbWFnZSB7XG4gICAgc3RhdGljIGNyZWF0ZUltYWdlKGVuZ2luZSxpbWFnZUJ1ZmZlcil7XG4gICAgICAgIHJldHVybiBuZXcgZW5naW5lLkltYWdlKGVuZ2luZS5SZWFkZXJDYWxsYmFjay5pbXBsZW1lbnQoe1xuICAgICAgICAgICAgICAgIFJlbGVhc2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVsZWFzZSgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgR2V0U2l6ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW1hZ2VCdWZmZXIuYnl0ZUxlbmd0aDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFJlYWRCbG9jazogKGJ1ZmZlciwgb2Zmc2V0LCBzaXplKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzcmMgPSBpbWFnZUJ1ZmZlci5zbGljZShvZmZzZXQsIG9mZnNldCArIHNpemUpO1xuICAgICAgICAgICAgICAgICAgICBlbmdpbmUuSEVBUFU4LnNldChzcmMsIGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIClcbiAgICB9XG4gICAgY29uc3RydWN0b3IoKXtcblxuICAgIH1cbn1cbiIsImltcG9ydCBJbWFnZSBmcm9tIFwiLi4vSW1hZ2VcIjtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHtcbiAgICBzdGF0aWMgY3JlYXRlVGV4dFdhdGVybWFyayhlbmdpbmUscGRmRG9jLHRleHQsd2F0ZXJtYXJrVGV4dFByb3BlcnRpZXMsd2F0ZXJtYXJrU2V0dGluZ3Mpe1xuICAgICAgICByZXR1cm4gbmV3IGVuZ2luZS5XYXRlcm1hcmsocGRmRG9jLG5ldyBlbmdpbmUuV1N0cmluZyh0ZXh0KSx3YXRlcm1hcmtUZXh0UHJvcGVydGllcyx3YXRlcm1hcmtTZXR0aW5ncyk7XG4gICAgfVxuICAgIHN0YXRpYyBjcmVhdGVCaXRtYXBXYXRlcm1hcmsoZW5naW5lLHBkZkRvYyxiaXRtYXAsd2F0ZXJtYXJrU2V0dGluZ3Mpe1xuICAgICAgICBsZXQgaW1hZ2U9SW1hZ2UuY3JlYXRlSW1hZ2UoZW5naW5lLGJpdG1hcCksXG4gICAgICAgICAgICBibXA9aW1hZ2UuR2V0RnJhbWVCaXRtYXAoMCk7XG4gICAgICAgIHJldHVybiBuZXcgZW5naW5lLldhdGVybWFyayhwZGZEb2MsYm1wLHdhdGVybWFya1NldHRpbmdzKTtcbiAgICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBwYXJhbSB7R1NES30gZW5naW5lIFxuICAgICAqIEBwYXJhbSB7Kn0gcG9zaXRpb24gXG4gICAgICogQHBhcmFtIHsqfSBvZmZzZXRYIFxuICAgICAqIEBwYXJhbSB7Kn0gb2Zmc2V0WSBcbiAgICAgKiBAcGFyYW0geyp9IGZsYWdzIFxuICAgICAqIEBwYXJhbSB7Kn0gc2NhbGVYIFxuICAgICAqIEBwYXJhbSB7Kn0gc2NhbGVZIFxuICAgICAqIEBwYXJhbSB7Kn0gcm90YXRpb24gXG4gICAgICogQHBhcmFtIHsqfSBvcGFjaXR5IFxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVXYXRlcm1hcmtTZXR0aW5ncyhlbmdpbmUsIHBvc2l0aW9uLCBvZmZzZXRYLCBvZmZzZXRZLCBmbGFncywgc2NhbGVYLCBzY2FsZVksIHJvdGF0aW9uLCBvcGFjaXR5KSB7XG4gICAgICAgIGxldCBwb3NpdGlvblR5cGUgPSB7XG4gICAgICAgICAgICAgICAgXCJUb3BMZWZ0XCI6IGVuZ2luZS5Qb3NpdGlvbi5lX1Bvc1RvcExlZnQsXG4gICAgICAgICAgICAgICAgXCJUb3BDZW50ZXJcIjogZW5naW5lLlBvc2l0aW9uLmVfUG9zVG9wQ2VudGVyLFxuICAgICAgICAgICAgICAgIFwiVG9wUmlnaHRcIjogZW5naW5lLlBvc2l0aW9uLmVfUG9zVG9wUmlnaHQsXG4gICAgICAgICAgICAgICAgXCJDZW50ZXJMZWZ0XCI6IGVuZ2luZS5Qb3NpdGlvbi5lX1Bvc0NlbnRlckxlZnQsXG4gICAgICAgICAgICAgICAgXCJDZW50ZXJcIjogZW5naW5lLlBvc2l0aW9uLmVfUG9zQ2VudGVyLFxuICAgICAgICAgICAgICAgIFwiQ2VudGVyUmlnaHRcIjogZW5naW5lLlBvc2l0aW9uLmVfUG9zQ2VudGVyUmlnaHQsXG4gICAgICAgICAgICAgICAgXCJCb3R0b21MZWZ0XCI6IGVuZ2luZS5Qb3NpdGlvbi5lX1Bvc0JvdHRvbUxlZnQsXG4gICAgICAgICAgICAgICAgXCJCb3R0b21DZW50ZXJcIjogZW5naW5lLlBvc2l0aW9uLmVfUG9zQm90dG9tQ2VudGVyLFxuICAgICAgICAgICAgICAgIFwiQm90dG9tUmlnaHRcIjogZW5naW5lLlBvc2l0aW9uLmVfUG9zQm90dG9tUmlnaHRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmbGFnc1R5cGUgPSB7XG4gICAgICAgICAgICAgICAgXCIwXCI6IGVuZ2luZS5XYXRlcm1hcmtTZXR0aW5nc0ZsYWdzLmVfRmxhZ0FTUGFnZUNvbnRlbnRzLFxuICAgICAgICAgICAgICAgIFwiMVwiOiBlbmdpbmUuV2F0ZXJtYXJrU2V0dGluZ3NGbGFncy5lX0ZsYWdBU0Fubm90LFxuICAgICAgICAgICAgICAgIFwiMlwiOiBlbmdpbmUuV2F0ZXJtYXJrU2V0dGluZ3NGbGFncy5lX0ZsYWdPblRvcCxcbiAgICAgICAgICAgICAgICBcIjRcIjogZW5naW5lLldhdGVybWFya1NldHRpbmdzRmxhZ3MuZV9GbGFnTm9QcmludCxcbiAgICAgICAgICAgICAgICBcIjhcIjogZW5naW5lLldhdGVybWFya1NldHRpbmdzRmxhZ3MuZV9GbGFnSW52aXNpYmxlXG4gICAgICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbmV3IGVuZ2luZS5XYXRlcm1hcmtTZXR0aW5ncyhwb3NpdGlvblR5cGVbcG9zaXRpb25dLCBvZmZzZXRYLCBvZmZzZXRZLCBmbGFnc1R5cGVbZmxhZ3NdLnZhbHVlLCBzY2FsZVgsIHNjYWxlWSwgcm90YXRpb24sIG9wYWNpdHkpO1xuICAgIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyB7XG4gICAgc3RhdGljIGNyZWF0ZVdhdGVybWFya1RleHRQcm9wZXJ0aWVzKGVuZ2luZSxmb250LGZvbnRTaXplLGNvbG9yLGZvbnRTdHlsZSxsaW5lU3BhY2UsYWxpZ25tZW50KXtcbiAgICAgICAgbGV0IGZvbnRUeXBlPVtcbiAgICAgICAgICAgIGVuZ2luZS5TdGFuZGFyZElELmVfU3RkSURDb3VyaWVyLFxuICAgICAgICAgICAgZW5naW5lLlN0YW5kYXJkSUQuZV9TdGRJRENvdXJpZXJCLFxuICAgICAgICAgICAgZW5naW5lLlN0YW5kYXJkSUQuZV9TdGRJRENvdXJpZXJCSSxcbiAgICAgICAgICAgIGVuZ2luZS5TdGFuZGFyZElELmVfU3RkSURDb3VyaWVySSxcbiAgICAgICAgICAgIGVuZ2luZS5TdGFuZGFyZElELmVfU3RkSURIZWx2ZXRpY2EsXG4gICAgICAgICAgICBlbmdpbmUuU3RhbmRhcmRJRC5lX1N0ZElESGVsdmV0aWNhQixcbiAgICAgICAgICAgIGVuZ2luZS5TdGFuZGFyZElELmVfU3RkSURIZWx2ZXRpY2FCSSxcbiAgICAgICAgICAgIGVuZ2luZS5TdGFuZGFyZElELmVfU3RkSURIZWx2ZXRpY2FJLFxuICAgICAgICAgICAgZW5naW5lLlN0YW5kYXJkSUQuZV9TdGRJRFRpbWVzLFxuICAgICAgICAgICAgZW5naW5lLlN0YW5kYXJkSUQuZV9TdGRJRFRpbWVzQixcbiAgICAgICAgICAgIGVuZ2luZS5TdGFuZGFyZElELmVfU3RkSURUaW1lc0JJLFxuICAgICAgICAgICAgZW5naW5lLlN0YW5kYXJkSUQuZV9TdGRJRFRpbWVzSSxcbiAgICAgICAgICAgIGVuZ2luZS5TdGFuZGFyZElELmVfU3RkSURTeW1ib2wsXG4gICAgICAgICAgICBlbmdpbmUuU3RhbmRhcmRJRC5lX1N0ZElEWmFwZkRpbmdiYXRzXSxcbiAgICAgICAgICAgIGZvbnRTdHlsZVR5cGU9e1wibm9ybWFsXCI6ZW5naW5lLkZvbnRTdHlsZS5lX0ZvbnRTdHlsZU5vcm1hbCxcInVuZGVybGluZVwiOmVuZ2luZS5Gb250U3R5bGUuZV9Gb250U3R5bGVVbmRlcmxpbmV9LFxuICAgICAgICAgICAgYWxpZ25tZW50VHlwZT17XCJsZWZ0XCI6ZW5naW5lLkFsaWdubWVudC5lX0FsaWdubWVudExlZnQsXCJjZW50ZXJcIjplbmdpbmUuQWxpZ25tZW50LmVfQWxpZ25tZW50Q2VudGVyLFwicmlnaHRcIjplbmdpbmUuQWxpZ25tZW50LmVfQWxpZ25tZW50UmlnaHR9O1xuICAgICAgICByZXR1cm4gbmV3IGVuZ2luZS5XYXRlcm1hcmtUZXh0UHJvcGVydGllcyhuZXcgZW5naW5lLkZvbnQoZm9udFR5cGVbZm9udF0pLGZvbnRTaXplLGNvbG9yLGZvbnRTdHlsZVR5cGVbZm9udFN0eWxlLnRvTG9jYWxlTG93ZXJDYXNlKCldLGxpbmVTcGFjZSxhbGlnbm1lbnRUeXBlW2FsaWdubWVudC50b0xvY2FsZUxvd2VyQ2FzZSgpXSk7XG4gICAgfVxufSIsIihmdW5jdGlvbihmKXtpZih0eXBlb2YgZXhwb3J0cz09PVwib2JqZWN0XCImJnR5cGVvZiBtb2R1bGUhPT1cInVuZGVmaW5lZFwiKXttb2R1bGUuZXhwb3J0cz1mKCl9ZWxzZSBpZih0eXBlb2YgZGVmaW5lPT09XCJmdW5jdGlvblwiJiZkZWZpbmUuYW1kKXtkZWZpbmUoW10sZil9ZWxzZXt2YXIgZztpZih0eXBlb2Ygd2luZG93IT09XCJ1bmRlZmluZWRcIil7Zz13aW5kb3d9ZWxzZSBpZih0eXBlb2YgZ2xvYmFsIT09XCJ1bmRlZmluZWRcIil7Zz1nbG9iYWx9ZWxzZSBpZih0eXBlb2Ygc2VsZiE9PVwidW5kZWZpbmVkXCIpe2c9c2VsZn1lbHNle2c9dGhpc31nLmJyb3RsaURlY29tcHJlc3MgPSBmKCl9fSkoZnVuY3Rpb24oKXt2YXIgZGVmaW5lLG1vZHVsZSxleHBvcnRzO3JldHVybiAoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpKHsxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbi8vIFN1cHBvcnQgZGVjb2RpbmcgVVJMLXNhZmUgYmFzZTY0IHN0cmluZ3MsIGFzIE5vZGUuanMgZG9lcy5cbi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0I1VSTF9hcHBsaWNhdGlvbnNcbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIGdldExlbnMgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyBUcmltIG9mZiBleHRyYSBieXRlcyBhZnRlciBwbGFjZWhvbGRlciBieXRlcyBhcmUgZm91bmRcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanMvaXNzdWVzLzQyXG4gIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKCc9JylcbiAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW5cblxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gdmFsaWRMZW4gPT09IGxlblxuICAgID8gMFxuICAgIDogNCAtICh2YWxpZExlbiAlIDQpXG5cbiAgcmV0dXJuIFt2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuXVxufVxuXG4vLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiBfYnl0ZUxlbmd0aCAoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyKF9ieXRlTGVuZ3RoKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikpXG5cbiAgdmFyIGN1ckJ5dGUgPSAwXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICB2YXIgbGVuID0gcGxhY2VIb2xkZXJzTGVuID4gMFxuICAgID8gdmFsaWRMZW4gLSA0XG4gICAgOiB2YWxpZExlblxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHxcbiAgICAgIHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDE2KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAyKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMSkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArXG4gICAgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9XG4gICAgICAoKHVpbnQ4W2ldIDw8IDE2KSAmIDB4RkYwMDAwKSArXG4gICAgICAoKHVpbnQ4W2kgKyAxXSA8PCA4KSAmIDB4RkYwMCkgK1xuICAgICAgKHVpbnQ4W2kgKyAyXSAmIDB4RkYpXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsoXG4gICAgICB1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpXG4gICAgKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuXG59LHt9XSwyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qIENvcHlyaWdodCAyMDEzIEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbiAgIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cbiAgIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAgIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAgIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbiAgIEJpdCByZWFkaW5nIGhlbHBlcnNcbiovXG5cbnZhciBCUk9UTElfUkVBRF9TSVpFID0gNDA5NjtcbnZhciBCUk9UTElfSUJVRl9TSVpFID0gICgyICogQlJPVExJX1JFQURfU0laRSArIDMyKTtcbnZhciBCUk9UTElfSUJVRl9NQVNLID0gICgyICogQlJPVExJX1JFQURfU0laRSAtIDEpO1xuXG52YXIga0JpdE1hc2sgPSBuZXcgVWludDMyQXJyYXkoW1xuICAwLCAxLCAzLCA3LCAxNSwgMzEsIDYzLCAxMjcsIDI1NSwgNTExLCAxMDIzLCAyMDQ3LCA0MDk1LCA4MTkxLCAxNjM4MywgMzI3NjcsXG4gIDY1NTM1LCAxMzEwNzEsIDI2MjE0MywgNTI0Mjg3LCAxMDQ4NTc1LCAyMDk3MTUxLCA0MTk0MzAzLCA4Mzg4NjA3LCAxNjc3NzIxNVxuXSk7XG5cbi8qIElucHV0IGJ5dGUgYnVmZmVyLCBjb25zaXN0IG9mIGEgcmluZ2J1ZmZlciBhbmQgYSBcInNsYWNrXCIgcmVnaW9uIHdoZXJlICovXG4vKiBieXRlcyBmcm9tIHRoZSBzdGFydCBvZiB0aGUgcmluZ2J1ZmZlciBhcmUgY29waWVkLiAqL1xuZnVuY3Rpb24gQnJvdGxpQml0UmVhZGVyKGlucHV0KSB7XG4gIHRoaXMuYnVmXyA9IG5ldyBVaW50OEFycmF5KEJST1RMSV9JQlVGX1NJWkUpO1xuICB0aGlzLmlucHV0XyA9IGlucHV0OyAgICAvKiBpbnB1dCBjYWxsYmFjayAqL1xuICBcbiAgdGhpcy5yZXNldCgpO1xufVxuXG5Ccm90bGlCaXRSZWFkZXIuUkVBRF9TSVpFID0gQlJPVExJX1JFQURfU0laRTtcbkJyb3RsaUJpdFJlYWRlci5JQlVGX01BU0sgPSBCUk9UTElfSUJVRl9NQVNLO1xuXG5Ccm90bGlCaXRSZWFkZXIucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuYnVmX3B0cl8gPSAwOyAgICAgIC8qIG5leHQgaW5wdXQgd2lsbCB3cml0ZSBoZXJlICovXG4gIHRoaXMudmFsXyA9IDA7ICAgICAgICAgIC8qIHByZS1mZXRjaGVkIGJpdHMgKi9cbiAgdGhpcy5wb3NfID0gMDsgICAgICAgICAgLyogYnl0ZSBwb3NpdGlvbiBpbiBzdHJlYW0gKi9cbiAgdGhpcy5iaXRfcG9zXyA9IDA7ICAgICAgLyogY3VycmVudCBiaXQtcmVhZGluZyBwb3NpdGlvbiBpbiB2YWxfICovXG4gIHRoaXMuYml0X2VuZF9wb3NfID0gMDsgIC8qIGJpdC1yZWFkaW5nIGVuZCBwb3NpdGlvbiBmcm9tIExTQiBvZiB2YWxfICovXG4gIHRoaXMuZW9zXyA9IDA7ICAgICAgICAgIC8qIGlucHV0IHN0cmVhbSBpcyBmaW5pc2hlZCAqL1xuICBcbiAgdGhpcy5yZWFkTW9yZUlucHV0KCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgdGhpcy52YWxfIHw9IHRoaXMuYnVmX1t0aGlzLnBvc19dIDw8ICg4ICogaSk7XG4gICAgKyt0aGlzLnBvc187XG4gIH1cbiAgXG4gIHJldHVybiB0aGlzLmJpdF9lbmRfcG9zXyA+IDA7XG59O1xuXG4vKiBGaWxscyB1cCB0aGUgaW5wdXQgcmluZ2J1ZmZlciBieSBjYWxsaW5nIHRoZSBpbnB1dCBjYWxsYmFjay5cblxuICAgRG9lcyBub3RoaW5nIGlmIHRoZXJlIGFyZSBhdCBsZWFzdCAzMiBieXRlcyBwcmVzZW50IGFmdGVyIGN1cnJlbnQgcG9zaXRpb24uXG5cbiAgIFJldHVybnMgMCBpZiBlaXRoZXI6XG4gICAgLSB0aGUgaW5wdXQgY2FsbGJhY2sgcmV0dXJuZWQgYW4gZXJyb3IsIG9yXG4gICAgLSB0aGVyZSBpcyBubyBtb3JlIGlucHV0IGFuZCB0aGUgcG9zaXRpb24gaXMgcGFzdCB0aGUgZW5kIG9mIHRoZSBzdHJlYW0uXG5cbiAgIEFmdGVyIGVuY291bnRlcmluZyB0aGUgZW5kIG9mIHRoZSBpbnB1dCBzdHJlYW0sIDMyIGFkZGl0aW9uYWwgemVybyBieXRlcyBhcmVcbiAgIGNvcGllZCB0byB0aGUgcmluZ2J1ZmZlciwgdGhlcmVmb3JlIGl0IGlzIHNhZmUgdG8gY2FsbCB0aGlzIGZ1bmN0aW9uIGFmdGVyXG4gICBldmVyeSAzMiBieXRlcyBvZiBpbnB1dCBpcyByZWFkLlxuKi9cbkJyb3RsaUJpdFJlYWRlci5wcm90b3R5cGUucmVhZE1vcmVJbnB1dCA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5iaXRfZW5kX3Bvc18gPiAyNTYpIHtcbiAgICByZXR1cm47XG4gIH0gZWxzZSBpZiAodGhpcy5lb3NfKSB7XG4gICAgaWYgKHRoaXMuYml0X3Bvc18gPiB0aGlzLmJpdF9lbmRfcG9zXylcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCBlbmQgb2YgaW5wdXQgJyArIHRoaXMuYml0X3Bvc18gKyAnICcgKyB0aGlzLmJpdF9lbmRfcG9zXyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGRzdCA9IHRoaXMuYnVmX3B0cl87XG4gICAgdmFyIGJ5dGVzX3JlYWQgPSB0aGlzLmlucHV0Xy5yZWFkKHRoaXMuYnVmXywgZHN0LCBCUk9UTElfUkVBRF9TSVpFKTtcbiAgICBpZiAoYnl0ZXNfcmVhZCA8IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCBlbmQgb2YgaW5wdXQnKTtcbiAgICB9XG4gICAgXG4gICAgaWYgKGJ5dGVzX3JlYWQgPCBCUk9UTElfUkVBRF9TSVpFKSB7XG4gICAgICB0aGlzLmVvc18gPSAxO1xuICAgICAgLyogU3RvcmUgMzIgYnl0ZXMgb2YgemVybyBhZnRlciB0aGUgc3RyZWFtIGVuZC4gKi9cbiAgICAgIGZvciAodmFyIHAgPSAwOyBwIDwgMzI7IHArKylcbiAgICAgICAgdGhpcy5idWZfW2RzdCArIGJ5dGVzX3JlYWQgKyBwXSA9IDA7XG4gICAgfVxuICAgIFxuICAgIGlmIChkc3QgPT09IDApIHtcbiAgICAgIC8qIENvcHkgdGhlIGhlYWQgb2YgdGhlIHJpbmdidWZmZXIgdG8gdGhlIHNsYWNrIHJlZ2lvbi4gKi9cbiAgICAgIGZvciAodmFyIHAgPSAwOyBwIDwgMzI7IHArKylcbiAgICAgICAgdGhpcy5idWZfWyhCUk9UTElfUkVBRF9TSVpFIDw8IDEpICsgcF0gPSB0aGlzLmJ1Zl9bcF07XG5cbiAgICAgIHRoaXMuYnVmX3B0cl8gPSBCUk9UTElfUkVBRF9TSVpFO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmJ1Zl9wdHJfID0gMDtcbiAgICB9XG4gICAgXG4gICAgdGhpcy5iaXRfZW5kX3Bvc18gKz0gYnl0ZXNfcmVhZCA8PCAzO1xuICB9XG59O1xuXG4vKiBHdWFyYW50ZWVzIHRoYXQgdGhlcmUgYXJlIGF0IGxlYXN0IDI0IGJpdHMgaW4gdGhlIGJ1ZmZlci4gKi9cbkJyb3RsaUJpdFJlYWRlci5wcm90b3R5cGUuZmlsbEJpdFdpbmRvdyA9IGZ1bmN0aW9uKCkgeyAgICBcbiAgd2hpbGUgKHRoaXMuYml0X3Bvc18gPj0gOCkge1xuICAgIHRoaXMudmFsXyA+Pj49IDg7XG4gICAgdGhpcy52YWxfIHw9IHRoaXMuYnVmX1t0aGlzLnBvc18gJiBCUk9UTElfSUJVRl9NQVNLXSA8PCAyNDtcbiAgICArK3RoaXMucG9zXztcbiAgICB0aGlzLmJpdF9wb3NfID0gdGhpcy5iaXRfcG9zXyAtIDggPj4+IDA7XG4gICAgdGhpcy5iaXRfZW5kX3Bvc18gPSB0aGlzLmJpdF9lbmRfcG9zXyAtIDggPj4+IDA7XG4gIH1cbn07XG5cbi8qIFJlYWRzIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGJpdHMgZnJvbSBSZWFkIEJ1ZmZlci4gKi9cbkJyb3RsaUJpdFJlYWRlci5wcm90b3R5cGUucmVhZEJpdHMgPSBmdW5jdGlvbihuX2JpdHMpIHtcbiAgaWYgKDMyIC0gdGhpcy5iaXRfcG9zXyA8IG5fYml0cykge1xuICAgIHRoaXMuZmlsbEJpdFdpbmRvdygpO1xuICB9XG4gIFxuICB2YXIgdmFsID0gKCh0aGlzLnZhbF8gPj4+IHRoaXMuYml0X3Bvc18pICYga0JpdE1hc2tbbl9iaXRzXSk7XG4gIHRoaXMuYml0X3Bvc18gKz0gbl9iaXRzO1xuICByZXR1cm4gdmFsO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBCcm90bGlCaXRSZWFkZXI7XG5cbn0se31dLDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyogQ29weXJpZ2h0IDIwMTMgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuICAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAgIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAgIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuICAgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICAgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuICAgTG9va3VwIHRhYmxlIHRvIG1hcCB0aGUgcHJldmlvdXMgdHdvIGJ5dGVzIHRvIGEgY29udGV4dCBpZC5cblxuICAgVGhlcmUgYXJlIGZvdXIgZGlmZmVyZW50IGNvbnRleHQgbW9kZWxpbmcgbW9kZXMgZGVmaW5lZCBoZXJlOlxuICAgICBDT05URVhUX0xTQjY6IGNvbnRleHQgaWQgaXMgdGhlIGxlYXN0IHNpZ25pZmljYW50IDYgYml0cyBvZiB0aGUgbGFzdCBieXRlLFxuICAgICBDT05URVhUX01TQjY6IGNvbnRleHQgaWQgaXMgdGhlIG1vc3Qgc2lnbmlmaWNhbnQgNiBiaXRzIG9mIHRoZSBsYXN0IGJ5dGUsXG4gICAgIENPTlRFWFRfVVRGODogc2Vjb25kLW9yZGVyIGNvbnRleHQgbW9kZWwgdHVuZWQgZm9yIFVURjgtZW5jb2RlZCB0ZXh0LFxuICAgICBDT05URVhUX1NJR05FRDogc2Vjb25kLW9yZGVyIGNvbnRleHQgbW9kZWwgdHVuZWQgZm9yIHNpZ25lZCBpbnRlZ2Vycy5cblxuICAgVGhlIGNvbnRleHQgaWQgZm9yIHRoZSBVVEY4IGNvbnRleHQgbW9kZWwgaXMgY2FsY3VsYXRlZCBhcyBmb2xsb3dzLiBJZiBwMVxuICAgYW5kIHAyIGFyZSB0aGUgcHJldmlvdXMgdHdvIGJ5dGVzLCB3ZSBjYWxjdWFsdGUgdGhlIGNvbnRleHQgYXNcblxuICAgICBjb250ZXh0ID0ga0NvbnRleHRMb29rdXBbcDFdIHwga0NvbnRleHRMb29rdXBbcDIgKyAyNTZdLlxuXG4gICBJZiB0aGUgcHJldmlvdXMgdHdvIGJ5dGVzIGFyZSBBU0NJSSBjaGFyYWN0ZXJzIChpLmUuIDwgMTI4KSwgdGhpcyB3aWxsIGJlXG4gICBlcXVpdmFsZW50IHRvXG5cbiAgICAgY29udGV4dCA9IDQgKiBjb250ZXh0MShwMSkgKyBjb250ZXh0MihwMiksXG5cbiAgIHdoZXJlIGNvbnRleHQxIGlzIGJhc2VkIG9uIHRoZSBwcmV2aW91cyBieXRlIGluIHRoZSBmb2xsb3dpbmcgd2F5OlxuXG4gICAgIDAgIDogbm9uLUFTQ0lJIGNvbnRyb2xcbiAgICAgMSAgOiBcXHQsIFxcbiwgXFxyXG4gICAgIDIgIDogc3BhY2VcbiAgICAgMyAgOiBvdGhlciBwdW5jdHVhdGlvblxuICAgICA0ICA6IFwiICdcbiAgICAgNSAgOiAlXG4gICAgIDYgIDogKCA8IFsge1xuICAgICA3ICA6ICkgPiBdIH1cbiAgICAgOCAgOiAsIDsgOlxuICAgICA5ICA6IC5cbiAgICAgMTAgOiA9XG4gICAgIDExIDogbnVtYmVyXG4gICAgIDEyIDogdXBwZXItY2FzZSB2b3dlbFxuICAgICAxMyA6IHVwcGVyLWNhc2UgY29uc29uYW50XG4gICAgIDE0IDogbG93ZXItY2FzZSB2b3dlbFxuICAgICAxNSA6IGxvd2VyLWNhc2UgY29uc29uYW50XG5cbiAgIGFuZCBjb250ZXh0MiBpcyBiYXNlZCBvbiB0aGUgc2Vjb25kIGxhc3QgYnl0ZTpcblxuICAgICAwIDogY29udHJvbCwgc3BhY2VcbiAgICAgMSA6IHB1bmN0dWF0aW9uXG4gICAgIDIgOiB1cHBlci1jYXNlIGxldHRlciwgbnVtYmVyXG4gICAgIDMgOiBsb3dlci1jYXNlIGxldHRlclxuXG4gICBJZiB0aGUgbGFzdCBieXRlIGlzIEFTQ0lJLCBhbmQgdGhlIHNlY29uZCBsYXN0IGJ5dGUgaXMgbm90IChpbiBhIHZhbGlkIFVURjhcbiAgIHN0cmVhbSBpdCB3aWxsIGJlIGEgY29udGludWF0aW9uIGJ5dGUsIHZhbHVlIGJldHdlZW4gMTI4IGFuZCAxOTEpLCB0aGVcbiAgIGNvbnRleHQgaXMgdGhlIHNhbWUgYXMgaWYgdGhlIHNlY29uZCBsYXN0IGJ5dGUgd2FzIGFuIEFTQ0lJIGNvbnRyb2wgb3Igc3BhY2UuXG5cbiAgIElmIHRoZSBsYXN0IGJ5dGUgaXMgYSBVVEY4IGxlYWQgYnl0ZSAodmFsdWUgPj0gMTkyKSwgdGhlbiB0aGUgbmV4dCBieXRlIHdpbGxcbiAgIGJlIGEgY29udGludWF0aW9uIGJ5dGUgYW5kIHRoZSBjb250ZXh0IGlkIGlzIDIgb3IgMyBkZXBlbmRpbmcgb24gdGhlIExTQiBvZlxuICAgdGhlIGxhc3QgYnl0ZSBhbmQgdG8gYSBsZXNzZXIgZXh0ZW50IG9uIHRoZSBzZWNvbmQgbGFzdCBieXRlIGlmIGl0IGlzIEFTQ0lJLlxuXG4gICBJZiB0aGUgbGFzdCBieXRlIGlzIGEgVVRGOCBjb250aW51YXRpb24gYnl0ZSwgdGhlIHNlY29uZCBsYXN0IGJ5dGUgY2FuIGJlOlxuICAgICAtIGNvbnRpbnVhdGlvbiBieXRlOiB0aGUgbmV4dCBieXRlIGlzIHByb2JhYmx5IEFTQ0lJIG9yIGxlYWQgYnl0ZSAoYXNzdW1pbmdcbiAgICAgICA0LWJ5dGUgVVRGOCBjaGFyYWN0ZXJzIGFyZSByYXJlKSBhbmQgdGhlIGNvbnRleHQgaWQgaXMgMCBvciAxLlxuICAgICAtIGxlYWQgYnl0ZSAoMTkyIC0gMjA3KTogbmV4dCBieXRlIGlzIEFTQ0lJIG9yIGxlYWQgYnl0ZSwgY29udGV4dCBpcyAwIG9yIDFcbiAgICAgLSBsZWFkIGJ5dGUgKDIwOCAtIDI1NSk6IG5leHQgYnl0ZSBpcyBjb250aW51YXRpb24gYnl0ZSwgY29udGV4dCBpcyAyIG9yIDNcblxuICAgVGhlIHBvc3NpYmxlIHZhbHVlIGNvbWJpbmF0aW9ucyBvZiB0aGUgcHJldmlvdXMgdHdvIGJ5dGVzLCB0aGUgcmFuZ2Ugb2ZcbiAgIGNvbnRleHQgaWRzIGFuZCB0aGUgdHlwZSBvZiB0aGUgbmV4dCBieXRlIGlzIHN1bW1hcml6ZWQgaW4gdGhlIHRhYmxlIGJlbG93OlxuXG4gICB8LS0tLS0tLS1cXC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICAgfCAgICAgICAgIFxcICAgICAgICAgICAgICAgICAgICAgICAgIExhc3QgYnl0ZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgIHwgU2Vjb25kICAgXFwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gICB8IGxhc3QgYnl0ZSBcXCAgICBBU0NJSSAgICAgICAgICAgIHwgICBjb250LiBieXRlICAgICAgICB8ICAgbGVhZCBieXRlICAgICAgfFxuICAgfCAgICAgICAgICAgIFxcICAgKDAtMTI3KSAgICAgICAgICB8ICAgKDEyOC0xOTEpICAgICAgICAgfCAgICgxOTItKSAgICAgICAgIHxcbiAgIHw9PT09PT09PT09PT09fD09PT09PT09PT09PT09PT09PT18PT09PT09PT09PT09PT09PT09PT09fD09PT09PT09PT09PT09PT09PXxcbiAgIHwgIEFTQ0lJICAgICAgfCBuZXh0OiBBU0NJSS9sZWFkICB8ICBub3QgdmFsaWQgICAgICAgICAgfCAgbmV4dDogY29udC4gICAgIHxcbiAgIHwgICgwLTEyNykgICAgfCBjb250ZXh0OiA0IC0gNjMgICB8ICAgICAgICAgICAgICAgICAgICAgfCAgY29udGV4dDogMiAtIDMgIHxcbiAgIHwtLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLXxcbiAgIHwgIGNvbnQuIGJ5dGUgfCBuZXh0OiBBU0NJSS9sZWFkICB8ICBuZXh0OiBBU0NJSS9sZWFkICAgfCAgbmV4dDogY29udC4gICAgIHxcbiAgIHwgICgxMjgtMTkxKSAgfCBjb250ZXh0OiA0IC0gNjMgICB8ICBjb250ZXh0OiAwIC0gMSAgICAgfCAgY29udGV4dDogMiAtIDMgIHxcbiAgIHwtLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLXxcbiAgIHwgIGxlYWQgYnl0ZSAgfCBub3QgdmFsaWQgICAgICAgICB8ICBuZXh0OiBBU0NJSS9sZWFkICAgfCAgbm90IHZhbGlkICAgICAgIHxcbiAgIHwgICgxOTItMjA3KSAgfCAgICAgICAgICAgICAgICAgICB8ICBjb250ZXh0OiAwIC0gMSAgICAgfCAgICAgICAgICAgICAgICAgIHxcbiAgIHwtLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLXxcbiAgIHwgIGxlYWQgYnl0ZSAgfCBub3QgdmFsaWQgICAgICAgICB8ICBuZXh0OiBjb250LiAgICAgICAgfCAgbm90IHZhbGlkICAgICAgIHxcbiAgIHwgICgyMDgtKSAgICAgfCAgICAgICAgICAgICAgICAgICB8ICBjb250ZXh0OiAyIC0gMyAgICAgfCAgICAgICAgICAgICAgICAgIHxcbiAgIHwtLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLXxcblxuICAgVGhlIGNvbnRleHQgaWQgZm9yIHRoZSBzaWduZWQgY29udGV4dCBtb2RlIGlzIGNhbGN1bGF0ZWQgYXM6XG5cbiAgICAgY29udGV4dCA9IChrQ29udGV4dExvb2t1cFs1MTIgKyBwMV0gPDwgMykgfCBrQ29udGV4dExvb2t1cFs1MTIgKyBwMl0uXG5cbiAgIEZvciBhbnkgY29udGV4dCBtb2RlbGluZyBtb2RlcywgdGhlIGNvbnRleHQgaWRzIGNhbiBiZSBjYWxjdWxhdGVkIGJ5IHwtaW5nXG4gICB0b2dldGhlciB0d28gbG9va3VwcyBmcm9tIG9uZSB0YWJsZSB1c2luZyBjb250ZXh0IG1vZGVsIGRlcGVuZGVudCBvZmZzZXRzOlxuXG4gICAgIGNvbnRleHQgPSBrQ29udGV4dExvb2t1cFtvZmZzZXQxICsgcDFdIHwga0NvbnRleHRMb29rdXBbb2Zmc2V0MiArIHAyXS5cblxuICAgd2hlcmUgb2Zmc2V0MSBhbmQgb2Zmc2V0MiBhcmUgZGVwZW5kZW50IG9uIHRoZSBjb250ZXh0IG1vZGUuXG4qL1xuXG52YXIgQ09OVEVYVF9MU0I2ICAgICAgICAgPSAwO1xudmFyIENPTlRFWFRfTVNCNiAgICAgICAgID0gMTtcbnZhciBDT05URVhUX1VURjggICAgICAgICA9IDI7XG52YXIgQ09OVEVYVF9TSUdORUQgICAgICAgPSAzO1xuXG4vKiBDb21tb24gY29udGV4dCBsb29rdXAgdGFibGUgZm9yIGFsbCBjb250ZXh0IG1vZGVzLiAqL1xuZXhwb3J0cy5sb29rdXAgPSBuZXcgVWludDhBcnJheShbXG4gIC8qIENPTlRFWFRfVVRGOCwgbGFzdCBieXRlLiAqL1xuICAvKiBBU0NJSSByYW5nZS4gKi9cbiAgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDQsICA0LCAgMCwgIDAsICA0LCAgMCwgIDAsXG4gICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLCAgMCwgIDAsICAwLFxuICAgOCwgMTIsIDE2LCAxMiwgMTIsIDIwLCAxMiwgMTYsIDI0LCAyOCwgMTIsIDEyLCAzMiwgMTIsIDM2LCAxMixcbiAgNDQsIDQ0LCA0NCwgNDQsIDQ0LCA0NCwgNDQsIDQ0LCA0NCwgNDQsIDMyLCAzMiwgMjQsIDQwLCAyOCwgMTIsXG4gIDEyLCA0OCwgNTIsIDUyLCA1MiwgNDgsIDUyLCA1MiwgNTIsIDQ4LCA1MiwgNTIsIDUyLCA1MiwgNTIsIDQ4LFxuICA1MiwgNTIsIDUyLCA1MiwgNTIsIDQ4LCA1MiwgNTIsIDUyLCA1MiwgNTIsIDI0LCAxMiwgMjgsIDEyLCAxMixcbiAgMTIsIDU2LCA2MCwgNjAsIDYwLCA1NiwgNjAsIDYwLCA2MCwgNTYsIDYwLCA2MCwgNjAsIDYwLCA2MCwgNTYsXG4gIDYwLCA2MCwgNjAsIDYwLCA2MCwgNTYsIDYwLCA2MCwgNjAsIDYwLCA2MCwgMjQsIDEyLCAyOCwgMTIsICAwLFxuICAvKiBVVEY4IGNvbnRpbnVhdGlvbiBieXRlIHJhbmdlLiAqL1xuICAwLCAxLCAwLCAxLCAwLCAxLCAwLCAxLCAwLCAxLCAwLCAxLCAwLCAxLCAwLCAxLFxuICAwLCAxLCAwLCAxLCAwLCAxLCAwLCAxLCAwLCAxLCAwLCAxLCAwLCAxLCAwLCAxLFxuICAwLCAxLCAwLCAxLCAwLCAxLCAwLCAxLCAwLCAxLCAwLCAxLCAwLCAxLCAwLCAxLFxuICAwLCAxLCAwLCAxLCAwLCAxLCAwLCAxLCAwLCAxLCAwLCAxLCAwLCAxLCAwLCAxLFxuICAvKiBVVEY4IGxlYWQgYnl0ZSByYW5nZS4gKi9cbiAgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMyxcbiAgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMyxcbiAgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMyxcbiAgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMywgMiwgMyxcbiAgLyogQ09OVEVYVF9VVEY4IHNlY29uZCBsYXN0IGJ5dGUuICovXG4gIC8qIEFTQ0lJIHJhbmdlLiAqL1xuICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLFxuICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLFxuICAwLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLFxuICAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAxLCAxLCAxLCAxLCAxLCAxLFxuICAxLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLFxuICAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAyLCAxLCAxLCAxLCAxLCAxLFxuICAxLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLFxuICAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAzLCAxLCAxLCAxLCAxLCAwLFxuICAvKiBVVEY4IGNvbnRpbnVhdGlvbiBieXRlIHJhbmdlLiAqL1xuICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLFxuICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLFxuICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLFxuICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLFxuICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLFxuICAvKiBVVEY4IGxlYWQgYnl0ZSByYW5nZS4gKi9cbiAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCxcbiAgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMixcbiAgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMixcbiAgLyogQ09OVEVYVF9TSUdORUQsIHNlY29uZCBsYXN0IGJ5dGUuICovXG4gIDAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsXG4gIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsXG4gIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsXG4gIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsIDIsXG4gIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsXG4gIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsXG4gIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsXG4gIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsIDMsXG4gIDQsIDQsIDQsIDQsIDQsIDQsIDQsIDQsIDQsIDQsIDQsIDQsIDQsIDQsIDQsIDQsXG4gIDQsIDQsIDQsIDQsIDQsIDQsIDQsIDQsIDQsIDQsIDQsIDQsIDQsIDQsIDQsIDQsXG4gIDQsIDQsIDQsIDQsIDQsIDQsIDQsIDQsIDQsIDQsIDQsIDQsIDQsIDQsIDQsIDQsXG4gIDQsIDQsIDQsIDQsIDQsIDQsIDQsIDQsIDQsIDQsIDQsIDQsIDQsIDQsIDQsIDQsXG4gIDUsIDUsIDUsIDUsIDUsIDUsIDUsIDUsIDUsIDUsIDUsIDUsIDUsIDUsIDUsIDUsXG4gIDUsIDUsIDUsIDUsIDUsIDUsIDUsIDUsIDUsIDUsIDUsIDUsIDUsIDUsIDUsIDUsXG4gIDUsIDUsIDUsIDUsIDUsIDUsIDUsIDUsIDUsIDUsIDUsIDUsIDUsIDUsIDUsIDUsXG4gIDYsIDYsIDYsIDYsIDYsIDYsIDYsIDYsIDYsIDYsIDYsIDYsIDYsIDYsIDYsIDcsXG4gIC8qIENPTlRFWFRfU0lHTkVELCBsYXN0IGJ5dGUsIHNhbWUgYXMgdGhlIGFib3ZlIHZhbHVlcyBzaGlmdGVkIGJ5IDMgYml0cy4gKi9cbiAgIDAsIDgsIDgsIDgsIDgsIDgsIDgsIDgsIDgsIDgsIDgsIDgsIDgsIDgsIDgsIDgsXG4gIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LFxuICAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNixcbiAgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsXG4gIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LFxuICAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCxcbiAgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsXG4gIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LFxuICAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMixcbiAgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsXG4gIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLFxuICAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMixcbiAgNDAsIDQwLCA0MCwgNDAsIDQwLCA0MCwgNDAsIDQwLCA0MCwgNDAsIDQwLCA0MCwgNDAsIDQwLCA0MCwgNDAsXG4gIDQwLCA0MCwgNDAsIDQwLCA0MCwgNDAsIDQwLCA0MCwgNDAsIDQwLCA0MCwgNDAsIDQwLCA0MCwgNDAsIDQwLFxuICA0MCwgNDAsIDQwLCA0MCwgNDAsIDQwLCA0MCwgNDAsIDQwLCA0MCwgNDAsIDQwLCA0MCwgNDAsIDQwLCA0MCxcbiAgNDgsIDQ4LCA0OCwgNDgsIDQ4LCA0OCwgNDgsIDQ4LCA0OCwgNDgsIDQ4LCA0OCwgNDgsIDQ4LCA0OCwgNTYsXG4gIC8qIENPTlRFWFRfTFNCNiwgbGFzdCBieXRlLiAqL1xuICAgMCwgIDEsICAyLCAgMywgIDQsICA1LCAgNiwgIDcsICA4LCAgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSxcbiAgMTYsIDE3LCAxOCwgMTksIDIwLCAyMSwgMjIsIDIzLCAyNCwgMjUsIDI2LCAyNywgMjgsIDI5LCAzMCwgMzEsXG4gIDMyLCAzMywgMzQsIDM1LCAzNiwgMzcsIDM4LCAzOSwgNDAsIDQxLCA0MiwgNDMsIDQ0LCA0NSwgNDYsIDQ3LFxuICA0OCwgNDksIDUwLCA1MSwgNTIsIDUzLCA1NCwgNTUsIDU2LCA1NywgNTgsIDU5LCA2MCwgNjEsIDYyLCA2MyxcbiAgIDAsICAxLCAgMiwgIDMsICA0LCAgNSwgIDYsICA3LCAgOCwgIDksIDEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsXG4gIDE2LCAxNywgMTgsIDE5LCAyMCwgMjEsIDIyLCAyMywgMjQsIDI1LCAyNiwgMjcsIDI4LCAyOSwgMzAsIDMxLFxuICAzMiwgMzMsIDM0LCAzNSwgMzYsIDM3LCAzOCwgMzksIDQwLCA0MSwgNDIsIDQzLCA0NCwgNDUsIDQ2LCA0NyxcbiAgNDgsIDQ5LCA1MCwgNTEsIDUyLCA1MywgNTQsIDU1LCA1NiwgNTcsIDU4LCA1OSwgNjAsIDYxLCA2MiwgNjMsXG4gICAwLCAgMSwgIDIsICAzLCAgNCwgIDUsICA2LCAgNywgIDgsICA5LCAxMCwgMTEsIDEyLCAxMywgMTQsIDE1LFxuICAxNiwgMTcsIDE4LCAxOSwgMjAsIDIxLCAyMiwgMjMsIDI0LCAyNSwgMjYsIDI3LCAyOCwgMjksIDMwLCAzMSxcbiAgMzIsIDMzLCAzNCwgMzUsIDM2LCAzNywgMzgsIDM5LCA0MCwgNDEsIDQyLCA0MywgNDQsIDQ1LCA0NiwgNDcsXG4gIDQ4LCA0OSwgNTAsIDUxLCA1MiwgNTMsIDU0LCA1NSwgNTYsIDU3LCA1OCwgNTksIDYwLCA2MSwgNjIsIDYzLFxuICAgMCwgIDEsICAyLCAgMywgIDQsICA1LCAgNiwgIDcsICA4LCAgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSxcbiAgMTYsIDE3LCAxOCwgMTksIDIwLCAyMSwgMjIsIDIzLCAyNCwgMjUsIDI2LCAyNywgMjgsIDI5LCAzMCwgMzEsXG4gIDMyLCAzMywgMzQsIDM1LCAzNiwgMzcsIDM4LCAzOSwgNDAsIDQxLCA0MiwgNDMsIDQ0LCA0NSwgNDYsIDQ3LFxuICA0OCwgNDksIDUwLCA1MSwgNTIsIDUzLCA1NCwgNTUsIDU2LCA1NywgNTgsIDU5LCA2MCwgNjEsIDYyLCA2MyxcbiAgLyogQ09OVEVYVF9NU0I2LCBsYXN0IGJ5dGUuICovXG4gICAwLCAgMCwgIDAsICAwLCAgMSwgIDEsICAxLCAgMSwgIDIsICAyLCAgMiwgIDIsICAzLCAgMywgIDMsICAzLFxuICAgNCwgIDQsICA0LCAgNCwgIDUsICA1LCAgNSwgIDUsICA2LCAgNiwgIDYsICA2LCAgNywgIDcsICA3LCAgNyxcbiAgIDgsICA4LCAgOCwgIDgsICA5LCAgOSwgIDksICA5LCAxMCwgMTAsIDEwLCAxMCwgMTEsIDExLCAxMSwgMTEsXG4gIDEyLCAxMiwgMTIsIDEyLCAxMywgMTMsIDEzLCAxMywgMTQsIDE0LCAxNCwgMTQsIDE1LCAxNSwgMTUsIDE1LFxuICAxNiwgMTYsIDE2LCAxNiwgMTcsIDE3LCAxNywgMTcsIDE4LCAxOCwgMTgsIDE4LCAxOSwgMTksIDE5LCAxOSxcbiAgMjAsIDIwLCAyMCwgMjAsIDIxLCAyMSwgMjEsIDIxLCAyMiwgMjIsIDIyLCAyMiwgMjMsIDIzLCAyMywgMjMsXG4gIDI0LCAyNCwgMjQsIDI0LCAyNSwgMjUsIDI1LCAyNSwgMjYsIDI2LCAyNiwgMjYsIDI3LCAyNywgMjcsIDI3LFxuICAyOCwgMjgsIDI4LCAyOCwgMjksIDI5LCAyOSwgMjksIDMwLCAzMCwgMzAsIDMwLCAzMSwgMzEsIDMxLCAzMSxcbiAgMzIsIDMyLCAzMiwgMzIsIDMzLCAzMywgMzMsIDMzLCAzNCwgMzQsIDM0LCAzNCwgMzUsIDM1LCAzNSwgMzUsXG4gIDM2LCAzNiwgMzYsIDM2LCAzNywgMzcsIDM3LCAzNywgMzgsIDM4LCAzOCwgMzgsIDM5LCAzOSwgMzksIDM5LFxuICA0MCwgNDAsIDQwLCA0MCwgNDEsIDQxLCA0MSwgNDEsIDQyLCA0MiwgNDIsIDQyLCA0MywgNDMsIDQzLCA0MyxcbiAgNDQsIDQ0LCA0NCwgNDQsIDQ1LCA0NSwgNDUsIDQ1LCA0NiwgNDYsIDQ2LCA0NiwgNDcsIDQ3LCA0NywgNDcsXG4gIDQ4LCA0OCwgNDgsIDQ4LCA0OSwgNDksIDQ5LCA0OSwgNTAsIDUwLCA1MCwgNTAsIDUxLCA1MSwgNTEsIDUxLFxuICA1MiwgNTIsIDUyLCA1MiwgNTMsIDUzLCA1MywgNTMsIDU0LCA1NCwgNTQsIDU0LCA1NSwgNTUsIDU1LCA1NSxcbiAgNTYsIDU2LCA1NiwgNTYsIDU3LCA1NywgNTcsIDU3LCA1OCwgNTgsIDU4LCA1OCwgNTksIDU5LCA1OSwgNTksXG4gIDYwLCA2MCwgNjAsIDYwLCA2MSwgNjEsIDYxLCA2MSwgNjIsIDYyLCA2MiwgNjIsIDYzLCA2MywgNjMsIDYzLFxuICAvKiBDT05URVhUX3tNLEx9U0I2LCBzZWNvbmQgbGFzdCBieXRlLCAqL1xuICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLFxuICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLFxuICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLFxuICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLFxuICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLFxuICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLFxuICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLFxuICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLFxuICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLFxuICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLFxuICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLFxuICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLFxuICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLFxuICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLFxuICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLFxuICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLFxuXSk7XG5cbmV4cG9ydHMubG9va3VwT2Zmc2V0cyA9IG5ldyBVaW50MTZBcnJheShbXG4gIC8qIENPTlRFWFRfTFNCNiAqL1xuICAxMDI0LCAxNTM2LFxuICAvKiBDT05URVhUX01TQjYgKi9cbiAgMTI4MCwgMTUzNixcbiAgLyogQ09OVEVYVF9VVEY4ICovXG4gIDAsIDI1NixcbiAgLyogQ09OVEVYVF9TSUdORUQgKi9cbiAgNzY4LCA1MTIsXG5dKTtcblxufSx7fV0sNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKiBDb3B5cmlnaHQgMjAxMyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG4gICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICAgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG4gICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gICBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAgIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAgIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxudmFyIEJyb3RsaUlucHV0ID0gcmVxdWlyZSgnLi9zdHJlYW1zJykuQnJvdGxpSW5wdXQ7XG52YXIgQnJvdGxpT3V0cHV0ID0gcmVxdWlyZSgnLi9zdHJlYW1zJykuQnJvdGxpT3V0cHV0O1xudmFyIEJyb3RsaUJpdFJlYWRlciA9IHJlcXVpcmUoJy4vYml0X3JlYWRlcicpO1xudmFyIEJyb3RsaURpY3Rpb25hcnkgPSByZXF1aXJlKCcuL2RpY3Rpb25hcnknKTtcbnZhciBIdWZmbWFuQ29kZSA9IHJlcXVpcmUoJy4vaHVmZm1hbicpLkh1ZmZtYW5Db2RlO1xudmFyIEJyb3RsaUJ1aWxkSHVmZm1hblRhYmxlID0gcmVxdWlyZSgnLi9odWZmbWFuJykuQnJvdGxpQnVpbGRIdWZmbWFuVGFibGU7XG52YXIgQ29udGV4dCA9IHJlcXVpcmUoJy4vY29udGV4dCcpO1xudmFyIFByZWZpeCA9IHJlcXVpcmUoJy4vcHJlZml4Jyk7XG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnLi90cmFuc2Zvcm0nKTtcblxudmFyIGtEZWZhdWx0Q29kZUxlbmd0aCA9IDg7XG52YXIga0NvZGVMZW5ndGhSZXBlYXRDb2RlID0gMTY7XG52YXIga051bUxpdGVyYWxDb2RlcyA9IDI1NjtcbnZhciBrTnVtSW5zZXJ0QW5kQ29weUNvZGVzID0gNzA0O1xudmFyIGtOdW1CbG9ja0xlbmd0aENvZGVzID0gMjY7XG52YXIga0xpdGVyYWxDb250ZXh0Qml0cyA9IDY7XG52YXIga0Rpc3RhbmNlQ29udGV4dEJpdHMgPSAyO1xuXG52YXIgSFVGRk1BTl9UQUJMRV9CSVRTID0gODtcbnZhciBIVUZGTUFOX1RBQkxFX01BU0sgPSAweGZmO1xuLyogTWF4aW11bSBwb3NzaWJsZSBIdWZmbWFuIHRhYmxlIHNpemUgZm9yIGFuIGFscGhhYmV0IHNpemUgb2YgNzA0LCBtYXggY29kZVxuICogbGVuZ3RoIDE1IGFuZCByb290IHRhYmxlIGJpdHMgOC4gKi9cbnZhciBIVUZGTUFOX01BWF9UQUJMRV9TSVpFID0gMTA4MDtcblxudmFyIENPREVfTEVOR1RIX0NPREVTID0gMTg7XG52YXIga0NvZGVMZW5ndGhDb2RlT3JkZXIgPSBuZXcgVWludDhBcnJheShbXG4gIDEsIDIsIDMsIDQsIDAsIDUsIDE3LCA2LCAxNiwgNywgOCwgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSxcbl0pO1xuXG52YXIgTlVNX0RJU1RBTkNFX1NIT1JUX0NPREVTID0gMTY7XG52YXIga0Rpc3RhbmNlU2hvcnRDb2RlSW5kZXhPZmZzZXQgPSBuZXcgVWludDhBcnJheShbXG4gIDMsIDIsIDEsIDAsIDMsIDMsIDMsIDMsIDMsIDMsIDIsIDIsIDIsIDIsIDIsIDJcbl0pO1xuXG52YXIga0Rpc3RhbmNlU2hvcnRDb2RlVmFsdWVPZmZzZXQgPSBuZXcgSW50OEFycmF5KFtcbiAgMCwgMCwgMCwgMCwgLTEsIDEsIC0yLCAyLCAtMywgMywgLTEsIDEsIC0yLCAyLCAtMywgM1xuXSk7XG5cbnZhciBrTWF4SHVmZm1hblRhYmxlU2l6ZSA9IG5ldyBVaW50MTZBcnJheShbXG4gIDI1NiwgNDAyLCA0MzYsIDQ2OCwgNTAwLCA1MzQsIDU2NiwgNTk4LCA2MzAsIDY2MiwgNjk0LCA3MjYsIDc1OCwgNzkwLCA4MjIsXG4gIDg1NCwgODg2LCA5MjAsIDk1MiwgOTg0LCAxMDE2LCAxMDQ4LCAxMDgwXG5dKTtcblxuZnVuY3Rpb24gRGVjb2RlV2luZG93Qml0cyhicikge1xuICB2YXIgbjtcbiAgaWYgKGJyLnJlYWRCaXRzKDEpID09PSAwKSB7XG4gICAgcmV0dXJuIDE2O1xuICB9XG4gIFxuICBuID0gYnIucmVhZEJpdHMoMyk7XG4gIGlmIChuID4gMCkge1xuICAgIHJldHVybiAxNyArIG47XG4gIH1cbiAgXG4gIG4gPSBici5yZWFkQml0cygzKTtcbiAgaWYgKG4gPiAwKSB7XG4gICAgcmV0dXJuIDggKyBuO1xuICB9XG4gIFxuICByZXR1cm4gMTc7XG59XG5cbi8qIERlY29kZXMgYSBudW1iZXIgaW4gdGhlIHJhbmdlIFswLi4yNTVdLCBieSByZWFkaW5nIDEgLSAxMSBiaXRzLiAqL1xuZnVuY3Rpb24gRGVjb2RlVmFyTGVuVWludDgoYnIpIHtcbiAgaWYgKGJyLnJlYWRCaXRzKDEpKSB7XG4gICAgdmFyIG5iaXRzID0gYnIucmVhZEJpdHMoMyk7XG4gICAgaWYgKG5iaXRzID09PSAwKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJyLnJlYWRCaXRzKG5iaXRzKSArICgxIDw8IG5iaXRzKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIDA7XG59XG5cbmZ1bmN0aW9uIE1ldGFCbG9ja0xlbmd0aCgpIHtcbiAgdGhpcy5tZXRhX2Jsb2NrX2xlbmd0aCA9IDA7XG4gIHRoaXMuaW5wdXRfZW5kID0gMDtcbiAgdGhpcy5pc191bmNvbXByZXNzZWQgPSAwO1xuICB0aGlzLmlzX21ldGFkYXRhID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIERlY29kZU1ldGFCbG9ja0xlbmd0aChicikge1xuICB2YXIgb3V0ID0gbmV3IE1ldGFCbG9ja0xlbmd0aDsgIFxuICB2YXIgc2l6ZV9uaWJibGVzO1xuICB2YXIgc2l6ZV9ieXRlcztcbiAgdmFyIGk7XG4gIFxuICBvdXQuaW5wdXRfZW5kID0gYnIucmVhZEJpdHMoMSk7XG4gIGlmIChvdXQuaW5wdXRfZW5kICYmIGJyLnJlYWRCaXRzKDEpKSB7XG4gICAgcmV0dXJuIG91dDtcbiAgfVxuICBcbiAgc2l6ZV9uaWJibGVzID0gYnIucmVhZEJpdHMoMikgKyA0O1xuICBpZiAoc2l6ZV9uaWJibGVzID09PSA3KSB7XG4gICAgb3V0LmlzX21ldGFkYXRhID0gdHJ1ZTtcbiAgICBcbiAgICBpZiAoYnIucmVhZEJpdHMoMSkgIT09IDApXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcmVzZXJ2ZWQgYml0Jyk7XG4gICAgXG4gICAgc2l6ZV9ieXRlcyA9IGJyLnJlYWRCaXRzKDIpO1xuICAgIGlmIChzaXplX2J5dGVzID09PSAwKVxuICAgICAgcmV0dXJuIG91dDtcbiAgICBcbiAgICBmb3IgKGkgPSAwOyBpIDwgc2l6ZV9ieXRlczsgaSsrKSB7XG4gICAgICB2YXIgbmV4dF9ieXRlID0gYnIucmVhZEJpdHMoOCk7XG4gICAgICBpZiAoaSArIDEgPT09IHNpemVfYnl0ZXMgJiYgc2l6ZV9ieXRlcyA+IDEgJiYgbmV4dF9ieXRlID09PSAwKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc2l6ZSBieXRlJyk7XG4gICAgICBcbiAgICAgIG91dC5tZXRhX2Jsb2NrX2xlbmd0aCB8PSBuZXh0X2J5dGUgPDwgKGkgKiA4KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yIChpID0gMDsgaSA8IHNpemVfbmliYmxlczsgKytpKSB7XG4gICAgICB2YXIgbmV4dF9uaWJibGUgPSBici5yZWFkQml0cyg0KTtcbiAgICAgIGlmIChpICsgMSA9PT0gc2l6ZV9uaWJibGVzICYmIHNpemVfbmliYmxlcyA+IDQgJiYgbmV4dF9uaWJibGUgPT09IDApXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzaXplIG5pYmJsZScpO1xuICAgICAgXG4gICAgICBvdXQubWV0YV9ibG9ja19sZW5ndGggfD0gbmV4dF9uaWJibGUgPDwgKGkgKiA0KTtcbiAgICB9XG4gIH1cbiAgXG4gICsrb3V0Lm1ldGFfYmxvY2tfbGVuZ3RoO1xuICBcbiAgaWYgKCFvdXQuaW5wdXRfZW5kICYmICFvdXQuaXNfbWV0YWRhdGEpIHtcbiAgICBvdXQuaXNfdW5jb21wcmVzc2VkID0gYnIucmVhZEJpdHMoMSk7XG4gIH1cbiAgXG4gIHJldHVybiBvdXQ7XG59XG5cbi8qIERlY29kZXMgdGhlIG5leHQgSHVmZm1hbiBjb2RlIGZyb20gYml0LXN0cmVhbS4gKi9cbmZ1bmN0aW9uIFJlYWRTeW1ib2wodGFibGUsIGluZGV4LCBicikge1xuICB2YXIgc3RhcnRfaW5kZXggPSBpbmRleDtcbiAgXG4gIHZhciBuYml0cztcbiAgYnIuZmlsbEJpdFdpbmRvdygpO1xuICBpbmRleCArPSAoYnIudmFsXyA+Pj4gYnIuYml0X3Bvc18pICYgSFVGRk1BTl9UQUJMRV9NQVNLO1xuICBuYml0cyA9IHRhYmxlW2luZGV4XS5iaXRzIC0gSFVGRk1BTl9UQUJMRV9CSVRTO1xuICBpZiAobmJpdHMgPiAwKSB7XG4gICAgYnIuYml0X3Bvc18gKz0gSFVGRk1BTl9UQUJMRV9CSVRTO1xuICAgIGluZGV4ICs9IHRhYmxlW2luZGV4XS52YWx1ZTtcbiAgICBpbmRleCArPSAoYnIudmFsXyA+Pj4gYnIuYml0X3Bvc18pICYgKCgxIDw8IG5iaXRzKSAtIDEpO1xuICB9XG4gIGJyLmJpdF9wb3NfICs9IHRhYmxlW2luZGV4XS5iaXRzO1xuICByZXR1cm4gdGFibGVbaW5kZXhdLnZhbHVlO1xufVxuXG5mdW5jdGlvbiBSZWFkSHVmZm1hbkNvZGVMZW5ndGhzKGNvZGVfbGVuZ3RoX2NvZGVfbGVuZ3RocywgbnVtX3N5bWJvbHMsIGNvZGVfbGVuZ3RocywgYnIpIHtcbiAgdmFyIHN5bWJvbCA9IDA7XG4gIHZhciBwcmV2X2NvZGVfbGVuID0ga0RlZmF1bHRDb2RlTGVuZ3RoO1xuICB2YXIgcmVwZWF0ID0gMDtcbiAgdmFyIHJlcGVhdF9jb2RlX2xlbiA9IDA7XG4gIHZhciBzcGFjZSA9IDMyNzY4O1xuICBcbiAgdmFyIHRhYmxlID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMzI7IGkrKylcbiAgICB0YWJsZS5wdXNoKG5ldyBIdWZmbWFuQ29kZSgwLCAwKSk7XG4gIFxuICBCcm90bGlCdWlsZEh1ZmZtYW5UYWJsZSh0YWJsZSwgMCwgNSwgY29kZV9sZW5ndGhfY29kZV9sZW5ndGhzLCBDT0RFX0xFTkdUSF9DT0RFUyk7XG5cbiAgd2hpbGUgKHN5bWJvbCA8IG51bV9zeW1ib2xzICYmIHNwYWNlID4gMCkge1xuICAgIHZhciBwID0gMDtcbiAgICB2YXIgY29kZV9sZW47XG4gICAgXG4gICAgYnIucmVhZE1vcmVJbnB1dCgpO1xuICAgIGJyLmZpbGxCaXRXaW5kb3coKTtcbiAgICBwICs9IChici52YWxfID4+PiBici5iaXRfcG9zXykgJiAzMTtcbiAgICBici5iaXRfcG9zXyArPSB0YWJsZVtwXS5iaXRzO1xuICAgIGNvZGVfbGVuID0gdGFibGVbcF0udmFsdWUgJiAweGZmO1xuICAgIGlmIChjb2RlX2xlbiA8IGtDb2RlTGVuZ3RoUmVwZWF0Q29kZSkge1xuICAgICAgcmVwZWF0ID0gMDtcbiAgICAgIGNvZGVfbGVuZ3Roc1tzeW1ib2wrK10gPSBjb2RlX2xlbjtcbiAgICAgIGlmIChjb2RlX2xlbiAhPT0gMCkge1xuICAgICAgICBwcmV2X2NvZGVfbGVuID0gY29kZV9sZW47XG4gICAgICAgIHNwYWNlIC09IDMyNzY4ID4+IGNvZGVfbGVuO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZXh0cmFfYml0cyA9IGNvZGVfbGVuIC0gMTQ7XG4gICAgICB2YXIgb2xkX3JlcGVhdDtcbiAgICAgIHZhciByZXBlYXRfZGVsdGE7XG4gICAgICB2YXIgbmV3X2xlbiA9IDA7XG4gICAgICBpZiAoY29kZV9sZW4gPT09IGtDb2RlTGVuZ3RoUmVwZWF0Q29kZSkge1xuICAgICAgICBuZXdfbGVuID0gcHJldl9jb2RlX2xlbjtcbiAgICAgIH1cbiAgICAgIGlmIChyZXBlYXRfY29kZV9sZW4gIT09IG5ld19sZW4pIHtcbiAgICAgICAgcmVwZWF0ID0gMDtcbiAgICAgICAgcmVwZWF0X2NvZGVfbGVuID0gbmV3X2xlbjtcbiAgICAgIH1cbiAgICAgIG9sZF9yZXBlYXQgPSByZXBlYXQ7XG4gICAgICBpZiAocmVwZWF0ID4gMCkge1xuICAgICAgICByZXBlYXQgLT0gMjtcbiAgICAgICAgcmVwZWF0IDw8PSBleHRyYV9iaXRzO1xuICAgICAgfVxuICAgICAgcmVwZWF0ICs9IGJyLnJlYWRCaXRzKGV4dHJhX2JpdHMpICsgMztcbiAgICAgIHJlcGVhdF9kZWx0YSA9IHJlcGVhdCAtIG9sZF9yZXBlYXQ7XG4gICAgICBpZiAoc3ltYm9sICsgcmVwZWF0X2RlbHRhID4gbnVtX3N5bWJvbHMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbUmVhZEh1ZmZtYW5Db2RlTGVuZ3Roc10gc3ltYm9sICsgcmVwZWF0X2RlbHRhID4gbnVtX3N5bWJvbHMnKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCByZXBlYXRfZGVsdGE7IHgrKylcbiAgICAgICAgY29kZV9sZW5ndGhzW3N5bWJvbCArIHhdID0gcmVwZWF0X2NvZGVfbGVuO1xuICAgICAgXG4gICAgICBzeW1ib2wgKz0gcmVwZWF0X2RlbHRhO1xuICAgICAgXG4gICAgICBpZiAocmVwZWF0X2NvZGVfbGVuICE9PSAwKSB7XG4gICAgICAgIHNwYWNlIC09IHJlcGVhdF9kZWx0YSA8PCAoMTUgLSByZXBlYXRfY29kZV9sZW4pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoc3BhY2UgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJbUmVhZEh1ZmZtYW5Db2RlTGVuZ3Roc10gc3BhY2UgPSBcIiArIHNwYWNlKTtcbiAgfVxuICBcbiAgZm9yICg7IHN5bWJvbCA8IG51bV9zeW1ib2xzOyBzeW1ib2wrKylcbiAgICBjb2RlX2xlbmd0aHNbc3ltYm9sXSA9IDA7XG59XG5cbmZ1bmN0aW9uIFJlYWRIdWZmbWFuQ29kZShhbHBoYWJldF9zaXplLCB0YWJsZXMsIHRhYmxlLCBicikge1xuICB2YXIgdGFibGVfc2l6ZSA9IDA7XG4gIHZhciBzaW1wbGVfY29kZV9vcl9za2lwO1xuICB2YXIgY29kZV9sZW5ndGhzID0gbmV3IFVpbnQ4QXJyYXkoYWxwaGFiZXRfc2l6ZSk7XG4gIFxuICBici5yZWFkTW9yZUlucHV0KCk7XG4gIFxuICAvKiBzaW1wbGVfY29kZV9vcl9za2lwIGlzIHVzZWQgYXMgZm9sbG93czpcbiAgICAgMSBmb3Igc2ltcGxlIGNvZGU7XG4gICAgIDAgZm9yIG5vIHNraXBwaW5nLCAyIHNraXBzIDIgY29kZSBsZW5ndGhzLCAzIHNraXBzIDMgY29kZSBsZW5ndGhzICovXG4gIHNpbXBsZV9jb2RlX29yX3NraXAgPSBici5yZWFkQml0cygyKTtcbiAgaWYgKHNpbXBsZV9jb2RlX29yX3NraXAgPT09IDEpIHtcbiAgICAvKiBSZWFkIHN5bWJvbHMsIGNvZGVzICYgY29kZSBsZW5ndGhzIGRpcmVjdGx5LiAqL1xuICAgIHZhciBpO1xuICAgIHZhciBtYXhfYml0c19jb3VudGVyID0gYWxwaGFiZXRfc2l6ZSAtIDE7XG4gICAgdmFyIG1heF9iaXRzID0gMDtcbiAgICB2YXIgc3ltYm9scyA9IG5ldyBJbnQzMkFycmF5KDQpO1xuICAgIHZhciBudW1fc3ltYm9scyA9IGJyLnJlYWRCaXRzKDIpICsgMTtcbiAgICB3aGlsZSAobWF4X2JpdHNfY291bnRlcikge1xuICAgICAgbWF4X2JpdHNfY291bnRlciA+Pj0gMTtcbiAgICAgICsrbWF4X2JpdHM7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IG51bV9zeW1ib2xzOyArK2kpIHtcbiAgICAgIHN5bWJvbHNbaV0gPSBici5yZWFkQml0cyhtYXhfYml0cykgJSBhbHBoYWJldF9zaXplO1xuICAgICAgY29kZV9sZW5ndGhzW3N5bWJvbHNbaV1dID0gMjtcbiAgICB9XG4gICAgY29kZV9sZW5ndGhzW3N5bWJvbHNbMF1dID0gMTtcbiAgICBzd2l0Y2ggKG51bV9zeW1ib2xzKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICBpZiAoKHN5bWJvbHNbMF0gPT09IHN5bWJvbHNbMV0pIHx8XG4gICAgICAgICAgICAoc3ltYm9sc1swXSA9PT0gc3ltYm9sc1syXSkgfHxcbiAgICAgICAgICAgIChzeW1ib2xzWzFdID09PSBzeW1ib2xzWzJdKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignW1JlYWRIdWZmbWFuQ29kZV0gaW52YWxpZCBzeW1ib2xzJyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGlmIChzeW1ib2xzWzBdID09PSBzeW1ib2xzWzFdKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbUmVhZEh1ZmZtYW5Db2RlXSBpbnZhbGlkIHN5bWJvbHMnKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29kZV9sZW5ndGhzW3N5bWJvbHNbMV1dID0gMTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDQ6XG4gICAgICAgIGlmICgoc3ltYm9sc1swXSA9PT0gc3ltYm9sc1sxXSkgfHxcbiAgICAgICAgICAgIChzeW1ib2xzWzBdID09PSBzeW1ib2xzWzJdKSB8fFxuICAgICAgICAgICAgKHN5bWJvbHNbMF0gPT09IHN5bWJvbHNbM10pIHx8XG4gICAgICAgICAgICAoc3ltYm9sc1sxXSA9PT0gc3ltYm9sc1syXSkgfHxcbiAgICAgICAgICAgIChzeW1ib2xzWzFdID09PSBzeW1ib2xzWzNdKSB8fFxuICAgICAgICAgICAgKHN5bWJvbHNbMl0gPT09IHN5bWJvbHNbM10pKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbUmVhZEh1ZmZtYW5Db2RlXSBpbnZhbGlkIHN5bWJvbHMnKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKGJyLnJlYWRCaXRzKDEpKSB7XG4gICAgICAgICAgY29kZV9sZW5ndGhzW3N5bWJvbHNbMl1dID0gMztcbiAgICAgICAgICBjb2RlX2xlbmd0aHNbc3ltYm9sc1szXV0gPSAzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvZGVfbGVuZ3Roc1tzeW1ib2xzWzBdXSA9IDI7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9IGVsc2UgeyAgLyogRGVjb2RlIEh1ZmZtYW4tY29kZWQgY29kZSBsZW5ndGhzLiAqL1xuICAgIHZhciBpO1xuICAgIHZhciBjb2RlX2xlbmd0aF9jb2RlX2xlbmd0aHMgPSBuZXcgVWludDhBcnJheShDT0RFX0xFTkdUSF9DT0RFUyk7XG4gICAgdmFyIHNwYWNlID0gMzI7XG4gICAgdmFyIG51bV9jb2RlcyA9IDA7XG4gICAgLyogU3RhdGljIEh1ZmZtYW4gY29kZSBmb3IgdGhlIGNvZGUgbGVuZ3RoIGNvZGUgbGVuZ3RocyAqL1xuICAgIHZhciBodWZmID0gW1xuICAgICAgbmV3IEh1ZmZtYW5Db2RlKDIsIDApLCBuZXcgSHVmZm1hbkNvZGUoMiwgNCksIG5ldyBIdWZmbWFuQ29kZSgyLCAzKSwgbmV3IEh1ZmZtYW5Db2RlKDMsIDIpLCBcbiAgICAgIG5ldyBIdWZmbWFuQ29kZSgyLCAwKSwgbmV3IEh1ZmZtYW5Db2RlKDIsIDQpLCBuZXcgSHVmZm1hbkNvZGUoMiwgMyksIG5ldyBIdWZmbWFuQ29kZSg0LCAxKSxcbiAgICAgIG5ldyBIdWZmbWFuQ29kZSgyLCAwKSwgbmV3IEh1ZmZtYW5Db2RlKDIsIDQpLCBuZXcgSHVmZm1hbkNvZGUoMiwgMyksIG5ldyBIdWZmbWFuQ29kZSgzLCAyKSwgXG4gICAgICBuZXcgSHVmZm1hbkNvZGUoMiwgMCksIG5ldyBIdWZmbWFuQ29kZSgyLCA0KSwgbmV3IEh1ZmZtYW5Db2RlKDIsIDMpLCBuZXcgSHVmZm1hbkNvZGUoNCwgNSlcbiAgICBdO1xuICAgIGZvciAoaSA9IHNpbXBsZV9jb2RlX29yX3NraXA7IGkgPCBDT0RFX0xFTkdUSF9DT0RFUyAmJiBzcGFjZSA+IDA7ICsraSkge1xuICAgICAgdmFyIGNvZGVfbGVuX2lkeCA9IGtDb2RlTGVuZ3RoQ29kZU9yZGVyW2ldO1xuICAgICAgdmFyIHAgPSAwO1xuICAgICAgdmFyIHY7XG4gICAgICBici5maWxsQml0V2luZG93KCk7XG4gICAgICBwICs9IChici52YWxfID4+PiBici5iaXRfcG9zXykgJiAxNTtcbiAgICAgIGJyLmJpdF9wb3NfICs9IGh1ZmZbcF0uYml0cztcbiAgICAgIHYgPSBodWZmW3BdLnZhbHVlO1xuICAgICAgY29kZV9sZW5ndGhfY29kZV9sZW5ndGhzW2NvZGVfbGVuX2lkeF0gPSB2O1xuICAgICAgaWYgKHYgIT09IDApIHtcbiAgICAgICAgc3BhY2UgLT0gKDMyID4+IHYpO1xuICAgICAgICArK251bV9jb2RlcztcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgaWYgKCEobnVtX2NvZGVzID09PSAxIHx8IHNwYWNlID09PSAwKSlcbiAgICAgIHRocm93IG5ldyBFcnJvcignW1JlYWRIdWZmbWFuQ29kZV0gaW52YWxpZCBudW1fY29kZXMgb3Igc3BhY2UnKTtcbiAgICBcbiAgICBSZWFkSHVmZm1hbkNvZGVMZW5ndGhzKGNvZGVfbGVuZ3RoX2NvZGVfbGVuZ3RocywgYWxwaGFiZXRfc2l6ZSwgY29kZV9sZW5ndGhzLCBicik7XG4gIH1cbiAgXG4gIHRhYmxlX3NpemUgPSBCcm90bGlCdWlsZEh1ZmZtYW5UYWJsZSh0YWJsZXMsIHRhYmxlLCBIVUZGTUFOX1RBQkxFX0JJVFMsIGNvZGVfbGVuZ3RocywgYWxwaGFiZXRfc2l6ZSk7XG4gIFxuICBpZiAodGFibGVfc2l6ZSA9PT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIltSZWFkSHVmZm1hbkNvZGVdIEJ1aWxkSHVmZm1hblRhYmxlIGZhaWxlZDogXCIpO1xuICB9XG4gIFxuICByZXR1cm4gdGFibGVfc2l6ZTtcbn1cblxuZnVuY3Rpb24gUmVhZEJsb2NrTGVuZ3RoKHRhYmxlLCBpbmRleCwgYnIpIHtcbiAgdmFyIGNvZGU7XG4gIHZhciBuYml0cztcbiAgY29kZSA9IFJlYWRTeW1ib2wodGFibGUsIGluZGV4LCBicik7XG4gIG5iaXRzID0gUHJlZml4LmtCbG9ja0xlbmd0aFByZWZpeENvZGVbY29kZV0ubmJpdHM7XG4gIHJldHVybiBQcmVmaXgua0Jsb2NrTGVuZ3RoUHJlZml4Q29kZVtjb2RlXS5vZmZzZXQgKyBici5yZWFkQml0cyhuYml0cyk7XG59XG5cbmZ1bmN0aW9uIFRyYW5zbGF0ZVNob3J0Q29kZXMoY29kZSwgcmluZ2J1ZmZlciwgaW5kZXgpIHtcbiAgdmFyIHZhbDtcbiAgaWYgKGNvZGUgPCBOVU1fRElTVEFOQ0VfU0hPUlRfQ09ERVMpIHtcbiAgICBpbmRleCArPSBrRGlzdGFuY2VTaG9ydENvZGVJbmRleE9mZnNldFtjb2RlXTtcbiAgICBpbmRleCAmPSAzO1xuICAgIHZhbCA9IHJpbmdidWZmZXJbaW5kZXhdICsga0Rpc3RhbmNlU2hvcnRDb2RlVmFsdWVPZmZzZXRbY29kZV07XG4gIH0gZWxzZSB7XG4gICAgdmFsID0gY29kZSAtIE5VTV9ESVNUQU5DRV9TSE9SVF9DT0RFUyArIDE7XG4gIH1cbiAgcmV0dXJuIHZhbDtcbn1cblxuZnVuY3Rpb24gTW92ZVRvRnJvbnQodiwgaW5kZXgpIHtcbiAgdmFyIHZhbHVlID0gdltpbmRleF07XG4gIHZhciBpID0gaW5kZXg7XG4gIGZvciAoOyBpOyAtLWkpIHZbaV0gPSB2W2kgLSAxXTtcbiAgdlswXSA9IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBJbnZlcnNlTW92ZVRvRnJvbnRUcmFuc2Zvcm0odiwgdl9sZW4pIHtcbiAgdmFyIG10ZiA9IG5ldyBVaW50OEFycmF5KDI1Nik7XG4gIHZhciBpO1xuICBmb3IgKGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgICBtdGZbaV0gPSBpO1xuICB9XG4gIGZvciAoaSA9IDA7IGkgPCB2X2xlbjsgKytpKSB7XG4gICAgdmFyIGluZGV4ID0gdltpXTtcbiAgICB2W2ldID0gbXRmW2luZGV4XTtcbiAgICBpZiAoaW5kZXgpIE1vdmVUb0Zyb250KG10ZiwgaW5kZXgpO1xuICB9XG59XG5cbi8qIENvbnRhaW5zIGEgY29sbGVjdGlvbiBvZiBodWZmbWFuIHRyZWVzIHdpdGggdGhlIHNhbWUgYWxwaGFiZXQgc2l6ZS4gKi9cbmZ1bmN0aW9uIEh1ZmZtYW5UcmVlR3JvdXAoYWxwaGFiZXRfc2l6ZSwgbnVtX2h0cmVlcykge1xuICB0aGlzLmFscGhhYmV0X3NpemUgPSBhbHBoYWJldF9zaXplO1xuICB0aGlzLm51bV9odHJlZXMgPSBudW1faHRyZWVzO1xuICB0aGlzLmNvZGVzID0gbmV3IEFycmF5KG51bV9odHJlZXMgKyBudW1faHRyZWVzICoga01heEh1ZmZtYW5UYWJsZVNpemVbKGFscGhhYmV0X3NpemUgKyAzMSkgPj4+IDVdKTsgIFxuICB0aGlzLmh0cmVlcyA9IG5ldyBVaW50MzJBcnJheShudW1faHRyZWVzKTtcbn1cblxuSHVmZm1hblRyZWVHcm91cC5wcm90b3R5cGUuZGVjb2RlID0gZnVuY3Rpb24oYnIpIHtcbiAgdmFyIGk7XG4gIHZhciB0YWJsZV9zaXplO1xuICB2YXIgbmV4dCA9IDA7XG4gIGZvciAoaSA9IDA7IGkgPCB0aGlzLm51bV9odHJlZXM7ICsraSkge1xuICAgIHRoaXMuaHRyZWVzW2ldID0gbmV4dDtcbiAgICB0YWJsZV9zaXplID0gUmVhZEh1ZmZtYW5Db2RlKHRoaXMuYWxwaGFiZXRfc2l6ZSwgdGhpcy5jb2RlcywgbmV4dCwgYnIpO1xuICAgIG5leHQgKz0gdGFibGVfc2l6ZTtcbiAgfVxufTtcblxuZnVuY3Rpb24gRGVjb2RlQ29udGV4dE1hcChjb250ZXh0X21hcF9zaXplLCBicikge1xuICB2YXIgb3V0ID0geyBudW1faHRyZWVzOiBudWxsLCBjb250ZXh0X21hcDogbnVsbCB9O1xuICB2YXIgdXNlX3JsZV9mb3JfemVyb3M7XG4gIHZhciBtYXhfcnVuX2xlbmd0aF9wcmVmaXggPSAwO1xuICB2YXIgdGFibGU7XG4gIHZhciBpO1xuICBcbiAgYnIucmVhZE1vcmVJbnB1dCgpO1xuICB2YXIgbnVtX2h0cmVlcyA9IG91dC5udW1faHRyZWVzID0gRGVjb2RlVmFyTGVuVWludDgoYnIpICsgMTtcblxuICB2YXIgY29udGV4dF9tYXAgPSBvdXQuY29udGV4dF9tYXAgPSBuZXcgVWludDhBcnJheShjb250ZXh0X21hcF9zaXplKTtcbiAgaWYgKG51bV9odHJlZXMgPD0gMSkge1xuICAgIHJldHVybiBvdXQ7XG4gIH1cblxuICB1c2VfcmxlX2Zvcl96ZXJvcyA9IGJyLnJlYWRCaXRzKDEpO1xuICBpZiAodXNlX3JsZV9mb3JfemVyb3MpIHtcbiAgICBtYXhfcnVuX2xlbmd0aF9wcmVmaXggPSBici5yZWFkQml0cyg0KSArIDE7XG4gIH1cbiAgXG4gIHRhYmxlID0gW107XG4gIGZvciAoaSA9IDA7IGkgPCBIVUZGTUFOX01BWF9UQUJMRV9TSVpFOyBpKyspIHtcbiAgICB0YWJsZVtpXSA9IG5ldyBIdWZmbWFuQ29kZSgwLCAwKTtcbiAgfVxuICBcbiAgUmVhZEh1ZmZtYW5Db2RlKG51bV9odHJlZXMgKyBtYXhfcnVuX2xlbmd0aF9wcmVmaXgsIHRhYmxlLCAwLCBicik7XG4gIFxuICBmb3IgKGkgPSAwOyBpIDwgY29udGV4dF9tYXBfc2l6ZTspIHtcbiAgICB2YXIgY29kZTtcblxuICAgIGJyLnJlYWRNb3JlSW5wdXQoKTtcbiAgICBjb2RlID0gUmVhZFN5bWJvbCh0YWJsZSwgMCwgYnIpO1xuICAgIGlmIChjb2RlID09PSAwKSB7XG4gICAgICBjb250ZXh0X21hcFtpXSA9IDA7XG4gICAgICArK2k7XG4gICAgfSBlbHNlIGlmIChjb2RlIDw9IG1heF9ydW5fbGVuZ3RoX3ByZWZpeCkge1xuICAgICAgdmFyIHJlcHMgPSAxICsgKDEgPDwgY29kZSkgKyBici5yZWFkQml0cyhjb2RlKTtcbiAgICAgIHdoaWxlICgtLXJlcHMpIHtcbiAgICAgICAgaWYgKGkgPj0gY29udGV4dF9tYXBfc2l6ZSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIltEZWNvZGVDb250ZXh0TWFwXSBpID49IGNvbnRleHRfbWFwX3NpemVcIik7XG4gICAgICAgIH1cbiAgICAgICAgY29udGV4dF9tYXBbaV0gPSAwO1xuICAgICAgICArK2k7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRleHRfbWFwW2ldID0gY29kZSAtIG1heF9ydW5fbGVuZ3RoX3ByZWZpeDtcbiAgICAgICsraTtcbiAgICB9XG4gIH1cbiAgaWYgKGJyLnJlYWRCaXRzKDEpKSB7XG4gICAgSW52ZXJzZU1vdmVUb0Zyb250VHJhbnNmb3JtKGNvbnRleHRfbWFwLCBjb250ZXh0X21hcF9zaXplKTtcbiAgfVxuICBcbiAgcmV0dXJuIG91dDtcbn1cblxuZnVuY3Rpb24gRGVjb2RlQmxvY2tUeXBlKG1heF9ibG9ja190eXBlLCB0cmVlcywgdHJlZV90eXBlLCBibG9ja190eXBlcywgcmluZ2J1ZmZlcnMsIGluZGV4ZXMsIGJyKSB7XG4gIHZhciByaW5nYnVmZmVyID0gdHJlZV90eXBlICogMjtcbiAgdmFyIGluZGV4ID0gdHJlZV90eXBlO1xuICB2YXIgdHlwZV9jb2RlID0gUmVhZFN5bWJvbCh0cmVlcywgdHJlZV90eXBlICogSFVGRk1BTl9NQVhfVEFCTEVfU0laRSwgYnIpO1xuICB2YXIgYmxvY2tfdHlwZTtcbiAgaWYgKHR5cGVfY29kZSA9PT0gMCkge1xuICAgIGJsb2NrX3R5cGUgPSByaW5nYnVmZmVyc1tyaW5nYnVmZmVyICsgKGluZGV4ZXNbaW5kZXhdICYgMSldO1xuICB9IGVsc2UgaWYgKHR5cGVfY29kZSA9PT0gMSkge1xuICAgIGJsb2NrX3R5cGUgPSByaW5nYnVmZmVyc1tyaW5nYnVmZmVyICsgKChpbmRleGVzW2luZGV4XSAtIDEpICYgMSldICsgMTtcbiAgfSBlbHNlIHtcbiAgICBibG9ja190eXBlID0gdHlwZV9jb2RlIC0gMjtcbiAgfVxuICBpZiAoYmxvY2tfdHlwZSA+PSBtYXhfYmxvY2tfdHlwZSkge1xuICAgIGJsb2NrX3R5cGUgLT0gbWF4X2Jsb2NrX3R5cGU7XG4gIH1cbiAgYmxvY2tfdHlwZXNbdHJlZV90eXBlXSA9IGJsb2NrX3R5cGU7XG4gIHJpbmdidWZmZXJzW3JpbmdidWZmZXIgKyAoaW5kZXhlc1tpbmRleF0gJiAxKV0gPSBibG9ja190eXBlO1xuICArK2luZGV4ZXNbaW5kZXhdO1xufVxuXG5mdW5jdGlvbiBDb3B5VW5jb21wcmVzc2VkQmxvY2tUb091dHB1dChvdXRwdXQsIGxlbiwgcG9zLCByaW5nYnVmZmVyLCByaW5nYnVmZmVyX21hc2ssIGJyKSB7XG4gIHZhciByYl9zaXplID0gcmluZ2J1ZmZlcl9tYXNrICsgMTtcbiAgdmFyIHJiX3BvcyA9IHBvcyAmIHJpbmdidWZmZXJfbWFzaztcbiAgdmFyIGJyX3BvcyA9IGJyLnBvc18gJiBCcm90bGlCaXRSZWFkZXIuSUJVRl9NQVNLO1xuICB2YXIgbmJ5dGVzO1xuXG4gIC8qIEZvciBzaG9ydCBsZW5ndGhzIGNvcHkgYnl0ZS1ieS1ieXRlICovXG4gIGlmIChsZW4gPCA4IHx8IGJyLmJpdF9wb3NfICsgKGxlbiA8PCAzKSA8IGJyLmJpdF9lbmRfcG9zXykge1xuICAgIHdoaWxlIChsZW4tLSA+IDApIHtcbiAgICAgIGJyLnJlYWRNb3JlSW5wdXQoKTtcbiAgICAgIHJpbmdidWZmZXJbcmJfcG9zKytdID0gYnIucmVhZEJpdHMoOCk7XG4gICAgICBpZiAocmJfcG9zID09PSByYl9zaXplKSB7XG4gICAgICAgIG91dHB1dC53cml0ZShyaW5nYnVmZmVyLCByYl9zaXplKTtcbiAgICAgICAgcmJfcG9zID0gMDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGJyLmJpdF9lbmRfcG9zXyA8IDMyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdbQ29weVVuY29tcHJlc3NlZEJsb2NrVG9PdXRwdXRdIGJyLmJpdF9lbmRfcG9zXyA8IDMyJyk7XG4gIH1cblxuICAvKiBDb3B5IHJlbWFpbmluZyAwLTQgYnl0ZXMgZnJvbSBici52YWxfIHRvIHJpbmdidWZmZXIuICovXG4gIHdoaWxlIChici5iaXRfcG9zXyA8IDMyKSB7XG4gICAgcmluZ2J1ZmZlcltyYl9wb3NdID0gKGJyLnZhbF8gPj4+IGJyLmJpdF9wb3NfKTtcbiAgICBici5iaXRfcG9zXyArPSA4O1xuICAgICsrcmJfcG9zO1xuICAgIC0tbGVuO1xuICB9XG5cbiAgLyogQ29weSByZW1haW5pbmcgYnl0ZXMgZnJvbSBici5idWZfIHRvIHJpbmdidWZmZXIuICovXG4gIG5ieXRlcyA9IChici5iaXRfZW5kX3Bvc18gLSBici5iaXRfcG9zXykgPj4gMztcbiAgaWYgKGJyX3BvcyArIG5ieXRlcyA+IEJyb3RsaUJpdFJlYWRlci5JQlVGX01BU0spIHtcbiAgICB2YXIgdGFpbCA9IEJyb3RsaUJpdFJlYWRlci5JQlVGX01BU0sgKyAxIC0gYnJfcG9zO1xuICAgIGZvciAodmFyIHggPSAwOyB4IDwgdGFpbDsgeCsrKVxuICAgICAgcmluZ2J1ZmZlcltyYl9wb3MgKyB4XSA9IGJyLmJ1Zl9bYnJfcG9zICsgeF07XG4gICAgXG4gICAgbmJ5dGVzIC09IHRhaWw7XG4gICAgcmJfcG9zICs9IHRhaWw7XG4gICAgbGVuIC09IHRhaWw7XG4gICAgYnJfcG9zID0gMDtcbiAgfVxuXG4gIGZvciAodmFyIHggPSAwOyB4IDwgbmJ5dGVzOyB4KyspXG4gICAgcmluZ2J1ZmZlcltyYl9wb3MgKyB4XSA9IGJyLmJ1Zl9bYnJfcG9zICsgeF07XG4gIFxuICByYl9wb3MgKz0gbmJ5dGVzO1xuICBsZW4gLT0gbmJ5dGVzO1xuXG4gIC8qIElmIHdlIHdyb3RlIHBhc3QgdGhlIGxvZ2ljYWwgZW5kIG9mIHRoZSByaW5nYnVmZmVyLCBjb3B5IHRoZSB0YWlsIG9mIHRoZVxuICAgICByaW5nYnVmZmVyIHRvIGl0cyBiZWdpbm5pbmcgYW5kIGZsdXNoIHRoZSByaW5nYnVmZmVyIHRvIHRoZSBvdXRwdXQuICovXG4gIGlmIChyYl9wb3MgPj0gcmJfc2l6ZSkge1xuICAgIG91dHB1dC53cml0ZShyaW5nYnVmZmVyLCByYl9zaXplKTtcbiAgICByYl9wb3MgLT0gcmJfc2l6ZTsgICAgXG4gICAgZm9yICh2YXIgeCA9IDA7IHggPCByYl9wb3M7IHgrKylcbiAgICAgIHJpbmdidWZmZXJbeF0gPSByaW5nYnVmZmVyW3JiX3NpemUgKyB4XTtcbiAgfVxuXG4gIC8qIElmIHdlIGhhdmUgbW9yZSB0byBjb3B5IHRoYW4gdGhlIHJlbWFpbmluZyBzaXplIG9mIHRoZSByaW5nYnVmZmVyLCB0aGVuIHdlXG4gICAgIGZpcnN0IGZpbGwgdGhlIHJpbmdidWZmZXIgZnJvbSB0aGUgaW5wdXQgYW5kIHRoZW4gZmx1c2ggdGhlIHJpbmdidWZmZXIgdG9cbiAgICAgdGhlIG91dHB1dCAqL1xuICB3aGlsZSAocmJfcG9zICsgbGVuID49IHJiX3NpemUpIHtcbiAgICBuYnl0ZXMgPSByYl9zaXplIC0gcmJfcG9zO1xuICAgIGlmIChici5pbnB1dF8ucmVhZChyaW5nYnVmZmVyLCByYl9wb3MsIG5ieXRlcykgPCBuYnl0ZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW0NvcHlVbmNvbXByZXNzZWRCbG9ja1RvT3V0cHV0XSBub3QgZW5vdWdoIGJ5dGVzJyk7XG4gICAgfVxuICAgIG91dHB1dC53cml0ZShyaW5nYnVmZmVyLCByYl9zaXplKTtcbiAgICBsZW4gLT0gbmJ5dGVzO1xuICAgIHJiX3BvcyA9IDA7XG4gIH1cblxuICAvKiBDb3B5IHN0cmFpZ2h0IGZyb20gdGhlIGlucHV0IG9udG8gdGhlIHJpbmdidWZmZXIuIFRoZSByaW5nYnVmZmVyIHdpbGwgYmVcbiAgICAgZmx1c2hlZCB0byB0aGUgb3V0cHV0IGF0IGEgbGF0ZXIgdGltZS4gKi9cbiAgaWYgKGJyLmlucHV0Xy5yZWFkKHJpbmdidWZmZXIsIHJiX3BvcywgbGVuKSA8IGxlbikge1xuICAgIHRocm93IG5ldyBFcnJvcignW0NvcHlVbmNvbXByZXNzZWRCbG9ja1RvT3V0cHV0XSBub3QgZW5vdWdoIGJ5dGVzJyk7XG4gIH1cblxuICAvKiBSZXN0b3JlIHRoZSBzdGF0ZSBvZiB0aGUgYml0IHJlYWRlci4gKi9cbiAgYnIucmVzZXQoKTtcbn1cblxuLyogQWR2YW5jZXMgdGhlIGJpdCByZWFkZXIgcG9zaXRpb24gdG8gdGhlIG5leHQgYnl0ZSBib3VuZGFyeSBhbmQgdmVyaWZpZXNcbiAgIHRoYXQgYW55IHNraXBwZWQgYml0cyBhcmUgc2V0IHRvIHplcm8uICovXG5mdW5jdGlvbiBKdW1wVG9CeXRlQm91bmRhcnkoYnIpIHtcbiAgdmFyIG5ld19iaXRfcG9zID0gKGJyLmJpdF9wb3NfICsgNykgJiB+NztcbiAgdmFyIHBhZF9iaXRzID0gYnIucmVhZEJpdHMobmV3X2JpdF9wb3MgLSBici5iaXRfcG9zXyk7XG4gIHJldHVybiBwYWRfYml0cyA9PSAwO1xufVxuXG5mdW5jdGlvbiBCcm90bGlEZWNvbXByZXNzZWRTaXplKGJ1ZmZlcikge1xuICB2YXIgaW5wdXQgPSBuZXcgQnJvdGxpSW5wdXQoYnVmZmVyKTtcbiAgdmFyIGJyID0gbmV3IEJyb3RsaUJpdFJlYWRlcihpbnB1dCk7XG4gIERlY29kZVdpbmRvd0JpdHMoYnIpO1xuICB2YXIgb3V0ID0gRGVjb2RlTWV0YUJsb2NrTGVuZ3RoKGJyKTtcbiAgcmV0dXJuIG91dC5tZXRhX2Jsb2NrX2xlbmd0aDtcbn1cblxuZXhwb3J0cy5Ccm90bGlEZWNvbXByZXNzZWRTaXplID0gQnJvdGxpRGVjb21wcmVzc2VkU2l6ZTtcblxuZnVuY3Rpb24gQnJvdGxpRGVjb21wcmVzc0J1ZmZlcihidWZmZXIsIG91dHB1dF9zaXplKSB7XG4gIHZhciBpbnB1dCA9IG5ldyBCcm90bGlJbnB1dChidWZmZXIpO1xuICBcbiAgaWYgKG91dHB1dF9zaXplID09IG51bGwpIHtcbiAgICBvdXRwdXRfc2l6ZSA9IEJyb3RsaURlY29tcHJlc3NlZFNpemUoYnVmZmVyKTtcbiAgfVxuICBcbiAgdmFyIG91dHB1dF9idWZmZXIgPSBuZXcgVWludDhBcnJheShvdXRwdXRfc2l6ZSk7XG4gIHZhciBvdXRwdXQgPSBuZXcgQnJvdGxpT3V0cHV0KG91dHB1dF9idWZmZXIpO1xuICBcbiAgQnJvdGxpRGVjb21wcmVzcyhpbnB1dCwgb3V0cHV0KTtcbiAgXG4gIGlmIChvdXRwdXQucG9zIDwgb3V0cHV0LmJ1ZmZlci5sZW5ndGgpIHtcbiAgICBvdXRwdXQuYnVmZmVyID0gb3V0cHV0LmJ1ZmZlci5zdWJhcnJheSgwLCBvdXRwdXQucG9zKTtcbiAgfVxuICBcbiAgcmV0dXJuIG91dHB1dC5idWZmZXI7XG59XG5cbmV4cG9ydHMuQnJvdGxpRGVjb21wcmVzc0J1ZmZlciA9IEJyb3RsaURlY29tcHJlc3NCdWZmZXI7XG5cbmZ1bmN0aW9uIEJyb3RsaURlY29tcHJlc3MoaW5wdXQsIG91dHB1dCkge1xuICB2YXIgaTtcbiAgdmFyIHBvcyA9IDA7XG4gIHZhciBpbnB1dF9lbmQgPSAwO1xuICB2YXIgd2luZG93X2JpdHMgPSAwO1xuICB2YXIgbWF4X2JhY2t3YXJkX2Rpc3RhbmNlO1xuICB2YXIgbWF4X2Rpc3RhbmNlID0gMDtcbiAgdmFyIHJpbmdidWZmZXJfc2l6ZTtcbiAgdmFyIHJpbmdidWZmZXJfbWFzaztcbiAgdmFyIHJpbmdidWZmZXI7XG4gIHZhciByaW5nYnVmZmVyX2VuZDtcbiAgLyogVGhpcyByaW5nIGJ1ZmZlciBob2xkcyBhIGZldyBwYXN0IGNvcHkgZGlzdGFuY2VzIHRoYXQgd2lsbCBiZSB1c2VkIGJ5ICovXG4gIC8qIHNvbWUgc3BlY2lhbCBkaXN0YW5jZSBjb2Rlcy4gKi9cbiAgdmFyIGRpc3RfcmIgPSBbIDE2LCAxNSwgMTEsIDQgXTtcbiAgdmFyIGRpc3RfcmJfaWR4ID0gMDtcbiAgLyogVGhlIHByZXZpb3VzIDIgYnl0ZXMgdXNlZCBmb3IgY29udGV4dC4gKi9cbiAgdmFyIHByZXZfYnl0ZTEgPSAwO1xuICB2YXIgcHJldl9ieXRlMiA9IDA7XG4gIHZhciBoZ3JvdXAgPSBbbmV3IEh1ZmZtYW5UcmVlR3JvdXAoMCwgMCksIG5ldyBIdWZmbWFuVHJlZUdyb3VwKDAsIDApLCBuZXcgSHVmZm1hblRyZWVHcm91cCgwLCAwKV07XG4gIHZhciBibG9ja190eXBlX3RyZWVzO1xuICB2YXIgYmxvY2tfbGVuX3RyZWVzO1xuICB2YXIgYnI7XG5cbiAgLyogV2UgbmVlZCB0aGUgc2xhY2sgcmVnaW9uIGZvciB0aGUgZm9sbG93aW5nIHJlYXNvbnM6XG4gICAgICAgLSBhbHdheXMgZG9pbmcgdHdvIDgtYnl0ZSBjb3BpZXMgZm9yIGZhc3QgYmFja3dhcmQgY29weWluZ1xuICAgICAgIC0gdHJhbnNmb3Jtc1xuICAgICAgIC0gZmx1c2hpbmcgdGhlIGlucHV0IHJpbmdidWZmZXIgd2hlbiBkZWNvZGluZyB1bmNvbXByZXNzZWQgYmxvY2tzICovXG4gIHZhciBrUmluZ0J1ZmZlcldyaXRlQWhlYWRTbGFjayA9IDEyOCArIEJyb3RsaUJpdFJlYWRlci5SRUFEX1NJWkU7XG5cbiAgYnIgPSBuZXcgQnJvdGxpQml0UmVhZGVyKGlucHV0KTtcblxuICAvKiBEZWNvZGUgd2luZG93IHNpemUuICovXG4gIHdpbmRvd19iaXRzID0gRGVjb2RlV2luZG93Qml0cyhicik7XG4gIG1heF9iYWNrd2FyZF9kaXN0YW5jZSA9ICgxIDw8IHdpbmRvd19iaXRzKSAtIDE2O1xuXG4gIHJpbmdidWZmZXJfc2l6ZSA9IDEgPDwgd2luZG93X2JpdHM7XG4gIHJpbmdidWZmZXJfbWFzayA9IHJpbmdidWZmZXJfc2l6ZSAtIDE7XG4gIHJpbmdidWZmZXIgPSBuZXcgVWludDhBcnJheShyaW5nYnVmZmVyX3NpemUgKyBrUmluZ0J1ZmZlcldyaXRlQWhlYWRTbGFjayArIEJyb3RsaURpY3Rpb25hcnkubWF4RGljdGlvbmFyeVdvcmRMZW5ndGgpO1xuICByaW5nYnVmZmVyX2VuZCA9IHJpbmdidWZmZXJfc2l6ZTtcblxuICBibG9ja190eXBlX3RyZWVzID0gW107XG4gIGJsb2NrX2xlbl90cmVlcyA9IFtdO1xuICBmb3IgKHZhciB4ID0gMDsgeCA8IDMgKiBIVUZGTUFOX01BWF9UQUJMRV9TSVpFOyB4KyspIHtcbiAgICBibG9ja190eXBlX3RyZWVzW3hdID0gbmV3IEh1ZmZtYW5Db2RlKDAsIDApO1xuICAgIGJsb2NrX2xlbl90cmVlc1t4XSA9IG5ldyBIdWZmbWFuQ29kZSgwLCAwKTtcbiAgfVxuXG4gIHdoaWxlICghaW5wdXRfZW5kKSB7XG4gICAgdmFyIG1ldGFfYmxvY2tfcmVtYWluaW5nX2xlbiA9IDA7XG4gICAgdmFyIGlzX3VuY29tcHJlc3NlZDtcbiAgICB2YXIgYmxvY2tfbGVuZ3RoID0gWyAxIDw8IDI4LCAxIDw8IDI4LCAxIDw8IDI4IF07XG4gICAgdmFyIGJsb2NrX3R5cGUgPSBbIDAgXTtcbiAgICB2YXIgbnVtX2Jsb2NrX3R5cGVzID0gWyAxLCAxLCAxIF07XG4gICAgdmFyIGJsb2NrX3R5cGVfcmIgPSBbIDAsIDEsIDAsIDEsIDAsIDEgXTtcbiAgICB2YXIgYmxvY2tfdHlwZV9yYl9pbmRleCA9IFsgMCBdO1xuICAgIHZhciBkaXN0YW5jZV9wb3N0Zml4X2JpdHM7XG4gICAgdmFyIG51bV9kaXJlY3RfZGlzdGFuY2VfY29kZXM7XG4gICAgdmFyIGRpc3RhbmNlX3Bvc3RmaXhfbWFzaztcbiAgICB2YXIgbnVtX2Rpc3RhbmNlX2NvZGVzO1xuICAgIHZhciBjb250ZXh0X21hcCA9IG51bGw7XG4gICAgdmFyIGNvbnRleHRfbW9kZXMgPSBudWxsO1xuICAgIHZhciBudW1fbGl0ZXJhbF9odHJlZXM7XG4gICAgdmFyIGRpc3RfY29udGV4dF9tYXAgPSBudWxsO1xuICAgIHZhciBudW1fZGlzdF9odHJlZXM7XG4gICAgdmFyIGNvbnRleHRfb2Zmc2V0ID0gMDtcbiAgICB2YXIgY29udGV4dF9tYXBfc2xpY2UgPSBudWxsO1xuICAgIHZhciBsaXRlcmFsX2h0cmVlX2luZGV4ID0gMDtcbiAgICB2YXIgZGlzdF9jb250ZXh0X29mZnNldCA9IDA7XG4gICAgdmFyIGRpc3RfY29udGV4dF9tYXBfc2xpY2UgPSBudWxsO1xuICAgIHZhciBkaXN0X2h0cmVlX2luZGV4ID0gMDtcbiAgICB2YXIgY29udGV4dF9sb29rdXBfb2Zmc2V0MSA9IDA7XG4gICAgdmFyIGNvbnRleHRfbG9va3VwX29mZnNldDIgPSAwO1xuICAgIHZhciBjb250ZXh0X21vZGU7XG4gICAgdmFyIGh0cmVlX2NvbW1hbmQ7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgMzsgKytpKSB7XG4gICAgICBoZ3JvdXBbaV0uY29kZXMgPSBudWxsO1xuICAgICAgaGdyb3VwW2ldLmh0cmVlcyA9IG51bGw7XG4gICAgfVxuXG4gICAgYnIucmVhZE1vcmVJbnB1dCgpO1xuICAgIFxuICAgIHZhciBfb3V0ID0gRGVjb2RlTWV0YUJsb2NrTGVuZ3RoKGJyKTtcbiAgICBtZXRhX2Jsb2NrX3JlbWFpbmluZ19sZW4gPSBfb3V0Lm1ldGFfYmxvY2tfbGVuZ3RoO1xuICAgIGlmIChwb3MgKyBtZXRhX2Jsb2NrX3JlbWFpbmluZ19sZW4gPiBvdXRwdXQuYnVmZmVyLmxlbmd0aCkge1xuICAgICAgLyogV2UgbmVlZCB0byBncm93IHRoZSBvdXRwdXQgYnVmZmVyIHRvIGZpdCB0aGUgYWRkaXRpb25hbCBkYXRhLiAqL1xuICAgICAgdmFyIHRtcCA9IG5ldyBVaW50OEFycmF5KCBwb3MgKyBtZXRhX2Jsb2NrX3JlbWFpbmluZ19sZW4gKTtcbiAgICAgIHRtcC5zZXQoIG91dHB1dC5idWZmZXIgKTtcbiAgICAgIG91dHB1dC5idWZmZXIgPSB0bXA7XG4gICAgfSAgICBcbiAgICBpbnB1dF9lbmQgPSBfb3V0LmlucHV0X2VuZDtcbiAgICBpc191bmNvbXByZXNzZWQgPSBfb3V0LmlzX3VuY29tcHJlc3NlZDtcbiAgICBcbiAgICBpZiAoX291dC5pc19tZXRhZGF0YSkge1xuICAgICAgSnVtcFRvQnl0ZUJvdW5kYXJ5KGJyKTtcbiAgICAgIFxuICAgICAgZm9yICg7IG1ldGFfYmxvY2tfcmVtYWluaW5nX2xlbiA+IDA7IC0tbWV0YV9ibG9ja19yZW1haW5pbmdfbGVuKSB7XG4gICAgICAgIGJyLnJlYWRNb3JlSW5wdXQoKTtcbiAgICAgICAgLyogUmVhZCBvbmUgYnl0ZSBhbmQgaWdub3JlIGl0LiAqL1xuICAgICAgICBici5yZWFkQml0cyg4KTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIFxuICAgIGlmIChtZXRhX2Jsb2NrX3JlbWFpbmluZ19sZW4gPT09IDApIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBcbiAgICBpZiAoaXNfdW5jb21wcmVzc2VkKSB7XG4gICAgICBici5iaXRfcG9zXyA9IChici5iaXRfcG9zXyArIDcpICYgfjc7XG4gICAgICBDb3B5VW5jb21wcmVzc2VkQmxvY2tUb091dHB1dChvdXRwdXQsIG1ldGFfYmxvY2tfcmVtYWluaW5nX2xlbiwgcG9zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmluZ2J1ZmZlciwgcmluZ2J1ZmZlcl9tYXNrLCBicik7XG4gICAgICBwb3MgKz0gbWV0YV9ibG9ja19yZW1haW5pbmdfbGVuO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIFxuICAgIGZvciAoaSA9IDA7IGkgPCAzOyArK2kpIHtcbiAgICAgIG51bV9ibG9ja190eXBlc1tpXSA9IERlY29kZVZhckxlblVpbnQ4KGJyKSArIDE7XG4gICAgICBpZiAobnVtX2Jsb2NrX3R5cGVzW2ldID49IDIpIHtcbiAgICAgICAgUmVhZEh1ZmZtYW5Db2RlKG51bV9ibG9ja190eXBlc1tpXSArIDIsIGJsb2NrX3R5cGVfdHJlZXMsIGkgKiBIVUZGTUFOX01BWF9UQUJMRV9TSVpFLCBicik7XG4gICAgICAgIFJlYWRIdWZmbWFuQ29kZShrTnVtQmxvY2tMZW5ndGhDb2RlcywgYmxvY2tfbGVuX3RyZWVzLCBpICogSFVGRk1BTl9NQVhfVEFCTEVfU0laRSwgYnIpO1xuICAgICAgICBibG9ja19sZW5ndGhbaV0gPSBSZWFkQmxvY2tMZW5ndGgoYmxvY2tfbGVuX3RyZWVzLCBpICogSFVGRk1BTl9NQVhfVEFCTEVfU0laRSwgYnIpO1xuICAgICAgICBibG9ja190eXBlX3JiX2luZGV4W2ldID0gMTtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgYnIucmVhZE1vcmVJbnB1dCgpO1xuICAgIFxuICAgIGRpc3RhbmNlX3Bvc3RmaXhfYml0cyA9IGJyLnJlYWRCaXRzKDIpO1xuICAgIG51bV9kaXJlY3RfZGlzdGFuY2VfY29kZXMgPSBOVU1fRElTVEFOQ0VfU0hPUlRfQ09ERVMgKyAoYnIucmVhZEJpdHMoNCkgPDwgZGlzdGFuY2VfcG9zdGZpeF9iaXRzKTtcbiAgICBkaXN0YW5jZV9wb3N0Zml4X21hc2sgPSAoMSA8PCBkaXN0YW5jZV9wb3N0Zml4X2JpdHMpIC0gMTtcbiAgICBudW1fZGlzdGFuY2VfY29kZXMgPSAobnVtX2RpcmVjdF9kaXN0YW5jZV9jb2RlcyArICg0OCA8PCBkaXN0YW5jZV9wb3N0Zml4X2JpdHMpKTtcbiAgICBjb250ZXh0X21vZGVzID0gbmV3IFVpbnQ4QXJyYXkobnVtX2Jsb2NrX3R5cGVzWzBdKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBudW1fYmxvY2tfdHlwZXNbMF07ICsraSkge1xuICAgICAgIGJyLnJlYWRNb3JlSW5wdXQoKTtcbiAgICAgICBjb250ZXh0X21vZGVzW2ldID0gKGJyLnJlYWRCaXRzKDIpIDw8IDEpO1xuICAgIH1cbiAgICBcbiAgICB2YXIgX28xID0gRGVjb2RlQ29udGV4dE1hcChudW1fYmxvY2tfdHlwZXNbMF0gPDwga0xpdGVyYWxDb250ZXh0Qml0cywgYnIpO1xuICAgIG51bV9saXRlcmFsX2h0cmVlcyA9IF9vMS5udW1faHRyZWVzO1xuICAgIGNvbnRleHRfbWFwID0gX28xLmNvbnRleHRfbWFwO1xuICAgIFxuICAgIHZhciBfbzIgPSBEZWNvZGVDb250ZXh0TWFwKG51bV9ibG9ja190eXBlc1syXSA8PCBrRGlzdGFuY2VDb250ZXh0Qml0cywgYnIpO1xuICAgIG51bV9kaXN0X2h0cmVlcyA9IF9vMi5udW1faHRyZWVzO1xuICAgIGRpc3RfY29udGV4dF9tYXAgPSBfbzIuY29udGV4dF9tYXA7XG4gICAgXG4gICAgaGdyb3VwWzBdID0gbmV3IEh1ZmZtYW5UcmVlR3JvdXAoa051bUxpdGVyYWxDb2RlcywgbnVtX2xpdGVyYWxfaHRyZWVzKTtcbiAgICBoZ3JvdXBbMV0gPSBuZXcgSHVmZm1hblRyZWVHcm91cChrTnVtSW5zZXJ0QW5kQ29weUNvZGVzLCBudW1fYmxvY2tfdHlwZXNbMV0pO1xuICAgIGhncm91cFsyXSA9IG5ldyBIdWZmbWFuVHJlZUdyb3VwKG51bV9kaXN0YW5jZV9jb2RlcywgbnVtX2Rpc3RfaHRyZWVzKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCAzOyArK2kpIHtcbiAgICAgIGhncm91cFtpXS5kZWNvZGUoYnIpO1xuICAgIH1cblxuICAgIGNvbnRleHRfbWFwX3NsaWNlID0gMDtcbiAgICBkaXN0X2NvbnRleHRfbWFwX3NsaWNlID0gMDtcbiAgICBjb250ZXh0X21vZGUgPSBjb250ZXh0X21vZGVzW2Jsb2NrX3R5cGVbMF1dO1xuICAgIGNvbnRleHRfbG9va3VwX29mZnNldDEgPSBDb250ZXh0Lmxvb2t1cE9mZnNldHNbY29udGV4dF9tb2RlXTtcbiAgICBjb250ZXh0X2xvb2t1cF9vZmZzZXQyID0gQ29udGV4dC5sb29rdXBPZmZzZXRzW2NvbnRleHRfbW9kZSArIDFdO1xuICAgIGh0cmVlX2NvbW1hbmQgPSBoZ3JvdXBbMV0uaHRyZWVzWzBdO1xuXG4gICAgd2hpbGUgKG1ldGFfYmxvY2tfcmVtYWluaW5nX2xlbiA+IDApIHtcbiAgICAgIHZhciBjbWRfY29kZTtcbiAgICAgIHZhciByYW5nZV9pZHg7XG4gICAgICB2YXIgaW5zZXJ0X2NvZGU7XG4gICAgICB2YXIgY29weV9jb2RlO1xuICAgICAgdmFyIGluc2VydF9sZW5ndGg7XG4gICAgICB2YXIgY29weV9sZW5ndGg7XG4gICAgICB2YXIgZGlzdGFuY2VfY29kZTtcbiAgICAgIHZhciBkaXN0YW5jZTtcbiAgICAgIHZhciBjb250ZXh0O1xuICAgICAgdmFyIGo7XG4gICAgICB2YXIgY29weV9kc3Q7XG5cbiAgICAgIGJyLnJlYWRNb3JlSW5wdXQoKTtcbiAgICAgIFxuICAgICAgaWYgKGJsb2NrX2xlbmd0aFsxXSA9PT0gMCkge1xuICAgICAgICBEZWNvZGVCbG9ja1R5cGUobnVtX2Jsb2NrX3R5cGVzWzFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tfdHlwZV90cmVlcywgMSwgYmxvY2tfdHlwZSwgYmxvY2tfdHlwZV9yYixcbiAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrX3R5cGVfcmJfaW5kZXgsIGJyKTtcbiAgICAgICAgYmxvY2tfbGVuZ3RoWzFdID0gUmVhZEJsb2NrTGVuZ3RoKGJsb2NrX2xlbl90cmVlcywgSFVGRk1BTl9NQVhfVEFCTEVfU0laRSwgYnIpO1xuICAgICAgICBodHJlZV9jb21tYW5kID0gaGdyb3VwWzFdLmh0cmVlc1tibG9ja190eXBlWzFdXTtcbiAgICAgIH1cbiAgICAgIC0tYmxvY2tfbGVuZ3RoWzFdO1xuICAgICAgY21kX2NvZGUgPSBSZWFkU3ltYm9sKGhncm91cFsxXS5jb2RlcywgaHRyZWVfY29tbWFuZCwgYnIpO1xuICAgICAgcmFuZ2VfaWR4ID0gY21kX2NvZGUgPj4gNjtcbiAgICAgIGlmIChyYW5nZV9pZHggPj0gMikge1xuICAgICAgICByYW5nZV9pZHggLT0gMjtcbiAgICAgICAgZGlzdGFuY2VfY29kZSA9IC0xO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGlzdGFuY2VfY29kZSA9IDA7XG4gICAgICB9XG4gICAgICBpbnNlcnRfY29kZSA9IFByZWZpeC5rSW5zZXJ0UmFuZ2VMdXRbcmFuZ2VfaWR4XSArICgoY21kX2NvZGUgPj4gMykgJiA3KTtcbiAgICAgIGNvcHlfY29kZSA9IFByZWZpeC5rQ29weVJhbmdlTHV0W3JhbmdlX2lkeF0gKyAoY21kX2NvZGUgJiA3KTtcbiAgICAgIGluc2VydF9sZW5ndGggPSBQcmVmaXgua0luc2VydExlbmd0aFByZWZpeENvZGVbaW5zZXJ0X2NvZGVdLm9mZnNldCArXG4gICAgICAgICAgYnIucmVhZEJpdHMoUHJlZml4LmtJbnNlcnRMZW5ndGhQcmVmaXhDb2RlW2luc2VydF9jb2RlXS5uYml0cyk7XG4gICAgICBjb3B5X2xlbmd0aCA9IFByZWZpeC5rQ29weUxlbmd0aFByZWZpeENvZGVbY29weV9jb2RlXS5vZmZzZXQgK1xuICAgICAgICAgIGJyLnJlYWRCaXRzKFByZWZpeC5rQ29weUxlbmd0aFByZWZpeENvZGVbY29weV9jb2RlXS5uYml0cyk7XG4gICAgICBwcmV2X2J5dGUxID0gcmluZ2J1ZmZlcltwb3MtMSAmIHJpbmdidWZmZXJfbWFza107XG4gICAgICBwcmV2X2J5dGUyID0gcmluZ2J1ZmZlcltwb3MtMiAmIHJpbmdidWZmZXJfbWFza107XG4gICAgICBmb3IgKGogPSAwOyBqIDwgaW5zZXJ0X2xlbmd0aDsgKytqKSB7XG4gICAgICAgIGJyLnJlYWRNb3JlSW5wdXQoKTtcblxuICAgICAgICBpZiAoYmxvY2tfbGVuZ3RoWzBdID09PSAwKSB7XG4gICAgICAgICAgRGVjb2RlQmxvY2tUeXBlKG51bV9ibG9ja190eXBlc1swXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tfdHlwZV90cmVlcywgMCwgYmxvY2tfdHlwZSwgYmxvY2tfdHlwZV9yYixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tfdHlwZV9yYl9pbmRleCwgYnIpO1xuICAgICAgICAgIGJsb2NrX2xlbmd0aFswXSA9IFJlYWRCbG9ja0xlbmd0aChibG9ja19sZW5fdHJlZXMsIDAsIGJyKTtcbiAgICAgICAgICBjb250ZXh0X29mZnNldCA9IGJsb2NrX3R5cGVbMF0gPDwga0xpdGVyYWxDb250ZXh0Qml0cztcbiAgICAgICAgICBjb250ZXh0X21hcF9zbGljZSA9IGNvbnRleHRfb2Zmc2V0O1xuICAgICAgICAgIGNvbnRleHRfbW9kZSA9IGNvbnRleHRfbW9kZXNbYmxvY2tfdHlwZVswXV07XG4gICAgICAgICAgY29udGV4dF9sb29rdXBfb2Zmc2V0MSA9IENvbnRleHQubG9va3VwT2Zmc2V0c1tjb250ZXh0X21vZGVdO1xuICAgICAgICAgIGNvbnRleHRfbG9va3VwX29mZnNldDIgPSBDb250ZXh0Lmxvb2t1cE9mZnNldHNbY29udGV4dF9tb2RlICsgMV07XG4gICAgICAgIH1cbiAgICAgICAgY29udGV4dCA9IChDb250ZXh0Lmxvb2t1cFtjb250ZXh0X2xvb2t1cF9vZmZzZXQxICsgcHJldl9ieXRlMV0gfFxuICAgICAgICAgICAgICAgICAgIENvbnRleHQubG9va3VwW2NvbnRleHRfbG9va3VwX29mZnNldDIgKyBwcmV2X2J5dGUyXSk7XG4gICAgICAgIGxpdGVyYWxfaHRyZWVfaW5kZXggPSBjb250ZXh0X21hcFtjb250ZXh0X21hcF9zbGljZSArIGNvbnRleHRdO1xuICAgICAgICAtLWJsb2NrX2xlbmd0aFswXTtcbiAgICAgICAgcHJldl9ieXRlMiA9IHByZXZfYnl0ZTE7XG4gICAgICAgIHByZXZfYnl0ZTEgPSBSZWFkU3ltYm9sKGhncm91cFswXS5jb2RlcywgaGdyb3VwWzBdLmh0cmVlc1tsaXRlcmFsX2h0cmVlX2luZGV4XSwgYnIpO1xuICAgICAgICByaW5nYnVmZmVyW3BvcyAmIHJpbmdidWZmZXJfbWFza10gPSBwcmV2X2J5dGUxO1xuICAgICAgICBpZiAoKHBvcyAmIHJpbmdidWZmZXJfbWFzaykgPT09IHJpbmdidWZmZXJfbWFzaykge1xuICAgICAgICAgIG91dHB1dC53cml0ZShyaW5nYnVmZmVyLCByaW5nYnVmZmVyX3NpemUpO1xuICAgICAgICB9XG4gICAgICAgICsrcG9zO1xuICAgICAgfVxuICAgICAgbWV0YV9ibG9ja19yZW1haW5pbmdfbGVuIC09IGluc2VydF9sZW5ndGg7XG4gICAgICBpZiAobWV0YV9ibG9ja19yZW1haW5pbmdfbGVuIDw9IDApIGJyZWFrO1xuXG4gICAgICBpZiAoZGlzdGFuY2VfY29kZSA8IDApIHtcbiAgICAgICAgdmFyIGNvbnRleHQ7XG4gICAgICAgIFxuICAgICAgICBici5yZWFkTW9yZUlucHV0KCk7XG4gICAgICAgIGlmIChibG9ja19sZW5ndGhbMl0gPT09IDApIHtcbiAgICAgICAgICBEZWNvZGVCbG9ja1R5cGUobnVtX2Jsb2NrX3R5cGVzWzJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBibG9ja190eXBlX3RyZWVzLCAyLCBibG9ja190eXBlLCBibG9ja190eXBlX3JiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBibG9ja190eXBlX3JiX2luZGV4LCBicik7XG4gICAgICAgICAgYmxvY2tfbGVuZ3RoWzJdID0gUmVhZEJsb2NrTGVuZ3RoKGJsb2NrX2xlbl90cmVlcywgMiAqIEhVRkZNQU5fTUFYX1RBQkxFX1NJWkUsIGJyKTtcbiAgICAgICAgICBkaXN0X2NvbnRleHRfb2Zmc2V0ID0gYmxvY2tfdHlwZVsyXSA8PCBrRGlzdGFuY2VDb250ZXh0Qml0cztcbiAgICAgICAgICBkaXN0X2NvbnRleHRfbWFwX3NsaWNlID0gZGlzdF9jb250ZXh0X29mZnNldDtcbiAgICAgICAgfVxuICAgICAgICAtLWJsb2NrX2xlbmd0aFsyXTtcbiAgICAgICAgY29udGV4dCA9IChjb3B5X2xlbmd0aCA+IDQgPyAzIDogY29weV9sZW5ndGggLSAyKSAmIDB4ZmY7XG4gICAgICAgIGRpc3RfaHRyZWVfaW5kZXggPSBkaXN0X2NvbnRleHRfbWFwW2Rpc3RfY29udGV4dF9tYXBfc2xpY2UgKyBjb250ZXh0XTtcbiAgICAgICAgZGlzdGFuY2VfY29kZSA9IFJlYWRTeW1ib2woaGdyb3VwWzJdLmNvZGVzLCBoZ3JvdXBbMl0uaHRyZWVzW2Rpc3RfaHRyZWVfaW5kZXhdLCBicik7XG4gICAgICAgIGlmIChkaXN0YW5jZV9jb2RlID49IG51bV9kaXJlY3RfZGlzdGFuY2VfY29kZXMpIHtcbiAgICAgICAgICB2YXIgbmJpdHM7XG4gICAgICAgICAgdmFyIHBvc3RmaXg7XG4gICAgICAgICAgdmFyIG9mZnNldDtcbiAgICAgICAgICBkaXN0YW5jZV9jb2RlIC09IG51bV9kaXJlY3RfZGlzdGFuY2VfY29kZXM7XG4gICAgICAgICAgcG9zdGZpeCA9IGRpc3RhbmNlX2NvZGUgJiBkaXN0YW5jZV9wb3N0Zml4X21hc2s7XG4gICAgICAgICAgZGlzdGFuY2VfY29kZSA+Pj0gZGlzdGFuY2VfcG9zdGZpeF9iaXRzO1xuICAgICAgICAgIG5iaXRzID0gKGRpc3RhbmNlX2NvZGUgPj4gMSkgKyAxO1xuICAgICAgICAgIG9mZnNldCA9ICgoMiArIChkaXN0YW5jZV9jb2RlICYgMSkpIDw8IG5iaXRzKSAtIDQ7XG4gICAgICAgICAgZGlzdGFuY2VfY29kZSA9IG51bV9kaXJlY3RfZGlzdGFuY2VfY29kZXMgK1xuICAgICAgICAgICAgICAoKG9mZnNldCArIGJyLnJlYWRCaXRzKG5iaXRzKSkgPDxcbiAgICAgICAgICAgICAgIGRpc3RhbmNlX3Bvc3RmaXhfYml0cykgKyBwb3N0Zml4O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qIENvbnZlcnQgdGhlIGRpc3RhbmNlIGNvZGUgdG8gdGhlIGFjdHVhbCBkaXN0YW5jZSBieSBwb3NzaWJseSBsb29raW5nICovXG4gICAgICAvKiB1cCBwYXN0IGRpc3RuYWNlcyBmcm9tIHRoZSByaW5nYnVmZmVyLiAqL1xuICAgICAgZGlzdGFuY2UgPSBUcmFuc2xhdGVTaG9ydENvZGVzKGRpc3RhbmNlX2NvZGUsIGRpc3RfcmIsIGRpc3RfcmJfaWR4KTtcbiAgICAgIGlmIChkaXN0YW5jZSA8IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbQnJvdGxpRGVjb21wcmVzc10gaW52YWxpZCBkaXN0YW5jZScpO1xuICAgICAgfVxuXG4gICAgICBpZiAocG9zIDwgbWF4X2JhY2t3YXJkX2Rpc3RhbmNlICYmXG4gICAgICAgICAgbWF4X2Rpc3RhbmNlICE9PSBtYXhfYmFja3dhcmRfZGlzdGFuY2UpIHtcbiAgICAgICAgbWF4X2Rpc3RhbmNlID0gcG9zO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWF4X2Rpc3RhbmNlID0gbWF4X2JhY2t3YXJkX2Rpc3RhbmNlO1xuICAgICAgfVxuXG4gICAgICBjb3B5X2RzdCA9IHBvcyAmIHJpbmdidWZmZXJfbWFzaztcblxuICAgICAgaWYgKGRpc3RhbmNlID4gbWF4X2Rpc3RhbmNlKSB7XG4gICAgICAgIGlmIChjb3B5X2xlbmd0aCA+PSBCcm90bGlEaWN0aW9uYXJ5Lm1pbkRpY3Rpb25hcnlXb3JkTGVuZ3RoICYmXG4gICAgICAgICAgICBjb3B5X2xlbmd0aCA8PSBCcm90bGlEaWN0aW9uYXJ5Lm1heERpY3Rpb25hcnlXb3JkTGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIG9mZnNldCA9IEJyb3RsaURpY3Rpb25hcnkub2Zmc2V0c0J5TGVuZ3RoW2NvcHlfbGVuZ3RoXTtcbiAgICAgICAgICB2YXIgd29yZF9pZCA9IGRpc3RhbmNlIC0gbWF4X2Rpc3RhbmNlIC0gMTtcbiAgICAgICAgICB2YXIgc2hpZnQgPSBCcm90bGlEaWN0aW9uYXJ5LnNpemVCaXRzQnlMZW5ndGhbY29weV9sZW5ndGhdO1xuICAgICAgICAgIHZhciBtYXNrID0gKDEgPDwgc2hpZnQpIC0gMTtcbiAgICAgICAgICB2YXIgd29yZF9pZHggPSB3b3JkX2lkICYgbWFzaztcbiAgICAgICAgICB2YXIgdHJhbnNmb3JtX2lkeCA9IHdvcmRfaWQgPj4gc2hpZnQ7XG4gICAgICAgICAgb2Zmc2V0ICs9IHdvcmRfaWR4ICogY29weV9sZW5ndGg7XG4gICAgICAgICAgaWYgKHRyYW5zZm9ybV9pZHggPCBUcmFuc2Zvcm0ua051bVRyYW5zZm9ybXMpIHtcbiAgICAgICAgICAgIHZhciBsZW4gPSBUcmFuc2Zvcm0udHJhbnNmb3JtRGljdGlvbmFyeVdvcmQocmluZ2J1ZmZlciwgY29weV9kc3QsIG9mZnNldCwgY29weV9sZW5ndGgsIHRyYW5zZm9ybV9pZHgpO1xuICAgICAgICAgICAgY29weV9kc3QgKz0gbGVuO1xuICAgICAgICAgICAgcG9zICs9IGxlbjtcbiAgICAgICAgICAgIG1ldGFfYmxvY2tfcmVtYWluaW5nX2xlbiAtPSBsZW47XG4gICAgICAgICAgICBpZiAoY29weV9kc3QgPj0gcmluZ2J1ZmZlcl9lbmQpIHtcbiAgICAgICAgICAgICAgb3V0cHV0LndyaXRlKHJpbmdidWZmZXIsIHJpbmdidWZmZXJfc2l6ZSk7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICBmb3IgKHZhciBfeCA9IDA7IF94IDwgKGNvcHlfZHN0IC0gcmluZ2J1ZmZlcl9lbmQpOyBfeCsrKVxuICAgICAgICAgICAgICAgIHJpbmdidWZmZXJbX3hdID0gcmluZ2J1ZmZlcltyaW5nYnVmZmVyX2VuZCArIF94XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBiYWNrd2FyZCByZWZlcmVuY2UuIHBvczogXCIgKyBwb3MgKyBcIiBkaXN0YW5jZTogXCIgKyBkaXN0YW5jZSArXG4gICAgICAgICAgICAgIFwiIGxlbjogXCIgKyBjb3B5X2xlbmd0aCArIFwiIGJ5dGVzIGxlZnQ6IFwiICsgbWV0YV9ibG9ja19yZW1haW5pbmdfbGVuKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBiYWNrd2FyZCByZWZlcmVuY2UuIHBvczogXCIgKyBwb3MgKyBcIiBkaXN0YW5jZTogXCIgKyBkaXN0YW5jZSArXG4gICAgICAgICAgICBcIiBsZW46IFwiICsgY29weV9sZW5ndGggKyBcIiBieXRlcyBsZWZ0OiBcIiArIG1ldGFfYmxvY2tfcmVtYWluaW5nX2xlbik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChkaXN0YW5jZV9jb2RlID4gMCkge1xuICAgICAgICAgIGRpc3RfcmJbZGlzdF9yYl9pZHggJiAzXSA9IGRpc3RhbmNlO1xuICAgICAgICAgICsrZGlzdF9yYl9pZHg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29weV9sZW5ndGggPiBtZXRhX2Jsb2NrX3JlbWFpbmluZ19sZW4pIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGJhY2t3YXJkIHJlZmVyZW5jZS4gcG9zOiBcIiArIHBvcyArIFwiIGRpc3RhbmNlOiBcIiArIGRpc3RhbmNlICtcbiAgICAgICAgICAgIFwiIGxlbjogXCIgKyBjb3B5X2xlbmd0aCArIFwiIGJ5dGVzIGxlZnQ6IFwiICsgbWV0YV9ibG9ja19yZW1haW5pbmdfbGVuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaiA9IDA7IGogPCBjb3B5X2xlbmd0aDsgKytqKSB7XG4gICAgICAgICAgcmluZ2J1ZmZlcltwb3MgJiByaW5nYnVmZmVyX21hc2tdID0gcmluZ2J1ZmZlclsocG9zIC0gZGlzdGFuY2UpICYgcmluZ2J1ZmZlcl9tYXNrXTtcbiAgICAgICAgICBpZiAoKHBvcyAmIHJpbmdidWZmZXJfbWFzaykgPT09IHJpbmdidWZmZXJfbWFzaykge1xuICAgICAgICAgICAgb3V0cHV0LndyaXRlKHJpbmdidWZmZXIsIHJpbmdidWZmZXJfc2l6ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgICsrcG9zO1xuICAgICAgICAgIC0tbWV0YV9ibG9ja19yZW1haW5pbmdfbGVuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qIFdoZW4gd2UgZ2V0IGhlcmUsIHdlIG11c3QgaGF2ZSBpbnNlcnRlZCBhdCBsZWFzdCBvbmUgbGl0ZXJhbCBhbmQgKi9cbiAgICAgIC8qIG1hZGUgYSBjb3B5IG9mIGF0IGxlYXN0IGxlbmd0aCB0d28sIHRoZXJlZm9yZSBhY2Nlc3NpbmcgdGhlIGxhc3QgMiAqL1xuICAgICAgLyogYnl0ZXMgaXMgdmFsaWQuICovXG4gICAgICBwcmV2X2J5dGUxID0gcmluZ2J1ZmZlclsocG9zIC0gMSkgJiByaW5nYnVmZmVyX21hc2tdO1xuICAgICAgcHJldl9ieXRlMiA9IHJpbmdidWZmZXJbKHBvcyAtIDIpICYgcmluZ2J1ZmZlcl9tYXNrXTtcbiAgICB9XG5cbiAgICAvKiBQcm90ZWN0IHBvcyBmcm9tIG92ZXJmbG93LCB3cmFwIGl0IGFyb3VuZCBhdCBldmVyeSBHQiBvZiBpbnB1dCBkYXRhICovXG4gICAgcG9zICY9IDB4M2ZmZmZmZmY7XG4gIH1cblxuICBvdXRwdXQud3JpdGUocmluZ2J1ZmZlciwgcG9zICYgcmluZ2J1ZmZlcl9tYXNrKTtcbn1cblxuZXhwb3J0cy5Ccm90bGlEZWNvbXByZXNzID0gQnJvdGxpRGVjb21wcmVzcztcblxuQnJvdGxpRGljdGlvbmFyeS5pbml0KCk7XG5cbn0se1wiLi9iaXRfcmVhZGVyXCI6MixcIi4vY29udGV4dFwiOjMsXCIuL2RpY3Rpb25hcnlcIjo3LFwiLi9odWZmbWFuXCI6OCxcIi4vcHJlZml4XCI6OSxcIi4vc3RyZWFtc1wiOjEwLFwiLi90cmFuc2Zvcm1cIjoxMX1dLDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIGJhc2U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpO1xudmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcblxuLyoqXG4gKiBUaGUgbm9ybWFsIGRpY3Rpb25hcnktZGF0YS5qcyBpcyBxdWl0ZSBsYXJnZSwgd2hpY2ggbWFrZXMgaXQgXG4gKiB1bnN1aXRhYmxlIGZvciBicm93c2VyIHVzYWdlLiBJbiBvcmRlciB0byBtYWtlIGl0IHNtYWxsZXIsIFxuICogd2UgcmVhZCBkaWN0aW9uYXJ5LmJpbiwgd2hpY2ggaXMgYSBjb21wcmVzc2VkIHZlcnNpb24gb2ZcbiAqIHRoZSBkaWN0aW9uYXJ5LCBhbmQgb24gaW5pdGlhbCBsb2FkLCBCcm90bGkgZGVjb21wcmVzc2VzIFxuICogaXQncyBvd24gZGljdGlvbmFyeS4g8J+YnFxuICovXG5leHBvcnRzLmluaXQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIEJyb3RsaURlY29tcHJlc3NCdWZmZXIgPSByZXF1aXJlKCcuL2RlY29kZScpLkJyb3RsaURlY29tcHJlc3NCdWZmZXI7XG4gIHZhciBjb21wcmVzc2VkID0gYmFzZTY0LnRvQnl0ZUFycmF5KHJlcXVpcmUoJy4vZGljdGlvbmFyeS5iaW4uanMnKSk7XG4gIHJldHVybiBCcm90bGlEZWNvbXByZXNzQnVmZmVyKGNvbXByZXNzZWQpO1xufTtcblxufSx7XCIuL2RlY29kZVwiOjQsXCIuL2RpY3Rpb25hcnkuYmluLmpzXCI6NixcImJhc2U2NC1qc1wiOjEsXCJmc1wiOjEzfV0sNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cz1cIlc1L2ZjUUxuNWdLZjJYVWJBaVExWFVMWCtUWno2QURUb0RzZ3FrNnFWZmVDMGU0bTZPTzJ3Y1ExSjc2WkJWUlYxZlJrRXNkdS8vNjJ6UXNGRVpXU1RDbk1oY3NRS2xTMnFPaHVWWVlNR0NrVjBmWFdFb01GYkVTWHJLRVo5d2RVRXN5dzlnNGJKbEV0MVk2b1ZNeE1SVEVWYkNJd1p6Snpib0s1ajhtNFlIMDJxZ1hZaHYxVitQTTQzNXNMVnh5SEppaGFKUkVFaFpHcUwwM3R4R0ZRTG03NmNhR08vb3Z4S3Z6Q2J5LzN2TVR0WC80NTlmMGlnaTdXdXRuS2lNUTZ3T0RTb1JoLzhMeDFWM1E5OU12S3R3QjZiSGRFUllSWTBoU3RKb01qTmVUc05YN2JuK1k3ZTRFUTNiZjh4QmM3TDBCc3lmRlBLNDNkR1NYcEw2Y2xZQy9JMzI4aDU0L1ZZclE1aTA2NDhGZ2JHdGw4MzdzdkozNUwzTW90LytuUGxOcFdnS3gxZ0dYUVlxWDZuK2JiWjd3dXlDSEtjVW9rMTJYanF1YjdOWFpHenFCeDBTRCt1emlOZjg3dDd2ZTQyanhTS1FvVzNueXhWcldJR2xGU2hoQ0t4anBaWjVNZUduYTArbEJraytrYU44RjlxRkJBRmdFb2d5TUJkY1gvVDFXL1duTU9pLzd5Y1dVUWxvRUJLR2VDNDhNa2l3cUprSk8rMTJlUWlPRkhNbWNrNnEvSWpXVzNSWmxhbnkyM1RCbStjTnIvODQvb2k1R0dtR0JaV3JaNmorenlrVm96ejVmVC9RSC9EYTZXVGJaWVlQeW5WTk83a3h6dU5OMmt4S0tXY2hlNVd2ZWl0UEtBZWNCOFljQUh6Lyt6WExqY0x6a2REU2t0TklEd1pFOUo5WCt0dG80M29KeTY1d0FwTTNtRHpZdEN3WDlsTStONVZSM2tYWW8wWjN0MFR0WGZnQkZnN2dVOG9OMERnbDdmWmxVYmhObGwrMHV1b2hSVktqckVkOGVnclNuZHk1L1RnZDJncWpBNENBVnVDN0VTVW1MM0Rab0duZmhRVjh1d25waThFR3ZBVlZzb3dOUnhQdWRjazcrb3FBVURrd1pvcFdxRm5XMXJpc3MwdDF6NmlDSVNWS3JlWUdOdlFjWHYrMUw5K2piUDhjZC9kUFVpcUJzbzJxKzdaeUZCdkVOQ2trVnI0NGl5UGJ0T29Pb0NlY1dzaXVxTVNNTDVsdit2TjVNelVyK0RuaDczRzdRMVluUllKVllYSFJKYU5BT0J5aWFLNkN1c2dGZEJQRTQwcjBydnFYVjd0a3NLTzJEckhZWEJUdjhQNXlzcXhFeDhWRFhVRERxa1BINk5OT1YvYTJXSDh6bGtYUkVMU2E4UCtoZU55SkJCUDdQZ3NHMUV0V3ROZWY2L2krbGNheXpRd1FDc2R1aWRwYktmaFdVRGdBRW15aEd1L3pWVGFjSTZSUzB6VEFCck9ZdWVlbW5WYTE5dTlmVDIzTi9UYTZSdlRwb2Y1RFd5Z3FyZUNxckRBZ000TElEMSsxVC90YVU2eVRGVkxxWE92Ky9NdVFPRm5hRjh2TE1LRDd0S1dEb0JkQUxneEYzM3pRY2NDY2RIeDhmS0lWZFc2OU83cUh0WHBlR3I5amJicEZBK3FSTVdyNWhwMHM2N0ZQYzdIQWlMVjBnMC9wZVpsVzdoSlBZRWhaeWhwU3dhaG5mOTMvdFpnZnFaV1hGZG1kWEJ6cXhHSExyUUt4b0FZNmZSb0JoZ0NSUG1tR3VlWVo1SmV4VFZES1VJWHprRy9mcXAvMFUzaEFnUWRKOXp1bXV0SzZucVdiYXF2bTFwZ3UwM0lZUitHKzhzMGpEQkJ6OGNBcFpGU0JldVdhc3lxbzJPTURLQVpDb3pTK0dXU3ZML0hzRTlySHhvb2UxN1Uzcy9sVEUrVlpBazRqM2RwNnVJR2FDMEpNaXFSNUNVc2FiUHlNMGRPWURSN0VhN2lwNFVTWmx5YTM4WWZQdHZyWC90QmxoSGlsajU1bloxbmZOMjRBT0FpOUJWdHovTWJuOEFFREpDcUpnc1ZVYTZuUW5TeHYyRnM3bC9ObEN6cGZZRWptUHJOeWliLyt0MGVpMmVFTWp2TmhMa0hDWmxjaTRXaEJlN2VQWlRtellxbFk5KzFweHRTNEdCKzVsTTFCSFQ5dFMyNzBFV1VEWUZxMUkweVkvZk5pQWs0Yms5eUJnbWVmL2YyazZBbFlRWkhzTkZuVzh3QlF4Q2Q2OGlXdjcvMzViWGZ6M0pabWZHbGlnV0FLUmpJczNJcHp4UTI3dkFnbEhTaU96Q1l6SjlMOUExQ2RpeUZ2eVI2NnVjQTRqS2lmdTVlaHdFUjI2eVY3SGpLcW41TWZvem83Q294eHQ4TFdXUFQ0N0JlTXhYOHAwUGpiN2habis2Ync3ejNMdys3NjUzajVzSThDTHU1a1RocE1sajFtNGMyY2gzakdjUDFGc1QxM3Z1SzNxamVjS1RaazJrSGNPWlk0MFVYK3FkYXhzdFpxc3FRcWdYeitRR0Y5OVpKTHFyM1ZZdTRhZWNsMUFiNUdtcVM4ay9HVjViOTV6eFE1ZDRFZlhVSjZrVFMvQ1hGL2FpcUtET1QxVDdKejV6MFB3RFVjd3I5Y2xMTjFPSkdDaUtmcXZhaCtoM1h6ckJPaUxPVzh3dm44Z1c2cUU4dlB4aStFZnYrVUg1NVQ3UFFGVk1oNmNaMXBaUWx6SnBLWjdQN3VXdndQR0o2RFRsUjZ3YnlqM0l2Mkh5ZWZuUm8vZHY3ZE54K3FhYTBOMzhpQnNSKytVaWw3V2Q0YWZ3RE5zcnpEQUs0Zlhad3ZFWS9qZEt1SUtYbGZyUWQyQzM5ZFc3bnRuUmJJcDlPdEd5OXBQQm4vVjJBU29pLzJVSlpmUyt4dUdMSDhibkx1UGx6ZFROUzZ6ZHlrOER0L2g2c2ZPVzVteXhoMWYremYzelozTVgvbU85Y1FQcDVwT3g5NjdaQTYvcHFIdmNsTmZuVUZGK3JxK1ZkN2FsS3I2S1dQY0lEaHBuNnYySzZObFV1NkxyS284Yi9wWXBVL0dhemZ2dHdobjd0RU9VdVhodDVyVUpkU2Y2c0xqWWYwVlRZRGd3SjgxeWFxS1RVWWVqL3RiSGNrU1JiL0haaWN3R0pxaDFtQUhCL0l1TnM5ZGM5eXV2RjNENVhvY20zZWxXRmRxNW9FeTcwZFlGaXQ3OXlhTGlOalBqNVVVY1ZtWlVWaFFFaFc1VjJaNkNtNEhWSC9SOHFsYW1SWXdCaWxldWgwN0NiRWNlM1RYYTJKbVhXQmYrb3p0MzE5cHNib29iZVpoVm53aE1aek9lUUp6aHBURGJQNzFUdjhIdVp4eFVJLyttYTNYVzZERkREczQrcW1wRVJ3SEdCZDJlZHh3VUtsT0RSZFVXWi9nMEdPZXpyYnpPWmF1Rk1haTRRVTZHVkhWNmFQTkJpQm5kSFNzVjRJenB2VWlpWXlnNk95eXJMNERqNXEvTHczTjVrQXdmdEVWbDlyTmQ3Sms1UERpajJoVEg2d0lYbnN5WGtLZVB4Ym1IWWdDOEE2YW41Rm9iL0tINUd0QzBsNGVGc28rVnB4ZWR0SkhkSHBObStCdnk0Qzc5eVZPa3Jac0xyUTNPSENlQjBSYStrQklSbGRVR2xEQ0VtcTJSd1huZnloNkR6K2FsazZlZnRJMm42c2FzdFJyR3did3N6QmVEUlMvRmEvS3dSSmtDelRzTHIvSkNzNWhPUEUvTVBMWWRaMUYxZnY3RCtWbXlzWDZOcE9DOGFVOUY0UXM2SHZEeVV5OVB2RkdES1ovUDUxMDFUWUhGbDhwamo2d20vcXlTNzVldFpoaGZnMFVFTDRPWW1IazZtNmRPMTkyQXpvSXlQU1Y5UWVkREE0TWwyM3JSYnF4TVBNeGY3RkpuRGM1RlRFbFZTL1B5cWdlUHptd1ZaMjZOV2hSRFErb2FUN2x5N2VsbDRzM0R5cFMxczBnK3RPcjdYSHJya1pqOSt4L21KQnR0ckx4OThsRklhUlp6SHo0YUM3cjUyL0pRNFZqSGFoWTIvWVZYWm4vUUMyenRRYi9zWTN1Umx5YzV2UVM4bkxQR1QvbjI3NDk1aThIUEExNTJ6N0ZoNWFGcHluMUdQSktIdVBMOEl3OTREdVczS2prVVJBV1pYbjRFUXk4OXhpS0VITjFtay90a000Z1lEQnh3Tm9ZdlJmRTZMRnFzeFdKdFByREdic25MTWFwM0thM01Vb3l0VzBjdmllb3pPbWRFUm1oY3F6RyszSG1adjJ5WmVpSWVRVEtHZFJUNEhITnhla20xdFkrL24wNnJHbUZsZXFMc2NTRVJ6Y3RUS002RzlQMFBjMVJtVnZyYXNjSXhhTzFDUUNpWVBFMTViRDdjM3hTZVc3Z1h4WWpneGNyVWxjYkl2TzByK1lwbGh4MGtUdDNxYWZET21GeU1qZ0d4WHU3M3JkZE1IcFYxd011YnlBR2NmL3Y1ZExyNVA3MlRhOWxCRitmek1Kck15Y3d2Kzl2blUzQU5JbDFjSDl0Zlc3YWY4dTAvSEcwdlY0N2pORlh6RlR0YWhhMXh2emUvczhLTXRDWXVjWGMxbnpmZC9NUXlkVVhuL2I3MlJCdDV3Ty8zalJjTUg5QmRoQy95Y3RLQkl2ZVJZUHJOcERXcUJzTzhWTW1QK1d2UmFPY0E0elJNUjFQdlNvTzkyclM3cFlFditmWmZFZlRNekVkTSs2WDV0TGx5eEV4aHFMUmttczVFdUxvdkxmeDY2ZGU1ZkwyL3lYMDJINTJGUFZ3YWhyUHFtTi9FMG9WWG5zQ0toYmkveVJ4WDgzblJiVUtXaHpZY2VYT250ZnVYbjUxTnN6SjZNTzczcFFmNVBsNGluM2VjNEpVOGhGN3BwVjM0K21tOXIxTFkwZWUvaTFPMXdwZDgremZMenRFMGNxQnhnZ2lCaTVCdTk1djlsM3I5ci9VNWh3ZUxuK1RiZnhvd3JXRHFkSmF1S2Q4K3EvZEg4c2JQa2M5dHR1eU85NGY3L1hLL25IWDQ2TVBGTEViNXFRbE5QdmhKNTAvNTl0OWZ0M0xYdTd1VmFXYU8yYkRyRENuUlN6WnlXdkZLeE8xK3ZUOE13d3VuUjNiWDBDa2ZQanFiNEs5TzE5dG41WDUwUHZtWXBFd0h0aVc5V3R6dVYvczc2QjF6dkxMTmtWaU5kOHlTeElsLzNvcmZxUDkwVHlUR2FmNy9yeDhqUXplSEpYZG1oL042WUR2YnZtVEJ3Q2R4ZkVRMU5jTDZ3Tk1kU0lYTnE3YjFFVXpSeTEvQXhzeWs1cDIyR01HMWIrR3hGZ2JIRXJaaDkyd3V2Y28wQXVPTFhjdDlodncybncvTHFJY0RSUm1KbW1aemNnVWE3SnBNL1dWL1M5SVVmYkY1NlRMMm9yenF3ZWJkUkQ4bklZTko0MUQvaHozN0ZvMTFwMlkyMXd6UGNuNzEzcVZHaHF0ZXZTdFlmR0g0bjY5T0VKdFB2YmJMWVd2c2NEcWMzSGdudTE2Nit0QXlMbnhyWDBZNXpvWWpWKysxc0k3dDVrTXIwMktULyt1d3RrYytyWkxPZi9xbi9zM25ZQ2YxM0RnOC9zQjJkaUpnakdxalErVExoeGJ6eXVlMk9iN1g2LzlsVXdXN2ErbGJ6bkh6T1l5OExLVzFDL3VSUGJRWTNLVy8wZ085TFh1bkhMdlBMOTdhZmJhOWJGdGM5aG16N0dBdHRqVllsQ3ZRQWlPd0FrL2dDNStoa0xFczZ0cjNBWkt4TEp0T0V3azJkTHhUWVdzSUIvai9Ub1d0SVd6bzkwNkZyU0c4aWFxcXFxcXFpSWlJaUFnek16TXpOeitBeUsrMDEvemk4bjhTK1kxTWpvUmFRODBXVS9HOE1CbE8rNTNWUFhBTnJXbTR3ekdVVlpVampCSlpWZGhwY2ZranNtY1dhTytVRWxkWGkxZSt6cStIT3NDcGtuWXNodWg4cE9MSVNKdW43VE4wRUlHVzJ4VG5sT0ltZWVjbm9HVzRyYXhlMkcxVDNIRXZmWVVZTWhHK2dBRk9Bd2g1bks4bVpod0pNbU43cjIyNFFWc05Gdlo4N1owcWF0dmtua2x5UERLM0h5NDVQZ1ZLWGppNTJXZW40ZDRQbEZWVllHbk5hcCtmU3BGYks5MHJZbmhVYzZuOTFRM0FZOUUwdEpPRnJjZlp0bS80OTFYYmNHL2pzVmlVUFBYNzZxbWV1aXorcVkxSGs3LzFWUE00MDV6V1Z1b2hlTFVpbXBXWWRWekNtVWRLSGViTWR6Z3JZcmI4bUwyZWVMU25SV0hkb25mWmE4UnNPVTlGMzd3KzU5MWw1RkxZSGlPcVdlSHRFL2xXckJIY1JLcDN1aHRyOHlYbThMVS81bXMrTk02WktzcXU5MGNGWjRvNTgrazRyZHJ0Qjk3TkFERmJ3bUVHN2xYcXZpcmhPVE9xVTE0eHVVRjJteUlqVVJjUEhyUE9RNGxtTTNQZU1nN2JVdWswbm5aaTY3YlhzVTZIOGxocUlvOFRhT3JFYWZDTzFBUks5UGpDMFFPb3EyQnhtTWRnWUI5Ry9sSWI5KytmcU5KMnM3QkhHRnlCTm1aQVI4SjNLQ28wMTJpa2FTUDhCQ3JmNlZJMFg1eGRuYmhISU8rQjVyYk95QjU0elhremZPYnlKNGVjd3hmcUJKTUxGYzdtNTlyTmN3N2hvSG5GWjBiMDB6ZWUrZ1RxdmptNjFQYjR4bjBrY0RYNGp2SE0wckJYWnlwRzNEQ0tuRC9XYWEvWnRIbXRGUGdPNWVFVHgrazdSclZnM2FTd20yWW9OWG5DczNYUFFEaE5uK0ZpYTZJbE9PdUlHNlZKSDdUUDZhdmEyNmVoS0hRYTJUNE4wdGNaOWRQQ0dvM1pkbk5sdHNIUWJlWXQ1dlBuSmV6Vi9jQWVOeXBkbWwxdkNISThNODFuU1JQNVFpMittSTh2L3N4aVpydTkxODduUnRwM2YvNDJOZW1jT05hKzRlVkMzUENaemM4OGFaaDg1MUNxU3NzaGU3MHVQeGVOL2RtWXdsd2IzdHJ3TXJOMUdxOGpibkFwY1ZEeC95RFBlWXM1LzdyNjJ0c1E2bExnK0RpRlhURWh6UjlkSHF2MGlUNHRnajgyNVcrSDNYaVJVTlVaVDJrUjlSaTArbHArVU0zaVF0Uzh1T0UyM0x5NEtZdHZxSDEzamdoVW50SlJBZXd1ek5MRFhwOFJ4ZGNhQTNjTVk2VE8ySWVTRlJYZXplV0lqQ3F5aHNVZE1ZdUNnWVRaU0twQnlwZTF6UmZxOEZzaHZmQlBjNkJBUVdsNy9ReElEcDNWR28xSjN2bjQyT0VzM3F6bndzK1lMUlhieW15QjE5YTlYQng2bi9vd2N5eGxFWXlGV0NpK2tHOUYrRXlELzR5bjgwK2FnYVo5UDdheTJEbnk5OWFLMm85MUZrZkVPWThoQnd5Zmk1dXd4Mnk1U2FIbUcrb3EvemwxRlgvOGlyT2Y4WTN2QWNYLzZ1TFA2QTZudk1PMjRlZFNHUGpRYzgyN1J3MmF0WCt6MmJLcTBDbVc5bU90WW5yNS9BZkRhMVpmUGFYbkt0bFdib3J1cDdRWXgrT3IydVdiK04zTi8vMit5RGNYTXFJSmRmNTV4bDcvdnNqNFdvUFBseEx4dFZya0o0dy90VGUzbUxkQVRPT1l3eGNxNTJ3NVd4ejVNYlBkVnM1TzgvbGhmRTdkUGowYklpUFEzUVYwaXFtNG0zWVg4aFJmYzZqUTNmV2VwZXZNcVVESmQ4Nlo0dndNNDBDV0hubitXcGhzR0hmaWVGMDJEM3RtWnZwV0Qra0JwTkNGY0xuWmhjbW1yaHBHenpiZEErc1ExYXIxOE9KRDg3SU9LT0ZvUk56bmFIUE5IVWZVTmh2WTFpVSt1aHZFdnBLSGFVbjNxSzNleFZWeVg0am9pcHAzdW03Rm1ZSldtQStXYklEc2hScGJWUng1L25xc3RDZ3k4N0ZHYmZWQjh5REdDcVMrMnFDc25Sd25TQU42emd6eGZkQjJuQlQvdlo0LzZ1eGI2b0g4YjRWQlJ4aUlCOTN3TGE0N2hHM3cyU0wvMloyN3lPWEpGd1pwU0phQll5dmFqQTd2UlJZTktxbGpYS3B0L0NGRC90U01yMThES0tid0IweGdnQmVQYXRsMW5raTB5dnFXNXpjaGx5Wm1KME9UeEozRCtmc1lKcy9teFlONStMZTVvYWd0Y2wrWXNWdnk4a1NqSTJZR3ZHanZtcGtSUzlXMmR0WHFXblZ1eFVoVVJtMWxLdG91L2hkRXExOVZCcDlPakd2SEVRU21ycHVmMlIyNG1YR2hlaWw4S2VpQU5ZOGZXMVZFUlVmQkltYjY0ajEyY2FCWm1SVmlaSGJlVk1qQ3JQRGc5QTkwSVhydG5zWUN1WnRSUTBQeXJLRGpCTk9zUGZLc2cxcEEwMmdIbFZyME9YaUZodHA2bkpxWFZ6Y2JmTTBLbnpDM2dnT0VOUEU5VkJkbUhLTjZMWWFpamI0d1h4Sm41QTBGU0RGNWoraDFvb1p4ODg1SnQzWkt6TzVuN1o1V2ZORU90eXlQcVFFbm43V0x2NUZpczNQZGdNc2hqRjFGUnlkYk55ZUJieUtJMW9OMVRSVnJWSzdrZ3NiL3pqWDRORFBJUk1jdFZlYXhWQjM4VmgxeDVLYmVKYlUxMzhBTTVLem1adTN1bnkwRXJ5Z3hpSkY3R1ZYVXJQekZ4cmx4MXVGZEFhWkZETjljdkliNzRxRDl0ekJNbzdMN1dJRVlLK3NsYTFEVk1IcEYwRjdiMytZNlMremp2TGVETUNwYXBtSm8xd2VCV3V4S0Yzck9vY2loMWd1bjRCb0poMWtXblYvSm1pcTZ1T2hLM1ZmS3hFSEVrYWZqTGdLM291amFQelk2U1hnOHBoaEw0VE5SMXh2SmQxV2EwYVlGZlBVTUxyTkJEQ2g0QXVHUlRidEtNYzZaMVVkajhldlkvWnBDdU1BVWVmZG82OURaVW5nb3FFMVA5QTNQSmZPZjdXaXhDRWorWTZ0N2ZZZUhiYnhVQW9GVjNNODljQ0tmbWEzZmMxK2pLUmU3TUZXRWJRcUVmeXpPMngvd3JPMlZZSDdpWWRROUJrUHlJOC8za1hCcExhQ3BVN2VDMFl2L2FtL3RFRHU3SFpwcWcwRXZIbzBuZi9SL2dSelVXeTMzL0hYTUpRZXUxR3lsS21Pa1h6bENmR0ZydUFjUFBoYUdxWk90dTE5enNKMVNPMkp6NFp0dGg1Y0JYNm1SUXdXbUR3cnlHOUZVTWxaek5ja01kSytJb01KdjFyT1duQmFtUzJ3MktIaWFQTVBMQzE1aENabTRLVHBvWnlqNEUyVHFDL1A2cjcvRWhuRE1oS2ljWloxWnd4dUM3RFB6REdzNTNxOGdYYUk5a0ZUSysyTFRxN2Jod3NUYnJNVjhSc2Z1YTVsTVMwRndiVGl0VVZuVmExeVRiNUlYNTFtbVluVWNQOXdQcjhKaTF0aVlKZUpWOUdaVHJRaEY3dnZkVTJPVFU0Mm9nSjlGRHdobXljSTJMSWcrKzAzQzZzY1loVXlVdU1WNXRrdzZrR1VvTCttak5DMzgrd01kV05sam42dEdQcFJFUzd2ZXFyU241VFJ1ditkaDZKVkwvaURIVTFkYjRjOVdLMysrT3JIM1BxemlGOTE2VU1VS244RzY3bk42MEdmV2lIclhZaFVHM3lWV215WWFrNTlOSGo4dDFzbUc0VURpV3oyclBITnJLbk40Wm8xTEJicjIvZUY5WVowbjBibHgybkc0WCtFS0Z4dlMzVzI4SkVTRCtGV2s2MVZDRDN6L1VSR0hpSmwrKzdUZEJ3a0NqNnRHT0gzcURiMFFxY09GOUt6cGowSFViL0t5RlczWWhqMlZNS0pxR1psZUZCSDd2cXZmN1dxTEMzWE11SFY4cThhNHNURnV4VXRrRC82SklCdkthVmp2OTZuZGdydUtaMWsvQkh6cWYySzlmTGs3SEdYQU55TERkMXZ4a0svaTA1NXBuemwrenc2ekxud1hsVllWdGZtYWNKZ0VwUlAxaGJHZ3JZUFZONnYybEcraWRRTkdtd2NLWHUvOHhFai9QNnFlL3NCMldtd05wNnBwOGphSVNNa3dkbGVGWFlLNTVOSFdMVFRidXRTVXFqQmZER1dvL1lnOTE4cVErOEJSWlNBSFpiZnVOWnoyTzBzb3YxVWU0Q1dsVmczckZoTTNLbGpqOWtzR2QvTlVoazRuSCthNVVOMisxaTgrTk0zdlJOcDd1UTZzcWV4U0N1a0VWbFZacmlITnFGaTVyTG05VE1XYTRxbTNpZEpxcHBRQUNvbDJsNFZTdXZXTGZ0YTRKY1h5M2JST1BOYlhPZ2RPaEc0N0xDMEN3Vy9kTWxTeDRKZjE3YUVVM3lBMXg5cCtZYzBqdXBYZ2NNdVlOa3U2NGlZT2tHVG9WRHVKdmxiRUtsSnFzbWlIYnZOcklWWkVIK3lGZEY4RGJsZVo2aU5pV3dNcXZ0TXAvbVNwd3g1S3hSclQ5cDNNQVBUSEd0TWJmdmRGaHlqOXZoYUtjbjNBdDhMYzE2QWkrdkJjU3AxenRYaTdyQ0paeC9xbDdUWGNjbHE2UTc2VWVLV0R5OWJvUzBXSElqVXVXaFBHOExCbVc1eTJyaHVUcE01dnNMdCtIT0xoMVlmMERxWGE5dHNmQytrYUt0Mmh0QTBhaS9MMmk3UktvTmpFd3p0a21SVTBHZmdXMVR4VXZQRmhnMFY3RGRmV0prNWdmcmNjcFl2K01BOU0wZGtHVExFQ2VZd1VpeFJ6alJGZG1qRzd6ZFpJbDNYS0I5WWxpTktJMzFsZmE3aTJKRzVDOFNzK3JIZTBEN1o2OTYvVjNERUFPV0huUTl5TmFoTVVsNWtFTldTNnBIS0twMkQxQmFTcnJIZEUxdzJxTnhJenRwWGdVSXJGMGJtMTVZTUw0YjZWMWsrR3BOeXNUYWhLTVZyclM4NWxUVm85T0dKOTZJNDdlQXk1cllXcFJmL21JemVvWVUxREthUUNUVVZ3cmhIZXlOb0RxSGVsK2xMeHI5V0t6aFNZdzd2clI2K1Y1cTBwZmkyazNMMXpxa3ViWTZycmQ5Wkx2U3VXTmYwdXFua1krRnBUdkZ6U1c5RnAwYjlsOEpBN1RIVjllQ2kvUFkvU0NaSVVZeDNCVTJhbGo3Q20zVlY2ZVlwaW9zNGI2V3VOT0pkWVhVSzN6VHFqNUNWRzJGcVlNNFo3Q3VJVTBxTzA1WFIwZDcxRkhNMFloWm1KbVRSZkxsWEV1bU44MkJHdHpkWDBTMTl0MWUrYlVpZUs4elJtcXBhNFFjNVRTamlmbWFRc1kyRVRMamhJMzZnTVIxKzdxcGpkWFhIaWNlVWVrZkJhdWNIU2hBT2lGWG12M3NObUdReVU1aVZnbm9vY3VvblFYRVBURndzbEh0UzhSK0E0N1N0STl3ajBpU3J0Ymk1ck15c2N6RmlJbXNRK2JkRkNsbkZqanBYWHdNeTZPN3Fmak9yOEZiMGE3T0RJdGlzam5uM0VRTzE2K3lwZDFjd3lhQVc1WXp4ejVRa25mTU83NjQzZlhXL0k5eTNVMnhIMjdPYXBxcjU2Wi90RXpnbGo2SWJUNkhFSGpvcGlYcWVSYmU1bVFRdnh0Y2JET1Z2ZXJOMFpnTWR6cVJZUmphWHRNUmQ1NlE0Y1pTbWRQdlpKZFNyaEoxRDl6TlhQcUFFcVBJYXZQZGZ1YnQ1b2tlMmttdjBkenRJc3pTdjJWWXVveWYxVXVvcGJzWWIrdVg5aDZXcHdqcGd0WjZmTk5hd05KNHE4TzNDRm9TYmlvQWFPU1pNeDJHWWFQWUIrckViNnFqUWlOUkZRNzZUdndORlZLRCtCaEg5VmhjS0dzWHptTUk3QnB0VS9DTldvbE03WXpST3ZwRkFudHNpV0pwNmVSMmQzR2FyY1lTaFZZU1VxaG1ZT1dqNUU5Nk5LMld2bVlOVGVZN1pzNFJVRWR2OWg5UVQ0RXNlS3Q2THpMcnFFT3MzaHhBWTFNYU5XcFNhNnpaeDhGM1lPVmVDWU1TODhXK0NZSER1V2U0eW9jNllLK2RqRHVFT3JCUjVsdmgwcitROXVNODhscmp4OXg5QXRncFFWTkU4ciszTzZHdnc1OUQra0JGL1VNWHlobGlZVXRQam12WEdZNkRrM3gra0VPVytHdGRNVkM0RVpUcW9TL2ptUjBQMExTNzVET2MvdzJ2bnJpOTdNNFNkYlo4cWVVN2dnOERWYkVSa1U1Z2VhTVFPM21ZclNZeUFuZ2VVUXFyTjBDMC92c0ZtY2dXTlhOZWlkc1RBajcvNE1uY0pSMGNhYUJVcGJMSzF5QkNCTlJqRXY2S3Z1VlNkcFBuRU1KZHNSUnRxSitVOHROMWdYQTRlUEhjNlpUMGV2aUk3M1VPSkYwZkVaOFlhbmVBUXFRZEdwaE52d000bklxUG5YeFYweEEwZm5DVCtvQWhKdXl3L3E4ak8weThDalN0ZVpFeHdCcElONlN2TnA2QTVHL2FiaTZlZ2VORC8xR1RndWh1TmphVWJiblNiR2Q0TDg5MzdFem0zNEV5aTZuMW1hZU9CeGgzUEkwanpKRGY1bWgvQnNMRDdGMkdPS3ZsQS81Z3R2eEkzL2VWNHNMZktXNVd5K29pbytlcy91NlQ4VVUrbnNvZnk1N0ljYi9KbFpIUEZ0Q2dkL3grYnd0M1pUK3hYVHRUdFRyR0FiNFFlaEM2WDlHKzhZVCtvemNMeERzZENqc3VPcXdQRm5yZExZYUZjOTJVaTBtNGZyMzlsWW1sQ2FxVGl0N0c2Ty8za1dEa2d0WGpOSDRCaUVtLytqZWdRbmloT3RmZmZuMzNXeHNGamhmTWQ0OEhUK2Y2bzZYNjVqN1hSOFdMU0hNRmt4YnZPWXNyUnNGMWJvd0R1U1ExOE1reGs0cXoyem9HUEw1ZnU5aDJIcW10MWFzbDNRM1l1M3N6T2Mrc3BpQ21YNEFFVEJNM3BMb1RZU3Azc1Z4YWh5aEw4ZUM0bVBOOWsyeDNvMHhraWl4SXpNM0NaRnpmNW9SNG1lY1E1K2F4MndDYWgzL2NybW5Ib3FSMCtLTWFPUHhSaWYxb0VGUkZPTy9rVFBQbXR3dytOZk1YeEVLNmduNmlVMzJVNmZGcnVJejhRNFdnbGp0bmFDVlRCZ1d4N2RpVWRzaEM5WkVhNXlLcFJCQmVXMTJyL2lOYy8rRWdOcW1oc3dOQjhTQm9paEhYZURGN3JyV0RMY210M1Y4R1lZTjdwWFJ5NERaamo0REp1VUJMNWlDM0RRQWFvbzR2a2Z0cVZUWVJHTFMzbUhaN2dkbWRUVHFiZ05OL1BUZFRDT1RnWG9sYzg4TWhYQUVVTWRYMGl5MUpNdWs1d0xzZ2V1MFFVWWx6MlM0c2tUV3dKejZwT20vOGlocm1nR2ZGZ3JpK1pXVUsyZ0FQSGdiV2E4amFvY2RTdU00RkpZb0tpY1lYL1pTRU5rZzlRMVp6SmZ3U2NmVm5SMkRlZ09Hd0N2bW9nYVdKQ0xRZXB2OVdObFU2UWdzbU93SUNxdVUyOE1sazNkOVc1RTgxbFUvNUV6MExjWDZsd0tNV0RObHVOS2ZCRFV5L3BoSmdCY01uZmtoOWlSeHJkT3pnczA4SmRQQjg1THdvK0dVU2I0dDNuQyswYnlxTVp0TzJmUUo0VTJ6R0lyNDl0LzI4cW1tR3YyUmFuREQ3YTNGRWNkdHV0a1c4dHd3d2xVU3BiOFFhbG9kZGRiQmZOSEtEUTgyOEJkRTdPQmdGZGlLWW9oTGF3RllxcHliUW94QVRacmhlTGhkSTcrMFpsdTlRMW15UmNkMTVyOVVJbThLMkxHSnhxVGVnbnRxTlZNS25mMWE4elFpeVVSMXJ4b3FqaUZ4ZUh4cUZjWVVUSGZEdTdyaGJXbmc2cU94T3NJKzVBMXA5bVJ5RVBkVmtUbEUyNHZZNTRXN2JXYzZqTWdadk5YZGZDOS85cTc0MDhLRHNiZEw3VXR6N1FGU0RldHoycGljQXJ6cmRwTDhPYUNIQzlWMjZScm9lbXREWjV5Tk0vS0drV015VG1mbkluRXZ3dFNEMjNVY0ZjamhhRTNWS3prb2FFTUtHQmZ0NFhiSU82Zm9yVFkxbG1HUXdWbUtpY0JDaUFyRHpFKzFvSXhFMDhmV2V2aUlPRDVUem5xSCtPb0hhZHZvT1AyMGRyTVBlNUlyZzNYQlF6aVcyWER1SFl6anFRUTR3eVNzc2pYVXM1SCt0M0ZXWU1IcHBVbkJITXgvbllJVDVkN09takRiZ0Q5RjZuYTNtNGw3S2RrZVNPM2tURVBYYWZpV2lub2dhZzdiNTJ0YWlaaEwxVFN2QkZtRVphZkZxMkg4a2hRYVpYdWl0Q2V3VDVGQmdWdFBLMGo0eFVIUGZVejNRMjhlYWMxWjEzOURBUDIzZGdraTk0RUM4dmJEUFRRQzk3SFBQU1dqVU5HNXRXS01zYXhBRU1LQzA2NjVYdm8xTnRkMDd3Q0xOZjhRNTZtckVQVnBDeGxJTVZsUWxXUnhNM29BZnBnSWMrOEtDM3JFWFVvZzVnMDZ2dDd6Z1hZOGdySDdoaHdWU2FldXZDMDZZWVJBd3BieWsvVW56ajloTEVaTnMyb3hQUUI5eWMrR25MNnpUZ3E3ckkrK0tESndYMlNQOFNkNll6VHV3NWxWL2tVNmVReFJEMTJvbWZRQVc2Y2FUUjRMaWtZa0JCMUNNT3J2Z1JyL1ZZNzUrTlNCNDBDbmk2YkFEQXRhSyt2eXhWV3BmOU5lS0p4TjJLWVE4UTJ4UEIzSzFzN2Z1aHZXYnIyWHBnVzA0NFZENkRSczBxWG9xS2YxTkZzYUd2S0pjNDdsZVVWM3BwcFAvNVZUS0ZoYUd1b2w0RXNmamY1enlDeVVIbUh0aENoY1loNGhZTFFGK0FGV3N1cTR0MHdKeVdnZHdRVk9aaVYwZWZSSFBvSzUrRTF2ano5d1RKbVZrSVRDOW9Fc3RBc3laU2dFL2RiaWN3S3I4OVlVeEtaSStvd0QyMDVUbTVsbm5tRFJ1UC9Kbnp4WDNnTXRscmNYMFVlc1pkeHlRcVlRdUVXNFI1MXZtUTV4T1p0ZVVkOFNKcnVNbFRVemh0VncvTnE3ZVVCY3FOMi9IVm90Z2ZuZ2lmNjB5S0V0b1V4M1dZT1psVkp1Sk9oOHU1OWZ6U0RQRll0UWdxRFVBR3lHaFFPQXZLcm9YTWNPWVkwcWpuU3RKUi9HM2FQK0p0MXNMVmxHVjhQT3dyLzZPR3NxZXRueUYzVG1UcVpqRU5mblhoNTFveGU5cVZVdzJNNzhFekFKK0lNOGxaMU1CUFE5WldTVmM0SjNtV1NyTEtyTUhSZUE1cWRHb3owT0RSc2FBK3Z3eFhBMmNBTTRxbGZ6QkpBNjU4MW00aHp4SXRRdzVkeHJyQkwzWTZrQ2JVY0Z4bzFTOGp5VjQ0cS8vKzdBU05OdWRaNnhlYU5PU0lVZmZxTW40QTlsSWpGY3RZbjJncEVQQWIzZjdwM2lJQk44SDE0RlVHUTljdDJoUHNMK2NFc1RnVXJSNDd1SlZONG40d3Qvd2dmd3dIdU9uTGQ0eW9ia29meThKdnhTUVRBN3JNcERJYzYwOFNsWkZKZlpZY21iVDB0QUhwUEU4TXJ0UTQyc2lUVU5XeHF2V1pPbXZ1OWYwSlBvUW1nKzZsN3NaV3d5Zmk2UFhreEpud0JyYVVHME1ZRzR6WUhRejNpZ3kvWHNGa3g1dE5ReHc0M3F2STlkVTNmMERkaE9VbEhLam1pMVZBcjJLaXkwSFp3RDhWZUViaGgwT2lEZE1Zc3BvbFFzWWRTd2pDY2plb3dJWE5aVlVQbUwyd3dJa1lobVhLaEdvemRDSjRsUktic2Y0TkJoL1huUW9TOTJOSkVXT1ZPRnMyWWhOOGM1UVpGZUswcFJkQUc0MGhxdkxibW9TQTh4UW16T09FYzd3TGNtZTlKT3NqUENFZ3BDd1VzOUUyRG9oTUhSaFVleUdJTjZURnZyYm55OG5EdWlsc0RwenJINW1TNzZBUG9JRUptSXRTNjdzUUorbmZ3ZGR6bWpQeGNCRUJCQ3cwa1dEd2QwRVpDa05lT0Q3Tk5RaHRCbTdLSEw5bVJ4ajZVMXlXVTJwdXpsSUR0cFl4ZEg0WlBlWEJKa1RHQUpmVXIvb1RDei9peXBZNnVYYVIyVjFkb1B4SllscncyZ2hIMEQ1Z2JyaEZjSXh6WXdpNGEvNGhxVmRmMkRkeEJwNnZHWURqYXZ4TUFBb3krMSszYWlPNlMzVy9RQUtOVlhhZ0R0dnNOdHg3S3MrSEtnbzZVMjFCK1FTWmdJb2dWNUJ0K0JuWGlzZFZmeTlWeVhWKzJQNWZNdXZkcEFqTTFvL0s5WitYbkU0RU9DcnVlK2tjZFlIcUFRMC9ZL09tTmxRNk9JMzNqSC91RDFSYWxQYUhwSkFtMmF2MC94dHBxZFhWS05EcmM5RjJpem8yM1d1N2ZpcmdiVVJGRE5YOWVHR2VZQmhpeXB5WFpmdDJqM2hUdnpFNlBNV0tzb2QvL3JFSUxEa3pCWGZpN3hoMGVGa2ZiMy8xenpQSy9QSTVOazNGYlp5VGw0bXE1QmZCb1ZvcWlQSE80UTRRS1pBbHJRM01kTmZpM294SWp2c00za0FGdjNmZHVmdXJxWVIzUFN3WC9tcEd5L0dGSS9CMk1OUGlOZE9wcFdWYnMvZ2pGM1lIK1FBOWpNaGxBYmh2YXNBSHN0QjBJSmV3MDlpQWttWEhsMS9URWoranZIT3BPR3JQUlFYYlBBRE0rSWcyL09FY1VjcGdQVEl0TXRXNERkcWdmWVZJLys0aEFGV1lqVUdwT1AvVXdOdUI3K0JiS09jQUxiam9iZGd6ZUJRZmpnTlNwMkdPcHh6R0xqNzBWdnE1Y3cyQW9ZRU53S0xVdEpVWDhzR1JveDRkVmEvVE40eEt3YUtjbDlYYXdRUi91TnVzNzAwSGYxN3B5Tm5lenJVZ2FZOWU0TUFEaEVEQnBzSlQ2eTFnREpzMXE2d2x3R2h1VXpHUjdDOGtncGpQeUhXd3N2cmYzeW4xekpFSVJhNWVTeG9MQVpPQ1I5eGJ1enR4RlJKVzlabU1ZZkNGSjBldm05RjJmVm51amU5MlJjNFBsNkE4Ymx1TjhNWnl5SkdaMCtzTlNiLy9EdkFGeEMyQnFsRXNGd2NjV2VBbDZDeUJjUVYxYng0bVFNQlAxSnhxazFFVUFETkxlaWVTMmRVRmJRL2Mva3Z3SXRiWjd0eDBzdDE2dmlxZDUzV3NSbVBUS3YyQUQ4Q1VuaHRQV2c1YVVlZ05wc1lnYXNhdzIrRVZvb2VOS21yVzNNRnRqNzZiWUhKbTVLOWdwQVhaWHNFNVU4RE04WG1WT1NKMUYxV25MeTZuUXVwK2p4NTJiQWIrckNxNnk5V1hsMkIyb1pEaGZEa1c3SDNvWWZULzR4eDVWbmNCdXhNWFAybE5maFVWUWpTU3pTUmJ1WkZFNHZGYXdsenZlWHhhWUtWczhMcHZBYjhJUllGM1pIaVJubTBBRGVOUFdvY3d4U3pOc2VHN05yU0VWWm9IZEtXcWFHRUJ6MU44UHQ3a0ZicWgzTFltQWJtOWkxSUNoSXBMcE01QVM2bXI2T0FQSE13d3puVnk2MVlwQllYOHhaRE4vYStsdDduK3g1ajRiTk9WdGVaOGxqM2hwQUhTeDFWUjh2WkhlYzRBSE85WEZDZGpaOWVSa1NWNjVsak1tWlZ6YWVqMnFGbi9xdDFsdld6TlpFZkh4SzNxT0pySEw2Y3JyMENSek1veDVmMmU4QUxCQjRVR0ZaS0EzdE42RjZJWGQzMkdUSlhHUTdEVGk5ai9kTmNMRjlqQ2JEY1dHS3hvS1RZYmxJd2JMRFJlTDAwTFJjRFBNY1F1WExNaDVZemd0ZmprRksxRFAxaUR6ellZVlp6NU0va1dZUmxScGlnMWh0VlJqVkNrbm0raDFNNUxpRURYT3lIUkVodnpDR3BGWmpIUzBSc0syN28yYXZnZGlsckprYWxXcVBXM0Q5Z213VjM3SEttZk0zRjhZWmoyYXIrdkhGdmYzQjhDUm9INGtESElLOW1yQWcrb3dpRXdOampkOVYrRnNRS1lSOGN6SnJVa2Y3UW9pMllhVzZFVkRacDV6WWxxaVl0dVhPVEhrNGZBY1o3cUJiZExEaUpxMFdOVjFsMitIbnRrMW1NV3Z4clltYzhrSXg4RzNyVzM2SjZSYTRsTHJUT0NnaU9paG1vdytZbnpVVDE5amJWMkIzUldxU0h5eGtobWdzQnFNWVd2T2NVb20xakRRNDM2K2ZjYnUzeGYyYmJlcVUvY2ErQzRET0tFK2UzcXZtZU1xVzNBeGVqZnpCUkZWY3dWWVBxNEwwQVBTV1dvSnUrNVVZWDRxZzVVNllUaW9xUUdQRzlYcm51Wi9Ca3h1WXBlNkxpODcrMThFc2t5UVcvdUErdWsycnBIcHI2aHV0MlRsVmJLZ1drRnB4K0FaZmZ3ZWl3MitWaXR0a0V5Zi9pZmluUy8wSXRSTDJKcTN0UU9jeFBhV08yeHJHNjhHZEZvVXBaZ0ZYYVAyd1lWdFJjNnhZQ2ZJMUNhQnF5V3BnNGJ4OE9IQlF3c1Y0WFdNaWJaWjBMWWpXRXkySXhRMW1acmYxL1VOYllDSnBsV3Uzblo0V3BvZElHVkEwNWQrUldTUytFVDl0SDNSZkdHbU5JMWNJWTdldlpacTdvK2EwYmpqeWdwbVIzbVZmYWxrVC9TWkdUMjdROFFHYWx3R2xET1M5VkhDeUZBSUwwYTFRN0ppVzNzYXo5Z3FZOGxxS3luRnJQQ3p4a1U0U0lmTGM5VmZDSTVlZGdSaERYczBlZE85OTJuaFRLSHJpUkVQMU5KQzZTUk9NZ1EweE81a05OWk9oTU9JVDk5QVVFbGJ4cWVaRjhBM3hyZkRKc1d0RG5VZW5BSGRZV1N3QWJZakZxUVorRDVnaTNoTks4Q1N4VTlpNmY2Q2xMOUlHbGoxT1BNUUFzcjg0WUc2aWpzSnBDYUdXajc1YzN5T1pLQkI5bU5wUU5QVUtrSzBENndnTEg4TUdveVJ4VFg2WTA1UTRBbllOWE1ad1hNNGVpai85V3BzTS85Q29SbkZRWEdSNk1FYVkrRlh2WEVPM1JPMEphU3RrNk9YdUhWQVRISkUrMVcrVFUzYlNaMmtzTXRxak8wemZTSkNkQnY3eTJkOERNeDZUZlZtZTNxMFpwVEtNTXU0WUwvdDdjaVROdGREa3dQb2doM0Nuang3cWswOFNId2YrZGtzWjdNMnZDT2xmc0YwaFE2SjRlaFBDYUhUTnJNL3pCU09xRDgzZEJFQkNXL0YvTEVtZWgwbk9IZDdvVmwzL1FvLzlHVURra2JqN3l6KzljdnZ1K2REQXR4OE56Q0RUUDRpS2Radms5TVdpaXp2dElMTGVweXNmbFN2VExGQlozN1JMd2lyaXF5UnhZdi96cmdGZC85WFZIaC9PbXpCdkRYNG1pdE1SL2xVYXZzMlZ4NmNSOTRsekFrcGxtM0lSTnk0VEZmdTQ3dHVZczlFUVBJUFZ0YTRQNjR0VitzWjduM3VlZDNjZ0V4MllLK1FMNSt4bXM2b3NrOHFRYlR5dUtWR2RhWDlGUXFrNnFmRG5UNXlreGswVks3S1o2MmI2RE5EVWZRbHFHSHhTTUt2MVAwWE41QnFNZUtHMVA0V3A1UWZaRFVDRWxkcHBvWDBVNnNzMmpJa28yWHBVUktDSWhmYU9xTFBmU2hkdFMzN1pyVCtqRlJTSDJ4WVZWMXJtVC9NQnRSUWh4aU80TVEzaUFHbGFaaSs5UFdCRUlYT1ZudTlqTjFmOTIxbFdMWmt5OWJxYk0zSjJNQUFJOWptdUF4M2d5b0VVYTZQMml2czBFZU52L09SK0FYNnE1U1c2bDVIYW9GdVM2anI2eWc5bGltdStQMEtZS3pmTVhXY1FTZlRYenBPektFS3B3STNZR1hacFNTeTJMVGxNZ2ZtRkEzQ0Y2UjVjOXhXRXRSdUNnMlpQVVEyTmI2ZFJGVE5kNFRmR0hybkVXU0tIUHVSeWlKU0RBWitLWDBWeG1TSGpHUGJRVExWcHFpeGlhMnV5aFEzOTRnQk10N0MzWkFteG4vREpTK2wxZkJzQW8yRWlyL0Mwakc5Y3NkNCsvdHAxMnBQYy9CVkpHYUs5bWZ2cjdNL0NlenRybUNPNXFZMDZFZGk0eEFHdGlFaG5XQWJ6THkyVkV5YXpFMUo1blBtZ1U0UnBXNFNhMFRuT1Q2dzVsZ3QzL3RNcFJPaWdISG1leEJHQU1ZMG1kY0RiRHhXSXo0MU5nZEQ2b3hnSHNKUmdyNVJuVDZ3WkFrVE9jU3RVNE5NT1FOZW1TTzdneEdhaGRFc0MrTlJWR3hNVWhRbW1NMGxsV1JiYm1GR0h6RXFMTTRJdzBINzU3N0t5bytaZisyY1VGSU93OTNnRVkxNzF2UWFNMEhMd3BqcGRSUjZKejdWMGNrRTdYellKMFRtWTl6bkxkemt2YTB2TnJBR0dUNVNVWjV1YUhEa2NHdkkweVNwd2thc0VnWlBNc2VZY3U4NXc4SFBkU05pKzRUNkE4M2lBd0RieGdlRmNCMVpNMmlHWHpGY0VPVWxZVnJFY2thT3lvZGZ2YVlTUTdHdUI0SVNFMG5ZSmMxNVgvMWNpRFRQYlBDZ1lKSzU1VmtFb3I0THZ6TDlTMldEeTR4ais2Rk9xVnlUQUMyWk5vd2hlZWVTSTVoQS8wMmw4VVlrdjRuazlpYVZuK2tDVkVVc3RnazVIeXErZ0ptNlI5dkczcmh1TTkwNGhlL2hGbU5RYVVJQVRCMXkzdncrT214UDRYNVlpNkE1STVqSnVmSENqRjkrQUdOd25FbGxaalVjbzZYaHNPNVQ1K1IzeXh6NXlMVk9uQW4wenVTKzZ6ZGowblRKYkVaQ2JYSmR0cGZZWmZDZUNPcUpIb0UydlBQRlM2ZVJMaklKbEc2OVg5M25mUjBteFNGWHpwMVpjMGx0L1ZhZkRhSW1oVU10Ym5xV1ZiOU00bkdOUUxONjhCSFA3QVI4SWw5ZGtjeHptQnY4UENabHc5Z3VZMGx1cmJCc21OWWx3SlpzQS9CMTUvSGZrYmpid1BkZGFWZWNscy9lbG1ESE5XMnI0Y3JBeDQzZmVOa2ZSd3NhTnEveXlKMGQvcDVoWjZBWmFqejdEQmZVb2swWlU2MmdDeno3eDhlVmZKVEtBOElXbjQ1dklOTFNNMXErSEY5Q1Y5cUYzelA2TWwyMWtQUEwzQ1h6a3VZVWxuU3FUK0lqNHRJL29kNUt3SXMrdERhakRzNjRvd043dE9BZDZldWNHeitLZk8yNmlOY0JGcGJXQTU3MzJiQk5XTzRrSE5wcjlEOTU1TDYxYnZIQ0YvbXdTcno2ZVFhRGpmREVBTnFHTWtGYytOR3hwS1p6Q0Qyc2ovSnJIZCt6bFBROEl6N1ErMkpWSWlWQ3VDS29LL2hsQUVIenZrL1BpcTNtUkwxclQvZkVoOWhvVDVHSm1lWXN3ZzFvdGlLeWRpekovZlMyU2VLSFZ1NlozSkVIamlXOE5hVFFnUDV4ZEJsaThuQzU3WGlOOWhycXVCdTk5aG45enF3bzkyK1BNMkpYdHBlVlpTMFBkcVI1bUR5RHJlTU10RXdzK0Nwd2FSeXl6b1l0ZmN2dDlQSklXMGZKVk5OaS9GRnlSc2VhN3BlTHZKckwrNWI0R09YSjh0QXIrQVRrOWY4S21pSXNSaHFSeTB2Rnp3UlYzWjVkWjNRcUlVOEpRL3VRcGtKYmpNVU1GajJGOXNDRmVhQmpJNCtmTC9vTjMrTFFnakk0enVBZlErM0lQSVBGUUJjY2YwY2xKcHNmcG5CeEQ4NGF0d3R1cGtHcUt2ckg3Y0dObC9RY1djU2k2d2NWRE1MNmxqT2dZYm8rMkJPQVdOTmpsVUJQaXlpdFVBd2JuaEZ2TGJucXc0MmtSM1lwMmt2MmRNZURkY0dPWDVrVDRTNk00NEtIRUIvU3BDZmw3eGdzVXZzK0pOWTlHM08yWC82RkV0OUZ5QW41N2xyYml1K3RsODNzQ3ltU3ZxOWVaYmU5bWNoTDdNVGYvVGE3OGU4MHpTZjBoWVk1ZVVVNytmZjE0anY3WHk4cWp6Znp6enZhSm5ySWR2RmI1QkxXS2NXR3k1L3c3K3ZWMmN2SWZ3SHFkVEIrUnVKSzVvajltYnQwSHk5NEFtak1qandZTlpsTlM2dWl5eE5ud055dDNnZHJlTGI2NHAvMyswOG5Ya2I5MkxUa2tSZ0ZPd2sxb0dFVmxsY09qNWx2MWhmQVp5d0Rvd3MwOTQ0VTh2VUZ3K0EvbnVWcS9VQ3lnc3JtV0lCbkh5VTAxZDBYSlB3cmlFT3Z4L0lTSzZQazR5MncwZ21valpzN2xVOFR0YWtCQWRuZTR2L2FOeG1NcEs0VmNHTXA3c2kweXFzaW9sWFJ1T2kxWjFQN1NxRDNabXAwQ1djeUs0VWJtcDJTWGlYdUk1bkdMQ2llRkhLSE5SSWxjWTNQeXMyZHdNVFlDYXFseVdTSVR3cjJvR1h2eVUzaDFQZjhlUTN3MWJuRDdpbG9jVmpZRGtjWFIzT28xQlhnTUxUVWpOdzJ4TVZ3anRwOTlOaFNWYzVhSVdyRFFUNURIUEt0Q3RoZUJQNHpIY3c0ZHoyZVJkVE1hbWhsSGh0ZmdxSkpISTdOR0RVdzFYTDh2c1NlU0h5S3FEdHFvQW1yUXFzWXd2d2k3SFczb2pXeWhJYTVvejV4SlRhcTE0TkF6RkxqVkxSMTJyUk5VUTZ4b2hEbnJXRmI1Ykc5eWY4YUNEOGQ1cGhvYWNrY05KcCtEdzNEdWUzUk0rNVJpZDdFdUlnc253Z3BYMHJVV2gvbnFQdEJ5TWhNWlo2OU5wZ3ZSVEtaNjJWaVorUTdEcDVyNEswZDdFZkp1aXkwNkt1SVlhdVJoNUVjcmhkdDJRcFRTMWsxQXNjRUh2YXBOYlUzSEwxRjJURnlSMzNXeGI1TXZINWlac3JuM1NEY3N4bG5uc2hPOFBMd21kR04rcGFXblF1T1J0WkdYMzd1aEZUNjRTZXVQc3g4VU9va1k2T044NVdkUTFka2k1ekVyc0pHYXpjQk9kZFdKRUtxTlBpSnBzTUQxR3JWTHJWWStBT2RQV1FuZVR5eVAxaFJYL2xNTTRab2dHR09oWXVBZHI3Ri9ET2lBb2MrK2NuNXZsZjB6a01VSjQwWjFybGd2OUJlbFBxVk9weEtlT3B6S2RGOG1hSysxVnYyM01POWsvOCtxcExveHJJR0gyRURRbG5HbUg4Q0QzMUc4UXFseVFJY3BtUjVid21TVnc5L05zNklIZ3VsQ1JlaHZaLytWck02MEN1L3IzQW9udEZmcmxqZXc3NHNrWWUydXluN0pLUXRGUUJRUko5cnlHaWMvelFPc2JTNHNjVUJjdEE4Y1BUb1EzeDZaQlF1NkRQdTVtMWJuQ3RQOFRsbExZQTBVVFFOVnF6YTVuZmV3M01vcHkxR1BVd0c1anNsME9WWG5pUG1BY21McU81SEc4SHYzblNMZWNFOW9PalBEWGNzVHhvQ0J4WXl6QmRqNHdtbnlFVjRrdkZEdW5pcFM4U1NrdmRhTW5UQk45YnJIVVI4eGRtbUVBcC9QZHFrOXVleHRwMXQrSnJ0WHdwTi9NRzJ3L3FoUk1wU054UTF1aGcva0tPMzBlUS9GeUhVRGtXSFQ4VjZnR1JVNERoRE14WnU3eFhpajlVaTZqbHBXbVFDcUpnM0ZrT1RxM1dLbmVDUllaeEJYTU5BVkxRZ0hYU0NHU3FOZGplYlk5NG95SXBWak1ZZWhBaUZ4L3RxekJYRkhaYUw1UGVlRDc0clc1T3lzRm9VWFk4c2ViVVpsZUZUVWEvK3pCS1ZURkRvcFRSZVhOdVpxNDdRamtXbnhqaXJDb21tTzRML0dyRnRWVjIxRXBNeXc4d3lUaEw1WTU5ZDg4eHRseDFnMXR0U0lDRHdub2Y2bHQvNnpsaVB6Z1ZVTDhqV0JqQzBvMkQ2S2crak51VGhrQWxhREpzcS9BRzJhS0EvL0E3NmF2dzJLTnF0djIyM1ArV3EzU3RSREROS0ZGZ3RzRnVrWXQxR0ZEV29vRlZYaXRhTmhiM1JDeUppNGNNZU5qUk9pUEVEYjRrK0czK2hEOHRzZys1aGhtU2MvOHQySlRTd1lvQ3pBSTc1ZG9xOFFUSGUrRS9UdzBSUVNVRGxVKzZ1QmVOTjNoNmpKR1gvbUg4b2owaTNjYUNOc2p2VG5vaDczQnR5WnBzZmxITHE2QWZ3Sk5DRFg0Uzk4aDQrcENPaEdLRGhWM3J0a0tITWEzRUc0Sjl5OHpGV0k0VXNmTnpDL1JsNW1pZE5uN2d3b045ajIzSEdDUVErT0FacFRUUE1kaVZvdzc0MGdJeXVFdGQwcVZ4TXlOWGhIY251WFJLZHc1d0RVU0wzNThrdGpNWG1Ba3ZJQjczQkxhMXZmRjlCQVVaSW5QWUppd3hxRldRUUJWazdnUUg0b2pmVVEvS0VqbitBL1dSNkVFZTRDdGJwb0xlMW16SGthamdUSW9FMFNMREhWYXVLaHJxMTJ6ckFYQkdiUFBXS0N0NERHZWRxM0p5R1JibVBGVzMyYkU3VDIwKzczQmF0Vi9xUWhoQldmV0JGSGZoWVdYakFMdHMzOEZlbW5vVCs5Ym4xakRCTWNVTW1ZZ1NjMGU3R1FqdjJNVUJ3TFU4aW9uQ3BnVitRcmhnN2lVSWZVWTZKRnhSMFkrWlRDUE0rclZ1cTBHTkx5SlhYNm5yVVR0OEh6RkJSWTFFL0ZJbTJFZVZBOU5jWHJqN1M2WVlJQ2hWUUNXci9tMmZZVWpDNGowWExrelo4R0NTTGZta1czUEIveHErbmxYc0tWQk9qN3ZUdnFLQ09NcTdadHFyM2NRK044Z0JuUGFBcHMrb0d3V09rYnV4blJZai94L1dqaURjbFZyczIyeE1LNHFBckUxWnRrMTQ1NmtpSnJpdzZhYmtOZVJIb2dhUFJCZ2JnRjlaOGkvdGJ6V0VMTjRDdmJxdHJxVjlUdEdTbm1QUzJGOWtxT0lCYWF6SFlhSjliaTNBb0RCdmxaYXNNbHV4dDBCRFhmaHAwMkpuNDExYVZ0NlM0VFVCOFpnRkRrSTZUUDZnd1BZODV3K29VUVNzakllWFZtaW5yd0lkSzJaQWF3YjhTZTZYT0piT2FsaVF4SFNybkFlT05ETHVDbkZlaklicDRZRHRCY1FDd01zWWlSWmZIZWZ1RUpxSmN3S1RUSjhzeDVoakhtSkkxc1BGSE9yNlc5QWhaMk5Bb2QzOG1uTFFrMWdPejJMQ0FvaG9RYmdNYlVLOVJNRUEzTGtpRjdTcjl0TFpwNmxrY2lJR2hFMlY1NDZ3M01hbTUzVnRWa0diQjl3MFlrMlhpUm5DbWJweG1IcjJrNGVTQzBSdU5iak5zVWZESWZjOERadlJ2Z1VEZTFJbEtkWlR6Y1Q0WkdFYjUzZHA4VnRzb1pseVh6TEhPZEFic3AxTFBUVmFIdkxBMEdZREZNYkFXL1dVQmZVQWRId3FMRkFWKzN1SHZZV3JDZmhVT1IyaTg5cXZDQm9PYjQ4dXNBR2RjRjJNNGFLbjc5ay80M1d6QloreFIxTDB1WmZpYTcwWFA5c29RUmVldWhaaVVuWEZERzFUOC9PWE5tc3NUU25ZTysza1ZMQWdlaVk3MTl1RHdMOUZReWNnTFBlc3NOaWhNWmJBS0c3cXdQWnlHMTFHMStaQTNqQVgyeWRkcFlmbWFLQmxtZmNLL1YwbXdJUlVEQzBuSlNPUFVsMktCOGgxM0Y0ZGxWWmlSaGRHWTVmYXJ3TitmOWhFYjFjUmk0MVpjR0RuNlhlOU1NU1RPWTgxVUxKeVhJSFNXRklRSHN0VllMaUpFaVVqa3RsSGlHam50TjUvYnRCOEZ1K3ZwMjh6bDJmWlhOK2RKRHlONkVYaFMrMHl6cXBsL0xTSk5FVVZ4bXU3QnNOZGpBWTBqVnNBaGtOdXVZMEUxRzQ4ZWoyNW1TdCswMHlQYlE0U1JDVmtJd2I2SVN2WXRtSlJQejladDVkazc2YmxmK2xKd0FQSDVLREYrdkhBbUFDTG9DZEcyQWRpaTZkT0huTkpuVG1adG9PR084UTFqeTF2ZU13NmdiTEZUb1FtZkphN25UN0FsODltUmJSa1paUXhKVEtnSzVLYzlJTnptVEpGcDB0cEFQek5teUwvRjA4YlgzbmhDdW1NL2NSLzJSUG45ZW1aM1Zsam9rdHRaRDF6VldYbFVJcUVVN1NMazVJMGxGUlUwQWNFTlhCWWF6TmFWenNWSEEvc0QzbzlobTQyd2JISVJiL0JCUVRLekFpOHMzK2JNdHBPT1pnTGRRekNZUGZYM1VVeEtkMVdZVmtHSDdsaC9SQkJnTVpad1h6VTkrR1l4ZEJxbEdzMExQK0RaNWcyQldOaDZGQWNSOTQ0QitLL0pUV0kzdDlZeVZ5UmhsUDRDQ29Vay9tbUY3K3IycGlsVkJqeFhCSEZhQmZCdHI5aGJWbjJ6RHVJMGtFT0cza0J4OENHZFBPalgxcGgxUE9PWkpVTzFKRUdHMGp6VXkydEs0WDBDZ1ZOWWhta3FxUXlzUk50S3VQZENKcUszV1c1N2thVjE3dlhnaXlQcmw0S0VFV2dpR0YxZXVJNFFrU0ZIRmYwVERyb1FpTE5LSmlMYmRoSDBZQmhyaVJOQ0hQeFNxSm1OTm9rZXRhaW9vaHFNZ2xoNndMdEVHV1NNMUVaYlFnNzJoMFVKQUlQVkZDQUpPVGhwUUdHZEtmRm92Y3dFZWlCdVpITjJPYjR1Vk03K2d3Wkx6MUQ5RTd0YTRSbU1aMjRPQkJBZzdFaDZkTFhHb2ZaNFUyVEZPQ1FNS2p3aFZja2pyeWRSUytZYXFDdzFrWXQ2VWV4dXpiTkVEeVlMVFpuclkxUHpzSFpKVDRVK2F3TzJ4bHFUU1l1Nm4vVTI5TzJ3UFhnR09FS0RNU3ErelRVdHljOCs2aUxwMGl2YXY0Rkt4K3h4Vnk0RnhoSUYvcHVjVkRxcHNWZTJqRk9mZFpoVHpMejJRanR6dnNUQ3ZEUFU3YnpESDJlWFZLVVY5VForcUZ0YVNTeG5ZZ1lkWEt3VnJlSWd2V2hUOWVHREIyT3ZuV3lQTGZJSUlmTm5mSXhVOG5XN01iY0gwNW5obHNZdGFXOUVaUnN4V2NLZEVxSW5xMURpWlBLQ3o3aUdtQVU5L2Njbm5RdWQycE5nSUdGWU9UQVdqaElyZDYzYVBEZ2ZqOC9zZGxENGwrVVRsY3hUSTlqYmFNcXFOMGdReFNIczYwSUFjVzNjSDRwM1YxYVNjaVRLQjI5TDF0ejJlVVFoUmlUZ1R2bXFjK3NHdEJOaDRreTBtUUpHc2R5Y0JSRVArZkFhU3MxRVJFRFZvNWd2Z2k1K2FDTjdORUN3MzBvd2JDYzFtU3BqaWFoeU5Wd0pkMWppR2d6U3dmVHB6ZjJjNVhKdkcvZzFuMGZIODhLSE5uZit1N1ppUk1sWHVlU0lzbG9KQlV0VzllenZzeDlncmZzWC9GTnhuYnhVMUx2ZzBoTHhpeHlwSEtHRkFhUHUweENEOG9EVGVGU3lmUlQ2czgxMDlHTVVaTDhtMnhYcDhYMmRwUENXV2RYODRpZ2E0QnJUbE9mcW94NHNocUVnaC9IdDRxUnN0NTJjQTF4T0lVdU94Z2ZVaXZwNnY1ZjhJVnlhcnlFZHBWazcyRVJBd2RUNGFvWTF1c0JnbVArMG0wNlEyMTZIL251YnROWXhIYU9JWWpjYWNoM0E4RXovemMwS2NTaGhlbDBIQ1lqRnNBMEZqWXF5SjVaVUgxYVp3Myt6V0MwaExwTTZHRGZjQWRuOWZxMm9yUG1aYlc2WFhyZitLcmM5UnR2SUk1amVEM2RGb1QxS3daSnd4ZlVNdmM1S0xmbjhyUk9XMjNKdzg5c0oyYTVkcEIzcVdEVUJXRjJpWDhPQ3VLcHJIb3NKMm1mbEJSK1dxczg2VnZnSS9YTW5zcWI5NytWbEtkUFZ5c2N6UGo4Smh6ZitXQ3ZHQkhpakFxWWxhdmJGNjBzb01XbEhidktUK1NjdmhwcmdlVGxuNTF4WDBzRitFYWRjL2wyczJhNUJna1ZiSFl5ejBFODVwMExzdHFIK2dFR2lSODRuQlJSRkluOGhMU1pyR3dxalozRTI5Y3VHaSs1WjVicDdFTThNV0ZhOXNzUy92eTRWckRmRUNTdjdEU1U4NERhUDBzWEkzQXA0bFd6blE2NW5Rb1RLUldVMzBnZDdObjhab3dVdkdJeDRhcXlYR3dtQS9QQjRxTjhtc0pVT0RlelVIRWwwVlA5dW8rY1o4dlBGb2RTSUI0QzdsUVlqRUZqOHl1NDlDMktJVjNxeE1GWVRldkc4S3FBcjBUUGxrYnpISG5UcERwdnB6emlBaU5GaDh4aVQ3Qy9UaXlIMEVndVV3NHZ4QWdwbkUyN1dJeXBWK3VGTjJ6Vzd4bmlGL243NXRyczlJSjVhbUIxelhYWjFMRmtKNkdiUy9kRm9remw0Y2MybWFtVndoTDRYVTBBdjVnRFdBbCthRVdoQVA3dDJWSXdVK0VwdmZPUERjTEFTWDdIN2xacFhBMlhRZmJTbEQ0cVUxOE5mZk5Qb0FLTU5TY2NCZk85WVZWZ21sVzRSeWRCcWZIQVY3K2hyWjg0V0pHaG82Yk5UMFlNaHh4TGRPeC9kd0dqMG95YWs5YUFrTko4bFJKelV1QThzUitmUHlpeVRnVUhpbzUrUHArWWFLbEhyaFI0MWpZNU5FU1BTM3grelRNZTBTMkhuTE9LQ09RUHBkeEt5dmlCdmRIckNEUnFPK2w5NkhoaE5CTFhXdjR5RU11RVVZbzhrWG5ZSk04b0lnVk00WEoreFhPZXY0WWJXZXFzdmdxMGxtdzQvUGlZcjlzWUx0K1c1RUF1WVNGbkpFYW44Q3dKd2J0QVNCZkxCQnBKWmlSUG9yL2FDSkJac00rTWh2UzdaZXB5SHZVOG01V1NtYVpueHVMdHM4b2psNktrUzhvU0FIa3E1R1dsQ0IvTmdKNVczck8yQ2oxTUs3YWh4c0NyYlRUM2EwVi9RUUgrc0VyeFY0WFVXREh4MGtrRnkyNWJQbUJNQlE2QlUzSG9IaGhZY0pCOUpoUDZOWFVXS3huRTByYVhIQjZVOUtIcFdkUUNRSTcycWV2cDVmTXpjbStBdkM4NXJzeW5WUWhydURBOWZwOUNPZTdONTZjZzFVS0dTYXM4OXZyTitXbEdMWVR3aTVXKzB4WWRLRUd0R0NlTkp3WEtEVTBYcVU1dVFZbldzTXdURU5MR3RiUU12b0dqSUZJRU16Q1JhbDRybkJBZzdEL0NTbjhNc0N2UytGREpKQXpvaWlvSkVoWkpnQXA5bjIrMVl6bnI3SCs2ZVQ0WWtKOU1wajYwSW1jVzRpNGlIRExuOVJ5ZEI4ZHgzUVltM3JzWDZuNFZSclpEc1lLNkRDR3drd2Q1bjMvSU5GRXBrMTZmWXBQNkp0TVFwcUVNemNPZlFHQUhYQlRFR3p1TEowM0dZUUw5Ym1WMi83RXhEbFJmK1V2ZjFzTTJmclJ0Q1dtYWwxMnBNZ3RvbnZTQ3RSNG4xQ0xVWlJkVEhESFAxT3R3cWQrcmNkbGF2bktqVUIvT1lYUUhVSnpwTnlGb0twUUsrMk9nckVLcEd5SWdJQmduMnk5UUhuVEppaFpPcEV2T0tJb0hBTUdBWEhtajIxTHltMzlNYmlvdzRJRis3N3hOdWV3emlOVkJ4cjZLRDVlKzlIelpTQklsVWEvQW1zREZKRlhleXJRYWtSM0Z3b3dUR2NBREpIY0VmaEdrWFlOR1NZbzRkaDRieHdMTSsyOHhqaXFrZG4wLzNSNFVFa3ZjQnJCZm4vU3pCYzFYaEtNMlZQbEpnS1NvcmpEYWM5NlYyVW5RWVhsMS95WlBUNERWZWxnTytzb01qZXhYd1lPNThWTGw1eEluUVVaSThqYzNIMkNQbkNOYjlYMDVuT3hJeTRNbGVjYXNUcUdLNnMyYXo0UmpwRjJjUVAyRzI4Uis3d0RQc1pEWkMva1d0amRvSEM3U3BkUG1xUXJVQWhNd0tWdXhDbVlUaUQ5cS9PN0dIdFp2UFNOMENBVVFOL3J5bVhaTm5pWUxsSkRFNzBic2s2WHhzaDRrRE9keGU3QTJ3bzdQOUY1WXZxcVJESTZicmY3OXlQQ1NwNEkwalZvTzRZbkxZdFg1bnpzcFI1V0I0QUtPWXRSMXVqWGJPUXBQeVlEdmZSRTNGTjV6dzBpN3JlZWhkaTd5VjBZRFJLUmxsR0NHUms1WXorVXYxZllsMlp3cm5Hc3FzamdBVm8weEVVYmE4b2hqYU5NSk53VHdaQS93QkRXRlNDcGcxZVVIOE1ZTDJ6ZGlveFJUcWdHUXJEWnhReU56eUJKUFhaRjArb3hJVEpBYmo3b05DNUp3Z0RNVUphTTVHcWxHQ1djLy9LQ0lySSthY2xFZTRJQTB1enY3Y3VqNkdDZGFKT05waTEzTzU0NHZidElIQkYrQStKZURGVVFOeTYxR2tpM3J0eVE0YVV5d242cnUzMTQvZGtHaVA4SXdqbzBKLzJUeHM0OVprd0VsNG14K2lZVVVPNTVJNnBKelU0UCs3UlJzK0RYWmt5S1VZWnFWV3JQRjRJOTRtNFd4MXRYZUU3NG85R3VYOTc3eXZKL2prZGFrOCtBbW9IVmpJMTVWK1d3QmRBUkZWMklQaXJKZ1ZNZHNnMVBlejJWTkhxYTdFSFdkVGtsM1hUY3lqRzlCaXVlV0Z2UWZYSThhV1NrdXVSbXFpL0hVdXpxeXZMSmZOZnMwdHhNcWxkWVlmbFdCMUJTMzFXa3VQSkdHd1hVQ3BqaVFTa3RrdUJNV3dIalNrUXhlZWhxdzFLZ3owVHJ6bTdRYnRneGlFUERWbVdDTkNBZUNmUk9UcGhkMVpOT2h6THk2WGZKeUc2WGdkNU1DQVp3NHhpZTBTajVBblkxL2FrRGdOUzlZRmwzWTA2dmQ2RkFzZzJnVlFKdHpHN0xWcTFPSDJmcmJYTkhXSC9OWTg5Tk5aNFFVU0pxTDJ5RWNHQURiVDM4WDBiR2R1a3FZbFNvbGlLT2NzU1R1cWhjYWVtVWVZTExvSTgrTVpvcjJSeFhUUlRoRjFMckhmcWYvNUxjTEFqZGw0RUVSZ1V5c1lTMmdlRSt5RmRhc1U5MVVnVURzYzJjU1ExWm9UOSt1TE93ZGdBbWlmd1FxRjAyOElOYzJJUUVEZlRtVXczZVp4dno3VWQxejN4YzFQUWZlQ3ZmS3NCOWpPaFJqN3JGeWI5WGNEV0xjWWowYkJ5b3N5Y2hNZXpNTFZrRmlZY2RCQlF0dkk2SzBLUnVPWlFIMmtCc1lISmFYVGt1cDhGMGVJaE8xL0djSXdXS3ByMm1vdUI3ZzVUVURKTnZPUlhQWGEvbVU4YmgyN1RBWllCZTJzS3g0TlN2NU9qbkhJV0QyUnV5c0N6QmxVZmVOWGhEZDJqeG5Ib1VsaGVKM2pCQXB6VVJ5MGZ3bTJGd3dzU1UwY2FRR2wwS3Y4aG9wUlFFMjExTm52dExSc21DTnJoaHBFRG9OaVpFekQyUWRKV0tiUlJXbmFGZWRYSEFFTFNOMHQwYmZzQ3NNZjBrdGZCb1hCb05BK25aTjkrcFNsbXV6c3BGZXZtc3FxY01sbHp6dmt5WHJ6b0ErUnlvMWVQWHBkR09vSnZoeXJ1K0VCUnNtT3A3TVhaMHZOVU1VcUhMVW9LZ2xnMXA3M3NXZVptUGMrS0F3MHBFMnpJc0ZGRTVINDE5Mkt3RHZEeGR4RVlvREJETlpqYmcyYm1BRFRlVUtLNTdJUEQ0ZlRZRjRjNkVuWHgvdGVZTU9SQkR0SWhQSm5laVpueTdOdi96RytZbWVrSUtDb3hyNmthdUUyYlp0Qkx1ZmV0TkcwQnRCWTdmKy9JbVV5cE1CdmRXdS9RN3ZUTVJ6dzVhUUdaV3VjMVYwSEVzSXRGWU1JQm5vS0daMHhjYXJiYS9UWVpxNTBrQ2FmbEZ5c1lqQTRFREtIcUdkcFlXZEtZbW0rYTdUQURtVzM1eWZuT1lwWllya3BWRXRpcUYwRXVqSTAwYWVwbE5zMmsrcXlGWk5lRTNDRFBMOVA2YjRQUS9rYXRhSGtWcExTRVZHSzdFWDZyQWE3SVZOcnZadEZ2T0E2b2tLdkJnTXRGREFHWk94ODhNZUJjSjhBUjNBZ1VVZUl6bkFONnRqQ1VpcEdEWk9ObTFGaldKcDRBM1FJelNhSU9tWjdEdkYveXNZWWJNL2ZGRE9WMGpudEFqUmRhcHhKeEwwZVRocEVoS09qQ0REcTJrcyszR3J3eHFJRktMZTFXZE96SUk4WElPUEdud3k2TEtYVmZwU0RPVEVmYVJzR3VqaHBTNGhCSXNNT3FIYmwxNlBKeGM0RWthVnU5d3BFWWxGLzg0TlN2NVp1bTRkck1mcDl5WGJ6ekFPSnFxUzRZa0k0Y0JyRnJDN2JNUGlDZmdJM25OWkFxa2szUU9acVIreXlxeCtuRFFLQkJCWjdRS3JmR01DTCtYcHFGYUJKVTB3cGtCZEFoYlI0aEpzbVQ1YXlubHZrb3VveG0vTmpENW9lNkJ6VklPOXVrdE0rLzVkRUM1UDd2WnZhcm11Ty9sS1h6NHNCYWJWUElBVHVLVHJ3YkpQOFhVa2RNNnVFY3RIS1hJQ1VKR2phWklXUmJacDhjenF1UVlmWTZ5bkJVQ2ZJVStnRzZ3cVNJQm1ZSW05cFpwWGRhTDEyMVY3cTBWakRqbVFuWHZNZTd5c29FWm5aTDE1QjBTcHhTMWpqZDgzdU5JT0tad3U1TVB6ZzJOaE94M3hNT1BZd0VuMkNVemJTcndBczVPQXRyejNHQWFVa0pPVTc0WHdqYVlVbUdKZFpCUzFOSlZrR1lyVG9JTkxLRGp4Y3VJbHlmVnNLUVNHL0c0RHlpTzJTbFF2SjBkME90MXVPRzVJRlNBa3ErUFJWTWdWTUR2T0lKTWRxamVDRktVR1JXQlc5d2lnWXZjYlU3Q1FMLzdtZUYyS1pBYVdsKzR5OXVob3dBWDdlbG9nQXZJdEFBeG8yK1NGeEdSc0hHRVc5Qm5obFR1V2lnWXhSY25WVUJSUUhWNDFMVitGcjVDSllWN3NIZmV5d3N3eDRYTXRVeDZFa0JoUitxOEFYWFVBOHVQSjczUGI0OWk5S0c5Zk9sanZYZXlGajlpeGdibzZDY2JBSjdXSFdxS0h5L2grWWpCd3A2VmNON004OUZHelEwNHFiclF0Z3JPRnliZzNnUVJUWUc1eG43M0Fya2ZRV2pDSlJPd3kzSjM4RHgvRDdqT2E2QkJOc2l0RXcxd0dxNzgwRUVpb09lRCtaR3AySjY2QURpVkdNYXlpSFl1Y01rOG5USzJ6elQ5Q25FcmFBazk1a1FqeTRrMEdSRWxMTDVZQUtMUUVySjVycDFlYXk5TzRGYjZ5SkdtOVU0RmFNd1BHeHRLRDZvZElJSEtvV25oS28xVThLSXBGQytNVm41OVpYbWM3WlRCWmZzZzZGUThXMTBZZlRyNHUwbllycEhaYloxalhpTG1vb0YwY09tMCttUG5KQlhRdGVwYzduMEJxT2lwTkNxSTZ5eWxvVGVSU2hOS0gwNEZJbzBnY01rMEgveFRoeU40cFBBV2pERGtFcDNsTk5QUk5WZnBNSTQ0Q1dSbFJnVmlQNjRlSzBKU1JwMFdVdkNXWXVtbFcvYzU4VmN6L3lNd1ZjVzVvWWI5KzI2VEVod3ZieGlOZzQ4aGwxVkkxVVhUVS8vRXRhK0JNS25HVWl2Y3RmTDV3SU5ERDBnaVFMMWlwdDZVN0M5Y2Q0K2xncVkybE1VWjAyVXY2UHJzK1pFWmVyN1pmV0JYVmdobGZPT3JDbHdzb09GS3pXRWZ6NlJadTFlQ3MrSzhmTHZrdHM1K0JYMGd5ckZZdmUwQzNxSHJuNVUvT2g2RC9DaWhtV0lyWTdIVVpSaEpheGRlK3RsZHU2YWRZSitMZVh1cFF3MFhFeEMzNlJFVGRORnhjcTlnbE11NGNOUVNYOWNxUi9HUVlwK0l4VWtJY05HV1ZVN1p0R2E2UDNYQXlvZFJ0MFhlUzNUcDAxQW5DaDBaYlVoNFZyU1plVjlSV2ZTb1d5eG5ZM2h6Y1ozMEcvSW5EcTR3eFJyRWVqcmVCeG5oSVFia3hlbnhrYXhsK2s3ZUxVUWtVUjZ2S0oyaURGTkdYM1dtVkExeWFPSCttdmhCZCtzRTZ2YWNRekZvYndZNUJxRUFGbWVqd1c1bmU3SHRWTm9sT1VnSmM4Q3NVeG1jL0xCaThONW11OVZzSUE1SHlFcm5TNnplQ3o3VkxJOStuL2hiVDZoVG9rTVhUVnlYSlJLU0cyaGQybGFiWFRidG1LNGZOSDNJWkJQcmVTQTRGTWVWb3VWTjN6RzV4OUNpR3BMdy8zcGNlbzRxR3FwK3JWcCt6Kzd5UTk4b0VmK255SDRGMytKOUloZURCYTk0V2k2M3pKYkxCQ0labTdQMGFzSEdwSUp0M1B6RTNtMFM0WUlXeVhCQ1ZYR2lrajhNdWREUEIvNk5tMnY0SXhKNWdVMGlpMGd1eTVTVUhxR1VZelRQMGpJSlU1RTgyUkhVWHRYNGxEZHJpaEJMZFAxWWFHMUFHVUMxMnJRS3VJYUd2Q3BNalpDOWJXU0NZbmpEbHZwV2JrZFhNVE5lQkhMS2l1b296TUdJdmtjem1QMGFSSlNKOFBZbkxDVk5oS0hYQk5ja0g3OWU4WjhLYzJ3VWVqNHNRWm9IOHFEUkdrZzg2bWFXL1pRV0dObkxjWG1xM0ZsWE02c3NSLzNQNkUvYkhNdm02SExydjF5Uml4aXQyNUpzSDMvSU9yMlVWNEJXSmh4WFc1Qko2WGRyMDduOWtGM1pOQWs2L1hwYzVNU0ZtWUoyUjdiZEw4S2s3cTFPVTlFbGcvdEN4SjhnaVQyN3dTVHlTRjBHT3hnNFBiWUpkaS9OeWlhOU5uODlDR0R1bGZKZW1tMWFpRXIvZWxlR1NOKzVNUnJWSjRLNmxneVRUSVczaTljUTBkQWk2Rkh0MFlNYkgzd0RTQXRHTFNBY2Nlenp4SGl0dDFRZGhXMzZDUWdQY0E4dklJQmgzL0pOamYvT2JtYzJ5enBrOGVkU2xTNGxWZHdnVzV2emJZRXlGb0Y0R0NCQmJ5MWtlVk51ZUhBSCtldmkrSDdvT1ZmUzNYdVBRU05UWE9PTkFiekplU2I1c3R3ZFFIbDFaanJHb0U0OUk4K0E5ajN0K2FoaFFqNzRGQ1NXcFpyajd3UlNGSkpubndpMVQ5SEw1cXJDRlcvSlpxNlA2MlhrTVdUYit1NGxHcEtmbW13aUpXeDE3OEdPRzdLYnJaR3F5V3dtdXlLV1BrTnN3a1oxcTh1cHRVbHZpSWkrQVhoMmJPT1RPTHNydE5rZnFiUUplaDI0cmVlYmtJTkxranV0NXI0ZDlHUi9yOENCYTlTVTBVUWhzblpwNWNQK1JxV0NpeFJtN2k0WVJGYnRaNEVBa2h0TmE2akhiNmdQWVF2N01LcWtQTFJtWDNkRnNLOFhzUkxWWjZJRVZyQ2JtTkRjOG81bXFzb2dqQVFmb0M5QmM3UjZnZncwM20rbFFwdjZrVGZoeHNjRElYNnMwdytmQnh0a2hqWEFYcjEwVW91V0N4M0MvcC9GWXdKUlMvQVhSS2tqT2I1Q0xtSzRYUmUwK3hlRER3VmtKUFphdTUyYnpMRURIQ3FWMGY0NHBQZ0tPa1lLZ1RaSjMzZm1rM1R1OFNkeEowMlNITThGZW01U01zV3FSeWkyRjF5bmZSSnN6Y0ZLeWtkV2xOcWdEQS9MOWxLWUJtYzdadS9xOWlpMUZQRjQ3VkprcWhpclVvYjUzem9pSnRWVlJWd01SMzRnVjlpcWNCYUhiUnU5a2t2cWszeU1wZlJGRzQ5cEtLaklpcTdoL1ZwUndQR1RIb1k0Y2cwNVg1MDI4aUhzTHZVVy91eitralB5SUVoaGNLVXdDa0pBd2JSOXBJRUdPbjh6NnN2QU84aTg5c0ozZEw1cURXRlliUytIR1BSTXhZd0pJdEZRTjg2WUVTZUpRaG4ydXJHaUxSZmZRZUxwdERsOGRBZ2IrVHA0N1VRUHhXT3cxN09lQ2hMTjFXbnpsa1BMMVQ1TytPM01lbnBuNEMzSVk1TEVlcEhwblBlWkhidnVXZmVWdFBsa0g0TFpqUGJCcmtKVDNOb1JKekJ0ODZDTzBYcTU5b1ErOGRzbTB5bVJjbVF5bjh3NzFtaG1jdUVJNWJ5dUYrQzg4VlBZbHkyc0V6amx6QVEzdmRuLzErSHpndXc2cUZOTmJxZW5oWkdiZGlHNlJ3WmFURzdqVEEyWDlSZFhqRE45eWoxdVFweU80THg4S1JBY1pjYlpNYWZwNHdQT2Q1TWRYb0ZZNTJWMUE4TTloaTNzc285Myt1cHJFMHFZTk1qa0UyMkN2SzRIdVV4cU43b0l6NXBXdUVUcTFsUUFqcWxTbHFkRDJSbnIvZ2dwL1RWa1FZam45bE1mWWVsazJzSDVIUGRvcFlvN01Id2xWMW9yOUJ4ZitRQ3lMem05MnZ6RzJ3amlJakMvWkhFSnplcm9KbDZiZEZQVHBaaG81TVYyVTg2ZkxRcXhObEdJTXFDR3krOVdZaEo4b2IxcjArV2h4ZGU5TDJQZHlzRVR2OTdPK3hWdytWTk4xVFpTUU41STZsOW01SXA2cExJcUxtNGExQjFmZkg2Z0h5cVQ5cDgyTk9qbnRSV0dJb2ZPM2JKejVHaGt2U1dic1h1ZVRBTWFKRG91OTlrR0xxRGxod0JaTkVRNG1LUHVEdlZ3U0s0V21MbHVIeWhBOTdwWmlWZThnK0p4bW5KRjhJa1YvdENzNEpxL0hnT29BRUdSOXRDRHNEYkRtaTNPdmlVUXBHNUQ4WG1LY1NBVWFGTFJYYjJsbUpUTllkaHRZeWZqQllaUW1ONXFUNUNOdWFEM0JWbmxrQ2s3YnNNVzNBdFhrTk1NVHVXNEhqVUVSU0puVlEwdnNCR2Exd28zUWg3MTE1WEdlVEYzTlR6OHcwNDQwQWdVN2MzYlNYTy9LTUlOYUlXWGQwb0xwb3EvMC9RSnhDUVNKOVhuWXkxVzdUWUxCSnBIc1ZXRDFhaHNBN0ZqTnZSZDZteENpSHNtOGc2WjBwbnpxSXBGMWRIVXRQMklUVTVaMWhaSGJ1K0wzQkVFU3RCYkw5WFl2R2ZFYWt2MWJtZitiT1pHbm9pdUhFZGxCbmFDaHhZS056QjIzYjhzdzhZeVQ3QWp4Zms0OWVKSUF2ZGJWa2RGQ2UySjBnTWVmaFEwYklaeGh4M2Z6TUl5c1FOaU44UGdPVUt4T011cjEwTGR1aWdSRURSTVp5UDRvR1dyUDFHRlk0dDZncm9BU3NaNDIxb3M0OHdBZG5yYm92TmhMdDdTY05VTGt3WjVBSVpKVHJiYUtZVExqQTFvSjNzSXVOL2FZb2NtLzl1b1FIRUlsYWNGMXMvVE0xZkxjUFRMMzhPOWZPc2pNRUl3b1BLZnZ0N29wdUk5RzJIZi9QUjRhQ0xEUTd3Tm1JZEV1WEovUU5MNzJrNXE0TmVqQWxkUGZlM1VWVnF6a3lzOFlaL2pZT0dPcDZjK1l6UkNyQ3VxME0xMXk3VGlONnFrN1lYUk1uL2d1a3hyRWltYk1RanIzandSTTZkS1ZaNFJVZldRcjhub1BYTEpxNnloNVIzRUgxSVZPSEVTc3QvTEl0YkcyRDJ2UnNaUmtBT2J6dlFBQUQzbWIzL0c0TnpvcEkwRkFpSGZicHEwWDcyYWRnNlNSais4T0hNU2h0Rnh4TFpsZi9uTGdSTGJDbHdsNVdtYVlTcyt5RWprcTQ4dFk3WjJiRTBOOTFtSnd0K3VhME5sUkpJRGgwSGlrRjRVdlNWb3JGajJZVnU5WWVTNXRmdmxWalBTb051L1p1NmRFVWZCT1Q1NTVoYWhCZE4zU2E1WHVqMlJ2YXUxbFFOSWFDOTQ0eTBSV2o5VWlORHNrQUsxV29MK0VmWGNDNkliQlhGUnlWZlgvV0tYeFBBd1V5SUFHVzhnZ1owOGhjaWpLVHQxWUtuVU82UVB2Y3JtRFZBYjBGQ0xJWG41aWQ0ZkQvSng0dHcvZ2JYczdXRjliMlJnWHRQaExCRzl2RjVGRWtkSEFLclFIWkFKQy9IV3ZrN252enpEeklYWmxmRlRKb0MzSnBHZ0xQQlk3U1FUakdsVXZHNTc3eU51dFoxaFRmczkvMW5rU1hLOXp6S0xSWjNWT0RlS1VvdkplMFdDcTF6Vk1ZeENKTWVubU56UElVMlM4VEE0RTd3V21iTmt4cTlySTJkZDZ2MFZwY0FQVk14bkRzdldUV0ZheXlxdktaTzdaMDhhNjJpL29IMi9qeGY4cnBtZk82NGluM0ZMaUwxR1g4SUd0VkU5TTIzeUdzSXFKYnhEVHkrTHRhTVdEYVBxa3ltYjVWclFkek92cWxkZVUwU1VpNklpckc4VVozamNwUmJ3SGExQzBEd3c5Ry9TRlgzZ1B2VEpRRStreXorZzFCZU1JTEtLTytvbGNIemN0T1dnenhZSG5PRDdkcENSdHVaRVhBQ2pncWVzWk1hc29QZ251REM0blV2aUFBeERjNXBuZ2pvQUlUSWt2aEt3ZzVkNjA4cGRyWmNBK3FuNVRNVDZVby9RekJhT3hCQ0xUSlgzTWdrODVyTWZzbld4ODZvTHhmN3AyUFg1T05xaWVUYS9xTTN0UHc0Wlh2bEFwODNOU0Q4RjcrWmdjdEsxVHBvWXd0aVUyaDAySENHaW9INXRrVkNxTlZUTUg1cDAwc1J5MkpVMXF5REJQMkNJSS9EZzRXRHNJbCt6Z2VYNzU4OXNyeDZZT1JSUU1CZktib2RiQjc0M1RsNFdMS09FbndXVVZCc205NFNPbENyYWNVNzJNU3lqMDY4d2RwWWp5ejFGd0MyYmpRbnhuQjZNcC9wWit5eVpYdGd1RWFZQitrcWhqUTZVVW13U0Zhek9iK3JoWWpMYW9pTSthTjkvOEtLbjB6YUNURnBOOWVLd1d5Ny91NEVIek80NlRkRlNOak1mbjJpUFNKd0RQQ0ZIYzBJMSt2amRBWnc1WmpxUi91emk5Wm4yMG9BYTVKbkxFay9FQTNWUldFN0ovWHJ1cGZGSlB0Q1V1cUhQcG5sTDdJU0p0UnBTVmNCOHFzWkNtMlFFa1dvUk90Q0tLeFVoM3lFY01iV1lKd2s2RGxFQkcwYlpQNmVnMDZGTDN2NlJQYjdvZEd1d203Rk44Zkc0d29xdEI4ZTdNNWtsUHBvOTdHb09iTnd0K2x1ZFRBbXh5QzVobWNGeCtkSXZFWktJNmlnRktIcUxIMDFpWTFvNzkwM1Z6RzlRR2V0eVZ4NVJObUJZVVUrekl1U3ZhL3lJY0VDVWk0cFJtRTNWa0YyYXZxdWxRRVVZNHlaL3dtTmJvQnpQbUFQZXkzK2RTWXRCWlVqZVdXVDBwUHdDejRWb3p4cDl4ZUNsSVU2MHF2RUZNUUNhUHZQYUE3MFdsT1A5Zi9leTM5bWFjdnBHQ1ZhK3pmYThnTzQ0d2J4cEpVbEM4R04vcFJNVFF0elk4WjgvaGlOclUrWnE2NFpmRkdJa2RqN203YWJjSzFFQnR3czFYNEovaG5xdmFzUHZ2RFNEWVdOK1FjUVZHTXFYYWxrRHRUYWQ1cllZMFRJUjFFcW94M2N6d1BNaktQdkY1c0Z2MTdUaHVqcjFJWjFZdGw0VlgxSjB2alhLbUxZNGxtWGlwUkFybzBxVkdFY1h4RVZNTUVsNTRqUU1kNEo3Umpnb21VMGoxcHRqeXhZK2NMaVN5WFBmaUVjSVMybFdESzNJU0F5NlVaM0hiNXZuUG5jQTk0NDExamN5NzVheTZCNkRTVHpLNlVUQ1pSOXVEQU50UEJydklEZ2pzZmFyTWl3b2F4Mk9sTHhhU29ZbjRpUmdrcEVHcUVrd294NXR5SThhS2tMbGZaMTJsTzExVHhzcVJNWTg5ajVKYU81NVhmUEpQREwxTEdTbkM4OFJlOUFpK051NWJaanR3UnJ2RklUVUZIUFI0Wm14R3NsUU1lY2diWk83bkhrMzJxSHhZa2R2V3B1cDA3b2pjTUNhVnJwRkF5RlpKSmJOdkJwWmZkZjM5SGRvMmtQdFQ3djAvZjhSL0I1Tno0ZjF0OS8zek5NLzduNlNVSGZjV2s1ZGZRRkp2Y0pNZ1BvbEdDcE9GYi9XQzBGR1dVMmFzdVF5VCtybTg4WktaNzhDZWkvQ0FoOTM5Q0gwSllicFpJUHR4YzJ1ZlhxalMzcEhIOWxuV0s0aUo3T2pSL0VFU3BDbzJSM01ZS3lFN3JIZmhUdldobzRjTDFRZE40akZUeVI2c3lNd0ZtMTI0VFZERFJYTU52ZUkxRHAvbnR3ZHo4azhreHc3aUZTeDYrWXg2TysxTHpNVnJOMEJCenppWmk5a25lWlN6Z29sbEJuVndCaDZvU09QSFhyZ2xyT2orUW1SL0FFU3JoRHBLcldUKzgvQWlNRHhTLzV3d1JOdUdRUExsSjlvdm9taEpXbjhzTUxWSXRROE4vN0lYdnREOGtkT29IYXcrdkJTYkZJbVFzdi9PQ0FJdWk5OUUrWVNJT01sTXZCWGtBdCtOQVpLOHdCOUpmOENQdEIrVE9VT1IrejcxZC9BRlhwUEJUNitBNUZManhNakxJRW9KenJRZnF1dnhFSWkrV29VekdSMUl6UUZOdmJZT254YjJQeVEwa0dkeVhLelcyYXhRTDhsTkFYUGs2TkVqcXJSRDFvWnRLTGxGb29mclh3MGRDTldBU0h6eSs3UFN6T1VKM1h0YVBac3hMRGpyK280MWZLdUtXTm1qaVp0ZmtPekl0dmxWMk1ER1NoZUdGMG1hMDRxRTNUVUVmcUpNclhGbTdEcEsrMjdEU3ZDVVZmN3JiTm9salBoaGE1VzdLQnFWcTBTaFVTVGJSbXVxUHRRcmVWV0g0SkVUNXlNaHVxTW9TZDRyL044c0RtZVFpUVF2aTF0Y1p2N01vYzdkVDVYNUF0Q0Q2a05FR1pPelZjTllscFg0QWJUc0xnU1lZbGlpUHlWb25pdVlZeVN4c0J5NWNnYjNwRCtFSzBHcGIwd0pnMDMxZFBnYUw4Slp0NnNJdnpOUEVIZlZQT2pYbWFYajRiZDR2b1h6cFo1R0FwTWhJTGdNYkNFV1oyendnZGVRZ2pOSExiUEl0K0txeFJ3V1BMVE42SHdaME91aWpqNFVGK1NnMEF1OFh1SUtXMFd4bGV4ZHJGckRjWko4U2hhdWF0M1gwWG1IeWdxZ0wxbkF1MmhySkZiNHdaWGtjUytpMzZLTXlVMXlGdll2MjNiUVVKaS8zeVFwcXIvbmFVT29pRVdPeGNreXEvZ3E0M2RGb3UxRFZEYVlNWks5dGhvNytJWFhva0JDczVHUmZPY0JLN2czQStqWFEzOUs0WUE4UEJSVzRtNSt5UjBaQXhXSm5jalJWYklUdklBUEhZUnQxRUozWUxpVWJxSXZvS0h0ekhLdFV5MWRkUlVRMEFVTzQxdm9uWkRVT1crbXJzencrU1cvNlEvSVVnTnBjWEZqa003RjRDU1NRMkV4Wmc4NW90c01zN2txc1FENE94WWVCTkRjU3BpZmpNb0xiN0dFYkdXVHdhc1ZPYm1CL2JmUGNVbHEwd1loWENZRURXUlcwMlRQNWJCcllzS1RHV2puV0RESjFGN3pXYWkwelcvMlhzQ3V2QlFqUEZjVFlhUVgzdFNYUlNtOGhzQW9EZGpBcksvT0ZwNnZjV1lPRTdsaXpQMFljKzhwMTZpNy9OaVhJaWlRVHA3YzdYdXM5MjVWRXRsS0FqVWRGaHlhaUxUN1Z4RGFncHJNRndpeDR3WjA1dTBxajdjRFdGZDBXOU9ZSEl1M0piSktNWFJKMWFZTm92dWdnK1FxUk43Zk5IU2kyNlZTZ0JwbitKZk11UG8zYWVxUFdpay93STVSejNCV2FyUFFYNGk1K2RNMG5wd1ZPc1grS3NPaEM3dkRnK09Kc3o0UTV6bG5JZWZsVVdMNlFZTWJmOVdEZkxtb3NMRjRRZXYzbUppT3VIam9vci9kTWVCcEE5aUtEa01qWUJOYlJvNDE0SEN4anNIckI0RVhOYkh6Tk1ESENMdU5CRzZTZitKNE1aL0VsVnNEU0x4aklpR3NUUGh3OEJQanhiZlF0c2tqK2R5Tk1LT09jVVlJUkJFSXFiYXp6M2xtamxSUWhwbHhxNjczVmtsTU1ZNjU5N3Z1K2Q4OWVjL3pxN01pNGdRdmg4N2VoWWJwT3VaRVhqNWcvUTdTN0JGREFBQjlEekczNVNDODUzeHRXVmNuWlFvSDU0amVPcVlMUjlORHV3eHNWdGhUVjdWOTluL0I3SFNiQXl0YkV5VlR6LzVOaEo4Z0dJakcwRTVqM2dyaVVMVWQ1Umc3dFFSKzkwaEpnTlFLUUgyYnRiU2ZQY2FUT2ZJZXhjMWRiMUJ4VU9oTTF2V0NwTGFZdUtyM0ZkTlR0L1QzUFdDcEVVV0RLRXR6WXJqcHpsTC93cmkzTUlUS3NGdnRGOFFWVi9OaFZvOTdhS0lCZ2RsaU5jMTBkV2RYVkRwVnRzTm4rMlVJb2xyZ3FkV0E0RVk4c28wWXZCNGErYUx6TVhpTUF1T0hRclhZMHRyK0NMMTBKYnZaemdqSkp1QjFjUmtkVDdEVXFUdm5zd1ZVcDVra1VTRlZ0SUlGWUswNSt0UXhUNjk5MkhITldWaFd4VXNEMVBrY2VJcmxYdVVWUm9nd21mZGh5cmY2enphTDgrYzBMN0dYTVpPdGVBaEFWUVZ3ZEpoKzduclg3eDRMYUlJZnoyRjJ2N0RnL3VEZnoyRmErNGdGbTJ6SEFvcjhVcWltSkczVlRKdFpFb0ZYaG5EWVh2eE1KRmM2a3UyYmhiQ3h6aWoyejVVTnVLMGptcDFtbnZrVk5VZlIrU0VtajFMcjk0THltNzVQTzdGczBNSXIzR2RzV1hSWFNmZ0xUVlkwRkxxYmE5N3UxSW44TkFjWTdJQzZUaldMaWd3S0VJbTQzTnhUZGFWVHY5bWNLa3p1ekJrS2Q4eC94dDFwLzlCYlA3V3liNGJwbzFLMWduT3BiTHZLejU4cFdsM0I1NVJKL1o1bVJETFB0TlFnMTRqZE9FczkraC9WNVVWcHdyQUk4a0diWDhLUFZQRElNZklxS0RqSkQ5VXlET1BoalozdkZBeWVjd3lxNGFrVUU5bURPdEpFSzFocER5aTZBZTg3c1dBQ2xYR1Rpd1B3TjdQWFd3anhhUjc5QXJIUklQZVlLVHVuVlcyNHNQci8zSFB6Mkl3SDhvS0g0T2xXRW10NEJMTTZXNWc0a01jWWJMd2oydXNvZEQxMDg4c3RaQTdWT3NVU3BFVmw0dzdOTWIxRVVITVJ4QXhMRjBDSVYrMEwzaVpiK2VrQjF2U0RTRmpBWjNoZkxKZjdnRmFYck9LbittaFIrcld3L2VUWEljQWdsNEh2RnVCZzFMT21PQXdKSDNlb1ZFamp3aGVLQTRpY2JyUUNtdkF0cFEwbVhHMGFnWXA1bWo0UmI2bWRRK1JWNFFCUGJ4TXFoOUM3bzhuUDBXa28yb2NuQ0hlUkdoTjFYVnlUMmI5QUNzTCs2eWxVeSt5QzNRRW5hS1JJSks5MVl0YW9TcmNXWk1Nd3h1TTBFOUo2OForWXlqQTBnOHAxUGZIQUFJUk95NlNhMDRWWE91VDZBMzUxRk9XaEtmVEdzRkozUlRKR1dZUG9MazVGVks0T2FZUjloa0p2ZXp3Rjl2UU4xMTI2cjZpc01HWFdUcUZXKzNITDNJL2p1cmxJZERXSVZ2WVkrczZ5cTdsckZTUEFHUmRuVTdQVndZL1N2V2JaR3BYenkzQlEyTG1BSmxyT05Vc1pzNG9Ha2x5MFYyNjd4YkQ1S01ZOHdvTk5zbVdHMVZWZ0xDcmE4YVFCQmNJNERQMkJsTnd4aGlDdEhsYXo2T1dGb0NXMHZNUjNFcnJHN0p5TWpUU0NudlJjc0VIZ21QbndBNmlOcEoyRHJGYjRnTGxoS0p5WkdhV2tBOTdINkZGZHdFY0xUNkRSUVFMKytmT2tWQzRjWUdXMVRHLzNpSzVkU2hSU3VpQnVsbWlocWdqUjQ1VmkwM28yUmJRYlAzc3h0OTBWeFE2dnpkbEdma1htbUttak9pMDgwSlNIa0xudGp2c0JKbnY3Z0tzY09hVE9rRWFSUXFBbkNBNEhXdEI0WG5NdE9ocFJtSDJGSDh0VFhySWpBR05XRW11ZFFMQ2tjVmxHVFE5NjVLaDBINml4WGJnSW1RUDZiNDJCNDlzTzVDOHBjN2lSbGd5dlNZdmNuSDlGZ1EzYXpMYlFHMmNVVzk2U0RvalRRU3R4a09KeU91REdUSEFubldrejI5YUV3TjlGVDhFSjR5aFhPZytqTFRyQ1BLZUVvSjlhN2xEWE9qRXI4QWdYNEJtbk1RNjY4b1cwellQeVFpVk1QeEtSSHRwZm5FRXlhS2hkek5WVGhseHhEUU5kckhlWmlVRmI2Tm9ZMkt3dlNiN0JuUmNwSnkrL2cvekFZeDNmWVNONVFFYVZEMlkxVnNOV3hCMEJTTzEyTVJzUlk4SkxmQWV6Uk16NWxVUnVMVW5HMVRvS2s2UTMwRnVnaHFXTjZnQk5jRnhQL25ZL2l2K2lhVVFPYSsyTnV5bTQ2d3RJL0R2U2Z6U3AxakVpNFNkWUJFN1loVGlWVjVjWDlnd2JvVkRNVmdacDVZQlFsSE9RdmFETmZjQ29DSnVZaGY1a3o1a3dpSUtQanpncGNSSkhQYk9oSmFqZW9lUkw1M2N1TWFoaFY4WjdJUnI2TTRoVzBKelQ3bXphTVV6UXBtODY2endNN0NzMDdmSllYdVd2akFNa2JlNU82VjRidTcxc09HNkpRNG9MOHpJZVhIaGVGVmF2enhtbEl5QmtnYzlJWmxFRHBsTVByOHhsY3lzczRwVlVkd0sxZTdDSzJrVHNTZHE3ZzVTSFJBbDNwWVVCOUtvNGZzaDRxbGVPeUp2MXozS0ZTVFN2d0VjUk8vRXc4b3pFRFlaU3FwZm9WVzl1aEpmWXJOQVhSMFozVm1lb0FEK3JWV3R3UC8xM3NFLzNJQ1gzSGhERzNDTWM0NzZkRUVDMEszdW1TQUQ0aitaUUxWZEZPc1dMMkMxVEg1KzRLaVNXSCtsTWlibytCNTVoUjNHcTQwRzFuMjVzR2NOMG1FY29VMndOOUZDVnlRTEJoWU91OWFIVkxXakVLeDJKSVVaaTV5U29IVUFJOWI4aEd6YUxNeENaRE1MaHY4TWtjcFRxRXd6OUtGRHBDcHFRaFZtc0dRTjhtMjR3eUI4MkZBS05tamdmS1JzWFJtc1NFU292QXdYakJJb01LU0c1MXA2VW04YjNpN0dJU3M3a2pUcS9QWm9pb0NmSnpmS2RKVE4wUTQ1a1FFUXVoOUg4OE0zeUVzM0RidFJUS0FMcmFNMFlDOGxhaU1pT09lNkFEbVRjQ2lSRWVBV1plbEJhRVhSYVN1ajJseDB4SGFSWXFGNjVPMExvNU9DRlUxOEE4Y01ERTRNTFltOXcyUVNyOU5nUUFJY1J4WnNOcEE3VUpSMGU3MUpMK1ZVK0lTV0ZrNUk5N2xyYTh1R2c3R2xRWWhHZDRHYzZyeHNMRlJpSWVHTzRhYlA0UzRla1ExZmlxREN5ODdHWkhkNTJmbjVhYURHdXZPbUlvZnJ6cFZ3TXZ0YnJlWi84NTVPYVhUUmNOaU5FMHd6R1pTeGJqZzI2djhrbzhMNTM3di9YQ0NXUDJNRmFBckpwdm5rZXAwcEErTzg2TVdqUkFaUFFSZnpuWmlTSWFUcHB5Nm0zcDZIck5Tc1k3ZkR0ejdDbDRWL0RKQWpRRG95aUwydXdmMVVIVmQyQUlyekJVU2xKYVRqNGs2Tkw5N2EvR3FoV0tVOVJVbWpuWUtwbTJyK0pZVWNya0N1Wkt2Y1l2cmc4cERvVUtReXdZOUdEV2cwM0RVRlNpcmxVWEJTNVNXbi9LQW50bmYwSWRIR0wvN213WHFERytMWllqYkVkUW1xVXFxNHk1NFRObVdVUDdJZ2NBdzU4MTZZQnp3aU5JSmlFOU00bFBDemVJL0ZHQmVZeTNwNklBbUg0QWpYWG12UTRJeTBZODJOVG9iY0FnZ1QyQ2RxejZNeDRUZEdvcTlmbjJldHJXS1VORnlhdEFIeWRRVFZVUTJTNU9XVlVsdWdjTnZvVXJsQThjSkp6OU1xT2EvVzNpVm5vNHpESGZFN3pob1k1ZjVsUlRWWkRoclFiUjhMUzRlUkx6OGlQTXlCTDZvNFBpTGxwODlGamRva1FMYVNCbUtIVXdXcDBuYTVmRTN2OXpueTJZY0RYRy9qZkk5c2N0dWxIUmJka0k1YTRHT1BKeDRvQUpRelZaL3lZQWFkbzhLTlpVZEVGczlaUGlCc2F1c290WE1OZWJFZ3IwZHlvcHVxZlNjRkozT0ROUEhnY2xBQ1BkY2N3djBZSkdRZHNOMmxob1Y0SFZHQnhjRVVlVVgvYWxyNG5xcGNjMUNDUjN2UjdnNDB6dGVRZy9KdldtRmxVRTRtQWlUcEhsWUdyQjd3K1UyS2RTd1F6MlFKS0JlLzVlaWl4V2lwbWZQMTVBRldySzhTaDFHQkJZTGd6a2kxd1RNaEdRbWFnWHFKMitGdXFKOGYwWHpYQ1ZKRkhRZE1Bdzh4Y28xMUhoTTM0N2FsckF1K3dtWDNwREZBQk92a0MrV1BYMFVoZzFaNU1WSEtOUk94YVI4NFlWM3MxMlVjTSs3MGNKNDYwU3pFYUtMeWg0NzJ2T01EM1huYUs3enhaY1hsV3FlbkV2Y2ptZ0dOUjJPS2JJMXM4VStpd2lXK0hvdEhhbHAzZTFNR0R5NkJNVkl2YWpuQXprRkhiZVZzZ2ptSlVrclA5T0F3bkVIWVhWQnFZeDNxN0x2WGpvVlIwbVk4aCtaYU9uaDA1M3Bkc0drbWJxaHlyeU4wMWVWSHlTcitDa0RZa1NNZVoxeGpQTlZNK2dWTFRES3UyVkdzTVVKcVdPNFR3UERQMFZPZzIvOElUYkFVYU1HYjRMakw3TCtQaTExbEVWTVhUWUlsQVovUUhtVEVOanl4M2tEa0JkZmN2dlF0NnRLazZqWUZNNEVHNVVYRFRhRjUrMVpqUno2VzdNZEpQQyt3VGtiRFVpbTRwNVFRSDNiOWtHazJCa2lseWV1cjhCYzIwd201dUpTQk85NUdmWURJMUVaaXBvUmFIN3VWdmVuZXF6NDN0bFRaR1JRNGE3Q05tTUhnWHlPUVFPTDZXUWtnTVVUUURUOHZoMjFhU2R6N0VSaVpUMWpLOUYrdjZ3Z0Z2dUVtR25nU3ZJVVIyQ0prYzV0eDFReWdmWm5BcnVPTm9iQjFpZENMQjFGQ2ZPN04xWmRSb2NUOC9XeWUrRW5EaU85cHpxSXBuTERsNGJrYVJLVytla0JWd0huNDZTaHcxWDB0Y2x0LzBST2lqdVVCNGtJSW5yVkpVNGJ1V2Y0WUlUSnRqT0o2aUtkcjF1K2ZsZ1FlRkg3MEd4S2poZGd0L01yd2ZCNEsvc1hjelErOXpZY3JENGRoWTZxWmhaMDEwcnJ4Z2dXQThKYVp5ZzJwWWlqOGllWUVnMWFaSmtaSzlPMVJlN3NCMGlvdWY2MHJLMEdkK0FZbHA3c29xQ0JDREd3ZktlVVFoQ0JuMEUwbzBHUzZQZG1qTGkwVHRDWVplcWF6cXdOK3lOSU5JQThMazNpUERuV1VpSVBMR05jSG1aRHhmZUswaUFkeG0vVDdMbk4rZ2VtUkw2MWhISWMwTkNBWmFpWUpSK09IbkxXU2U4c0xySzkwNUI1ZUVKSE5sV3E0Um1FWElhRlRtbzQ5Zjh3NjErTndmRVV5dUpBd1ZxWkNMRmN5SEJLQWNJVmozc056ZkVPWHpWS0luZHhIdytBUjkzb3doYkN4VVpmNkdzOGN6Ni8xVmRyRkVQcnYzMzArOXM2QnRNVlBKM3psL1VmOXJVaTBaL29wZXhmZEwzeWtGNzZlOTk5R1BmVnY4Zkp2L1kvKy81aEVNb24xdHFORnlWUmV2Vjl5OS91SXZzRzNkYkI4R1JScmdhRVhmaHgrMnhlT0Z0K2NFbjNSWmFuTnhkRWUyK0I2TUhwTmJyUkU1M1BsRGlmUHZGY3A0a083OElMUjBUNHh5Vy9XR1B5QnNxR2RvQTd6SkpDdTFUS2JHZmhucWduUmJ4YkIyQjNVWm9lUTJiejJzVFZuVXdva1RjVFUyMVJ4TjFQWVBTM1NhcjdUMGVSSXN5Q05vd3I5YW13b01VL29kOXMyQVB0aUtOTDZFTk9seUtBRHN0QUVXS0Erc2RLRGhySjZCT2hSSm1aK1FKYkFhWjMvNUZxMC9sdW1DZ0V6R0VidTN5aTBZNEk0RWdWQWpxeGg0SGJ1UW4wR3JSaE9XeUFmc2dsUUpBVkwxeS82eWV6UzJrOFJFMk1zdEpMaDkyTk9CM0dDWWdGWHpuRjRkMjVxaVA0WkN5STRSWUdlc3V0NkZYSzZHd1BwS0s4V0hFa2hZdWkwQXlFbXI1TWwzdUJGdFBGZG5pb0k4UmlDb29hN1oxRzFXdXlJaTNuU05nbHV0Yyt4WThCa2VXM0pKWFBLNmpkMlZJTXBhU3hwVnRGcStSK3lTSzlKNldHNVF2dCtDK1FIMWh5WVVPVks3ODU3bkZteURCWWdaL28rQW5pYnpOVnF5WUNKUXZ5RFhEVEsraVhka0E3MWJZN1RMM2J2dUx4TEJROGtiVHZURVk5YXFrUTMrTWlMV2JFZ2pMek9IK2xYZ2NvMUVSZ3pkODByREN5bWxwYVJRYk9ZbktHL09Eb0ZsNDZselQwY2pNNUZZVnZ2MHFMVWJENWx5SnRNVWFDMXBGbFRrTk9OeDZsbGlhWDlvMGkvMXZ3czViTktuNU91RU5RRUttTGxjUDRvMlptSmpENHp6ZDNGazMydVE0dVJXa1BTVXFiNExCZTNFWEhkT1JOQjJCV3N3czVkYVJuTWZOVlg3aXNQU2IxaE1RZEFKaTEvcW1ETWZSVWxDVTc0cG1uempiWGZMOFBWRzhOc1c2SVFNMk5lMjNpQ1BJcHJ5SmpZYlZubTVoQ3ZLcE1hN0hMVmlOaU5jK3hUZkRJYUttM2pjdFZpRDhBMU05WVBKTmswMDNWVnI0Wm8yTXVHVzh2aWw4U0xhR3BQWHFHN0k0RExkdGw4YTRSYngxTHQ0dzVIdXFhYTFYelpCdGoyMDhFSlZHY21LWUV1YWVOMjd6VDlFRTZhMDlKZXJYZEVicGFOZ05xWUpkaFAxTmRxaVBLc2JEUlVpODZYdnZOQzdyTUU1bXJTUXRyekFaVm5kdFNqQ01xZDhCbWFlR1I0bDRZRlVMR1JCZVhJVjlZNHl4TEZkeW9VTnBpeTJJaGVQU1d6Qm9mWVBQMGVJYTJxNUpQNGo5RzhhdC9BcW9Tc0xBVXVSWHR2Z3NxWC96WXdzRStvZjZvU0RiVU9vNFJNSncrRE9VVEpxK2hucXdLaW05WXkvbmFweVpOVGMyckNxNlY5akh0SmJ4R1BEd2x6V2ovU2szekYvQkhPbFQvZlNqU3E3RnFsUEkxcTZKK3J1OEFrdTAwOFNGSU5YWmZPZm5aTk92R1BNdEVtbjJnTFB0K0g0UUxBKy9TWWU0ajM5OGF1emhLSXAyUG9rM21QQzVxMUlOMUhnUittbkVmYzROZWVIWXdkMi9rcHN6UjNjQm43bmk5TmJJcWh0U1dGVzh4YlVKdVVQVk9lZVh1M2owSUdabUZOaXdhTlo2ckg0L3pRMk9EejZ0RnhSTHNVWVp1MWJmZDF1SXZmUUR0NFlEL2VmS1l2OFZGOGJIR0RnSzIydzJXcXdwaTQzdk5DT1hGSlpDR01xV2lQYkw4bWlsNnRzbU9UWEFXQ3lNQ3c3M2UyckFEWmoySUs2cnFrc00zRVhGMmNiTGI0dmpCMTR3YS95WEs1dndVKzA1TXpFUko1blhzWHNXMjFvN00rZ08wanMyT3lLY2lQNXVGMmlYeWIyRGlwdHdRZUhlcXlna3JOc3FWQ1NsbGR4Qk1wd0hpMXZmYzhSS3BQLzRMM0xtcHE2RFpjdmhERGZ4VENFM3NwbGFjVGNPdFhkSzJnMzAzZElXQlZlMndEL0d2amExY0NsRlE2N2d3MHQxWlV0dHNVZ1ExVmVreThvT3BTNmtzWUVjNGJxc2VDYlp5NzY2U3ZMM0ZvZG1uYWhsV0pSZ1ZDTmpQeGhML2ZrMnd5dmxLaElUSC9WUUNpcE9JMGROY1JhNUIxTTVIbU9CalRMZVpRSnkyMzdlMm1vYndtRHlKTkhlUGhkRG1pa252TEthRGJTaEwrSXMxWFRDSnVMUWQyd21kSkw3K21LdnMyOTR3aFhRRCt2dGQ4OEtLazBEWFA4QjFYdTlKK3hvNjlWT3VGZ2V4Z1RyY3ZJNlN5bHR1TGl4OU9QdUU2L2lSSllvQk1FWHhVNHNoUU1mNEZqcXdmMVB0bkovd1dTWmQyOXJoWmpSbVRHZ2lHVEFVUXFSeituQ2RqZU1mWWhzQkQ1THY2MEtJTFdFdk5FSGZtc0RzMkwwQTI1MjM1MWVVb1l4QXlzVmFDSlZMZEg5UUZXQW1xSkRDT0RVY2RvbzEyK2dkNmJXMmJvWTBwQlZIV0w2TFFESzViWVdoMVY4dkZ2aTBjUnBmd3Y3Y0ppTVgzQVpOSnVUZGRIZWhUSWRVMFlRL3NRMWRMb0YyeFFQY0N1SEtpdUNXT1kzMERIZTFPd2NDbExBaHFBS3lxbG5JYkgvOHU5U2NKcGNTNGtncDZIS0RVZGlPZ1JhUkdTaVVDUkJqekk1Z1Nrc01aS3F5N1NkNTFhZWcwdGdKK3gwVEg5WUgyTWdzYXA5TjdFTlpkRUIwYmV5MkRNVHJCQTFobjU2U0VyTkhmM3RLdHF5TDliNnlYRVA5Ny9yYytqZ0QyTjFMTlVINlJNOUF6UDNrU2lwcjA2UmtLT29sUjdITzc2OGpqV2lIMVg5MmpBN2RrZzdnY05janFzWkNnZnFXdzB0UFhkTGcyMGNGNnZuUXlwZzdnTHRrYXpySEFvZHlZZkVOUFFac2RmbmpNWmlOdTRuSk85N0QxL3NRRSszdk5GenJTRE9LdytrZUxFQ1lmN1JKd1ZIZVAvajc5ODMzb1owZWdvbllCMkZsRkU1cWowMkIvTFZPTUpRbHNCOHVOZzNMZWc0cXRad250c09TTmlkUjBhYmJabUFLNHNDenZ0OFlpdXoyeXJOQ0pvSDVPOFh2WC92TGVSL0JCWVRXajBzT1BZTS9qeXhSZDUrL0p6aUtBQUJhUGN3LzM0VUEzYWovZ0xaeFpnUkNXTjZtNG0zZGVtYW5OZ3N4MFAyMzcvUStFdzVWWW5KUGt5Q1kwY0lWSG9GbjJBeS9lN1U0UDE5QVBiUEZYRUhYOTRONktoRU1QRzdpd0IzK0krTzFqZDVuNlZTZ0hlZ3hnYVNhd082aVFDWUZnRHNQU01zTk9jVWo0cTNzRjZLekdhSC8wdTVQUW9Bai84enE2VWM5TW9OckdxaFllYjJqUW8wV2xHbFhqeHRhblpMUzI0L09JTjVHeC8yZzY4NEJQRFFwd2xxbmtGY3hwbVAvb3NuT1hyRnV1NFBxaWZvdVFIMGVGNXFDa3ZJVFFiSncvWnZ5NW1BSFdDOW9VK2NUaVloSm1TZktzQ3l0MWNHVnhpc0t1K055bUVRSUF5YUNndWQvVjA5cVQzbmsvOXMvU1dzWXRoYTd5TnB6QklNTTQwckNTR2FKOXU2bEVrbDAwdlhCaUV0N3A5UDVJQkNpYXZ5bkVPdjdGZ0xxUGRlcXhSaUN3dUZWTW9sU0lVQmNveWZVQzJlMkZKU0FVZ1lkVkdGZjBiMEtuMkVabEs5N3l5eHJUMk1WZ3Z0UmlrZmRhQVc4UndFRWZOK0I3L2VLOGJCZHA3VVJwYnFuMXhjckM2ZDJVamRzS2J6Q2pCRnFrS2tvWnQ3TXJoZzZZYWdFN3Nwa3FqMGpPcldNK1VHUTBNVWxHMmV2UDF1RTFwMnhTdjRkTUswZG5hNkVOY05VRit4a2FKN0I3NjROZHhMQ3B1dmhibGx0VlJBZjd2SzVxUHR0Si85UllGVVVTR2NMZGlibno2bWY3V2tQTzNNa1VVaFIybUFPdUd2OElXdzVYRzFadm9WTW5qU0FaZTZUN1dZQTk5R0VOeG9Ia01pS3hIbEN1SzVHZDBJTnJJU0ltSFFyUW12NkY0bXFVL1RUUThuSE1EekNSaXZLeVNROGRxa3BRZ25VTW53SWthQXVjNi9GR3ExaHczYjJTYmEzOThCaFV3VVpTQUlPOFhadm51TGRZMm42aE9Yd3MrZ3E5QkhVS2NLRkE2a3o2RkRucHhMUElDYTNxR2huYzk3Ym8xRlQvWEprNDhMcmtISjJDQXRCdjBSdE45N04yMXBsZnBYSHZaOGdNSmI3WmM0Y2ZJNk1iUHdzVzdBaWxDU1hNRklFVUVtaXI4WExFa2xBMHp0WWJHcFRUR3F0dHA1aHBGVFRJcVV5YUFJcXZNVDlBL3grSmk1ZWpBNEJoeGIvY2wxcFVkT0Q2ZXBkM3lpbElkTzZqMjk3eElub2lCUHVFRFcyL1Vmc2xEeWhHa1FzN1d5MjUzYlZubFQrU1dnODl6WUlLLzlLWEZsNWZlK2pvdzJyZDVGWHY4ekRQcm1mTVhpVVB0OVFCTy9pSzRRR2JYNWovN1J4MWMxdnpzWThPTmJQM2xWSWFQcmhMNCsxUXJFQ1ROM255S2F2R0cwZ0JCdEh2VEtoR29CSGdNWEhTdEZvd04rSEtyUHJpWXUrT1owNUZybjhva1FyUGFheG9LUDFVTENTL2NtS0ZOM2djSDdIUWxWanJhQ2VRbXRqZzFwU1F4ZXVxWGlTS2dMcHhjLzFPaVpzVTQrbjRsejRocGFoR3lXQlVSTGk0NjQybjFnbjlxejliSXNhQ2VFUEowdUptZW5NV3AydEptSXdMUTZWU2dEWUVyT2VCQ2ZTajlQNEcvdkk3b0lGK2wvbjVmcDk1NlFneEd2dXI3N3luYXdBdTNHOU1kRmJKYnU0OU5abldubkZjUUhqeFJ1aFVZdmcxVS9lODRONEpUZWNjaURBS2IvS1lJRlh6bG95dUUxZVlYZjU0TW1oalRxN0IveUJUb0R6enB4M3RKQ1RvM0hDbVZQWWZtdEJSZTNtUFlFRS82UmxUSXhiZjRmU09jYUtGR2s0Z2JhVVdlNDRoVms5U1p6aFc4MHlmVzVRV0JIeG10VXp2TWhmVlFsaTRnWlRrdElPWmQ5bWpKNWhzYm16dHRhSFFCMjlBbTNkWmtteDNnL3F2WW9jeWhaMlBYQVdzTlFpSWFmK1E4Vy9NV1BJSzcvVGp2Q3g1cTJYUnA0bFZXeWRNYzJ3SVFraGFkREIweHNudy9rU0V5R2pMS2pJNGNvVkl3dHViVEYzRTdNSjZMUzZVT3NKS2o4MlhWQVZQSkpjZXBmZXdiekU5MWl2WFp2T3ZZZnNtTWV2d3RQcGZNekdtQzdXSmx5VzJqMGpoN0FGMUpMbXdFSlNLWXdJdnU2REhjM1lueUxIOVpkSUJuUStuT1ZEUmlQK1JFcHF2Kyt0eXBZSEl2b0p5SUNHQTQwZDhiUjdIUjJrN2RvNlVRVEhGNG9yaVllSVFieEtlNFRoNisvbDFCalV0UzlocU9SaDNNYmd2WXJTdFhUZlN3YUJPbUFWUVp6cFlOcXNBbVF5alk1Nk1VcXR5M2MveEg2R3VoTnZOYUc5dkdiRzZjUHRCTThVQTNlOHI1MUQwQVI5a296S3VHR1NNZ0x6M25BSHhETm5jN0dUd3BMajcvNkhlV3AxaWtzRGVUandDTHB4ZWp1TXRwTW5HSmdzaWt1MXNPQUN3UTl1a3pFU2lEUk43N1lORVN4UjVMcGhPbGNBU1hBNXVJdHMxTG5CSWNuMUo3QkxXczQ5RE1BTFNudXo5NWdkT3JUWnIwdTFTZVlIaW5uby9wRTU4eFlvWGJWTy9TK0ZFTU1zNXF5V2tNbnA4UTNDbHlUbFpQNTJZOW5xN2I4ZklUUHVWWFVrOW9oRzVFRkh3NGdBRWNqRnhmS2IzeHVBc0VqeDJ6MXd4TmJTWk1jZ1M5R0t5VzNSNkt3Sk9OZ3RBNjRMVHl4V204QnZ1ZHAwTTFGZEpQRUdvcE00RnZnN0cvaHNwdGtoQ2ZIRmVndjRFTnd4UGVYbVloeHdaeTdqcytCZU0yN3Q5T0RCTXluVkNMSjdSV2NCTXRlWkp0dmpPWUhiNWxPbkNMWVdORU1LQzU5QkE3Y292dTFjQU5hMlBYTDA1aUdkdWZPemtnRnFxSEJPcmdRVlVtTEVjK01rejRScThPNldrTnI3YXROa0g0TThkK1NEMXQvdFN6dDNvRnFsK25lVnMrQXdFSTVKYUJKYXhBUnRZMlo0bUtvVXF4ZHM0VXBaMHN2M3pJYk5vbzBKNGZpaGxkUVRYM1hOY3VOY1ptY3JCNUxUV01kemVSdUF0QmszY1pIWVFGNmdUaTNQTnVESjBubVIrNExQTG9IdnhRSXhSZ0o5aU5OWHFmMlNZSmhjdkN0SmlWV284NVRzeUZPdXE3RXlCUEpyQWRoRWdFMGNUcTE2RlFYaFlQSkZxU2ZpVm4wSVFuUE95MExiVTRCZUc5NFFqZFlOQjBDaVEzUWF4UXFEMmViU01pTmphVmF3OFdhTTRaNVduemNWRHNyNGVHd2VTTGEyREUzQldWaWF4aFpGSWNTVGpneE5DQWZlbGcraHpuVk9Zb2U1VnFUWXMxZzdXdGZUbTNlNC9XZHVDNnArcXFBTThINFp5ckpDR3Bld1RoVERQZTZIN0N6WC96UThUbStyNjVIZVpuK01zbXhVY2lFV1BsQVZhSy9WQmFRQldmb0cvYVJML2pTWklRZmVwLzg5R2phc1dtYmFXemVFWjJSMUZPanZ5SlQzN085QjgwNDZTUlNLVkVuWFdsQnFia2I1WENTM3FGZXVFOXhiOStmckVrbnhXQjVoMUQvaHJ1ejJpVkRFQVM3K3FrRXo1T3Q1YWdISmM3V0NkWTk0V3M2MXNVUmNYNW5HOFVFTEdCQUhaM2krM1Z1bEF5VDBuS05OejRLMkxCSEJXSmNUQlgxd3pmKy8vdS9qLzkrLy92ODcrOS9sOUxiaC9ML3V5TllpVHNXVjJMd3NqYUE2TXhUdXpGTXFteFc4SncvK0lwcGRYOHQvQ2xnaTFySTFTTjBVQy9yNnRYLzRsVWMyVlYxT1FSZVNlQ3NqVXBLWmNodzRYVWNqSGZ3NnJ5Q1YzUjhzNlZYbTY3dnA0bitsY1BWOWdKd21iS1FFc21ySmk5YzJ2a3dybThIRmJWWU5UYVJHcThEOTF0OW41K1UrYUQvaE50TjNIakMvbkMvdlVvR0ZTQ2tYUCtObFJjbUxVcUxiaVVCbDRMWWYxVS9DQ3Z3dGQzcnlDSDhnVW1HSVRBeGlIMU81cm5HVHo3eTFMdUZqbW5GR1ExVVd1TTdId2ZYdFdsMmZQRktrbFl3TlVwRjJJTC9UbWFSRVRqUWlNNVNKYWNJKzNHdjVNQlU4bFA1SW82Z1drYXdweXpORVZHcU9keDRZbE8xZEN2amJXRlpXYkNtZWlGS1BTbE1LdEtjTUZMcy9LUXh0Z0FIaTdOWk5DUTMyYkJBVzJtYkhmbFZaOHdYS2kxSktWSGtXMjBibllubDNkS1dKZVdKT2lYM29LUEJENlpiaTBadlNJdVdrdFVIQjhxRFI4RE1NaDFaZmtCTDlGUzl4NXIwaEJHTEo4cFVDSnYzTllIK0FlOHA0MG1aV2Q1bTVmaG9iRmpRZVF2cVRUNFZLV0lZZlJMMHRmYVhLaVZsNzVoSFJldVRKRWNxVmx1ZytlT0lJYzRiZEl5ZHRuMkswaU5aUHNZV1F2UWlvMnFiTzNPcUFsUEhERE9CN0RmakdFZlZGNTFGcXFOYWNkNlFtZ0ZLSnBNZkxwNURIVHY0d1hsT05LVlhGOXpUSnBEVjRtMXNZWnFKUGhvdGNzbGlaTTh5a3NLa0NrenBpWHQrRWNSUXZTUXFtQlM5V2RXa3hNVEpYUFN3OTRqcUkzdmFyQ2pReFRhempsTUg4alRTOGlsYVc4MDE0L3Z3QS9MTmErWWlGb3l5eDNzL0tzd1AzTzhRVzFqdHE0NXlUTS9EWDlhOE00dm9UVmFPMmVidncxRW9vRHcveWc2WTFmYVkrV3dyZFZzNVl0MGhRNUV3UmZZWFNGeHJheTFZdlNNK2tZbWxwTEcyLzltbTFNZm1iS0hYcjQ0SWg4blZLYjFNNTM3WkFOVWtDdGRzUFo4MEpWS1ZLYWJWSENhZGFMWGcrSVY4aTVHU3dwWnRpMGg2ZGlUYUtzOXNkcFVLRXBkN2pEVXBZbUh0aVgzM1NLaU8zdHV5ZGtheEE3cEVjOVhJUUVPZldKbHN6ajVZcEw1YktlUXlUN2FaU0JPYW12U0hsOHhzV3ZnbzI2SVAvYnFrKzBFSlV6K2dra2N2bFVseVBwMmtkS0Z0dDd5NWFDZGtzOVpKSmNGcDVaV2VhV0tndG5YTU4zT1J3R0xCRTBQdGtFSWVrNUZZMmFWc3NVWkh0c1dJdm5sak1WSnR1VklqcFp1cC81VkwxeVBPSFdXSGtPTWM2WXlTV01ja2N6RDVqVWoybWxMVnF1RmFNVThsZUdWYXFlWGlzK2FSUkw4em00V3VCazZjeVdmR014Z3RyOHVzZVFFeDdrL1B2Um9aeWQ5bmRlMUdVQ1Y4NGdNWDhPZ3UvQldlellQU1IyN2xselFuQTk3b28wcFl5eG9iWVVKZnNqK3lzVG05ekorUzRwazBUR285VlRHMEtqcVloVG1BTGZvRFpWS2xhMmI1eWh2MjQxUHhGYUxKczNpMDVLMEFBSWRjR3hDSlptVDNaZFQ3Q2xpUjdxK2t1cjdXZFFqeWdZdE9XUkw5QjhFNHM0TEk4S3BBajdiRTBkZzdETE9hWCtNR2VBaTBoTU1TU1daRXorUnVkWGJaQ3NHWVMwUXFpWGpIOVhRYmQ4c0NCK25JVlRxNy9UL0ZEUyt6V1k5cTdaMmZkcTF0ZExiNnYzaEtLVkRBdzVnamo2bzlyMXdIRlJPZEhjMThNSnA0U0oyVWN2dStpUTlFZ2tla1c4VkNNK3BzTTZ5Ky8yU0J5OHROTjRhM0wxTXpQK09Mc3l2RVNvNWdTN0lRT25JcU1tdmlKQlZjNnpiVkcxbjhlWGlBM2o0NmttdnZ0Smxld3dORHJ4azRTYkpPdFAvVFYvbElWSzl1ZVNoTmJiTUhmd25MVExMaGJadU83OWVjNVh2ZmdSd0xGSyt3MXI1WldXMTVyVkZackUrd0txTlJ2NUtxc0xOZnBHZ25vVVU2WTcxTnhFbU43TXlxd3FBUXFvSVVMT3cvTGJ1VUIyK3VFNzVnSnQra3ExcVk0TG94VitxUi96YWx1cGVhM0Q1K1dNZWFSSW4wc0FJNkREV0RoMTU4ZnFVYjRZaEF4aFJFYlVOMHF5eUpZa0JVNFYyS0FSWERUNjVnVzNnUnNpdjd4U1BZRUtMd3pncmlXY1dnUHIwc2JabnY3bTFYSE5GVzZ4UGRHTlpVZHhGaVVZbG1YTmpEVld1dTdMQ2tYL25Wa3JYYUpoaVlrdEJJU0MyeGdCWFFuTkVQK2NwdFdsMWVHNjJhN0NQWHJucmtUUTVCUUFTYkVxVVpXTURpWlVpc0t5SERlTEZPYUpJTFVvNWY2aUR0NFpPOE1scWFLTHRvMEFtVEhWVmJrR3V5UGExUi95d1pzV1JvUkRvUmROTU1Id1lUc2tsTVZubEFkMlMwMjgyYmdNSThmaUpwRGg2OU9TTDZLM3FibzIwS2ZwTk11cm5ZR1FTci9zdEZxWjdoWXN4S2xMbktBS2hzbUI4QUlwRVE0YmQvTnJUTFRYZWZzRTZDaFJtS1dqWEtWZ3BHb1BzOEdBaWNnS1Z3NEswcWdEZ3kxQTZoRnExV1JhdDNmSEYrRmtVK2I2SDROV3BPVTNLWFR4ckliMnFTSEFiK3FobThoaVNST2kvOW9mYXBqeGh5S3h4bnRQcGdlNktMNVo0K1dCTVlrQWNFNiswSGQzWWgyekJzSzJNVjNpVzBZNmN2T0Nyb1hsUmIyTU1KdGRXeCszZGtGekdoMlBlM0RaOVFwU3FwYVIvckUxSW1PckhxWVl5Y2NwaUxDMjJhbUpJalJXVkFoZXJUZnBRTG1vNi9LMnBuYTg1R3JEdVFQbEgxVHNhcjhpc0FKYlhMYWZTd09vZjRnZzlSa0FHbS9vWXBCUVFpUFVveURrMkJDUTFrK0tJTHE0OEVyRm80V1NSaEhMcS95N21ndzMrTDg1UHBQNnhXcjZjZ3A5c09qWWpLYWdPcnhGMTQ4dWh1YVd0amV0OTUzZmgxSVFpRXpnQytkMklnQkNjVVpxZ1RBSUNtMmJSOG9DakRMQnNtZytUaHloZkQrekJhbHNLQlkxQ2U1NFkvdDljd2ZiTHU5U0Z3RWdwaGZvcE5BM3lOeGd5RGFmVU0zbVlUb3ZaTmdQR2RkNFpGRk9qMXZ0ZkZXM3U3TitpSEVOMUhrZWVzRE1YS1B5b0NEQ0dWTW80R0NDRDZQQmhRM2RSWklIeTBZLzNNYUU1elU5bVRDcnd3blpvanRFK3FOcE1Ta0pTcG1HZTBFekx5RmVsTUpxaGZGUTdhNTB1WHhaOHBDYzJ3eHRBS1dnSG9lYW1SMk83UiticTdJYlBZSXRPMGVzZFJnb1RhWTM4aFpMSjV5MDJvSVZ3b1Bva0dJenhBTUR1YW5RMXZuMldEUTAwUmg2bzVRT2FDUnU5OWZ3RGJRY04wWEF1cWtGcHhUL2NmejNzbEdSVm9rck5VMGlxaU1BSkZFYktTY1pkbVNrVFV6bkMwVStNZndGT0dkTGdzZXdSeVBLd0JaWVNteTZVMzI1aVVoQlFOeGJBQzNGTEtEVjlWU091UXBPT3VrSi9HQW11L3R5RWJYOURnRXA2ZHYxem9VMElxenBHNmdzc1NqSVlSVlBHZ1UxUUFRWVJnSVQ4Z0VWMEVYcjFzcWVoMkk2clhqdG1vQ1l5RURDZS9Qa0ZFaS9RNDhGdVQyOXA1NTdpTitMQ3drNUNLL0NaMldkQWRmUVpoMlo5UUdyelBMU05SajVpZ1VXemw5VmkwckNxSDhHMUtwNFFNTGt1d01DQXlwZHZpRFh5T0lrMEFIVE04SEJZS2gzYjAvRitEeG9OajRaZG9aZkNwUVZkblphcnFvTWFIV25NTE5WY3lldnl0R3NyWFFFb0lidWJxV1lObzdOUkh6ZGMwenZUMjFmV1Zpcmo3ZzM2aXk2cHhvZ2Z2Z0hwMXhIMVR1cmJ6OFF5eUhuWGVCSmljcFlVY3RiekFwd3paMUhUK0ZQRVhNQWdVWmV0Z2VHTXd0NEcrREhpRFQyTHUrUFQyMWZqSkNBZlYxNmEvV3UxUHFPa1VIU1RLWWhXVzZQaGhIVWxOdFd6Rm5BN01iWStyNjR2a3dkcGZOQjJKZldnV1hBdmt6ZDQySzRsTjl4N1dyZzRrSUtnWENiNG1jVzU5NU1DUEovY1RmUEFNUU1GV3ducXdkZTR3OEhaWUpGcFF3Y1NNaGpWejRCOHA2bmNTQ04xWDRrbHhvSUg0Qk4ySjZ0YUJNajZsSGtBT3M4SkpBbVhxNXhzUXRyUElQSUlwL0hHNmkyMXhNR2NGZ3FEWFNSRjB4UWcxNGQydXk2SGdLRTEzTFN2UWU1Mm9TaEY1SngxUjZhdnlMNHRoaFhRWkhmQzk0b1p6dVBVQktGWWYxVnZEYXhJcnRWNmROR1N4N0RPMGkxcDZDekJrdUFtRXF5V2NlUVk3RjkrVTBPYllEem9hMWlLYW8vY09EL3Y2UTlnSHJycjF1Q2VPazhmU1Q5TUcyM1VsMEttTTNyK1duNkhpNldBY0w3Z0VlYXlraWN2Z2p6a2pTd0ZzQVhJUjgxWng0UUo2b29zVnlKa0NjVCs0eEFsZENjaWhxdlRmOTRISFVQWFlwM1JFSWFSNGRocFFGNitGSzFIMGk5aTdQdmg4b3d1M2xPNFBUMWl1cXUrRGtMMkJqOStrZGZHQWcyVFh3MDNpTkh5b2J4b2ZMRTJpYmpzWURQZ2VFUWxSTVI3YWZYYlNHUWNuUGpJMkQrc2R0bXVRNzcxZGJBU1VzRG5kVTd0NThqcnJOR1J6SVN2d2lvQWxIczVGQStjQkU1Q2N6bmtkOE5NVjZCUjZrc25LTFBabk1VYXdSRFUxTVovaWIzeENka1RibEhLdTRibE5peWxINW4yMTN5TTB6dWJFaWUwbzRKaHpjZkF5M0g1cWgybDE3dUxvb0JOTGFPK2d6b25USDJ1RjhQUXU5RXlIK3BqR3NBQ1RNeTRjSHpzUGR5bVVTWFlKT01QM3lUa1hxdk8vbHB2dDBjWDVla0RFdTlQVWZCZVpPRGtGdUFqWENhR2RpNmV3NHF4SjhQbUZmd21QcGtnUWpRbFdxb21GWTZVa2ptY25BdEpHNzVFVlIrTnB6R3BQMUVmNXFVVWJmb3dyQzN6Y1NMWDNCeGdXRWdFeC92OWNQOEg4dTFNdnQ5L3JNRFlmNnNqd1UxeFNPUEJnekZFZUpMTVJWRnRLbzVRSHNVWVQ4WlJMQ2FoMjc1OTlFdXFvQzlQWWpZTzZhb0FNSEI4WDFPSHdFQVlvdUhmSEIzbnliMkIrU25aeE0vdncvYkN0T1JqTE1TeTVhWm9FcHZnZEd2bEpmTlBGVXUvcDdaNFZWSzFoaUkwL1VUdUIzWlBxNG9oRWJtN01udGdjMWV2RXRrbmFvc2daU3duREMyQmRNbWlicGVnNDhYOEl4bCsvOCt4WGRic2hRWFVQUHZ4OGpUM2ZrRUxpdkhTbXFiaGJsZk5GU2hXQXlRbkozV0JVNlNNWVNJcFREbUhqZExWQWRsQURkejlnQ3BsWnc2bVRpSHFEd0lzeGJtOUVyR3VzaVZwZzJ3OFEza2hLVi9SOU9qOFBGZUY0M2htVy9uU2Q5OW5aemh5akNYM1FPWmtrQjZCc0g0SDg2NldHeXY5RTBoVkF6UFlhaDJ0a1JmUVpNbVAycmluZk9lUWFsZ2Uwb3ZoZHVCakpzOWExR0J3UmVlcmNlaWZ5NDljdE9oNS82NUFUWXVNc0FrVmx0bXZUTEJrNG9IcGRsNmkrcDhEb05qNEZiMnZoZEZZZXIySlNFaWxFd1BkNW41ek5vR0JYRWpyZWcvd2gyTkZuTlJhSVVIU09YYTRlSlJ3eWdab1g2dm5XbnFWZENSVDFBUnhlRnJOQkordHNkb29Nd3FuWWhFN3pJeG5EOHBaSCtQME51MXdXeENQVEFEZk5XbXF4NjI2SUJKSnE2TmVhcGNHZU9tYnRYdmwwVGVXRzBZN09HR1Y0K0VIVHROQklUNVdkMEJ1amw3aW5YZ1pnZlhUTTVlZkQzcURUSjU0Tzl2M0Jrdit0ZElSbHExa1hjVkQwQkVNaXJtRnhnbE5QdDVwZWRiMUFueHVDWU1DaFV5a3dzVElXcVQyM1hEcHZUaUtFcnUxY1RjRU1lbmlCK0hRRGVoeFBYTm1rb3RGZHdVUG5pbEIvdTROeDVYYzZsOEo5akgxRWdLWlVVdDh0OGN5b1psZURCRXQ4b2liRG1KUkFvTUtKNU9lOUNTV1M1Wk1FSnZhY3NHVmRYRFdqcC9ZcGU1eDBwOVBYQjJQQXd0MkxSRDNkK2Z0TmdwdXl2eGxQOHBCODRvQjFpNzN2QVZwd3lybVhXNzJoZlc2RHpuOUprajQrKzBWUTRkMEtTeDFBc0RBNE90WFhEbzYzL3crR0QrekM3dzVTSmF4c21ubFlSUTRkZ2RqQTd0VGwyS05MbnBKK212a29EeHR0MWE0b1BhWDNFVnFqOTZvOXNSS0JRcVU3Wk9pdXBlQUl5TE1EK1kzWXdIeDMwWFdIQjVDUWl3N3EzbWoxRURsUDJlQnNaYno3OWF5VU1ieUhRN3M4Z3U0TGdpcDFMaUdKajdOUWo5MDUvK3JnVVlLQUE1cWRybEhLSWtuV21xZnVSK1BCOFJkQmtEZy9OZ25sVDg5RzcyaDJOdnlTbmo3VXlCd0QrbWkvSVdzMXhXYnh1VndVSVZYdW41Y01xQnRGYnJjY0krRElManNWUWc2ZWVxMGl0aVJmZWRuODlDdnlGdHBreGFhdUV2U0FOdVptQjFwOEZHUGJVOTRKOW1lZHdzWjlIa1VZam1JN09INUh1eGVuZExieFRhWXJQdUlmRTJmZlhGS2hvTkJVcDMzSHNGQVhtQ1YvVnhwcTVBWWdGb1JyNUF5OTNaTFJsZ2FJUGpoWmpYWlpDaFQrYUU1aVdBWE1YMG9TRlFFdHdqaXVoUVFJdFRRWDVJWXJLZktCK3F1ZVROcGxSMUhvZmxvNS9JNmFQUG1BQ3dRQ0UyalRPWW81RHoxY3M3U29kMEtURy8za0VER2sza1VhVUNPTjE5eFNKQ2FiM2tOcFdaaFNXa084bCtTcFc3MFduM2cwY2lPSUpPNUpYbWE2ZGJvczZqeWlzdXhYd1VVaGoyKzF1R2hjdnVsaUt0V3dzVVR3NGdpMWMvZGlFRXBaSG9Lb3hUQmVNRG1oUGhLVHg3VFhXUmFrVjhpbUpSMzU1RGNJSGtSOUlSRUh4b2hQNFRieVI1THRGVTI0dW1SUFJtRVlIYnBlMUxnaHl4UHg3WWdVSGpOYmJRRlJRaGg0S2VVMUVhYlh4OEZTM0pBeHAycndSRG9lV2tKZ1dSVVNLdzZnR1A1VTJQdU85VjRadWlLWEdHekZRdVJ1Zit0a1NTc2JCdFJKS2hDaTNFTnVMbFhoUGJqVEtENGRqWFZuZlhGZHM2WmIrMVhpVXJSZnlheUd4SnExK1NZQkVmYktsZ2ppU21rMG9yZ1RxelNTK0RaNXJUcXNKYnR0aU50cCtLTXFHRTJBSEdGdzZqUXFNNXZENnZNcHRtWFY5T0FqcTQ5VWYvTHg5T3BhbStIbjVPOXA4cW9CQkFRaXh6UVo0ZU5Wa085c1B6SkFNeVIxeTQvUkNRUTFzMHBWNUtBVTVzS0x3M3RrY0ZiSS9KcXJqQ3NLNE13K1c4YW9kNGxpb1l1YXdVaUN5VldCRS9xUGFGaTVibmtncGZ1L2FlNDcxNzRySTFmcVFvVGJXMEhyVTZGQWVqcTdCeU0wVjR6a1pUZzAyL1lKSzJON2hVUVJDZVo0QklnU0VxZ0Q4WHNqekc2TElzU2J1SG9JZHovTGhGemJObjFjbGNpMU5IV0owLzYvTzhISk1kSXBFWmJxaTFScnJGZm9vL3JJLzd1Zm0yTVBHNWxVSTBJWUo0TUFpSFJUU09GSjJvVHZlckZIWVhUaGtZRklveUZ4NnJNWUZnYU9LTTR4TldkbE9uSWNLYi9zdXB0cHRnVE9UZFZJZjRZZ2RhQWpKbklBbTRxTk5ITlFxcUF6dmk1M0dreVJDRW9zZVVCckhvaFpzalVia1I4Z2ZLdGMvK09hNzJsd3hKOE1xNkhEZkRBVGJmYkpoemVJdUZRSlNpdzF1WnBySGx6VWY5MFdncUc3NnpPMGVDQjFXZFB2MUlUNnNOeHhoOTFHRUwyWXBnQzk3aWtGSHlvYUg5Mm5kd2R1cVo2SVlqa2cyMERYMzNNV2RvWms3UWtjS1VDZ2lzSVlzbE9hYUx5dklJcVJLV1FqMTZqRTFEbFFXSkphUG9wV1RKalhmaXhFalJKSm84ZzQrK3d1UWpicStXVllqc3FDdU5JUVczWWpueEtlMk01WktFcXErY1g3WlZnbmtic1UzUldJeVhBMXJ4djRrR2Vyc1lKakQvL2F1bGRYR21jRWJjZlRlRjE2WTE3MDhGQjFISWZtV3Y2ZFNGaTZvRDRFK1JJakNzRVora1k3ZEtud1JlSkp3M3hDakt2aTNrR040MnJ2eWhVbEl6MEJwK2ZOU1Y1eHdGaXVCekcyOTZlNXMvb0hvRnRVeVVwbG1QdWxJUGwrZTFDUUlRVnRqbHpMenp6YlYrRC9PVlF0WXpvNWl4dE1pNUJtSHVHNE4vdUtmSms1VUlSRXA3KzEyb1psS3RQQm9tWFN6QVkwS2d0YlB6elpvSFF4dWpuUkVVZ0JVK08vaktLaGd4VmhSUHRicXlIaVVhUndScEh2N3BnUlB5VXJuRTdmWWtWYmxHbWZUWTI4dEZDdmxJTEMwNFR6M2l2a05XVmF6QStPc1lyeHZSTS9oaU5uOEZjNGJRQmVVWkFCR3g1Uy94RmY5TGJibWsyOThYN2lGZzJ5ZWltdnNRcXFKK2hZYnQ2dXErWmY5akMrSmN3aWNjZDYxTktRdEZ2R1dyZ0ppSEI1bHdpNmZSOEt6WVM3RWFFSGYva2E5RUM3SDhEK1dFYTNURUFDSEJrTlNqL2NYeEZlcTRSbGxDK2ZVRm0yeHRzdFlMTDJub3MxRGZ6c0M5dnFERGRSVmNQQTNIbzk1YUVRSHZFeFZUaFhQcXltNjVsbGtLbGZSWGJQVFJpRGVwZHlsSGptVjlZVFdBRWpsRDlEZFFuQ2VtN0FqL21sNThPbjM2NjM5MjIxNEI1enJtUXovOXlTRzJtRnFFd2pxNXNGbDV0WUpQdzVoTno4bHlaUFVUc3I1RTBGMkM5Vk1Qblpja1dQNyttYndwL0JpTjdmNGtmN3Z0R25aRjJKR3ZqSy9zRFgxUnRjRlk1b1BRbkU0bElBWVY0OVUzQzlTUDBMQ1kvOWkvV0lGSzlPUmp6TTlrRy9LR3JBdXdGbWdkRXBkTGFpcVFOcENUR1pWdUFPNjVhZmtZMWgzM2hycXlMalp5OTJKSzMvdHdkajlwYWZGY3dmWE9ObVBRV2xkUGxNZTdqbFAyNEpzMHY5bThiSUo5VGdTMkl1UnZFOVpWUmFDd1NKWU90QWZMNUgvWVM0RmZ6S1dLYmVrK0dGdWxoZXlLdERObEJ0cmRtcitLVStpYkhUZGFsekZVbU1meHczZjM2eCszY1FiSkxJdFNpbFc5Y3V2WkVNakt3OTg3anlrWlJsc0gvVUkrSGxLZm8ydEx3ZW1CRWVCRnRteEYyeG1JdEEvZEFJZlErclhubTg4ZHF2WGErR2FwT1lWdC8yd2FGaW1YRngzVEMyTVVpT2k1L01sKzNyai9ZVTZJaHgyaFhnaURYRnNVZVFrUkFENndGM1NDUGkyZmxrN1h3S0FBNHpib3F5bnVFTEQzMTJFSjg4bG1ERVZPTWExVy9LL2E4dEd5bFpSTXJNb0lMeW9NUXp6YkRKSE5acmhINzdMOXFTQzQySFZtS2laNVMwMDE2VVRwODNnT2hDd3o5WEl0SzlmZ1hmSzNGNWQ3blpDQlVla29MeHJ1dFFhUEhhMTZSanNhMGdUcnp5anFUbm1jSWNyeGc2WDZka0tpdWN1ZGMwREQ1VzRwSlBmMHZ1RFc4cjUvdXcyNFlmTXV4RlJwRDJvdlQybUZYNzl4SDZKZitNVmR2MlRZcVI2Lzk1NVFnVlBlM0pDRC9XakFZY0xBOXRwWGdGaUVqZ2UySjVsamVJL2lVemc5MUtRdUhrSUk0bW1IWnhDM1hRT1JMQUM2Rzd1Rm41TE9tbG5Ya2pGZG9POTc2bW9OVHhFbFM4SGR4V29QQWtqam9jRFIxMzZtMmwrZjV0NnhhYU5nZG9kT3ZUdTByaWV2bmhOQUI3OVdOclZzNkVzUGdrZ2ZhaEY5Z1NGenpBZCtySlNyYXc1TWxsaXQ3dlVQNVl4QTg0M2xVcHU2LzVqQVIwUnZINHJSWGtTZzNuRStPNUdGeWZlK0wwczVyM2swNUZ5Z2hTRm5LbzRUVGdzMDdxajRuVExxT1lqNnFhVzlrbkpURGtGNU9GTVlibUNQKzhIMTZUeTQ4Mk9qdkVSVjZPRnl3MDQzTDl3M2hvSmk0MDhzUitTR28xV3ZpWFV1OGQ3cVMrZWhLanBLd3hlQ3Roc20yTEJGU0ZlZXR4MHg0QWFLUHh0cDNDeGRXcUNzTHJCMXMvajVUQWhjMWpOWnNYV2w2dGpvL1dEb2V3eHpnOFQ4Tm5oWjFuaVV3TC9uaGZ5Z0xhbkNuUndhRkdEeUx3K3NmWmh5WjFVdFlUcDhUWUI2ZEU3UjNWc0tLSDk1Q1V4Sjh1OE4rOXUyLzlIVU5LSFczeDN3NUdRcmZPUGFmazJ3NXFacThNYUhUMGViZVkzd0lzcDNyTjlscnBJc1c5YzF3czNWTlYrSndOejBMbzkrVjd6WnI2R0Q1NldlNmdXVkl2dG1hbTVHUFBrVkFicjc0cjZTd2h1TCtUUlh0Vy8wcGd5WDE2Vk5sNC9FQUQ1MFRuVVB1d3JXNk9jVU8yVmxXWFMwaW5xODcya2s3R1VsVzZvL296RktxK1NpcDZMY1R0U0RmRHJQVGNDSGh4NzVIOEJlUm9uK0tHMndSd3pmRGdXaEFMbWlXT01PNmgzcG0xVUNaRVBFalNjeWs3dGRMeDZXcmRBMk4xUVRQRU52Tm5oQ1FqVzZrbDA1Ny9xdjdJd1JyeUhyWkJDd1ZTYkxMbkZSaUhkVHdrOG1sWWl4RnQxc2xFY1BEN0ZWaHQxM0h5cVZleUQ1NUhPWHJoMkVsQXhKeWluR2VvRnp3S0E5MXpmcmRMdkR4SlNqem1JbWZ2VGlzcmVJMjVFRGNWZkdzbXhMVmJmVThQR2UvN05tV1dLalhjZFRKMTFqQWxWSVkvQnYvbWN4Zy9RMTB2Q0h3S0cxR1cvWGJKcTVueERoeUxxaW9ybjdXZDdWRVZMOFVnVnpwSE1qUStaOERVZ1N1a2lWd1dBS2tlVGxWVmVaN3QxREduQ2dKVklkQlBaQUVLNWY4Q0R5RE5vN3RLNC81REJqZEQ1TVBWODZUYUVoR3NMVkZQUVNJNjhLbEJZeTg0RmlldmRVOWdXaDZYWnJ1Z3Z0Q1ptaTl2ZmQ2ZGI2VjdGbW9FY1JIbkczNlZaSDhONGFaYWxkcTl6WmF3dDF1QkZneFlZeCtHcy9xVzFqd0FOZUZ5K0xDb3lteU02emdHN2o4Ykd6VXlMaHZyYkprVFlBRWRJQ0ViNGtNS3VzS1Q5VjNlSXdNTHNqZFVkZ2lqTWMrN2lLcnIrVHhyVldHMFUrVzk1U0dyeG54R3JFNGVhSkZmZ3ZBalVNNFNBeThVYVJ3RTlqNlpRSDVxWUFXR3RYQnl2RGlMU0RmT0QweUZBM1VDTUtTeVEzMGZ5eTFtSVJnNFpjZ1pITE5IV2wrYzlTZWlqT3ZiT0p4b1F5N2xUTjJyM1k4cDZvdnh2VVk3NGFPWWJ1VmV6cnlxWEE2VStmY3A2d1NWOVg1L09aS1AxOHRCNTZVYTBnTXl4Skk3WHlOVDdJcnFOOEdzQjlyTC9rUDVLTXJqWHhncUtMRGErVjVPQ0g2YTVobU9XZW1NVXNlYTl2UWw5dDVPY2U3NlByVHlUdjUwRXhPcW5nRTNQSFBmU0wvL0FJdFBkQjdrR255VFJoVlVVRk5kSkoyejdSdGt0WndnbVF6aEJHL0c3UXNqWm1KZkNFN2s3NUVtZElLSDd4bG5tRHJOTS9YYlRUNkZ6bGRjSC9yY1JHeGxQcnY0cURTY3FFN0pTbVFBQkpXcVJUL1RVY0pTd29RTSsxanZEaWd2cmpqSDhvZUsyaW4xUysveU8xajh4QXdzL1Q1dTBWbkl2QVBxYUUxYXROdU4wY3VSbGlMY0gyajBuVEw0SnBjUjd3OVF5YTBKb2FIZ3NPaUFMTENDelJrbDFVVUVTeit6ZS9nSVhIR3REd2dZcks2cENGS0oxd2ViU0RvZzR6VGxQa2dYWnF4bFFEaVlNamhEcHdUdEJXMld4dGhXYm92OWR0Mlg5WEZMRm1jRitlRWMxVWFRNzRncVppWnNkajYzcEgxcWN2M1Z5OEpZY2lvZ0lWS3NKOFl5M0o5dy9HaGpXVlNRQW1yUzBCUE9XSytSS1YrMGxXcVhnWU1uSUZ3cGNaVkQ3elBTcDU0N2k5SGxmbEI4Z1ZuU1RHbW1xMUNsTzA4MU9XL1VIMTFwRVFNZmtFZERGempMQzFDZG8vQmRMM3M3Y1hiOEorK0h6ejFyaE9VVlpGSVBlaFJpWjhWWXU2KzdFcjdqNVBTWnU5Zy9HQmRtTnpKbXlDRDl3aXN3ajlCWncrVDNpQnJnODFyZTM2aWhNTGpvVkxvV2MrNjJhMVUvN3FWWDVDcHZUVkY3cm9jU0FLd3Y0Y0JWcVptN2xMRFMvcW9YczRmTXMvVlFpNkJ0VmJOQTN1U3pLcFFmakgxbzN4NExydmtPbjQwemhtNmhqZHVEZ2x6SlV3QTBQT2FiZ2RYSW5kcDlmemhPbzIzUGUrUms5R1NMWDBkNzFQb3FyeThOUURUek5sc2ErSlRORzkrVXJFZituZ3hDakdFc0RDYzBieit1ZFZSeUhRSTFqbUVPM1MrSU9ReWNFcTdYd0I2ejN3Zk1mYTczbThQVlJwK2lPZ3RaZmVTQmwwMXhuMDN2TWFRSmt5ajd2bmhHQ2tsc0NXVlJVbDR5KzVvTlV6UTYzQjJkYmpERjN2aWtkLzNSVU1pZlBZblg1R2xmdWsyRnNWLzdScWpJOXlLVGJFOHdKWSs3NHA3cVhPOCtkSVlnanRMRC9OOFRKdFJoMDROOXRYSkE0SDU5SWtNbUxFbGd2cjBRNU9DZVZmZEF0KzVoa2g0cFFnZlJNSHBMNzRYYXRMUXBQaU95SFJzL09kbUh0QmY4bk9aY3hWS3pkR2NsSU4xNmxFN2tKK3BWTWpzcE9JKzUrVHFMUk82bTBacE5YSm9aUnY5TVBEUmNBZkpVdE5aSHlpZy9zMnd3UmVha0ZnUFBKd0NRbXUxSTMwL3RjQmJqaStOYTUzaTFXMU4rQnFvWTdaeG8rVS9NOVh5SjRPazJTU2tCdG9Pcnd1aEFZM2EwM0V1Nmw4d0ZkSUcxY04rZThob3BUa2lLRjA5M0t1SC9CY0IzOXJNaUdETG42WFZoR0tFYWFUL3ZxYi9sdWZ1QWRwR0V4ZXZGMStKOWl0a0ZoQ2Z5bVdyOXZHYjNCVEs0ajU5OHpSSDcrZStNVTltYXJ1WnFiMHBrR3hSRFJFMUNENFo4TFY0dmhnUGlkazV3MkJxODE2ZzNuSHcxLy9qM0pTdHo3TlI5SElXRUxPOFRNbjNRclAvelpwLy8rRHY5cDQyOS9vZ3YrR0FUUituL1VkRituczl4TmtYWlFKWFk0dDlqTWtKTlVGeWdBdHpuZFh3anNzK3lXSDlIQW5MUVFmaEFza2RaUzJsMDFITFd2N0w3dXM1dVRINDA5cHFpdHZmU09RZy9jK1p0N2s4NzlQM0s5K1dWNjhuNyszY1pmdVJkL2REUFAvMDNybitkKy9uQnZXZmdEbHQ4K0x6anFKL3Z4M0NuTk93aVhoaG83NzhDOTZpRCsxVEJ2UlpZZVArRUg4MUxFMHZWd09Pcm1DTEIzaUt6STF4K3ZKRXNyUEg0dUYwVUI0VEo0WDN1RGZPQ28zUFlwWWUwTUY0Ym91aDBEUS9sNDNmeFVGN1krZHBXdXZUU2ZmQjB5TzJVUVVFVEkvTHdDWkUzQnZuZXZKN2M5elVsWTNINTh4emtlNkRORkRRRzhuMFd0RE40TEFZTjRub2dLYXYxZXpPZksveit0NnRzQ1RwK2RoeDR5bWpXdUNKazFkRVVpZkRQK0h5UzRpUC9WZzlCMmpUbzlMNE5iaUJ1RFM0bnV1SFc2SCtKRFFuMkp0cVJLR2tFUVBFWUU3dXphelhJa2N4SUFxVXExZXNhc1pCRVRsRVpZN3k3Sm8rUm9WL0lzalk5ZUlNa1V2cjQySGMweHF0c2F2WnZoejFPTHdTeE1PVHVxemxoYjBXYmRPd0JIOUVZaXlCamF0ejQwYlV4VEhiaVd4cUowdW1hMTlxaFBydXZjV0psYmlTU0g0OE9MRERwYUhQc3p2eWN0NDFaZlR1MTArdmpveDZrT3FLNnYwSy9nRVBwaEV2TWwvdndTditBNEhobTM2SlNQOUlYVHlDWkRtNGtLc3FENWF5OGIxU2FkL3ZhaXlPNU4vc0RmRVY2WjRxOTVFK3lmanhwcUJvQkVUVzJDN3hsNHBJTzJiRE9EREZ1clVQd0U3RVdDMlVwbHErQUhtQkh2aXIyUFNna1IxMi9SeTY1TzBhWnRRUGVYaTltVGxGL1dqNUdRK3ZGa1l5aFhzTFRqckJTUDlod2s0R1BxRFA1ckJuNS9sOGIwbUxSQXZSU3pYSGMyOTNiczNzOEVzZEUzbTJleHhpZFdWQjRqb0hSK1MrZHo1L1crdjAwSzNUcU4xNENEQnRoOGVXY3NUYml3WFBzeWdIZEdpZDBQRWR5NkhIbTJ2L0lVdVY1UlZhcFltekdzWDkwbXBuSWROR2NPT3E2NERiYzVHVWJZcEQ5TTdTKzZjTFkvL1FtanhGTFA1Y3VURlJtM3ZBNXJrRlpyb0ZuTzNiakhGMzV1VTNzOG12TDdUcDlueVRjNG15bVRKNXNMSXA3dW1TbkdrTzIzZmFlaHR6M21tVFM3ZmJWeDVyUDd4M0hYSWpSTmVxL0EzeENzOUpOQjA4YzlTOUJGMk8zYk91cjBJdHNsRnhYZ1JQZGFhcEJJaTRkUnBLR3hWejdpcjY5dC9iYzlxVHhqdnRPeUdPZmlMR0RoUjRmWXl3SHYxV2RPcGx4SVY4N1RwTEJ5M1djMFFQMFA5czRHN0ZCTk9kSVRTL3RlcDNvM2gxVEVhNVhERGlpN2ZXdHFSelVFUmVQMmZieHo3YkhXV0pkYklPeE9VSlp0SXROWnBURlJmajZ2bTlzWWpSeFFWTytXVGRpT2hkUGVUSis4WWlyUHZvZUw4OGw1aUxZT0hkM2IvSW1rcSsxWk4xRWwzVWlraGZ0dXRlRVl4ZjFXdWpvZjhQcjRJQ1R1NWV6WnlaNHRIUU14bHpVSExZTzJWTU9vTk1HTC8yMFM1aTJvMm9iZmsrOHFxZFI3eHpiUkRiZ1UwbG51SWd6NExlbFE1WFM3eGJMdVNRdE5TOTV2M1pVT2RhVXgvUWQ4cXhDdDZ4ZjJFNjJ5Yi9IdWtMTzZSeW9yVjhLZ1lsNVlOYzc1eStLdmVmcnhZK2xjLzY0eTlrdldQMGEwYkR6L3JvanErUldqTzA2V2VydVdxTkZVN3IzSFBJY0xXUnFsOElDWnN6MkxzL3FPbS9DTG42KytYK1FmN21Hc3BZQ3Jab2QvbHBsNlJ3NHhOL3l1cThncVY0QjZhSGsxaFZFMVNmSUx4V3U1Z3ZYcWJmQVJZUXBzcGN4S3AxRi9jOFhPUHprWnZtb1N3K3ZFcUJMZHJxMWZyM3dBUHY1Tm5NOWk4RitqZEF1eGtQNVo3MWM2dWhLM2VubG5HeW1yN1VzV1pLQzEycWdVaUc4WFhHUTlteG5xejRHU0lseWJGOWVYbWJxajJzSFgrYTFqZjBnUm9PTkhSZFJTcklxMDNUeTg5ZVExR2JWL0JrK2R1NCtWMTV6bHMrdnZFUnZaNEU3WmJueFdUVmpEamI0by9rOGpsdzQ0cFRJclVHeHh1SnZCZU8raGV1aE9qcEZzTzZsVkovYVhuSkRhL2JNMFFsMWNMYlhFL1BidjNFWjN2ajNpVnJCNWlyanVwWlR6bG52Njc3TnJJOVVOWU5xYlBncC9IWlhTK2xKbWs4N3dlYys3WU94VERvMmF3MmwzTmZEcjM0Vk5sdnFXSkJrbnVLN29TbFo2L1QxMHp1T29QWk9lb0lrODFOK3NMODQzV0oyUTRaMGZaM3Njc3FDL0pWMmZ1aFdpMWpHVVJTS1pWNjM3bGY1M1hubngxNi92S0VYWTg5YVZKMGZ2OTFqR2RmRytHNCtzbml3SGVzNGhTK3VkT3I0UmZoRmhHL0Y1Z1VHMzVRYVUrTWN1TG1jbGI1WldtUitzRzVWNm5mK1B4WXpscm5GR3hwWmFLOGVxcVZvME5mbUFXb0dmWERpVC9GblViV3Z6R0RPVHI4YWt0T1pXZzRCWXZ6NVlIMTJaYmZDY0d0TmsrZERBWk5HV3ZIb3YrUElPblk5UHJqZzhoL3dMUnJUNjlzdWFNVlo1Yk51SzAwbFNWcG5xU1gxTk9OLzgxRm9QOTJyWW5kaW9ud2dPaUE4V01mNHZjOGwxNUtxRUVHNHlBbTIrV0FONUJyZnUxc3E5c3VXWXFnb2FqZ09ZdC9KQ2sxZ0M4d1BrSytYS0N0Ulg2VEF0Z3ZybnVCZ05SbW42SThsVkRpcE9WQjlrWDZPeGtwNFpLeWQxTTZHajgvdjJVN2srWVFCTDk1S2I5UFFFTnVjSmIwSmxXM2I1dE9iTjdtL1oxajFldjM4OGQ3bzE1emdYc0k5Q2lrQUdBVmlSNmxrSnY3bmI0QWs0ME0yRzhUSjQ0N2tOK3B2ZkhpT0ZqU1VTUDZQTStRZmJBeXdLSkNCYXhTVnhwaXpIc2VaVXlVQmhxNTl2Rndya3lHb1JpSGJvMGFwd2VFWmVTTHVOaVErSEFla09uYXJGZzAwZFpOWGFQZW9IUFRSUjBGbUV5cVlFeE9WYWFhTzhjMHVGVWg3VTRlL1V4ZEJtdGhsQkRnZzI1N1EzM2oxaEE3SFR4U2VUVFN1Vm5QWmJnVzFub2R3bUcxNmFLQkRLeEVldHY3RDlPak8wSmhyYkpUbm9lK2tjR29ESmF6RlNPOC9mVU45SnkvZzRYSzVQVWt3MmRnUERHcEpxQmZoZTdHQStjanpmRS9FR3NNTStGVjluajlJQWhyU2ZUL0ozUUU1VEVJWXlrNVVqc0k2WlpjQ1ByNkE4RlpVRjRnOW5ucFZtalg5ME1MU1F5c0lQRDBuRnpxd0NjU0ptSWI1bVl2MkNtaytDMU1ERmtaUXlDQnE0Yy9ZYWk5TEo2eFlrR1MveDJzNS9mcklXMnZtRzJXcnYwQVBwQ2RnQ0E5c25GdmZwZTh1YzBPd2RSczRHOTk3M1BHRUJuUUI1cUtyQ1E2bTZYL0g3TkluWjd5LzE2NzQvWlhPVnA3T2V1Q1JrOEpGUzUxNlZIcm5IMUhrSVVJbFRJbGpqSGFRdEV0a0p0b3NZdWw3N2NWd2prM2dXMUFqYWE2eldleUhHTGxwazNWSEUyVkZ6VDJ5SS9FdmxHVVN6Mkg5ellFMXM0bnNLTXRNcU55S050TC81OUNwRkpraTVGb3U2VlhHbTh2V0FURVB3clVWT0x2b0E4akx1d096VkJDZ0hCMkNyNVY2T3dFV3RKRUtva0prZmM4N2grc05IVHZNYjBLVlRwNTI4NFFUUHVwb1d2UVZVd1Vlb2daUjNrQk1FU1lvMG1mdWtld1JWUEtoNStyekxRYjdIS2pGRklnV2hqMXczeU4vcUNOb1BJOFhGaVVnQk5UMWhDSEJzQXo4TDdPeXQ4d1FXVUZqOTJPTm4vQVB5SkZnOGh6dWVxb0pkTmo1N1JPckZiZmZ1Uy9YeHJTWExUUmdqNXV4WmpwZ1FZY2VlTWMyd0pyYWhSZVNLcG0zUWpIZnFFeFRMQUIyaXBWdW1FOHBxY1p2OExZWFFpUEhIc2diNUJNVzh6TTVwdlFpdCttUXg4WEdhVkRjZlZiTHlNVGxZOHhjZm1tL1JTQVQvSDA5VVFvbDVnSXo3ckVTRG1uclE0YlVSSUI0aVJYTURRd3hnZXgxR2d0RHhLcDJIYXlJa1IrRS9hRG1DdHRObTJDNmx5dFdkZk9WekQ2WDJTcERXalFEbE1SdkFwMXN5bVd2NG15MWJQQ0QrRTFFbUduTUdXaE53bXljSm5EVjJXclFOeE80NXVrRWIwOEFBZmZpellLVlVMcDE1STR2Yk5LNUR6V3dDU1VBRGZtS2hmR1NVcWlpMUwyVXNFOHJCN21MdUh1VUpaT3g0K1dpaXpIQkovaHdib2FCemhwTk9WdmdGVGY1Y0pzSGVmN0wxSENJOWRPVVViYitZeFVKV242ZFlPTHorVEhpOTFrelk1ZHRPNWMrZ3JYN3YwakVic3VvT0dub0lyZURJZy9zRk15RytUeUNMSWNBV2QxSVoxVU5GeEU4VWllMTN1Y200MFUyZmN4QzB1M1dMdkxPeHd1K0Y3TVdVc0hzZHRGUVo3VytubGZDQVNpQUt5aDhyblAzRXlEQnl2dEpiNktheDYvSGtMelQ5U3lFeVRNVk0xelB0TTBNSlkxNERtc1doNE1nRDE1RWE5SGQwMEFka1RaMEVpRzVOQUd1SUJ6UUpKMEpSMG5hK09CN2xRQTZVS3hNZmloSVE3R0NDblZ6Njk0UXZ5a1dYVHhwUzJzb0R1K3NtcnUxVWRJeFN2QXN6QkZEMWM4YzZaT29iQThiSmlKSXZ1eWNnSVhCUUlYV3doeVRnWkRReEpUUlhnRXdSTkFhd0dTWE8wYTFES2pkaWhMVk5wL3RhRS94WWhzZ3dlK1ZwS0VFQjRMbHJhUXlFODRnRWloeENuYmZveU91SklFWHkyRklZdytKalJ1c3liS2xVMmcvdmhUU0dUeWR2Q3ZYaFlCZHRBWHRTMnY3TGtIdG1YaC84Zmx5MWRvOEZJL0QwZjhVYnpWYjVoK0tSaE1HU0FtUjJtaGkwWUcvdWo3d2d4Y2Z6Q3JNdmRqaXRVSXBYRFg4YWUySmNGLzM2cVVXSU13TjZKc2phUkdOaitqRXRlR0RjRnlUVWI4WC9OSFN1Y0tNSnA3cGR1eHRENkt1eFZseXh4d2FlaUMxRmJHQkVTTzg0bGJ5ckF1Z1l4ZGwrMk44LzZBZ1dwby9JZW9BT2NzRzM1SUEvYjNBdVN5b2E1NUw3bGxCTGxhV2xFV3Z1Q0ZkOGY4TmZjVFVnekp2NkNiQis2b2hXd29kbGs5bkdXRnBCQU9hejV1RVc1eEJ2bWpuSEZlRHNiMG1Yd2F5ajNtZFlxNWd4eE5mM0gzL3RuQ2dId2pTcnBTZ1Z4TG1pVHR1c3pkUlVGSXNuNkxpTVBqTDgwOHZMMXVRaERiTTdhQTQzbUlTWFJlcWpTc2t5bklSY0hDSjlxZUZvcEpmeDl0cXlVb0diU3dKZXgvMGFERTNwbEJQR3ROQllnV2JkTG9tMytRL2JqZGl6UjIvQVMvYy9kSC9kM0c3cHlsMXFEWGd0T0Z0RXFpZHdMcXhQWXRyTkV2ZWFzV3EzdlBVVXRxVGV1OGdwb3Y0YmRPUVJJMmtuZUZ2Uk5NclNoeVZlRXVwSzFQb0xEUE1TZldNSUpjczI2N21HQjhYOUNlaFFDRjBnSXlocFAxMG1ieU03bHdXMWU2VEd2SEJWMXNnL1V5VGdoSFBHUnFNeWFlYkM2cGJCMVdLTkNRdGxhaTFHR3ZtcTl6VUthVXpMYVhzWEVCWXRIeG1GYkVaMmtKaFIxNjRMaFdXMlRscDFkaHNHRTdaZ0lXUkJPeDNaY3UyRHhnSCtHODNXVFBjZUtHMFRnUUtLaWlOTk9sV2d2cU5FYm5yazZmVkQrQXFSYW0yT2d1WmIwWVdTVFg4OE4raS9FTFN4YmFVVXBQeDR2SlV6WWcvV29uU2VBOHhVSzZ1N0RQSGdwcVdwRWU2RDRjWGc1dUs5RklZVmJhNDdWL25iK3d5T3RrK3pHOFJyUzRFQTBvdXdhMDRpQnlSTFN2b0pBMkZ6YW9iYlp0WG5xOEdkYmZxRXA1STJkcGZwajU5VENWaWY2K0U3NXA2NjVmYWlYOGdTMjEzUnFCeFRacWZIUDQ2bkY2TlNlbk9uZXVUK3ZnYkxVYmRUSDIvdDBSRUZYWkpPRUI2REh2eDZONmc5OTU2Q1lyWS9BWWNtOWdFTEpYWWtyU2krMEYwZ2VLRFpnT0NJWWtMVS8rR09XNWFHajhtdkxGZ3RGSDUrWEM4aHZBRTNDdkhSZmw0b2ZNL1F3azR4MkErUitueWM5Z051LzlUZW03WFc0WFJueVJ5bWY1MnowOWNUT2RyK1BHNitQL1ZiNFFpWGx3YXVjNVdCMXozbytJSmpsYnhJOE15V3RTelQrazRzS1ZiaEYzeGErdkR0czNOeFhhODdpaXUreFJIOWNBcHJuT0wyaDZ2VjU0aVFSWHVPQWoxczhuTEZLOGdaNzBUaElRY1dkRjE5LzJ4YUptVDBlZnJrTkRrV2JwQVFQZG85Mlo4K0huL2FMamJPekI5QUkvazEyZlBzOUhoVU5ESjF1NmF4MlZ4RDNSNlB5d043QnJMSjI2ejZzM1FvTXA3NnF6endldHJEQUJLU0drZlc1UHdTMUd2WU5VYks2dVJxeGZ5VkdOeUZCMEUrT3VnTU04a0t3bUptdXB1UldPOFhrWFhYUUVDeVJWdzlVeUlydEN0Y2M0b05xWHFyN0FVUkJtS242S2h6M2VCTjk2THdJSnJBR1A5bXIvNTl1VE9TeDYzMXN1eVQrUXVqRGQ0YmVVRnBaMGtKRUVuamxQK1gvS3Iya0NLaG5FTlRnNEJzTVRPbU1xbGoyV01GTFJVbFZHMGZ6ZENCZ1V0YTlvZHJKZnBWZEZvbVRpNmFrMHRGalhUY2RxcXZXQkF6alk2aFZySDlzYnQzWjlnbitBVkRwVGNRSW1lZmJCNGVkaXJqenJzTmlldnZlNFpUNEVVWldWM1R4RXNJVys5TVQvUkpvS2ZaWllTUkdmQzFDd1BHLzlyZE1PTThxUi9MVVl2dzVmL2VtVVNvRDdZU0Z1T29xY2hkVWcyVWVQZDFlQ3RGU0tneExTWjc2NG95NGx2UkNJSDZib3dQeFpXd3hORmN0a3NMZWlsNDdwZmV2Y0JpcGtrQkljNG5nWkcra3hHWjcxYTcyS1E3VmFaNk1aT1prUUpaWE02a2IvQWMwL1hrSng4ZHZ5ZkpjV2JJM3pPTkVhRVBJVzhHYmtZanNaY3d5K2VNb0tyWWpEbXZFRWl4SHprQ1NDUlBSemhPZkpadUxkY2J4MTlFTDIzTUE4cm5qVFpaNzg3RkdNbmtxbnB1ekI1LzkwdzFndFVTUmFXY2IwZXRhODE5OFZFZVpNVVNmSWh5dWM0L255d0ZROXVxbjdqZHFYaCs1d3d2K1JLOVhvdU5QYllkb0VlbE5HbzM0S3l5U3dpZ3NyZkNlMHYvUGxXUHZRdlFnOFIwS2dITzE4bVRWVGhoUXJsYkVRMEtwL0p4UGRqSHlSN0UxUVB3L3V0MHIrSERERzdCd1pGbTlJcUVVWlJwdjJXcHpsTWtPZW1lTGNBdDVDc3J6c2tMR2FWT0F4eXlTelpWL0QyRVk3eWROWk1mOGU4VmhIY0tHSEFXTnN6ZjFFT3E4Zk5zdGlqTVk0Slh5QVR3VGRuY0ZGcWNORGZEbyttV0Z2eEpKcGM0c0VadGpYeUJkb0ZjeGJVbW5pQ29LcTVqeWRVSE5qWUp4TXFOMUt6WVY2Mk11Z2NFTFZoUzNCbmQrVExMT2g3ZHdzL3pTWFd6eEViNE5qNGFGdW41eDRrRFdMSzVUVUYveUNYQi9jWll2STlrUGdWc0cyalNodFhreGZnVCt4empKb2ZYcVBFbklYSVExbG5JZG1WekJPTTkwRVh2SlVXNmEwblovN1hqSkdsOFRvTzNIL2ZkeG54bVROS0JaeG5rcFhMVmdMWENaeXdHVDNZeVM3NXcvUEFINUkvak11UnNwZWo4eFpPYlU5a1JFYlJBK2txam1LUkZhS0dXQW1GUXNwQytRTGJLUGYwUmFLM09YdkJTV3FvNDZwNzB3cy9lWnB1NmpDdFpVZ1F5NnI0dEhNUFVkQWdXR0dVWU5idXYvMWE2SytNVkZzZDNUMTgzK1Q4Y2FwU282bTArU2g1N2ZFZUcvOTVkeWtHSkJRTWowOURTVzJiWTBtVW9uRHk5YTh0ckxubkw1QjVMVzNObDhySlpOeXNPOFpiKzgwelh4cVVHRnB1ZDNRendiN2JmKzhtcTZ4MFRBbkpVOXBEUVI5WVFtWmhsbmEyeHV4SnQwYUNPL2YxU1U4Z2JsT3JiSXlNc3hUbFZVVzY5VkpQellVMkhsUlhjcUUybExMeG5PYlp1ejJ0VDlDaXZmVEFVWWZtekpsdC9sT1Bnc1I2Vk42NC94UWQ0SmxrL1JWN1VLVnYyR3gvQVdzbVRBdUNXS2hkd0MrNEhtS0VLWVpoMlhpczRLc1VSMUJlT2JzMWMxM3dxRlJub2NkbXVoZWFUVjMwZ3ZWWFpjb3V6SEtLNXp3ck41MmpYSkV1WDZkR3gzQkNwVi8rKzRmM2h5YVcvY1FKTEZLcWFzanNNdU8zQjNXbE1xMmd5WWZkSzFlN0wycE8vdFJ5ZTJtd3p3WlBmZFVNcmw1d2RMcWRkMkt2L3dWdG5weVdZaGQ0OUw2cnNPVis4SFhQcldIMkt1cDg5bDJ0ejZiZjgwaVlTZCtWNExST1NPSGVhbXZleFI1MjRxNHI0M3JUbXRGelF2QXJwdldmTFlGWnJiRnNwQnNYTlVxcWVuanhOTnNGWGF0WnZsSWhrN3RlVVBmSytZTDMyRjhNY1RuanYwQlpOcHBiK3ZzaG9DcnRMWGpJV3EzRUpYcFZYSWxHNlpOTDBkaDZxRW0yV013RGpEM0xmT2ZrR2gxL2N6WWMvMHFoaUQyb3pObkg0ODgyTVZWdDNKYlZGa2J3b3dOQ08zS0w1SW9ZVzV3bFZlR0NWaU91djFzdlp4N0ZienhLekE0ekdxQmxSUmFSV0NvYlhhVnE0eVlDV2JaZjhlaUp3dDNPWStNRmlTSmVuZ2NGUDJ0MEpNZnpPaUo3Y0VDdnB4N25lZzFSYzV4KzdteVBKT1h0MkZvaFZSeVh0RCsvckRvVE95R1lJbkplbFpNam9sZWNWSFVoVU5xdmRaV2cySjJ0MGpQbWlMRmVSRC84Zk9UNG8rTkdJTGIrVHVmQ285Y2VCQm0zSkxWbitNTzI2NzVuN3FpRVgvNlcrMTg4Y1lnM1puNU5TVGpnT0tmV0ZTQUFOYTZyYUN4U29WVTg1MW9KTFkxMVdJb1lLMGR1MGVjNUU0dENuQVBvS2g3MXJpVHNqVklwM2dLdkJiRVlRaU5Zcm1IMjJvTFFXQTJBZHdNbklENlBYOWI1OGRSMlFLbzRxYWcxRDFaK0wvRndFS1RSN29zT1pQV0VDUEpJSFFxUFVzTTVpL0NINVl1cFZQZkZBNXBIVUJjc2VzaDhlTzVZaHlXbmFWUlBabi9CbWRYVnVtWldQeE1QNWUyOHptMnVxSGdGb1Q5Q3ltSFlOTnJ6cnJqbFhaTTA2SG56RHhZTmxJNWIvUW9zeExtbXJxREZxbW9nUWRxazBXTGtVY2VvQXZReEhna0l5dldVNjlCUEZyMjRWQjYrbHg3NVJuYTZkR3RybU94RG52Qm9qdmkxLzRkSGpWZWc4b3dvZlBlMWNPbnhVMWlvaDAxNnMvVnVkdjltaFY5ZjM1QXQrU2gyOGgxYnBwOHhocjA5K3ZmNDdFbHgzTXM2aHlwNlF2QjN0MHZuTGJPaHdvNjYwY3A3SzB2dmVwYWJLN1lKZnhFV1dmckMyWXpKZllPanlnUHdmd2QvMWFtVHFhMGhaNXVlZWJoV1lWTXViUlR3SWpqKzBPcTBvaFUzemZSZnVMOGd0NTlYc0hkd0t0eFRRUTRZMnF6Nmdpc3hubTJVZGxtcEVrZ09zWno3aUVrNlFPdDhCdVB3citOUjAxTFRxWG1KbzFDNzZvMU4yNzR0d0p2bCtJMDY5VGlMcGVuSy9taVJ4aHlZOGp2WVY2VzFXdVN3aEg5cTdrdXduSk10bTdJV2NxczdIc255SFNxV1hMU3BZdFpHYVIxVjN0MGdhdW5pbkZQWkd0V3NrRjY1cnR0aTQ4VVY5dVY5S004a2ZEWXMwcGdCMDBTK1RselRYVjZQOG14cTE1YjlFbjhzejNqV1NzemNpZlphL051dWZQTm5OVGIwMzFwcHR0MCtzUlNILzdVRzhwemJzZ3R0M09HM3V0N0I5SnpETXQybVRadXlSTklWOEQ1NFR1VHJwTmNIdGdtTWxZSmVpWTlYUzgzTllKaWNqUmp0SlNmOUJaTHNRdjYyOVFkRHNLUWhUSzVDblhocGs3dk1Oa0h6UGhtMEV4Vy9WQ0dBcEhmUHlCYWd0WlFUUW1QSHg3ZzVJWFhzclFEUHpJVmh2MkxCNkloMTM4aVNEd3cxSk5IckR2elV4dnA3M01zUUJWaFc4RWJyUmVhVlVjTEIxUjNQVVh5YVlHNEhwSlVjTFZ4TWdEeGNQa1ZSUXBMN1ZUQUdhYkR6YktjdmcxMnQ1UDhUU0dRa3JqL2dPcnBuYmlESHdsdUE3M3hiWHRzL0w3dTQ2OGNSV1NXUnRnVHdsUW5BNDdFS2cwT2laRGdGeEFLUVFVY3NiR29tSVRnZVhVQUF5S2UwM2VBN01wNGdueUtRbW0wTFhKdEVrNmRka3NNSkN1eERtbUh6bVZoTytYYU4yQTU0TUloM25pdzVDRjdQd2lYRlpybkE4d09kZUhMdnZoZG9xSURHOVBESTdVbldXSHE1MjZUOHk2aXhKUGhrdVZLWm5vVXJ1T3BVZ09PcDNpSUtCamsreWkxdkhvNWNJdEhYYjFQSUt6R2FabFJTMGc1ZDNNVjJwRDhGUWRHWUxaNzNhYWUvZUVJVWVQTWM0TkZ6OHBJVWZMQ3JyRjRqVldINWdRbmVOM1M4dkFOQm1VWHJFY0tHbjZoSVVOOTV5MXZwc3ZMd2JHcHpWOUwwWktUYW42VERYTTA1MjM2dUxKY0lFTUtWQXhLTlQwSzhXbGp1d05ueTNCTlFSZnpvdkE4NWJlSTl6cjFBR05ZbllDVmtSMWFHbmdXVVJVcmdxUitnUnJRaHhXODFsM0NIZXZqdkdFUHpQTVR4ZHNJZkI5ZGZHUmJaVTBjZy8xbWN1YnRFQ1g0dHZhZWRtTkF2VHhDSnRjMlFhb1VhbEdmRU5DR0s3SVMvTzhDUnBkT1ZjYThFV0NSd3Yyc1NXRThDSlBXNVBDdWdqQ1hQZDNoNlU2MGNQRCtiZGh0WFp1WUI2c3Rjb3ZlRTdTbTVNTTJ5dmZVSFhGU1c3S3pMbWk3L0VlRVdMMHdxY09IOU1PU0tqaENISG13K0pHTGNZRS83U0JaUUNSZ2dveDBaWlRBeHJsek5OWFlYTDVmTklqa2RUNFlNcVZVejZwOFlEdDA0OXY0T1hHZGczcVRydExCVVhPWmY3YWhQbFpBWS9PKzdTcDBidkdTSGR5UThCMUxPc3BscU1iOVNlOFZBRTdnSWRTWnZ4YlJTcmZsK0xrNVFhcWk1UUpjZXFqaXRkRXJjSFhnLzNNcnlsalBTSUFNYWFsb0ZtMWNWd0JKOERObWtEcW9HUk9TSEZldHJnalE1Q2FodUtrZEg1cFJQaWdNcmdUdGxGSTh1ZkpQSlNVbEdnVGpiQlN2cFJjMHp5cGlVbjZVNUtacWNSb3lydHpobUo3L2NhZVprbVZSd0pRZUxPRzhMWTZ2UDVDaHBLaGM4SnMwRWwrbjZGWHFieDlJdGR0THRZUDkya0tmYVRMdENpOFN0TFpkRU5KYTlFeDFuT296MWtRN3F4b2laRktSeUxmNE80Q0hSVDBULzBXOUY4ZXBOS1ZvZXl4VVhoeTNzUU1Nc0pqUUpFeU1Pam1PaE1GZ09tbWxzY1Y0ZUZpMUNsZFU5Mnlqd2xlaXJFS1BXM2JQQXVFaFJaVjdKc0tWM0xyNWNFVEFpRnVYNU53NVVsRjdkMkhaOTZCaDBzZ0ZJTDVLR2FLU29WWVZsdmRLcFpKVlA1K05aN3hERWtRaG1EZ3NES2NpYXpKQ1hKNlpOMkIzRlkyZjZWWnlHbC90NGF1bkdJQWsvQkhhUytpK1NwZFJmbkIvT2t0T3Z5amluV05mTTlLc3I2V3d0Q2ExaENtZVJJNmljcEZNNG84cXVDTHNpa1UwdE1vWkkvOUVxWFJNcEtHYVd6b2ZsNG5RdVZRbTE3ZDVmVTVxWENRZUNEcVZhTDlYSjlxSjA4bjNHM0VGWlMyOFNIRWIzY2RSQmR0TzBZY1R6aWwzUWtuTktFZS9zbVExZlRiMFhicHlOQjV4QWV1SWxmKzVLV2xFWTBEcUpic256SmxReEpQT1Z5SGlLTXg1WHU5RmNFdjFGYmc2RmhtNHQrSnl5NUpDMVczWU84ZFlMc08wUFhQYnhvZEJndHRUYkgzcnQ5Q3AxbEpJazJyM08xWnF1OTRlUmJuSXoyZjUwbFdvbFl6dUtzajRQTW9rNGFiSExPOE5BQzg4NGhpWHg1Rnk1cFdLTzBiV0w3dUVHWGFKQ3R6bmhQNjdTbFE0eGpXSWZncTZFcFoyOFFNdHVaSzdKQzBSR2JsOW5BNFh0Rkx1Zy9OTE1vSDFwR3Q5SW9uQUpxY0VETHlINlREUk9jYnNtR1BhR0l4TW80MUlVQW5RVlBNUEdCeXA0bU9taDlaUU1rQkFja3NVSzU1THNaajdFNXo1WHVab3lXQ0t1Nm5IbURxMjJ4SS85WjhZZHhKeTRrV3BEMTZqTFZycHdHTFdmeU9EMFdkK2NCekZCeFZhR3Y3UzVrOXF3aC81dC9MUUVYc1JxSTNROVJtM1FJb2FaVzlHbHNEYUtPVXl5a3lXdWhOT3ByU0VpMHMxRzRyZ29pWDFWNzQzRUVMdGkrcEp1NW9nNlgwZzZvVHluVXFsaEg5azZlenlSaTA1TkdaSHowbnZwM0hPSnI3ZWJyQVVGckRqYmtGQk9iRXZkUVdra1ViTDBwRXZNVTQ2WDU4dkY5ajlGM2o2a3B5ZXROVUJJdHJFdWJXOVp2TVBNNHFOcUxsc1NCSnFPSDNYYk53di9jWERYTnhOOGlGTHpVaHRlaXNZWStSbEhZT3VQMjkvQ2IrTCt4diszNVJ2N3h1ZG5aNm9oSzRjTVBmQ0c4S0k3ZE5tak5rL0g0ZTg0cE94bi9zWkhLOXBzZnZqOG5jQThxSno3Tzh4cWJ4RVNEaXZHSk9aekY3bzVQSkxRN2czNHFBV295dUEreDNidFU5OExUNlp5R3ljZUlYanJxb2IyQ0FWcWw0Vk9UUVBVUVl2SFYvZzR6QXVDWkd2WVFCdGYwd21kNWxpbHJ2dUVuMUJYTG55MDFCNGg0U01EbFlzbk5wbTlkN205aDU3OHVmcGVmOVo0V3BscVdRdnFvNTJmeVVBN0oyNGVaRDVhdjZTeUdJVjlrcG1ITnF5dmRmemNwRU13OTdCdmtuVjJmcStNRkh1bjlCVDNMc2Y4cGJ6dmlzV2lJUXZZa25nKzhWeGsxVitkbGkxdTU2a1k1MExSamFQZG90dlQ1QndxdHd5RitlbW8vejlKM3lWVVZHZktyeFF0Sk1PQVFXb1FpaS80ZHA5d2d5YlNhNW1rdWNtUkx0RVFaL3B6MHRML05WY2dXQWQ5NW5FUTNUZzZ0TmJ1eW4zSWVwejY1TDNodU1VVUJudGxsV3V1NERidE9GU01TYnBJTFY0Znk2d2xNMFNPdmk2Q3BMaDgxYzFMcmVJdktkNjF1RVdCY0R3MWxVQlVXMUkwWittL1BhUmxYK1BRL294ZzBZZTZLVWlJaVRGNEFETms1OVlkcHQ1L3JreG1xOXRWNUtjcC9lUUxVVlZtQnpRTlZ1eXRRQ1A2RXpkMEc4ZUx4V3lIcG1aV0ozYkF6a1dUdGc0bFpsdzQyU1FlekVtaVVQYUpVdVIvcWtsVkEvODdTNEFyRkNwQUxkWTNRUmRVdzNHM1hiV1VwNmFxOXowelVpemNQYTczNTFwOUpYT1p5ZmRaQkZucXQ5MFZ6UW5kWEIvbXdmOExDOVNUajVrZW5WcE51cU9RUVAzbUlSSmo3ZVYyMUZ4RzhWQXhLckVuM2MrWGZtWjgwMEVQYjkvNWxJbGlqc2NVYkI2ZGEwUlFhTW9vazB6dWcxRzB0S2kvSkJDNHJ3Ny9EM200QVJ6QWt6TWNWckRjVDJTeUZ0VWRXQXNGbHNQREZxVjNOK0VqeVhhb0VlUHdyb2FaQ2lMcUV6YjhNVytQTkU5VG1UQzAxRXpXbGk1MVB6WnZVcWtteXVST1UrVjZpaytMZS85cVQ2bnd6VXpmOXRQNjh0WWVpMFlhREd4NmtBZDdqbjFjS3FPQ3VZYmlFTEg5ellxY2M0TW5SSmprZUdpcWFHd0xJbWh5ZUtzK3hLSk1CbE9KMDVvdzlnR0NLWjFWcG5NS29TQ1RiTVMrWCsyM3kwNDJ6T2I1TXRjWS82b0JlQW8xVnk4OU9UeWhwYXZGUDc4alhDY0ZIMHQ3R3gyNGhNRU9tMmdzRWZHYWJWcFFndkZxYlFLTXNrbkZSUm11UEhjWnUwU3UvV01GcGhadkIyci9FR2JHNzJycEdHaG8zaCtNc3owdUd6SjdoTksydXFRaUUxcW1uMHpnYWNLWVlaQkNxc3hWK3NqYnBvVmRTaWxXL2I5NG4yeE5iNjQ4Vm1OSW9penFFV2hCbnNlbitkMGtiQ1BtUkl0ZldxU0JlT2Q5V25lM2M2YmNkNnV2WE9KNldkaVNzdVhxMG5kaHFyUTRRb1dVakNqWXRaMEVBaG5TT1AxbTQ0eGtmME83alhnaHJ6U0pXeFA0YS90NzJqVTI5VnUycnZ1NG43SGZIa2ttUU9NR1NTK05QZUxHTzVJNzNtQzJCNytsTWlCUVFaUk05LzlsaUxJZm93dXBVRkFiUEJiUitseERNNk04UHRnaDFwYUpxNVJ2czd5RXVMUXYvN2Qxb1Uyd29GU2IzRk1QV1FPS011Q3VKN3BERGpwSWNsdXM1VGVFb01CeTJZZFZCNGZ4bWVzYUNlTU5zRWdUSEtTNVdEU0d5TlVPb0VwY0MyT0ZXdElSZjB3MjdjazM0L0RqeFJUVkljYzkra3FaRTZpTVNpVkRzaUtkUC9YejVYZkVobS9zQmhPNTBwMXJ2SkRsa3l5eHVKOVNQZ3M3WWVVSkJqWGRlQWtFK1A5T1FKbTZTWm5uMXN2Y2R1STc4ZFltYmtFMm10emlQcmNqVmlzWEc3OHNwTHZiWmFTRngvUmtzOXpQNExLbjBDZHovM0pzZXRrVDA2QThmL3lDZ01PNk1iMUhtZTBKSjdiMndaejFxbGVxVHVLQkdva2hQVlVaMGRWdSt0blFZTkVZMWZta1pTejYrRUdaNUV6TDc2NTdtcmVaR1IzalVmYUVrNDU4UERuaUJ6c1NtQktoRFJ6ZlhhbWVyeUp2OS9ENW02SElxWjBSK291Q0U1NER6cDRJSnV1RDFlNERjNWkrUHBTT1JKZkcyM3VWZ3FpeEFNRHZjaE1SMG5aZEg1YnJjbFl3Um9KUld2L3JseEdSSTVmZkQ1TlBHbUlEdDd2REUxNDM0cFlkVlpJRmg4OUJzOTRIR0dKYlR3ck44VDZsaDFIWkZUT0I0bFd6V2o2RVZxeFNNdkMwL2xqV0JRM0Yya2MvbU8yYjZ0V29uVDJKRXFFd0Z0czhyejJoK29XTmRzOWNlUjJjYjd6WnZKVERwcEhhRWhLNWF2V3Fzc2VXYTJEdDVCQmhhYmRXU2t0Uzgwb01Rckw0VHZBTTliNUhNbXlEbk8rT2trYk1YZlVKRzdlWHFUSUc2bHFTT0VicVZSK3FZZFA3dVdiNTdXRUpxenloNDExR0FWc0RpblBzN0t2VWVYSXRsY01kT1VXelhCSDZ6c2N5bVYxTExWQ3RjOEllUG9qelhIRjltNWI1ekd3QlJkemN5VUpraXU5MzhBcG1BYXlSZEpyWDFQbVZndVdVdnQyVGhRNjJjekl0VHlXSk1XMkFuL2hkRGZNSzdTaUZRbEdJZEFibHRIejN5Y29oN2o5VjdHeE5XQnBidGNTZHFtNFh4UndUYXdjM2NiWit4ZlN2OXFRZkVrREtmWlR3Q2txV0dJL3VyMjUwSXRYbE1saDZ2VU5XRVlJZzlBM0d6YmdtYnF2VE44anMyWU1vODdDVTV5Nm5aNGRiSkxEUUpqOWZjN3lNN3RaekpEWkZ0cU9jVTgrbVpqWWxxNFZtaWZJMjNpSGIxWm9UOUUra1QyZG9sblAxQWZpT2t0N1BRQ1N5a0JpWHk1bXY2MzdJZWdXU0tqOUlLcllaZjRMdTkrSTd1Yitta1JkbHZZemVoaC9qYUo5bjdIVUg1YjJJYmdlTmRrWTd3eDF5Vnp4UzdwYnZreTYrbm1WVXRSbGxFRmZ3ZVVRMC9uRzAxN1dvVVlTeHMrajJCNEZWL0Y2MkV0SGxNV1pYWXJqR0hwdGhuTmIxeDY2TEtaMFFlOTJJTldIZGZSL3ZxcDAyd01TOHIxRzRkSnFIb2s4S21RNzk0N0cxM2E0WVhic0dnSGNCdlJ1VnUxZUFpNC9BNStaaXhtZFNYTTczTHVwQi9MSDdPOXl4TFRWWEpUeUJiSTFTNDlUSVJPcmZWQ09iL2N6WjlwTTRKc1p4OGtVejhkUUd2N2dVV0t4WHZUSDdRTS8zSjJPdVhYZ2NpVWhxWStjZ3RhT2xpUVFWT1l0aEJMVjN4cEVTWlQzcm1mRVlOWnhtcEJiYjI0Q1Jhbzg2cHJuK2k5VE5PaDhWeFJKR1hKZlhIQVRKSHMxVDV0eGdjL29wWXJZOFhqbEdRUWJSY294SUJjblZzTWptVTF5bW1JVUw0ZHZpSlhuZE1BSjBZZXQrYzdPNTIvcDk4eXRsbUFzR0JhVEFtTWhpbUFudnAxVFdOR005QnB1aXRHait0ODEwQ1UyVWhvcnJqUEtHdFRoVkM4V2FYdzA0V0ZuVDVmVGpxbVB5clEwdE4zQ2tMc2N0VnkyeHIwWldnaVdWWjFPcmxGamp4SllzT2ladjJjQW9PdkUrN3NZMEkvVHdXY1pxTW95SUtOT2Z0d1A3dysrUmZnNjdsamZvdktZYTUwaWYzZnpFLzhhUFlWZXkvTnEzNStuSDJzTFBoL2ZQNVRzeWxTS0dPWjRrNjlkMlBuSDQzK2txKytzUlhIUXFHQXJXZHdoeCtocHdRQzZKZ1QydXhlaFlVNFpidzdvTmI2L0hMaWtQeUpST0dLMm91eXIrdnpzZUVTcDlHNTBUNEF5RnJTcU9RMHJyb0NZUDRzTURGQnJIbjM0MkV5WlRNbFN5azQ3ckhTcTg5WTkvbkkzekc1bFgxNlo1bHhwaGd1TE9jWlVuZEw4d05jcmt5akg4MmpxZzhCbzhPWWt5bnJ4WnZiRm5vNWxVUzNPUHI4S28zbVg5Tm9SUGRZT0tLakQwN2J2Z0ZncFovUkYrWXprV3ZKL0hzL3RVYmZlR3pHV0x4TkFqZkR6SEhNVlNEd0I1U2FiUUxzSVpIaUJwNDNGakdrYWllbllvRGQxOGh1MkJHd09LN1UzbzcwSy9XWS9rdXVLZG1kcnlrSUJVZEcybXZFOTFMMUp0VGJoMjBtT0xiazF2Q0FhbXU3dXRsWGVHVTJvb1Zpa2JVL2FjdGNnbXNDMUZLazJxbWozR1dlSVdiajR0R0l4RTdCTGNCV1V2dmNuZC9sWXhzTVY0RjkxN2ZXZUZCL1hiSU5OM3FHdkl5VHBDYWx6MWxWZXdkSUdxZUFTL2dCOE1pK3NBK0JxRGlYM1ZHRDJlVXVuVFJiU1krQXVEeTRFM1F4M2hBaHduU1hYK0IwenVqM2VRMW1pUzhWdXgyei9sNi9Ca1d0aktHVTcyYUprT0NXaEdjU2YzK2tGa2tCMTV2R09zUXJTZEZyNnFUajBnQllpT2xuQk80MTE3MGdPV0hTVW9CVlJVMkpqd3BwWWRoSUZEZnU3dElSSGNjU05NNUtaT0ZEUHowVEdNQWp6ekVwZUx3VFdwK2tuMjAxa1U2TmpiaU1RSng4MytMWDFlMXRaMTBrdUNoSlovWEJVUTFkd2FCSGpUREpEcU95bXBFazhYMk0zVnRWdzIxSmtzQ2hBOHcxdFRlZk8zUkoxRk1icVowMWJISGt1ZERCL09oTGZlN1A1R09IYUkyOFpYS1RNdXFvMGhMV1E0SGFiQnNHRzdOYlAxUmlYdEVUejA3NGVyNncvT2VySldFcWpta3EyeTUxcTFCVkkrSlV1ZG5WYTNvZ0JwemRoRkU3ZkM3a3lickF0Mlo2UnFEakFUQVVFWWVZSzQ1V011cEJLUVJ0UWxVK3VOc2puemo2Wm1HcmV6QStBU3JXeFE2TE1rSFJYcVh3TnE3ZnR2MjhkVXgvWlNKY2lEWFAyU1dKc1dhTjBGalBYOVlrbzZMb2JaN2FZVy9JZFVrdEk5YXBUTHlIUzhEeVdQeXVvWnl4TjFUSy92dGZ4azNId1doNkpjelpDOEZ0bjBiSUpheTJnK241d2Q3bG05ckVzS08rc3ZxVm1pK2Mxajg4aFNDeGJ6cmc0K0hFUDBOdDEvQjZZVzFYVm0wOVQxQ3BBS2pjOW4xOGhqcXNhRkdkZnl2YTFaRzBYdTNpcDZONkpHcHlUU3FZNWg0Qk9scExQYU9ueXc0NVBkWFROK0R0QUtnN0RMckxGVG5XdXNvU0JIazNzMGQ3WW91SkhxODUvUjA5VGZjMzdFTlhaRjQ4ZUFZTG5xOUdMaW9OY3dEWnJDNkZXNmdvZEI4Sm5xWVVQdm4wcFdMZlF6MGxNMFl5OE15YmduODREczNROWJEUDEwYkx5T1YrcXp4YTRSZDlEaHU3Y2p1OG1NYU9OWEszVXFtQlE5cUlnN2V0SXdFcU0va0VDay9EemphNEJzMXhSK1EvdENiYzhJS3JTR3NUZEpKMHZnZTdJRzIwVzY4N3VWbUs2aWNXUTZjRDNsd0Z6Z05NR3RGdk81cXlKZUtmbEdMQUFjUVpPcmt4Vnd5M2NXdnFsR3B2am1mOVFlNkFwMjBNUGJWOTJEUFYwT2hGTTRrejhZcjBmZkMyekxXU1Exa3FZNlFkUXJ0dFIza2gxWUx0UWQxa0NFdjVoVm9QSVJXbDVFUmNVVHR0QklyV3A2WHM1RWhoNU9VVXdJNWFFQnZ1aURtVW9FTm1uVncxRm9oQ3JiUnAxQTFFK1hTbFdWT1RpN0FEVys1T2hiOXoxdks0cXg1UjVsUGRHQ1BCSlowMG1DK1NzcDhWVWJncEdBdlhXTXVXUVFSYkNxSTZScjJqdHhaeHRmUDdXLzhvbnoreXowR3M3NkxhVDVIWDllY3lpWkNCL1pSL2dGdE14UHNEd29ob2VDUnRpdUx4RTFHTTF2VUVVZ0J2ODYrZWVoTDU4L1A1NlFGR1EvTXFPZS92Qzc2TDYzanptZWF4NGV4ZC9PS1RVdmtYZytmT0pVSHljaDl4dC85Z29KTXJhcFNndlhyajgrOHZrL044MGYyMlNld2o2Y3lHcXQxQjZtenRvZWtsVkhIcmFvdWh2SEphRy9PdUJ6NkRIS01wRm1RVUxVMWJSV2x5WUUwUlBYWVlrVXljSWVtTjdUTHRnTkNKWDZCcWR5eERLa2VnTzduSks1eFE3T1ZZRFpUTWY5YlZIaWR0azZEUVg5RXQrVjlNN2VzZ2JzWUJkRWVVcHNCMFh2dzJrZDkrckk3VittNDd1K08vdHE3bXc3MjYySFUxV2xTOXVGenNWNkp4SUhObVVDeTBRUzllMDc3SkdSRmJHNjV6My9kT0tCL1prK3lEZEtwVW1kWGpuL2FTM041bnY0Zks3Yk1ISG1QbEhkNEUyK2lUYlY1cnB6U2NSbnhrNktBUnVEVEo4UTFMcEsybVA4Z2oxRWJ1SjlSSXlZK0VXSzRoQ2lJREJBUzFUbTJJRVhBRmZnS1BnZEw5TzZtQWEwNndqQ2NVQUw2RXN4UFFXTzlWTmVnQlBtLzBHZ2taYkR4Q3lueHVqWC85MnZtR2NqWlJNQVk0NXB1YWsyc0ZMQ0xTd1hwRXN5eTVmbkYwakdKQmhtK2ZOU0hLS1VVZnkrMjc2QTcvZmVMT0Z4eFV1SFJOSkkyT3Nlbnh5dmY4REFHT2JUNjBwZlRUbGhFZzl1L0tLa2hKcW01VTEvK0JFY1NrcEZEQTVYZUNxeHdYbVBhYzFqY3VaM0pXUStwME5kV3piLzV2MVp2RjhHdE1URkZFZFFqcExPMGJ3UGIwQkhOV25pcDNsaURYSTJmWGYwNWpqdmZKME5wakxDVWdmVGg5Q01GWVZGS0VkNFovT0cvMkMrTjQzNW1uSys5dDFndkNpVmNhYUg3cks0K1BqQ3ZwVk5peit0MlF5cUgxTzh4M0pLWlZsNlErTHAvWEs4d01qVk1zbE9xOUZkU3c1RnRVcy9DcHRYSDlQVyt3YldIZ3JWMTdSNWpUVk90R3RLRnUzbmI4MFQrRTB0djlRa3pXM0oyZGJhdy84ZGRBS1owcHhJYUVxTGpsUHJqaTNWZ0ozR3ZkRnZscUQ4MDc1d294aDRmVnQwSlpFMEtWRnNBdnFoZTBkcU45YjM1anRTcG5ZTVhrVSt2WnErSUFIYWQzSUhjMnMvTFlybkQxYW5mRzQ2SUZpTUlyOW9OYlpEV3Z3dGhxWU5xT2lnYUtkL1hsTFU0WEhmay9QWElqUHNMeS85L2tBdFErL3dLSCtoSS9JUk9XajVGUHZUWkFUOWY3ajRaWFF5RzRNMFR1ak1BRlhZa0t2RUh2MXhoeVNla2dYR0dxTnhXZVdLbGY4ZERBbEx1QjFjYi9xT0Qrcms3Y213dCsxeUtwazljdWRxQmFuVGk2elRiWFJ0VjhxeWxOdGp5T1ZLeTFIVHowR1c5cmp0NnNTakFaY1Q1UitLZHR5WWIwenlxRzlwU0x1Q3c1V0J3QW43ZmpCaktMTG94TFhNSSs1Mkw5Y0x3SVIyQjZPbGxKWkxISjh2RHhtV2R0RitRSm5tdDFyc0hQSVdZMjBsZnRrOGZZZVBrQUlnNkhnbjUzMlFvSXBlZ014aVdnQU9mZTUvVTQ0QVBSOEFjME5lWnJWaDNnRWhzMTJXK3RWU2lXaVVRZWtmL1lCRUNVeTVmZFliQTA4ZGQ3VnpQQVA5YWlWY0lCOWs2dFk3V2RKMXdOVitiSGV5ZE50bUM2RzVJQ3RGQzFad21KVS9qOGhmMEk4VFJWS1NpejVvWUlhOTNFcFVJNzhYOEdZSUFaYWJ4NDcvbjhMREFBSjBuTnRQMXJwUk9wcnFLTUJSZWNTaGNhNnFYdVRTSTNqWkJMT0IzVnAzODFCNXJDR2hqU3ZoL05TVmtZcDJxSWRQL0JnPVwiO1xuXG59LHt9XSw3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qIENvcHlyaWdodCAyMDEzIEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbiAgIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cbiAgIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAgIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAgIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbiAgIENvbGxlY3Rpb24gb2Ygc3RhdGljIGRpY3Rpb25hcnkgd29yZHMuXG4qL1xuXG52YXIgZGF0YSA9IHJlcXVpcmUoJy4vZGljdGlvbmFyeS1kYXRhJyk7XG5leHBvcnRzLmluaXQgPSBmdW5jdGlvbigpIHtcbiAgZXhwb3J0cy5kaWN0aW9uYXJ5ID0gZGF0YS5pbml0KCk7XG59O1xuXG5leHBvcnRzLm9mZnNldHNCeUxlbmd0aCA9IG5ldyBVaW50MzJBcnJheShbXG4gICAgIDAsICAgICAwLCAgICAgMCwgICAgIDAsICAgICAwLCAgNDA5NiwgIDkyMTYsIDIxNTA0LCAzNTg0MCwgNDQwMzIsXG4gNTMyNDgsIDYzNDg4LCA3NDc1MiwgODcwNDAsIDkzNjk2LCAxMDA4NjQsIDEwNDcwNCwgMTA2NzUyLCAxMDg5MjgsIDExMzUzNixcbiAxMTU5NjgsIDExODUyOCwgMTE5ODcyLCAxMjEyODAsIDEyMjAxNixcbl0pO1xuXG5leHBvcnRzLnNpemVCaXRzQnlMZW5ndGggPSBuZXcgVWludDhBcnJheShbXG4gIDAsICAwLCAgMCwgIDAsIDEwLCAxMCwgMTEsIDExLCAxMCwgMTAsXG4gMTAsIDEwLCAxMCwgIDksICA5LCAgOCwgIDcsICA3LCAgOCwgIDcsXG4gIDcsICA2LCAgNiwgIDUsICA1LFxuXSk7XG5cbmV4cG9ydHMubWluRGljdGlvbmFyeVdvcmRMZW5ndGggPSA0O1xuZXhwb3J0cy5tYXhEaWN0aW9uYXJ5V29yZExlbmd0aCA9IDI0O1xuXG59LHtcIi4vZGljdGlvbmFyeS1kYXRhXCI6NX1dLDg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuZnVuY3Rpb24gSHVmZm1hbkNvZGUoYml0cywgdmFsdWUpIHtcbiAgdGhpcy5iaXRzID0gYml0czsgICAvKiBudW1iZXIgb2YgYml0cyB1c2VkIGZvciB0aGlzIHN5bWJvbCAqL1xuICB0aGlzLnZhbHVlID0gdmFsdWU7IC8qIHN5bWJvbCB2YWx1ZSBvciB0YWJsZSBvZmZzZXQgKi9cbn1cblxuZXhwb3J0cy5IdWZmbWFuQ29kZSA9IEh1ZmZtYW5Db2RlO1xuXG52YXIgTUFYX0xFTkdUSCA9IDE1O1xuXG4vKiBSZXR1cm5zIHJldmVyc2UocmV2ZXJzZShrZXksIGxlbikgKyAxLCBsZW4pLCB3aGVyZSByZXZlcnNlKGtleSwgbGVuKSBpcyB0aGVcbiAgIGJpdC13aXNlIHJldmVyc2FsIG9mIHRoZSBsZW4gbGVhc3Qgc2lnbmlmaWNhbnQgYml0cyBvZiBrZXkuICovXG5mdW5jdGlvbiBHZXROZXh0S2V5KGtleSwgbGVuKSB7XG4gIHZhciBzdGVwID0gMSA8PCAobGVuIC0gMSk7XG4gIHdoaWxlIChrZXkgJiBzdGVwKSB7XG4gICAgc3RlcCA+Pj0gMTtcbiAgfVxuICByZXR1cm4gKGtleSAmIChzdGVwIC0gMSkpICsgc3RlcDtcbn1cblxuLyogU3RvcmVzIGNvZGUgaW4gdGFibGVbMF0sIHRhYmxlW3N0ZXBdLCB0YWJsZVsyKnN0ZXBdLCAuLi4sIHRhYmxlW2VuZF0gKi9cbi8qIEFzc3VtZXMgdGhhdCBlbmQgaXMgYW4gaW50ZWdlciBtdWx0aXBsZSBvZiBzdGVwICovXG5mdW5jdGlvbiBSZXBsaWNhdGVWYWx1ZSh0YWJsZSwgaSwgc3RlcCwgZW5kLCBjb2RlKSB7XG4gIGRvIHtcbiAgICBlbmQgLT0gc3RlcDtcbiAgICB0YWJsZVtpICsgZW5kXSA9IG5ldyBIdWZmbWFuQ29kZShjb2RlLmJpdHMsIGNvZGUudmFsdWUpO1xuICB9IHdoaWxlIChlbmQgPiAwKTtcbn1cblxuLyogUmV0dXJucyB0aGUgdGFibGUgd2lkdGggb2YgdGhlIG5leHQgMm5kIGxldmVsIHRhYmxlLiBjb3VudCBpcyB0aGUgaGlzdG9ncmFtXG4gICBvZiBiaXQgbGVuZ3RocyBmb3IgdGhlIHJlbWFpbmluZyBzeW1ib2xzLCBsZW4gaXMgdGhlIGNvZGUgbGVuZ3RoIG9mIHRoZSBuZXh0XG4gICBwcm9jZXNzZWQgc3ltYm9sICovXG5mdW5jdGlvbiBOZXh0VGFibGVCaXRTaXplKGNvdW50LCBsZW4sIHJvb3RfYml0cykge1xuICB2YXIgbGVmdCA9IDEgPDwgKGxlbiAtIHJvb3RfYml0cyk7XG4gIHdoaWxlIChsZW4gPCBNQVhfTEVOR1RIKSB7XG4gICAgbGVmdCAtPSBjb3VudFtsZW5dO1xuICAgIGlmIChsZWZ0IDw9IDApIGJyZWFrO1xuICAgICsrbGVuO1xuICAgIGxlZnQgPDw9IDE7XG4gIH1cbiAgcmV0dXJuIGxlbiAtIHJvb3RfYml0cztcbn1cblxuZXhwb3J0cy5Ccm90bGlCdWlsZEh1ZmZtYW5UYWJsZSA9IGZ1bmN0aW9uKHJvb3RfdGFibGUsIHRhYmxlLCByb290X2JpdHMsIGNvZGVfbGVuZ3RocywgY29kZV9sZW5ndGhzX3NpemUpIHtcbiAgdmFyIHN0YXJ0X3RhYmxlID0gdGFibGU7XG4gIHZhciBjb2RlOyAgICAgICAgICAgIC8qIGN1cnJlbnQgdGFibGUgZW50cnkgKi9cbiAgdmFyIGxlbjsgICAgICAgICAgICAgLyogY3VycmVudCBjb2RlIGxlbmd0aCAqL1xuICB2YXIgc3ltYm9sOyAgICAgICAgICAvKiBzeW1ib2wgaW5kZXggaW4gb3JpZ2luYWwgb3Igc29ydGVkIHRhYmxlICovXG4gIHZhciBrZXk7ICAgICAgICAgICAgIC8qIHJldmVyc2VkIHByZWZpeCBjb2RlICovXG4gIHZhciBzdGVwOyAgICAgICAgICAgIC8qIHN0ZXAgc2l6ZSB0byByZXBsaWNhdGUgdmFsdWVzIGluIGN1cnJlbnQgdGFibGUgKi9cbiAgdmFyIGxvdzsgICAgICAgICAgICAgLyogbG93IGJpdHMgZm9yIGN1cnJlbnQgcm9vdCBlbnRyeSAqL1xuICB2YXIgbWFzazsgICAgICAgICAgICAvKiBtYXNrIGZvciBsb3cgYml0cyAqL1xuICB2YXIgdGFibGVfYml0czsgICAgICAvKiBrZXkgbGVuZ3RoIG9mIGN1cnJlbnQgdGFibGUgKi9cbiAgdmFyIHRhYmxlX3NpemU7ICAgICAgLyogc2l6ZSBvZiBjdXJyZW50IHRhYmxlICovXG4gIHZhciB0b3RhbF9zaXplOyAgICAgIC8qIHN1bSBvZiByb290IHRhYmxlIHNpemUgYW5kIDJuZCBsZXZlbCB0YWJsZSBzaXplcyAqL1xuICB2YXIgc29ydGVkOyAgICAgICAgICAvKiBzeW1ib2xzIHNvcnRlZCBieSBjb2RlIGxlbmd0aCAqL1xuICB2YXIgY291bnQgPSBuZXcgSW50MzJBcnJheShNQVhfTEVOR1RIICsgMSk7ICAvKiBudW1iZXIgb2YgY29kZXMgb2YgZWFjaCBsZW5ndGggKi9cbiAgdmFyIG9mZnNldCA9IG5ldyBJbnQzMkFycmF5KE1BWF9MRU5HVEggKyAxKTsgIC8qIG9mZnNldHMgaW4gc29ydGVkIHRhYmxlIGZvciBlYWNoIGxlbmd0aCAqL1xuXG4gIHNvcnRlZCA9IG5ldyBJbnQzMkFycmF5KGNvZGVfbGVuZ3Roc19zaXplKTtcblxuICAvKiBidWlsZCBoaXN0b2dyYW0gb2YgY29kZSBsZW5ndGhzICovXG4gIGZvciAoc3ltYm9sID0gMDsgc3ltYm9sIDwgY29kZV9sZW5ndGhzX3NpemU7IHN5bWJvbCsrKSB7XG4gICAgY291bnRbY29kZV9sZW5ndGhzW3N5bWJvbF1dKys7XG4gIH1cblxuICAvKiBnZW5lcmF0ZSBvZmZzZXRzIGludG8gc29ydGVkIHN5bWJvbCB0YWJsZSBieSBjb2RlIGxlbmd0aCAqL1xuICBvZmZzZXRbMV0gPSAwO1xuICBmb3IgKGxlbiA9IDE7IGxlbiA8IE1BWF9MRU5HVEg7IGxlbisrKSB7XG4gICAgb2Zmc2V0W2xlbiArIDFdID0gb2Zmc2V0W2xlbl0gKyBjb3VudFtsZW5dO1xuICB9XG5cbiAgLyogc29ydCBzeW1ib2xzIGJ5IGxlbmd0aCwgYnkgc3ltYm9sIG9yZGVyIHdpdGhpbiBlYWNoIGxlbmd0aCAqL1xuICBmb3IgKHN5bWJvbCA9IDA7IHN5bWJvbCA8IGNvZGVfbGVuZ3Roc19zaXplOyBzeW1ib2wrKykge1xuICAgIGlmIChjb2RlX2xlbmd0aHNbc3ltYm9sXSAhPT0gMCkge1xuICAgICAgc29ydGVkW29mZnNldFtjb2RlX2xlbmd0aHNbc3ltYm9sXV0rK10gPSBzeW1ib2w7XG4gICAgfVxuICB9XG4gIFxuICB0YWJsZV9iaXRzID0gcm9vdF9iaXRzO1xuICB0YWJsZV9zaXplID0gMSA8PCB0YWJsZV9iaXRzO1xuICB0b3RhbF9zaXplID0gdGFibGVfc2l6ZTtcblxuICAvKiBzcGVjaWFsIGNhc2UgY29kZSB3aXRoIG9ubHkgb25lIHZhbHVlICovXG4gIGlmIChvZmZzZXRbTUFYX0xFTkdUSF0gPT09IDEpIHtcbiAgICBmb3IgKGtleSA9IDA7IGtleSA8IHRvdGFsX3NpemU7ICsra2V5KSB7XG4gICAgICByb290X3RhYmxlW3RhYmxlICsga2V5XSA9IG5ldyBIdWZmbWFuQ29kZSgwLCBzb3J0ZWRbMF0gJiAweGZmZmYpO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gdG90YWxfc2l6ZTtcbiAgfVxuXG4gIC8qIGZpbGwgaW4gcm9vdCB0YWJsZSAqL1xuICBrZXkgPSAwO1xuICBzeW1ib2wgPSAwO1xuICBmb3IgKGxlbiA9IDEsIHN0ZXAgPSAyOyBsZW4gPD0gcm9vdF9iaXRzOyArK2xlbiwgc3RlcCA8PD0gMSkge1xuICAgIGZvciAoOyBjb3VudFtsZW5dID4gMDsgLS1jb3VudFtsZW5dKSB7XG4gICAgICBjb2RlID0gbmV3IEh1ZmZtYW5Db2RlKGxlbiAmIDB4ZmYsIHNvcnRlZFtzeW1ib2wrK10gJiAweGZmZmYpO1xuICAgICAgUmVwbGljYXRlVmFsdWUocm9vdF90YWJsZSwgdGFibGUgKyBrZXksIHN0ZXAsIHRhYmxlX3NpemUsIGNvZGUpO1xuICAgICAga2V5ID0gR2V0TmV4dEtleShrZXksIGxlbik7XG4gICAgfVxuICB9XG5cbiAgLyogZmlsbCBpbiAybmQgbGV2ZWwgdGFibGVzIGFuZCBhZGQgcG9pbnRlcnMgdG8gcm9vdCB0YWJsZSAqL1xuICBtYXNrID0gdG90YWxfc2l6ZSAtIDE7XG4gIGxvdyA9IC0xO1xuICBmb3IgKGxlbiA9IHJvb3RfYml0cyArIDEsIHN0ZXAgPSAyOyBsZW4gPD0gTUFYX0xFTkdUSDsgKytsZW4sIHN0ZXAgPDw9IDEpIHtcbiAgICBmb3IgKDsgY291bnRbbGVuXSA+IDA7IC0tY291bnRbbGVuXSkge1xuICAgICAgaWYgKChrZXkgJiBtYXNrKSAhPT0gbG93KSB7XG4gICAgICAgIHRhYmxlICs9IHRhYmxlX3NpemU7XG4gICAgICAgIHRhYmxlX2JpdHMgPSBOZXh0VGFibGVCaXRTaXplKGNvdW50LCBsZW4sIHJvb3RfYml0cyk7XG4gICAgICAgIHRhYmxlX3NpemUgPSAxIDw8IHRhYmxlX2JpdHM7XG4gICAgICAgIHRvdGFsX3NpemUgKz0gdGFibGVfc2l6ZTtcbiAgICAgICAgbG93ID0ga2V5ICYgbWFzaztcbiAgICAgICAgcm9vdF90YWJsZVtzdGFydF90YWJsZSArIGxvd10gPSBuZXcgSHVmZm1hbkNvZGUoKHRhYmxlX2JpdHMgKyByb290X2JpdHMpICYgMHhmZiwgKCh0YWJsZSAtIHN0YXJ0X3RhYmxlKSAtIGxvdykgJiAweGZmZmYpO1xuICAgICAgfVxuICAgICAgY29kZSA9IG5ldyBIdWZmbWFuQ29kZSgobGVuIC0gcm9vdF9iaXRzKSAmIDB4ZmYsIHNvcnRlZFtzeW1ib2wrK10gJiAweGZmZmYpO1xuICAgICAgUmVwbGljYXRlVmFsdWUocm9vdF90YWJsZSwgdGFibGUgKyAoa2V5ID4+IHJvb3RfYml0cyksIHN0ZXAsIHRhYmxlX3NpemUsIGNvZGUpO1xuICAgICAga2V5ID0gR2V0TmV4dEtleShrZXksIGxlbik7XG4gICAgfVxuICB9XG4gIFxuICByZXR1cm4gdG90YWxfc2l6ZTtcbn1cblxufSx7fV0sOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKiBDb3B5cmlnaHQgMjAxMyBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG4gICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICAgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG4gICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gICBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAgIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAgIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4gICBMb29rdXAgdGFibGVzIHRvIG1hcCBwcmVmaXggY29kZXMgdG8gdmFsdWUgcmFuZ2VzLiBUaGlzIGlzIHVzZWQgZHVyaW5nXG4gICBkZWNvZGluZyBvZiB0aGUgYmxvY2sgbGVuZ3RocywgbGl0ZXJhbCBpbnNlcnRpb24gbGVuZ3RocyBhbmQgY29weSBsZW5ndGhzLlxuKi9cblxuLyogUmVwcmVzZW50cyB0aGUgcmFuZ2Ugb2YgdmFsdWVzIGJlbG9uZ2luZyB0byBhIHByZWZpeCBjb2RlOiAqL1xuLyogW29mZnNldCwgb2Zmc2V0ICsgMl5uYml0cykgKi9cbmZ1bmN0aW9uIFByZWZpeENvZGVSYW5nZShvZmZzZXQsIG5iaXRzKSB7XG4gIHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xuICB0aGlzLm5iaXRzID0gbmJpdHM7XG59XG5cbmV4cG9ydHMua0Jsb2NrTGVuZ3RoUHJlZml4Q29kZSA9IFtcbiAgbmV3IFByZWZpeENvZGVSYW5nZSgxLCAyKSwgbmV3IFByZWZpeENvZGVSYW5nZSg1LCAyKSwgbmV3IFByZWZpeENvZGVSYW5nZSg5LCAyKSwgbmV3IFByZWZpeENvZGVSYW5nZSgxMywgMiksXG4gIG5ldyBQcmVmaXhDb2RlUmFuZ2UoMTcsIDMpLCBuZXcgUHJlZml4Q29kZVJhbmdlKDI1LCAzKSwgbmV3IFByZWZpeENvZGVSYW5nZSgzMywgMyksIG5ldyBQcmVmaXhDb2RlUmFuZ2UoNDEsIDMpLFxuICBuZXcgUHJlZml4Q29kZVJhbmdlKDQ5LCA0KSwgbmV3IFByZWZpeENvZGVSYW5nZSg2NSwgNCksIG5ldyBQcmVmaXhDb2RlUmFuZ2UoODEsIDQpLCBuZXcgUHJlZml4Q29kZVJhbmdlKDk3LCA0KSxcbiAgbmV3IFByZWZpeENvZGVSYW5nZSgxMTMsIDUpLCBuZXcgUHJlZml4Q29kZVJhbmdlKDE0NSwgNSksIG5ldyBQcmVmaXhDb2RlUmFuZ2UoMTc3LCA1KSwgbmV3IFByZWZpeENvZGVSYW5nZSgyMDksIDUpLFxuICBuZXcgUHJlZml4Q29kZVJhbmdlKDI0MSwgNiksIG5ldyBQcmVmaXhDb2RlUmFuZ2UoMzA1LCA2KSwgbmV3IFByZWZpeENvZGVSYW5nZSgzNjksIDcpLCBuZXcgUHJlZml4Q29kZVJhbmdlKDQ5NywgOCksXG4gIG5ldyBQcmVmaXhDb2RlUmFuZ2UoNzUzLCA5KSwgbmV3IFByZWZpeENvZGVSYW5nZSgxMjY1LCAxMCksIG5ldyBQcmVmaXhDb2RlUmFuZ2UoMjI4OSwgMTEpLCBuZXcgUHJlZml4Q29kZVJhbmdlKDQzMzcsIDEyKSxcbiAgbmV3IFByZWZpeENvZGVSYW5nZSg4NDMzLCAxMyksIG5ldyBQcmVmaXhDb2RlUmFuZ2UoMTY2MjUsIDI0KVxuXTtcblxuZXhwb3J0cy5rSW5zZXJ0TGVuZ3RoUHJlZml4Q29kZSA9IFtcbiAgbmV3IFByZWZpeENvZGVSYW5nZSgwLCAwKSwgbmV3IFByZWZpeENvZGVSYW5nZSgxLCAwKSwgbmV3IFByZWZpeENvZGVSYW5nZSgyLCAwKSwgbmV3IFByZWZpeENvZGVSYW5nZSgzLCAwKSxcbiAgbmV3IFByZWZpeENvZGVSYW5nZSg0LCAwKSwgbmV3IFByZWZpeENvZGVSYW5nZSg1LCAwKSwgbmV3IFByZWZpeENvZGVSYW5nZSg2LCAxKSwgbmV3IFByZWZpeENvZGVSYW5nZSg4LCAxKSxcbiAgbmV3IFByZWZpeENvZGVSYW5nZSgxMCwgMiksIG5ldyBQcmVmaXhDb2RlUmFuZ2UoMTQsIDIpLCBuZXcgUHJlZml4Q29kZVJhbmdlKDE4LCAzKSwgbmV3IFByZWZpeENvZGVSYW5nZSgyNiwgMyksXG4gIG5ldyBQcmVmaXhDb2RlUmFuZ2UoMzQsIDQpLCBuZXcgUHJlZml4Q29kZVJhbmdlKDUwLCA0KSwgbmV3IFByZWZpeENvZGVSYW5nZSg2NiwgNSksIG5ldyBQcmVmaXhDb2RlUmFuZ2UoOTgsIDUpLFxuICBuZXcgUHJlZml4Q29kZVJhbmdlKDEzMCwgNiksIG5ldyBQcmVmaXhDb2RlUmFuZ2UoMTk0LCA3KSwgbmV3IFByZWZpeENvZGVSYW5nZSgzMjIsIDgpLCBuZXcgUHJlZml4Q29kZVJhbmdlKDU3OCwgOSksXG4gIG5ldyBQcmVmaXhDb2RlUmFuZ2UoMTA5MCwgMTApLCBuZXcgUHJlZml4Q29kZVJhbmdlKDIxMTQsIDEyKSwgbmV3IFByZWZpeENvZGVSYW5nZSg2MjEwLCAxNCksIG5ldyBQcmVmaXhDb2RlUmFuZ2UoMjI1OTQsIDI0KSxcbl07XG5cbmV4cG9ydHMua0NvcHlMZW5ndGhQcmVmaXhDb2RlID0gW1xuICBuZXcgUHJlZml4Q29kZVJhbmdlKDIsIDApLCBuZXcgUHJlZml4Q29kZVJhbmdlKDMsIDApLCBuZXcgUHJlZml4Q29kZVJhbmdlKDQsIDApLCBuZXcgUHJlZml4Q29kZVJhbmdlKDUsIDApLFxuICBuZXcgUHJlZml4Q29kZVJhbmdlKDYsIDApLCBuZXcgUHJlZml4Q29kZVJhbmdlKDcsIDApLCBuZXcgUHJlZml4Q29kZVJhbmdlKDgsIDApLCBuZXcgUHJlZml4Q29kZVJhbmdlKDksIDApLFxuICBuZXcgUHJlZml4Q29kZVJhbmdlKDEwLCAxKSwgbmV3IFByZWZpeENvZGVSYW5nZSgxMiwgMSksIG5ldyBQcmVmaXhDb2RlUmFuZ2UoMTQsIDIpLCBuZXcgUHJlZml4Q29kZVJhbmdlKDE4LCAyKSxcbiAgbmV3IFByZWZpeENvZGVSYW5nZSgyMiwgMyksIG5ldyBQcmVmaXhDb2RlUmFuZ2UoMzAsIDMpLCBuZXcgUHJlZml4Q29kZVJhbmdlKDM4LCA0KSwgbmV3IFByZWZpeENvZGVSYW5nZSg1NCwgNCksXG4gIG5ldyBQcmVmaXhDb2RlUmFuZ2UoNzAsIDUpLCBuZXcgUHJlZml4Q29kZVJhbmdlKDEwMiwgNSksIG5ldyBQcmVmaXhDb2RlUmFuZ2UoMTM0LCA2KSwgbmV3IFByZWZpeENvZGVSYW5nZSgxOTgsIDcpLFxuICBuZXcgUHJlZml4Q29kZVJhbmdlKDMyNiwgOCksIG5ldyBQcmVmaXhDb2RlUmFuZ2UoNTgyLCA5KSwgbmV3IFByZWZpeENvZGVSYW5nZSgxMDk0LCAxMCksIG5ldyBQcmVmaXhDb2RlUmFuZ2UoMjExOCwgMjQpLFxuXTtcblxuZXhwb3J0cy5rSW5zZXJ0UmFuZ2VMdXQgPSBbXG4gIDAsIDAsIDgsIDgsIDAsIDE2LCA4LCAxNiwgMTYsXG5dO1xuXG5leHBvcnRzLmtDb3B5UmFuZ2VMdXQgPSBbXG4gIDAsIDgsIDAsIDgsIDE2LCAwLCAxNiwgOCwgMTYsXG5dO1xuXG59LHt9XSwxMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5mdW5jdGlvbiBCcm90bGlJbnB1dChidWZmZXIpIHtcbiAgdGhpcy5idWZmZXIgPSBidWZmZXI7XG4gIHRoaXMucG9zID0gMDtcbn1cblxuQnJvdGxpSW5wdXQucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbihidWYsIGksIGNvdW50KSB7XG4gIGlmICh0aGlzLnBvcyArIGNvdW50ID4gdGhpcy5idWZmZXIubGVuZ3RoKSB7XG4gICAgY291bnQgPSB0aGlzLmJ1ZmZlci5sZW5ndGggLSB0aGlzLnBvcztcbiAgfVxuICBcbiAgZm9yICh2YXIgcCA9IDA7IHAgPCBjb3VudDsgcCsrKVxuICAgIGJ1ZltpICsgcF0gPSB0aGlzLmJ1ZmZlclt0aGlzLnBvcyArIHBdO1xuICBcbiAgdGhpcy5wb3MgKz0gY291bnQ7XG4gIHJldHVybiBjb3VudDtcbn1cblxuZXhwb3J0cy5Ccm90bGlJbnB1dCA9IEJyb3RsaUlucHV0O1xuXG5mdW5jdGlvbiBCcm90bGlPdXRwdXQoYnVmKSB7XG4gIHRoaXMuYnVmZmVyID0gYnVmO1xuICB0aGlzLnBvcyA9IDA7XG59XG5cbkJyb3RsaU91dHB1dC5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbihidWYsIGNvdW50KSB7XG4gIGlmICh0aGlzLnBvcyArIGNvdW50ID4gdGhpcy5idWZmZXIubGVuZ3RoKVxuICAgIHRocm93IG5ldyBFcnJvcignT3V0cHV0IGJ1ZmZlciBpcyBub3QgbGFyZ2UgZW5vdWdoJyk7XG4gIFxuICB0aGlzLmJ1ZmZlci5zZXQoYnVmLnN1YmFycmF5KDAsIGNvdW50KSwgdGhpcy5wb3MpO1xuICB0aGlzLnBvcyArPSBjb3VudDtcbiAgcmV0dXJuIGNvdW50O1xufTtcblxuZXhwb3J0cy5Ccm90bGlPdXRwdXQgPSBCcm90bGlPdXRwdXQ7XG5cbn0se31dLDExOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qIENvcHlyaWdodCAyMDEzIEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbiAgIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cbiAgIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAgIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAgIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbiAgIFRyYW5zZm9ybWF0aW9ucyBvbiBkaWN0aW9uYXJ5IHdvcmRzLlxuKi9cblxudmFyIEJyb3RsaURpY3Rpb25hcnkgPSByZXF1aXJlKCcuL2RpY3Rpb25hcnknKTtcblxudmFyIGtJZGVudGl0eSAgICAgICA9IDA7XG52YXIga09taXRMYXN0MSAgICAgID0gMTtcbnZhciBrT21pdExhc3QyICAgICAgPSAyO1xudmFyIGtPbWl0TGFzdDMgICAgICA9IDM7XG52YXIga09taXRMYXN0NCAgICAgID0gNDtcbnZhciBrT21pdExhc3Q1ICAgICAgPSA1O1xudmFyIGtPbWl0TGFzdDYgICAgICA9IDY7XG52YXIga09taXRMYXN0NyAgICAgID0gNztcbnZhciBrT21pdExhc3Q4ICAgICAgPSA4O1xudmFyIGtPbWl0TGFzdDkgICAgICA9IDk7XG52YXIga1VwcGVyY2FzZUZpcnN0ID0gMTA7XG52YXIga1VwcGVyY2FzZUFsbCAgID0gMTE7XG52YXIga09taXRGaXJzdDEgICAgID0gMTI7XG52YXIga09taXRGaXJzdDIgICAgID0gMTM7XG52YXIga09taXRGaXJzdDMgICAgID0gMTQ7XG52YXIga09taXRGaXJzdDQgICAgID0gMTU7XG52YXIga09taXRGaXJzdDUgICAgID0gMTY7XG52YXIga09taXRGaXJzdDYgICAgID0gMTc7XG52YXIga09taXRGaXJzdDcgICAgID0gMTg7XG52YXIga09taXRGaXJzdDggICAgID0gMTk7XG52YXIga09taXRGaXJzdDkgICAgID0gMjA7XG5cbmZ1bmN0aW9uIFRyYW5zZm9ybShwcmVmaXgsIHRyYW5zZm9ybSwgc3VmZml4KSB7XG4gIHRoaXMucHJlZml4ID0gbmV3IFVpbnQ4QXJyYXkocHJlZml4Lmxlbmd0aCk7XG4gIHRoaXMudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICB0aGlzLnN1ZmZpeCA9IG5ldyBVaW50OEFycmF5KHN1ZmZpeC5sZW5ndGgpO1xuICBcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVmaXgubGVuZ3RoOyBpKyspXG4gICAgdGhpcy5wcmVmaXhbaV0gPSBwcmVmaXguY2hhckNvZGVBdChpKTtcbiAgXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3VmZml4Lmxlbmd0aDsgaSsrKVxuICAgIHRoaXMuc3VmZml4W2ldID0gc3VmZml4LmNoYXJDb2RlQXQoaSk7XG59XG5cbnZhciBrVHJhbnNmb3JtcyA9IFtcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrSWRlbnRpdHksICAgICAgIFwiXCIgICAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga0lkZW50aXR5LCAgICAgICBcIiBcIiAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgXCIgXCIsIGtJZGVudGl0eSwgICAgICAgXCIgXCIgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrT21pdEZpcnN0MSwgICAgIFwiXCIgICAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga1VwcGVyY2FzZUZpcnN0LCBcIiBcIiAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtJZGVudGl0eSwgICAgICAgXCIgdGhlIFwiICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgIFwiIFwiLCBrSWRlbnRpdHksICAgICAgIFwiXCIgICAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgIFwicyBcIiwga0lkZW50aXR5LCAgICAgICBcIiBcIiAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtJZGVudGl0eSwgICAgICAgXCIgb2YgXCIgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrVXBwZXJjYXNlRmlyc3QsIFwiXCIgICAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga0lkZW50aXR5LCAgICAgICBcIiBhbmQgXCIgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtPbWl0Rmlyc3QyLCAgICAgXCJcIiAgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrT21pdExhc3QxLCAgICAgIFwiXCIgICAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgIFwiLCBcIiwga0lkZW50aXR5LCAgICAgICBcIiBcIiAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtJZGVudGl0eSwgICAgICAgXCIsIFwiICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgIFwiIFwiLCBrVXBwZXJjYXNlRmlyc3QsIFwiIFwiICAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga0lkZW50aXR5LCAgICAgICBcIiBpbiBcIiAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtJZGVudGl0eSwgICAgICAgXCIgdG8gXCIgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgXCJlIFwiLCBrSWRlbnRpdHksICAgICAgIFwiIFwiICAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga0lkZW50aXR5LCAgICAgICBcIlxcXCJcIiAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga0lkZW50aXR5LCAgICAgICBcIi5cIiAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtJZGVudGl0eSwgICAgICAgXCJcXFwiPlwiICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtJZGVudGl0eSwgICAgICAgXCJcXG5cIiAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga09taXRMYXN0MywgICAgICBcIlwiICAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtJZGVudGl0eSwgICAgICAgXCJdXCIgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrSWRlbnRpdHksICAgICAgIFwiIGZvciBcIiAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga09taXRGaXJzdDMsICAgICBcIlwiICAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtPbWl0TGFzdDIsICAgICAgXCJcIiAgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrSWRlbnRpdHksICAgICAgIFwiIGEgXCIgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga0lkZW50aXR5LCAgICAgICBcIiB0aGF0IFwiICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgXCIgXCIsIGtVcHBlcmNhc2VGaXJzdCwgXCJcIiAgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrSWRlbnRpdHksICAgICAgIFwiLiBcIiAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICBcIi5cIiwga0lkZW50aXR5LCAgICAgICBcIlwiICAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgXCIgXCIsIGtJZGVudGl0eSwgICAgICAgXCIsIFwiICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrT21pdEZpcnN0NCwgICAgIFwiXCIgICAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga0lkZW50aXR5LCAgICAgICBcIiB3aXRoIFwiICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtJZGVudGl0eSwgICAgICAgXCInXCIgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrSWRlbnRpdHksICAgICAgIFwiIGZyb20gXCIgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga0lkZW50aXR5LCAgICAgICBcIiBieSBcIiAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtPbWl0Rmlyc3Q1LCAgICAgXCJcIiAgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrT21pdEZpcnN0NiwgICAgIFwiXCIgICAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgIFwiIHRoZSBcIiwga0lkZW50aXR5LCAgICAgICBcIlwiICAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtPbWl0TGFzdDQsICAgICAgXCJcIiAgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrSWRlbnRpdHksICAgICAgIFwiLiBUaGUgXCIgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga1VwcGVyY2FzZUFsbCwgICBcIlwiICAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtJZGVudGl0eSwgICAgICAgXCIgb24gXCIgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrSWRlbnRpdHksICAgICAgIFwiIGFzIFwiICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga0lkZW50aXR5LCAgICAgICBcIiBpcyBcIiAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtPbWl0TGFzdDcsICAgICAgXCJcIiAgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrT21pdExhc3QxLCAgICAgIFwiaW5nIFwiICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga0lkZW50aXR5LCAgICAgICBcIlxcblxcdFwiICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga0lkZW50aXR5LCAgICAgICBcIjpcIiAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgXCIgXCIsIGtJZGVudGl0eSwgICAgICAgXCIuIFwiICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrSWRlbnRpdHksICAgICAgIFwiZWQgXCIgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga09taXRGaXJzdDksICAgICBcIlwiICAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtPbWl0Rmlyc3Q3LCAgICAgXCJcIiAgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrT21pdExhc3Q2LCAgICAgIFwiXCIgICAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga0lkZW50aXR5LCAgICAgICBcIihcIiAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtVcHBlcmNhc2VGaXJzdCwgXCIsIFwiICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrT21pdExhc3Q4LCAgICAgIFwiXCIgICAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga0lkZW50aXR5LCAgICAgICBcIiBhdCBcIiAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtJZGVudGl0eSwgICAgICAgXCJseSBcIiAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgXCIgdGhlIFwiLCBrSWRlbnRpdHksICAgICAgIFwiIG9mIFwiICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga09taXRMYXN0NSwgICAgICBcIlwiICAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtPbWl0TGFzdDksICAgICAgXCJcIiAgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgIFwiIFwiLCBrVXBwZXJjYXNlRmlyc3QsIFwiLCBcIiAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga1VwcGVyY2FzZUZpcnN0LCBcIlxcXCJcIiAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICBcIi5cIiwga0lkZW50aXR5LCAgICAgICBcIihcIiAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtVcHBlcmNhc2VBbGwsICAgXCIgXCIgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrVXBwZXJjYXNlRmlyc3QsIFwiXFxcIj5cIiAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrSWRlbnRpdHksICAgICAgIFwiPVxcXCJcIiAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgIFwiIFwiLCBrSWRlbnRpdHksICAgICAgIFwiLlwiICAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgIFwiLmNvbS9cIiwga0lkZW50aXR5LCAgICAgICBcIlwiICAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICBcIiB0aGUgXCIsIGtJZGVudGl0eSwgICAgICAgXCIgb2YgdGhlIFwiICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrVXBwZXJjYXNlRmlyc3QsIFwiJ1wiICAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga0lkZW50aXR5LCAgICAgICBcIi4gVGhpcyBcIiAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtJZGVudGl0eSwgICAgICAgXCIsXCIgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgIFwiLlwiLCBrSWRlbnRpdHksICAgICAgIFwiIFwiICAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga1VwcGVyY2FzZUZpcnN0LCBcIihcIiAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtVcHBlcmNhc2VGaXJzdCwgXCIuXCIgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrSWRlbnRpdHksICAgICAgIFwiIG5vdCBcIiAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICBcIiBcIiwga0lkZW50aXR5LCAgICAgICBcIj1cXFwiXCIgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga0lkZW50aXR5LCAgICAgICBcImVyIFwiICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgXCIgXCIsIGtVcHBlcmNhc2VBbGwsICAgXCIgXCIgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrSWRlbnRpdHksICAgICAgIFwiYWwgXCIgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICBcIiBcIiwga1VwcGVyY2FzZUFsbCwgICBcIlwiICAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtJZGVudGl0eSwgICAgICAgXCI9J1wiICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrVXBwZXJjYXNlQWxsLCAgIFwiXFxcIlwiICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrVXBwZXJjYXNlRmlyc3QsIFwiLiBcIiAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICBcIiBcIiwga0lkZW50aXR5LCAgICAgICBcIihcIiAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtJZGVudGl0eSwgICAgICAgXCJmdWwgXCIgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgIFwiIFwiLCBrVXBwZXJjYXNlRmlyc3QsIFwiLiBcIiAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga0lkZW50aXR5LCAgICAgICBcIml2ZSBcIiAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtJZGVudGl0eSwgICAgICAgXCJsZXNzIFwiICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrVXBwZXJjYXNlQWxsLCAgIFwiJ1wiICAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga0lkZW50aXR5LCAgICAgICBcImVzdCBcIiAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgXCIgXCIsIGtVcHBlcmNhc2VGaXJzdCwgXCIuXCIgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrVXBwZXJjYXNlQWxsLCAgIFwiXFxcIj5cIiAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgIFwiIFwiLCBrSWRlbnRpdHksICAgICAgIFwiPSdcIiAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga1VwcGVyY2FzZUZpcnN0LCBcIixcIiAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtJZGVudGl0eSwgICAgICAgXCJpemUgXCIgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrVXBwZXJjYXNlQWxsLCAgIFwiLlwiICAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oIFwiXFx4YzJcXHhhMFwiLCBrSWRlbnRpdHksICAgICAgIFwiXCIgICAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICBcIiBcIiwga0lkZW50aXR5LCAgICAgICBcIixcIiAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtVcHBlcmNhc2VGaXJzdCwgXCI9XFxcIlwiICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtVcHBlcmNhc2VBbGwsICAgXCI9XFxcIlwiICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtJZGVudGl0eSwgICAgICAgXCJvdXMgXCIgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrVXBwZXJjYXNlQWxsLCAgIFwiLCBcIiAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga1VwcGVyY2FzZUZpcnN0LCBcIj0nXCIgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgXCIgXCIsIGtVcHBlcmNhc2VGaXJzdCwgXCIsXCIgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgIFwiIFwiLCBrVXBwZXJjYXNlQWxsLCAgIFwiPVxcXCJcIiAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgIFwiIFwiLCBrVXBwZXJjYXNlQWxsLCAgIFwiLCBcIiAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICAgXCJcIiwga1VwcGVyY2FzZUFsbCwgICBcIixcIiAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtVcHBlcmNhc2VBbGwsICAgXCIoXCIgICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgICBcIlwiLCBrVXBwZXJjYXNlQWxsLCAgIFwiLiBcIiAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICBcIiBcIiwga1VwcGVyY2FzZUFsbCwgICBcIi5cIiAgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgIFwiXCIsIGtVcHBlcmNhc2VBbGwsICAgXCI9J1wiICAgICAgICAgKSxcbiAgICAgbmV3IFRyYW5zZm9ybSggICAgICAgIFwiIFwiLCBrVXBwZXJjYXNlQWxsLCAgIFwiLiBcIiAgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICBcIiBcIiwga1VwcGVyY2FzZUZpcnN0LCBcIj1cXFwiXCIgICAgICAgICksXG4gICAgIG5ldyBUcmFuc2Zvcm0oICAgICAgICBcIiBcIiwga1VwcGVyY2FzZUFsbCwgICBcIj0nXCIgICAgICAgICApLFxuICAgICBuZXcgVHJhbnNmb3JtKCAgICAgICAgXCIgXCIsIGtVcHBlcmNhc2VGaXJzdCwgXCI9J1wiICAgICAgICAgKVxuXTtcblxuZXhwb3J0cy5rVHJhbnNmb3JtcyA9IGtUcmFuc2Zvcm1zO1xuZXhwb3J0cy5rTnVtVHJhbnNmb3JtcyA9IGtUcmFuc2Zvcm1zLmxlbmd0aDtcblxuZnVuY3Rpb24gVG9VcHBlckNhc2UocCwgaSkge1xuICBpZiAocFtpXSA8IDB4YzApIHtcbiAgICBpZiAocFtpXSA+PSA5NyAmJiBwW2ldIDw9IDEyMikge1xuICAgICAgcFtpXSBePSAzMjtcbiAgICB9XG4gICAgcmV0dXJuIDE7XG4gIH1cbiAgXG4gIC8qIEFuIG92ZXJseSBzaW1wbGlmaWVkIHVwcGVyY2FzaW5nIG1vZGVsIGZvciB1dGYtOC4gKi9cbiAgaWYgKHBbaV0gPCAweGUwKSB7XG4gICAgcFtpICsgMV0gXj0gMzI7XG4gICAgcmV0dXJuIDI7XG4gIH1cbiAgXG4gIC8qIEFuIGFyYml0cmFyeSB0cmFuc2Zvcm0gZm9yIHRocmVlIGJ5dGUgY2hhcmFjdGVycy4gKi9cbiAgcFtpICsgMl0gXj0gNTtcbiAgcmV0dXJuIDM7XG59XG5cbmV4cG9ydHMudHJhbnNmb3JtRGljdGlvbmFyeVdvcmQgPSBmdW5jdGlvbihkc3QsIGlkeCwgd29yZCwgbGVuLCB0cmFuc2Zvcm0pIHtcbiAgdmFyIHByZWZpeCA9IGtUcmFuc2Zvcm1zW3RyYW5zZm9ybV0ucHJlZml4O1xuICB2YXIgc3VmZml4ID0ga1RyYW5zZm9ybXNbdHJhbnNmb3JtXS5zdWZmaXg7XG4gIHZhciB0ID0ga1RyYW5zZm9ybXNbdHJhbnNmb3JtXS50cmFuc2Zvcm07XG4gIHZhciBza2lwID0gdCA8IGtPbWl0Rmlyc3QxID8gMCA6IHQgLSAoa09taXRGaXJzdDEgLSAxKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgc3RhcnRfaWR4ID0gaWR4O1xuICB2YXIgdXBwZXJjYXNlO1xuICBcbiAgaWYgKHNraXAgPiBsZW4pIHtcbiAgICBza2lwID0gbGVuO1xuICB9XG4gIFxuICB2YXIgcHJlZml4X3BvcyA9IDA7XG4gIHdoaWxlIChwcmVmaXhfcG9zIDwgcHJlZml4Lmxlbmd0aCkge1xuICAgIGRzdFtpZHgrK10gPSBwcmVmaXhbcHJlZml4X3BvcysrXTtcbiAgfVxuICBcbiAgd29yZCArPSBza2lwO1xuICBsZW4gLT0gc2tpcDtcbiAgXG4gIGlmICh0IDw9IGtPbWl0TGFzdDkpIHtcbiAgICBsZW4gLT0gdDtcbiAgfVxuICBcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgZHN0W2lkeCsrXSA9IEJyb3RsaURpY3Rpb25hcnkuZGljdGlvbmFyeVt3b3JkICsgaV07XG4gIH1cbiAgXG4gIHVwcGVyY2FzZSA9IGlkeCAtIGxlbjtcbiAgXG4gIGlmICh0ID09PSBrVXBwZXJjYXNlRmlyc3QpIHtcbiAgICBUb1VwcGVyQ2FzZShkc3QsIHVwcGVyY2FzZSk7XG4gIH0gZWxzZSBpZiAodCA9PT0ga1VwcGVyY2FzZUFsbCkge1xuICAgIHdoaWxlIChsZW4gPiAwKSB7XG4gICAgICB2YXIgc3RlcCA9IFRvVXBwZXJDYXNlKGRzdCwgdXBwZXJjYXNlKTtcbiAgICAgIHVwcGVyY2FzZSArPSBzdGVwO1xuICAgICAgbGVuIC09IHN0ZXA7XG4gICAgfVxuICB9XG4gIFxuICB2YXIgc3VmZml4X3BvcyA9IDA7XG4gIHdoaWxlIChzdWZmaXhfcG9zIDwgc3VmZml4Lmxlbmd0aCkge1xuICAgIGRzdFtpZHgrK10gPSBzdWZmaXhbc3VmZml4X3BvcysrXTtcbiAgfVxuICBcbiAgcmV0dXJuIGlkeCAtIHN0YXJ0X2lkeDtcbn1cblxufSx7XCIuL2RpY3Rpb25hcnlcIjo3fV0sMTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2RlYy9kZWNvZGUnKS5Ccm90bGlEZWNvbXByZXNzQnVmZmVyO1xuXG59LHtcIi4vZGVjL2RlY29kZVwiOjR9XSwxMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cbn0se31dfSx7fSxbMTJdKSgxMilcbn0pO1xuIiwibGV0IGN1c3RvbUVuY3J5cHREYXRhO1xyXG4vKipcclxuICogXHJcbiAqIEB0eXBlIHtHU0RLLkN1c3RvbVNlY3VyaXR5SGFuZGxlcn0gZ3NkayBcclxuICovXHJcbmxldCBjdXN0b21TZWN1cml0eUhhbmRsZXI7XHJcbmxldCBjdXN0b21TZWN1cml0eUNhbGxiYWNrO1xyXG4vKipcclxuICogXHJcbiAqIEBwYXJhbSB7R1NES30gZ3NkayBcclxuICovXHJcbmZ1bmN0aW9uIGluaXRTZWN1cml0eUhhbmRsZXIgKGdzZGspIHtcclxuICBjdXN0b21FbmNyeXB0RGF0YSA9IG5ldyBnc2RrLkN1c3RvbUVuY3J5cHREYXRhIChcclxuICAgIHRydWUsXHJcbiAgICBuZXcgZ3Nkay5TdHJpbmcgKCdmaWx0ZXInKSxcclxuICAgIG5ldyBnc2RrLlN0cmluZyAoJ3N1YmZpbHRlcicpXHJcbiAgKTtcclxuICBjdXN0b21TZWN1cml0eUhhbmRsZXIgPSBuZXcgZ3Nkay5DdXN0b21TZWN1cml0eUhhbmRsZXIgKCk7XHJcbiAgY3VzdG9tU2VjdXJpdHlDYWxsYmFjayA9IGdzZGsuQ3VzdG9tU2VjdXJpdHlDYWxsYmFjay5pbXBsZW1lbnQgKHtcclxuICAgIEpTQ3JlYXRlQ29udGV4dDogKGZpbHRlciwgc3ViZmlsdGVyLCBlbmNyeXB0X2luZm8pID0+IHtcclxuICAgICAgcmV0dXJuIDgwMDtcclxuICAgIH0sXHJcbiAgICBKU1JlbGVhc2VDb250ZXh0OiBjb250ZXh0ID0+IHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9LFxyXG4gICAgSlNHZXRVc2VyUGVybWlzc2lvbnM6IChjb250ZXh0LCBwZXJtaXNzaW9uKSA9PiB7XHJcbiAgICAgIHJldHVybiBwZXJtaXNzaW9uO1xyXG4gICAgfSxcclxuICAgIEpTSXNPd25lcjogY29udGV4dCA9PiB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSxcclxuICAgIEpTR2V0Q2lwaGVyOiBjb250ZXh0ID0+IHtcclxuICAgICAgcmV0dXJuIGdzZGsuQ2lwaGVyVHlwZS5lX0NpcGhlclJDNDtcclxuICAgIH0sXHJcbiAgICBKU0dldEVuY3J5cHRLZXk6IGNvbnRleHQgPT4ge1xyXG4gICAgICByZXR1cm4gbmV3IGdzZGsuU3RyaW5nICgnYWJjZGVmJyk7XHJcbiAgICB9LFxyXG4gICAgSlNHZXREZWNyeXB0ZWRTaXplOiAoY29udGV4dCwgc2l6ZSkgPT4ge1xyXG4gICAgICByZXR1cm4gc2l6ZTtcclxuICAgIH0sXHJcbiAgICBKU1N0YXJ0RGVjcnlwdG9yOiAoY29udGV4dCwgb2JqX251bSwgZ2VuX251bSkgPT4ge1xyXG4gICAgICByZXR1cm4gOTAwO1xyXG4gICAgfSxcclxuICAgIEpTRGVjcnlwdERhdGE6IChkZWNyeXB0b3IsIGVuY3J5cHRlZF9kYXRhLCBlbmNyeXB0ZWRfZGF0YV9sZW4pID0+IHtcclxuICAgICAgbGV0IHMgPSBuZXcgZ3Nkay5TdHJpbmcgKCcnKTtcclxuICAgICAgbGV0IGJ1ZmZlciA9IGdzZGsuX21hbGxvYyAoZW5jcnlwdGVkX2RhdGFfbGVuKTtcclxuICAgICAgbGV0IGFycmF5QnVmZmVyO1xyXG5cclxuICAgICAgbGV0IGVuZ2luZUJ1ZmZlciA9IGdzZGsuSEVBUFU4LmJ1ZmZlcjtcclxuICAgICAgaWYgKGVuZ2luZUJ1ZmZlci5zbGljZSkge1xyXG4gICAgICAgIGFycmF5QnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkgKFxyXG4gICAgICAgICAgZW5naW5lQnVmZmVyLnNsaWNlIChcclxuICAgICAgICAgICAgZW5jcnlwdGVkX2RhdGEsXHJcbiAgICAgICAgICAgIGVuY3J5cHRlZF9kYXRhICsgZW5jcnlwdGVkX2RhdGFfbGVuXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBhcnJheUJ1ZmZlciA9IG5ldyBVaW50OEFycmF5IChcclxuICAgICAgICAgIGVuZ2luZUJ1ZmZlcixcclxuICAgICAgICAgIGVuY3J5cHRlZF9kYXRhLFxyXG4gICAgICAgICAgZW5jcnlwdGVkX2RhdGFfbGVuXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZ3Nkay5IRUFQVTguc2V0IChhcnJheUJ1ZmZlciwgYnVmZmVyKTtcclxuXHJcbiAgICAgIGdzZGsuSEVBUDhbYnVmZmVyXSA9IGdzZGsuSEVBUDhbYnVmZmVyXSArIDEwO1xyXG5cclxuICAgICAgcy5Mb2FkIChidWZmZXIsIGVuY3J5cHRlZF9kYXRhX2xlbik7XHJcbiAgICAgIHJldHVybiBzO1xyXG4gICAgfSxcclxuICAgIEpTRmluaXNoRGVjcnlwdG9yOiBkZWNyeXB0b3IgPT4ge1xyXG4gICAgICByZXR1cm4gbmV3IGdzZGsuU3RyaW5nICgnNzc3ODg4OTknKTtcclxuICAgIH0sXHJcbiAgICBKU0dldEVuY3J5cHRlZFNpemU6IChjb250ZXh0LCBvYmpfbnVtLCBnZW5fbnVtLCBzcmNfZGF0YSwgc3JjX2RhdGFfbGVuKSA9PiB7XHJcbiAgICAgIHJldHVybiBzcmNfZGF0YV9sZW47XHJcbiAgICB9LFxyXG4gICAgSlNFbmNyeXB0RGF0YTogKFxyXG4gICAgICBjb250ZXh0LFxyXG4gICAgICBvYmpfbnVtLFxyXG4gICAgICBnZW5fbnVtLFxyXG4gICAgICBzcmNfZGF0YSxcclxuICAgICAgc3JjX2RhdGFfbGVuLFxyXG4gICAgICBvdXRfZHN0X2J1ZmZlcixcclxuICAgICAgb3V0X2RzdF9idWZmZXJfbGVuXHJcbiAgICApID0+IHtcclxuICAgICAgbGV0IGVuZ2luZUJ1ZmZlciA9IGdzZGsuSEVBUFU4LmJ1ZmZlcjtcclxuICAgICAgbGV0IGFycmF5QnVmZmVyO1xyXG4gICAgICBpZiAoZW5naW5lQnVmZmVyLnNsaWNlKSB7XHJcbiAgICAgICAgYXJyYXlCdWZmZXIgPSBuZXcgVWludDhBcnJheSAoXHJcbiAgICAgICAgICBlbmdpbmVCdWZmZXIuc2xpY2UgKHNyY19kYXRhLCBzcmNfZGF0YSArIHNyY19kYXRhX2xlbilcclxuICAgICAgICApO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGFycmF5QnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkgKGVuZ2luZUJ1ZmZlciwgc3JjX2RhdGEsIHNyY19kYXRhX2xlbik7XHJcbiAgICAgIH1cclxuICAgICAgZ3Nkay5IRUFQVTguc2V0IChhcnJheUJ1ZmZlciwgb3V0X2RzdF9idWZmZXIpO1xyXG5cclxuICAgICAgZ3Nkay5IRUFQOFtvdXRfZHN0X2J1ZmZlcl0gPSBnc2RrLkhFQVA4W291dF9kc3RfYnVmZmVyXSAtIDEwO1xyXG4gICAgICByZXR1cm4gc3JjX2RhdGFfbGVuO1xyXG4gICAgfSxcclxuICB9KTtcclxuICBjdXN0b21TZWN1cml0eUhhbmRsZXIuSW5pdGlhbGl6ZSAoY3VzdG9tRW5jcnlwdERhdGEsIGN1c3RvbVNlY3VyaXR5Q2FsbGJhY2spO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRDdXN0b21TZWN1cml0eUNhbGxiYWNrIChnc2RrKSB7XHJcbiAgaWYgKCFjdXN0b21TZWN1cml0eUhhbmRsZXIpIHtcclxuICAgIGluaXRTZWN1cml0eUhhbmRsZXIgKGdzZGspO1xyXG4gIH1cclxuICByZXR1cm4gW25ldyBnc2RrLlN0cmluZyAoJ2ZpbHRlcicpLCBjdXN0b21TZWN1cml0eUNhbGxiYWNrXTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0Q3VzdG9tU2VjdXJpdHlIYW5kbGVyIChnc2RrKSB7XHJcbiAgaWYgKCFjdXN0b21TZWN1cml0eUhhbmRsZXIpIHtcclxuICAgIGluaXRTZWN1cml0eUhhbmRsZXIgKGdzZGspO1xyXG4gIH1cclxuICByZXR1cm4gY3VzdG9tU2VjdXJpdHlIYW5kbGVyO1xyXG59XHJcbmV4cG9ydCB7XHJcbiAgICBnZXRDdXN0b21TZWN1cml0eUNhbGxiYWNrLFxyXG4gICAgZ2V0Q3VzdG9tU2VjdXJpdHlIYW5kbGVyXHJcbn1cclxuIiwiaW1wb3J0IGJyb3RsaURlY29tcHJlc3MgZnJvbSAnLi9icm90bGktZGVjb21wcmVzcyc7XG4vKipcbiBDaGFyc2V0X2VfQ2hhcnNldEFOU0kgMFxuIENoYXJzZXRfZV9DaGFyc2V0RGVmYXVsdCAxXG4gQ2hhcnNldF9lX0NoYXJzZXRTeW1ib2wgMlxuIENoYXJzZXRfZV9DaGFyc2V0U2hpZnRfSklTIDEyOFxuIENoYXJzZXRfZV9DaGFyc2V0SGFuZ2V1bCAxMjlcbiBDaGFyc2V0X2VfQ2hhcnNldEdCMjMxMiAxMzRcbiBDaGFyc2V0X2VfQ2hhcnNldENoaW5lc2VCaWc1IDEzNlxuIENoYXJzZXRfZV9DaGFyc2V0R3JlZWsgMTYxXG4gQ2hhcnNldF9lX0NoYXJzZXRUdXJraXNoIDE2MlxuIENoYXJzZXRfZV9DaGFyc2V0SGVicmV3IDE3N1xuIENoYXJzZXRfZV9DaGFyc2V0QXJhYmljIDE3OFxuIENoYXJzZXRfZV9DaGFyc2V0QmFsdGljIDE4NlxuIENoYXJzZXRfZV9DaGFyc2V0UnVzc2lhbiAyMDRcbiBDaGFyc2V0X2VfQ2hhcnNldFRoYWkgMjIyXG4gQ2hhcnNldF9lX0NoYXJzZXRFYXN0RXVyb3BlIDIzOFxuICovXG5cbmxldCBmb250TWFwID0gW1xuICAgIHtcbiAgICAgICAgZm9udE5hbWU6IFwiZnJhbmtsaW5cIixcbiAgICAgICAgY2hhclNldDowLFxuICAgICAgICBib2xkOlwiTm90b1NhbnMtQm9sZC50dGZcIixcbiAgICAgICAgYm9sZEl0YWxpYzpcIk5vdG9TYW5zLUJvbGRJdGFsaWMudHRmXCIsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGZvbnROYW1lOiBcInN0c29uZ2xpZ2h0XCIsXG4gICAgICAgIGNoYXJTZXQ6LTEsXG4gICAgICAgIGNoYXJzZXQ6IDEzNCxcbiAgICAgICAgcmVndWxhcjogXCJOb3RvU2Fuc1RDTGlnaHQub3RmXCIsXG4gICAgfSxcblxuLyoqIFdFQlBERi0yODk2XG4gKiBGaXhlZCBwaXRjaCBmb3Igc29uZyBhbmQgc2ltaGVpXG4gKi9cbiAgICB7XG4gICAgICAgIGZvbnROYW1lOiBcInlvdXl1YW5fc2ltaGVpX3NpbXN1bl9zb25nX+S7v+Wui1/pu5HkvZNf5a6L5L2TXCIsXG4gICAgICAgIGNoYXJTZXQ6LTEsXG4gICAgICAgIGNoYXJzZXQ6IDEzNCxcbiAgICAgICAgcmVndWxhcjpcIk5vdG9TYW5zTW9ub0NKS3NjLVJlZ3VsYXIub3RmXCIsXG4gICAgICAgIGJvbGQ6XCJOb3RvU2Fuc01vbm9DSktzYy1Cb2xkLm90ZlwiXG4gICAgfSxcbiAgICAvL+aXpeaWh1xuICAgIHtcbiAgICAgICAgZm9udE5hbWU6IFwibWVpcnlvX21laXJ5b3VpX21zZ290aGljX21zbWluY2hvX21zcGdvdGhpY19tc3BtaW5jaG9fdWlnb3RoaWNcIixcbiAgICAgICAgY2hhclNldDoxMjgsXG4gICAgICAgIHJlZ3VsYXI6XCJOb3RvU2Fuc0NKS2pwLVJlZ3VsYXIub3RmXCIsXG4gICAgICAgIHRoaW46XCJOb3RvU2Fuc0NKS2pwLVRoaW4ub3RmXCIsXG4gICAgICAgIGxpZ2h0OlwiTm90b1NhbnNDSktqcC1MaWdodC5vdGZcIixcbiAgICAgICAgbm9ybWFsOlwiTm90b1NhbnNDSktqcC1EZW1pTGlnaHQub3RmXCIsXG4gICAgICAgIG1lZGl1bTpcIk5vdG9TYW5zQ0pLanAtTWVkaXVtLm90ZlwiLFxuICAgICAgICBib2xkOlwiTm90b1NhbnNDSktqcC1Cb2xkLm90ZlwiLFxuICAgICAgICBibGFjazpcIk5vdG9TYW5zQ0pLanAtQmxhY2sub3RmXCIsXG4gICAgICAgIG1vbm9SZWd1bGFyOlwiTm90b1NhbnNNb25vQ0pLanAtUmVndWxhci5vdGZcIixcbiAgICAgICAgbW9ub0JvbGQ6XCJOb3RvU2Fuc01vbm9DSktqcC1Cb2xkLm90ZlwiXG4gICAgfSxcbiAgICAvL+mfqeaWh1xuICAgIHtcbiAgICAgICAgZm9udE5hbWU6IFwiS29yZWFuXCIsXG4gICAgICAgIGNoYXJTZXQ6MTI5LFxuICAgICAgICByZWd1bGFyOlwiTm90b1NhbnNDSktrci1SZWd1bGFyLm90ZlwiLFxuICAgICAgICB0aGluOlwiTm90b1NhbnNDSktrci1UaGluLm90ZlwiLFxuICAgICAgICBsaWdodDpcIk5vdG9TYW5zQ0pLa3ItTGlnaHQub3RmXCIsXG4gICAgICAgIG5vcm1hbDpcIk5vdG9TYW5zQ0pLa3ItRGVtaUxpZ2h0Lm90ZlwiLFxuICAgICAgICBtZWRpdW06XCJOb3RvU2Fuc0NKS2tyLU1lZGl1bS5vdGZcIixcbiAgICAgICAgYm9sZDpcIk5vdG9TYW5zQ0pLa3ItQm9sZC5vdGZcIixcbiAgICAgICAgYmxhY2s6XCJOb3RvU2Fuc0NKS2tyLUJsYWNrLm90ZlwiLFxuICAgICAgICBtb25vUmVndWxhcjpcIk5vdG9TYW5zTW9ub0NKS2tyLVJlZ3VsYXIub3RmXCIsXG4gICAgICAgIG1vbm9Cb2xkOlwiTm90b1NhbnNNb25vQ0pLa3ItQm9sZC5vdGZcIlxuICAgIH0sXG4gICAgLy/nroDkvZPkuK3mlodcblxuICAgIHtcbiAgICAgICAgZm9udE5hbWU6IFwic2ltaGVpX3NpbXN1bl9zaW1zdW5leHRiX+aWueato1/ku7/lrotf6buR5L2TX+WNjuaWh1/mpbfkvZNf6Zq25LmmX+Wui+S9k1/lvq7ova/pm4Xpu5Ff5paw5a6L5L2TX+W5vOWchlwiLFxuICAgICAgICBjaGFyU2V0OjEzNCxcbiAgICAgICAgcmVndWxhcjpcIk5vdG9TYW5zU0MtUmVndWxhci5vdGZcIixcbiAgICAgICAgdGhpbjpcIk5vdG9TYW5zU0MtVGhpbi5vdGZcIixcbiAgICAgICAgbGlnaHQ6XCJOb3RvU2Fuc1NDLUxpZ2h0Lm90ZlwiLFxuICAgICAgICBub3JtYWw6XCJOb3RvU2Fuc1NDLURlbWlMaWdodC5vdGZcIixcbiAgICAgICAgbWVkaXVtOlwiTm90b1NhbnNTQy1NZWRpdW0ub3RmXCIsXG4gICAgICAgIGJvbGQ6XCJOb3RvU2Fuc1NDLUJvbGQub3RmXCIsXG4gICAgICAgIGJsYWNrOlwiTm90b1NhbnNTQy1CbGFjay5vdGZcIixcbiAgICAgICAgbW9ub1JlZ3VsYXI6XCJOb3RvU2Fuc01vbm9DSktzYy1SZWd1bGFyLm90ZlwiLFxuICAgICAgICBtb25vQm9sZDpcIk5vdG9TYW5zTW9ub0NKS3NjLUJvbGQub3RmXCJcbiAgICB9LFxuICAgIC8v57mB5L2T5Lit5paHXG4gICAge1xuICAgICAgICBmb250TmFtZTogXCJkZmthaXNiX21pY3Jvc29mdGpoZW5naGVpX21pbmdsaXVfbWluZ2xpdWhrc2NzX21pbmdsaXVoa3Njc2V4dGJfbWluZ2xpdWV4dGJfcG1pbmdsaXVfcG1pbmdsaXVleHRiXCIsXG4gICAgICAgIGNoYXJTZXQ6MTM2LFxuICAgICAgICByZWd1bGFyOiBcIk5vdG9TYW5zTW9ub0NKS3RjLVJlZ3VsYXIub3RmXCIsXG4gICAgICAgIHRoaW46XCJOb3RvU2Fuc0NKS3RjLVRoaW4ub3RmXCIsXG4gICAgICAgIGxpZ2h0OlwiTm90b1NhbnNDSkt0Yy1MaWdodC5vdGZcIixcbiAgICAgICAgbm9ybWFsOlwiTm90b1NhbnNDSkt0Yy1EZW1pTGlnaHQub3RmXCIsXG4gICAgICAgIG1lZGl1bTpcIk5vdG9TYW5zQ0pLdGMtTWVkaXVtLm90ZlwiLFxuICAgICAgICBib2xkOlwiTm90b1NhbnNDSkt0Yy1Cb2xkLm90ZlwiLFxuICAgICAgICBibGFjazpcIk5vdG9TYW5zQ0pLdGMtQmxhY2sub3RmXCIsXG4gICAgICAgIG1vbm9SZWd1bGFyOlwiTm90b1NhbnNNb25vQ0pLdGMtUmVndWxhci5vdGZcIixcbiAgICAgICAgbW9ub0JvbGQ6XCJOb3RvU2Fuc01vbm9DSkt0Yy1Cb2xkLm90ZlwiXG4gICAgfSxcbiAgICAvL+mYv+aLieS8r1xuICAgIHtcbiAgICAgICAgZm9udE5hbWU6IFwiYXJhYmljX2FuZGFsdXNfYXJhYmljdHlwZXNldHRpbmdfc2Fra2FsbWFqYWxsYV9zaW1wbGlmaWVkYXJhYmljX3NpbXBsaWZpZWRhcmFiaWNmaXhlZF90cmFkaXRpb25hbGFyYWJpY1wiLFxuICAgICAgICBjaGFyU2V0OjE3OCxcbiAgICAgICAgcmVndWxhcjpcIk5vdG9OYXNraEFyYWJpYy1SZWd1bGFyLnR0ZlwiLFxuICAgICAgICBib2xkOlwiTm90b05hc2toQXJhYmljLUJvbGQudHRmXCJcbiAgICB9LFxuICAgIC8v5rOw6K+tXG4gICAge1xuICAgICAgICBmb250TmFtZTogXCJhbmdzYW5hbmV3X2FuZ3NhbmF1cGNfYnJvd2FsbGlhbmV3X2Jyb3dhbGxpYXVwY19jb3JkaWFuZXdfY29yZGlhdXBjX1wiICtcbiAgICAgICAgXCJldWNyb3NpYXVwY19mcmVlc2lhdXBjX2lyaXN1cGNfamFzbWluZXVwY19rb2RjaGlhbmd1cGNfbGVlbGF3YWRlZV9saWx5dXBjXCIsXG4gICAgICAgIGNoYXJTZXQ6MjIyLFxuICAgICAgICByZWd1bGFyOlwiTm90b1NhbnNUaGFpLVJlZ3VsYXIudHRmXCIsXG4gICAgICAgIGJvbGQ6XCJOb3RvU2Fuc1RoYWktQm9sZC50dGZcIixcbiAgICAgICAgc2VyaWY6XCJOb3RvU2VyaWZUaGFpLVJlZ3VsYXIudHRmXCIsXG4gICAgICAgIHNlcmlmQm9sZDpcIk5vdG9TZXJpZlRoYWktQm9sZC50dGZcIlxuICAgIH0sXG4gICAgLy/luIzkvK/mnaXor61cbiAgICB7XG4gICAgICAgIGZvbnROYW1lOiBcImFoYXJvbmlfZGF2aWRfZnJhbmtydWVobF9naXNoYV9sZXZlbmltbXRfbWlyaWFtX25hcmtpc21fcm9kXCIsXG4gICAgICAgIGNoYXJTZXQ6LTEsXG4gICAgICAgIGNoYXJzZXQ6IDE3NyxcbiAgICAgICAgcmVndWxhcjpcIk5vdG9TYW5zSGVicmV3LVJlZ3VsYXIudHRmXCIsXG4gICAgICAgIGJvbGQ6XCJOb3RvU2Fuc0hlYnJldy1Cb2xkLnR0ZlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGZvbnROYW1lOiBcImFyaWFsX3N5bGZhZW5fdGFob21hX2NvdXJpZXJuZXdfbHVjaWRhc2Fuc3VuaWNvZGVfdGltZXNuZXdyb21hbl9jYWxpYnJpX1wiICtcbiAgICAgICAgXCJjYW1icmlhX2NhbmRhcmFfY29taWNzYW5zbXNfY29uc29sYXNfY29uc3RhbnRpYV9jb3JiZWxfZnJhbmtsaW5nb3RoaWNfZ2FicmlvbGFfXCIgK1xuICAgICAgICBcImdlb3JnaWFfaW1wYWN0X2x1Y2lkYWNvbnNvbGVfbWljcm9zb2Z0c2Fuc3NlcmlmX21zcmVmcmVuY2VzYW5zc2VyaWZfcGFsYXRpbm9saW5vdHlwZV9cIitcbiAgICAgICAgXCJzZWdvZXByaW50X3NlZ29lc2NyaXB0X3NlZ29ldWlfdHJlYnVjaGV0bXNfdmVyZGFuYV9oZWx2ZXRpY2FcIixcbiAgICAgICAgY2hhclNldDotMSxcbiAgICAgICAgY2hhcnNldDogMTc3LFxuICAgICAgICByZWd1bGFyOlwiTm90b1NhbnMtUmVndWxhci50dGZcIixcbiAgICAgICAgYm9sZDpcIk5vdG9TYW5zLUJvbGQudHRmXCIsXG4gICAgICAgIGl0YWxpYzpcIk5vdG9TYW5zLUl0YWxpYy50dGZcIixcbiAgICAgICAgYm9sZEl0YWxpYzpcIk5vdG9TYW5zLUJvbGRJdGFsaWMudHRmXCJcbiAgICB9LFxuICAgIC8v5b2d5paHXG4gICAge1xuICAgICAgICBmb250TmFtZTogXCJ5aV9taWNyb3NvZnR5aWJhdGlcIixcbiAgICAgICAgY2hhclNldDotMSxcbiAgICAgICAgY2hhcnNldDogMTc4LFxuICAgICAgICByZWd1bGFyOlwiTm90b1NhbnNZaS1SZWd1bGFyLnR0ZlwiXG4gICAgfSxcbiAgICAvL+mrmOajieivrVxuICAgIHtcbiAgICAgICAgZm9udE5hbWU6IFwiZGF1bnBlbmhfa2htZXJfbW9vbGJvcmFuXCIsXG4gICAgICAgIGNoYXJTZXQ6LTEsXG4gICAgICAgIGNoYXJzZXQ6IDE3NyxcbiAgICAgICAgcmVndWxhcjpcIk5vdG9TYW5zS2htZXItUmVndWxhci50dGZcIixcbiAgICAgICAgYm9sZDpcIk5vdG9TYW5zS2htZXItQm9sZC50dGZcIixcbiAgICAgICAgc2VyaWY6XCJOb3RvU2VyaWZLaG1lci1SZWd1bGFyLnR0ZlwiLFxuICAgICAgICBzZXJpZkJvbGQ6XCJOb3RvU2VyaWZLaG1lci1Cb2xkLnR0ZlwiXG4gICAgfSxcbiAgICAvL+iAgeaMneaWh1xuICAgIHtcbiAgICAgICAgZm9udE5hbWU6IFwiZG9rY2hhbXBhX2xhb1wiLFxuICAgICAgICBjaGFyU2V0Oi0xLFxuICAgICAgICBjaGFyc2V0OiAxNzcsXG4gICAgICAgIHJlZ3VsYXI6XCJOb3RvU2Fuc0xhby1SZWd1bGFyLnR0ZlwiLFxuICAgICAgICBib2xkOlwiTm90b1NhbnNMYW8tQm9sZC50dGZcIixcbiAgICAgICAgc2VyaWY6XCJOb3RvU2VyaWZMYW8tUmVndWxhci50dGZcIixcbiAgICAgICAgc2VyaWZCb2xkOlwiTm90b1NlcmlmTGFvLUJvbGQudHRmXCJcbiAgICB9LFxuICAgIC8v5rOw5Y2i5Zu65paHXG4gICAge1xuICAgICAgICBmb250TmFtZTogXCJ2YW5pX2dhdXRhbWlcIixcbiAgICAgICAgY2hhclNldDotMSxcbiAgICAgICAgY2hhcnNldDogMTc3LFxuICAgICAgICByZWd1bGFyOlwiTm90b1NhbnNUZWx1Z3UtUmVndWxhci50dGZcIixcbiAgICAgICAgYm9sZDpcIk5vdG9TYW5zVGVsdWd1LUJvbGQudHRmXCJcbiAgICB9LFxuICAgIC8v5rOw57Gz5bCU5paHXG4gICAge1xuICAgICAgICBmb250TmFtZTogXCJsYXRoYV92aWpheWFcIixcbiAgICAgICAgY2hhclNldDotMSxcbiAgICAgICAgY2hhcnNldDogMTc3LC8v5Y2X5LqaXG4gICAgICAgIHJlZ3VsYXI6XCJOb3RvU2Fuc1RhbWlsLVJlZ3VsYXIudHRmXCIsXG4gICAgICAgIGJvbGQ6XCJOb3RvU2Fuc1RhbWlsLUJvbGQudHRmXCJcbiAgICB9LFxuICAgIC8v6ams5bCU5Luj5aSr6K+tXG4gICAge1xuICAgICAgICBmb250TmFtZTogXCJtb2JvbGlfbXZib2xpXCIsXG4gICAgICAgIGNoYXJTZXQ6LTEsXG4gICAgICAgIGNoYXJzZXQ6IDE3NyxcbiAgICAgICAgcmVndWxhcjpcIk5vdG9TYW5zVGhhYW5hLVJlZ3VsYXIudHRmXCIsXG4gICAgICAgIGJvbGQ6XCJOb3RvU2Fuc1RoYWFuYS1Cb2xkLnR0ZlwiXG4gICAgfSxcbiAgICAvL+W+t+Wuj+azsOivrVxuICAgIHtcbiAgICAgICAgZm9udE5hbWU6IFwidGFpbGVfbWljcm9zb2Z0dGFpbGVcIixcbiAgICAgICAgY2hhclNldDotMSxcbiAgICAgICAgY2hhcnNldDogMTYxLFxuICAgICAgICByZWd1bGFyOlwiTm90b1NhbnNUYWlMZS1SZWd1bGFyLnR0ZlwiXG4gICAgfSxcbiAgICAvL+WPmeWIqeS6muaWh1xuICAgIHtcbiAgICAgICAgZm9udE5hbWU6IFwiZXN0cmFuZ2Vsb2VkZXNzYVwiLFxuICAgICAgICBjaGFyU2V0Oi0xLFxuICAgICAgICBjaGFyc2V0OiAyMjIsXG4gICAgICAgIHJlZ3VsYXI6XCJOb3RvU2Fuc1N5cmlhY0Vhc3Rlcm4tUmVndWxhci50dGZcIlxuICAgIH0sXG4gICAgLy/lg6fkvL3nvZfor61cbiAgICB7XG4gICAgICAgIGZvbnROYW1lOiBcImlza29vbGFwb3RhXCIsXG4gICAgICAgIGNoYXJTZXQ6LTEsXG4gICAgICAgIGNoYXJzZXQ6IDE3OCxcbiAgICAgICAgcmVndWxhcjpcIk5vdG9TYW5zU2luaGFsYS1SZWd1bGFyLnR0ZlwiLFxuICAgICAgICBib2xkOlwiTm90b1NhbnNTaW5oYWxhLUJvbGQudHRmXCJcbiAgICB9LFxuICAgIC8v6JeP5paHXG4gICAge1xuICAgICAgICBmb250TmFtZTogXCJoaW1hbGF5YV9taWNyb3NvZnRoaW1hbGF5YVwiLFxuICAgICAgICBjaGFyU2V0Oi0xLFxuICAgICAgICBjaGFyc2V0OiAxNzgsXG4gICAgICAgIHJlZ3VsYXI6XCJOb3RvU2Fuc1RpYmV0YW4tUmVndWxhci50dGZcIixcbiAgICAgICAgYm9sZDpcIk5vdG9TYW5zVGliZXRhbi1Cb2xkLnR0ZlwiXG4gICAgfSxcbiAgICAvL+WFq+aAneW3tOaWh1xuICAgIHtcbiAgICAgICAgZm9udE5hbWU6IFwicGhhZ3NwYV9taWNyb3NvZnRwaGFnc3BhXCIsXG4gICAgICAgIGNoYXJTZXQ6LTEsXG4gICAgICAgIGNoYXJzZXQ6MTc4LFxuICAgICAgICByZWd1bGFyOlwiTm90b1NhbnNQaGFnc1BhLVJlZ3VsYXIudHRmXCJcbiAgICB9LFxuICAgIC8v57uf5LiA5Yqg5ou/5aSn5Zyf6JGX6K+t6Z+z6IqCXG4gICAge1xuICAgICAgICBmb250TmFtZTogXCJldXBoZW1pYV9nYWR1Z2lcIixcbiAgICAgICAgY2hhclNldDotMSxcbiAgICAgICAgY2hhcnNldDoxNzgsXG4gICAgICAgIHJlZ3VsYXI6XCJOb3RvU2Fuc0NhbmFkaWFuQWJvcmlnaW5hbC1SZWd1bGFyLnR0ZlwiXG4gICAgfSxcbiAgICAvL+WIh+e9l+WfuuivrVxuICAgIHtcbiAgICAgICAgZm9udE5hbWU6IFwicGxhbnRhZ2VuZXRjaGVyb2tlZVwiLFxuICAgICAgICBjaGFyU2V0Oi0xLFxuICAgICAgICBjaGFyc2V0OjE3OCxcbiAgICAgICAgcmVndWxhcjpcIk5vdG9TYW5zQ2hlcm9rZWUtUmVndWxhci50dGZcIlxuICAgIH0sXG4gICAgLy/ln4PloZ7kv4Tmr5Tkupror61cbiAgICB7XG4gICAgICAgIGZvbnROYW1lOiBcIm55YWxhX2VicmltYVwiLFxuICAgICAgICBjaGFyU2V0Oi0xLFxuICAgICAgICBjaGFyc2V0OjIyMixcbiAgICAgICAgcmVndWxhcjpcIk5vdG9TYW5zRXRoaW9waWMtUmVndWxhci50dGZcIixcbiAgICAgICAgYm9sZDpcIk5vdG9TYW5zRXRoaW9waWMtQm9sZC50dGZcIlxuICAgIH0sXG4gICAgLy/lj6TlkInmi4nnibnmlodcbiAgICB7XG4gICAgICAgIGZvbnROYW1lOiBcInNocnV0aVwiLFxuICAgICAgICBjaGFyU2V0Oi0xLFxuICAgICAgICBjaGFyc2V0OjIyMixcbiAgICAgICAgcmVndWxhcjpcIk5vdG9TYW5zR3VqYXJhdGktUmVndWxhci50dGZcIixcbiAgICAgICAgYm9sZDpcIk5vdG9TYW5zR3VqYXJhdGktQm9sZC50dGZcIlxuICAgIH0sXG4gICAgLy/okpnlj6TmlodcbiAgICB7XG4gICAgICAgIGZvbnROYW1lOiBcIm1vbmdvbGlhbl9tb25nb2xpYW5iYWl0aVwiLFxuICAgICAgICBjaGFyU2V0Oi0xLFxuICAgICAgICBjaGFyc2V0OjE3OCxcbiAgICAgICAgcmVndWxhcjpcIk5vdG9TYW5zTW9uZ29saWFuLVJlZ3VsYXIudHRmXCJcbiAgICB9LFxuICAgIC8v5Y+k5ZCJ5ouJ54m55paHK+WDp+S8vee9l+ivrSvms7Dmlocr5rOw57Gz5bCU5paHK+azsOWNouWbuuaWh1xuICAgIHtcbiAgICAgICAgZm9udE5hbWU6IFwibmlybWFsYXVpXCIsXG4gICAgICAgIGNoYXJTZXQ6LTEsXG4gICAgICAgIGNoYXJzZXQ6MTYxLFxuICAgICAgICByZWd1bGFyOlwiTm90b05pcm1hbGF1aS1SZWd1bGFyLnR0ZlwiXG4gICAgfSxcbl07XG5cbmxldCBmb250TWFwQ2FjaGUgPSB7fTtcbmxldCBmb250TWF0Y2hNYXBDYWNoZSA9IHt9O1xubGV0IGZvbnRCdWZmZXJDYWNoZSA9IHt9O1xuXG5mdW5jdGlvbiBnZXRDYWNoZUtleSAoZm9udE5hbWUsIGNoYXJzZXQsIGl0YWxpYywgd2VpZ2h0LCBmb250RmxhZykge1xuICAgIHJldHVybiBbZm9udE5hbWUsIGNoYXJzZXQsIGl0YWxpYywgd2VpZ2h0LCBmb250RmxhZ10uam9pbignLScpO1xufVxuXG5mdW5jdGlvbiBnZXRGb250TWF0Y2ggKGZvbnROYW1lLCBjaGFyc2V0LCBpdGFsaWMsIHdlaWdodCwgZm9udEZsYWcpIHtcbiAgICBpZiAoIWZvbnROYW1lKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgbGV0IGNhY2hlS2V5ID0gZ2V0Q2FjaGVLZXkoZm9udE5hbWUsIGNoYXJzZXQsIGl0YWxpYywgd2VpZ2h0LCBmb250RmxhZyk7XG4gICAgZm9udE5hbWUgPSBhZGp1c3RGb250TmFtZShmb250TmFtZSk7XG5cbiAgICBpZihmb250TmFtZSA9PT0gJ2hlbHZldGljYScpe1xuICAgICAgICBpZighKGZvbnRGbGFnICYgMHg4MDAwMCkpe1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbGV0IGZvbnRNYXRjaCA9IGZvbnRNYXBDYWNoZVtjYWNoZUtleV07XG5cbiAgICBpZiAoZm9udE1hdGNoKSB7XG4gICAgICAgIHJldHVybiBmb250TWF0Y2g7XG4gICAgfVxuICAgIHZhciBtYXA7XG4gICAgZm9yIChsZXQgaSA9IDAsIGogPSBmb250TWFwLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgICBtYXAgPSBmb250TWFwW2ldO1xuICAgICAgICBsZXQgbWF0Y2hGb250TmFtZSA9IGlzTWF0Y2hGb250TmFtZShmb250TmFtZSwgbWFwLmZvbnROYW1lKTtcbiAgICAgICAgLy9maXggV0VCUERGLTI4ODIgY2hhcnNldOS4ujDvvIzlr7nmn5DkupvnibnmrorlrZfkvZPlkI3np7DlgZrljLnphY3jgIJcbiAgICAgICAgaWYgKCFtYXRjaEZvbnROYW1lICYmIChtYXAuY2hhclNldCAhPT0gY2hhcnNldCB8fCBjaGFyc2V0ID09PSAwKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvbnRNYXRjaCA9IG1hdGNoU2VyaWYoZm9udE5hbWUsIGZvbnRGbGFnLCBtYXApKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9udE1hdGNoID0gbWF0Y2hGaXhlZFBpdGNoKGZvbnROYW1lLCBmb250RmxhZywgbWFwKSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZm9udE1hdGNoID0gbWF0Y2hSZWd1bGFyKG1hcCk7XG4gICAgICAgIGxldCBmb250TWF0Y2gyO1xuICAgICAgICBpZiAoZm9udE1hdGNoMiA9IG1hdGNoV2VpZ2h0KHdlaWdodCwgbWFwKSkge1xuICAgICAgICAgICAgZm9udE1hdGNoID0gZm9udE1hdGNoMjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb250TWF0Y2gyID0gbWF0Y2hCb2xkKGZvbnROYW1lLCBmb250RmxhZywgbWFwKSkge1xuICAgICAgICAgICAgZm9udE1hdGNoID0gZm9udE1hdGNoMjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb250TWF0Y2gyID0gbWF0Y2hCb2xkSXRhbGljKGZvbnROYW1lLCBmb250RmxhZywgbWFwKSkge1xuICAgICAgICAgICAgZm9udE1hdGNoID0gZm9udE1hdGNoMjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb250TWF0Y2gyID0gbWF0Y2hJdGFsaWMoZm9udE5hbWUsIGZvbnRGbGFnLCBtYXApKSB7XG4gICAgICAgICAgICBmb250TWF0Y2ggPSBmb250TWF0Y2gyO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgIH1cbiAgICBpZiAoZm9udE1hdGNoKSB7XG4gICAgICAgIGZvbnRNYXBDYWNoZVtjYWNoZUtleV0gPSBmb250TWF0Y2g7XG4gICAgICAgIGZvbnRNYXRjaE1hcENhY2hlW2ZvbnRNYXRjaF0gPSBtYXA7XG4gICAgfVxuICAgIHJldHVybiBmb250TWF0Y2g7XG59XG5mdW5jdGlvbiBhZGp1c3RGb250TmFtZSAoZm9udE5hbWUpIHtcbiAgICByZXR1cm4gZm9udE5hbWUucmVwbGFjZSgvLS9nLFwiXCIpLnJlcGxhY2UoL1xccy9nLFwiXCIpLnRvTG93ZXJDYXNlKCk7XG59XG4vL+WMuemFjeWQjeWtl1xuZnVuY3Rpb24gaXNNYXRjaEZvbnROYW1lIChmb250TmFtZSwgZm9udE1hcE5hbWUpIHtcbiAgICBsZXQgZm9udE1hcE5hbWVzID0gZm9udE1hcE5hbWUuc3BsaXQoJ18nKTtcbiAgICBmb3IgKGxldCBpID0gMCwgaiA9IGZvbnRNYXBOYW1lcy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgaWYgKGZvbnROYW1lLmluZGV4T2YoZm9udE1hcE5hbWVzW2ldKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIG1hdGNoU2VyaWYgKGZvbnROYW1lLCBmbGFncywgbWFwKSB7XG4gICAgbGV0IGZvbnRGaWxlTmFtZTtcbiAgICBpZihmbGFncyAmIDB4MDIpe1xuICAgICAgICBmb250RmlsZU5hbWUgPSBtYXAuc2VyaWY7XG5cdFx0XG5cdFx0aWYoY2hlY2tCb2xkSGVhdnkoZm9udE5hbWUsIGZsYWdzKSl7XG4gICAgICAgICAgICBmb250RmlsZU5hbWUgPSBtYXAuc2VyaWZCb2xkO1xuXHRcdH1cbiAgICB9XG4gICAgcmV0dXJuIGZvbnRGaWxlTmFtZTtcbn1cbmZ1bmN0aW9uIG1hdGNoRml4ZWRQaXRjaCAoZm9udE5hbWUsIGZsYWdzLCBtYXApIHtcbiAgICBsZXQgZm9udEZpbGVOYW1lO1xuXHRpZihmbGFncyAmIDB4MDEpe1xuICAgICAgICBmb250RmlsZU5hbWUgPSBtYXAubW9ub1JlZ3VsYXI7XG5cblx0XHRpZihjaGVja0JvbGRIZWF2eShmb250TmFtZSwgZmxhZ3MpKXtcbiAgICAgICAgICAgIGZvbnRGaWxlTmFtZSA9IG1hcC5tb25vQm9sZDtcblx0XHR9XG5cdH1cbiAgIFx0XG4gICAgcmV0dXJuIGZvbnRGaWxlTmFtZTtcbn1cbmZ1bmN0aW9uIGNoZWNrQm9sZEhlYXZ5IChmb250TmFtZSwgZmxhZ3MpIHtcbiAgICByZXR1cm4gKGZsYWdzICYgMHg0MDAwKSB8fCBmb250TmFtZS5pbmRleE9mKFwiYm9sZFwiKSAhPT0gLTEgfHwgZm9udE5hbWUuaW5kZXhPZihcImhlYXZ5XCIpICE9PSAtMTtcbn1cbmZ1bmN0aW9uIG1hdGNoUmVndWxhciAobWFwKSB7XG4gICAgcmV0dXJuIG1hcC5yZWd1bGFyO1xufVxuZnVuY3Rpb24gbWF0Y2hXZWlnaHQgKHdlaWdodCwgbWFwKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgMTAwOiBtYXAudGhpbixcbiAgICAgICAgMjAwOiBtYXAubGlnaHQsXG4gICAgICAgIDMwMDogbWFwLm5vcm1hbCxcbiAgICAgICAgNzAwOiBtYXAuYm9sZCxcbiAgICAgICAgOTAwOiBtYXAuYmxhY2ssXG4gICAgfVt3ZWlnaHRdO1xufVxuZnVuY3Rpb24gbWF0Y2hCb2xkIChmb250TmFtZSwgZmxhZ3MsIG1hcCkge1xuICAgIGlmIChjaGVja0JvbGRIZWF2eShmb250TmFtZSwgZmxhZ3MpIHx8IGZvbnROYW1lLmluZGV4T2YoXCJibGFja1wiKSAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIG1hcC5ib2xkO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG1hdGNoSXRhbGljIChmb250TmFtZSwgZmxhZ3MsIG1hcCkge1xuICAgIGlmKChmbGFncyAmIDB4NDAwMCkgfHwgZm9udE5hbWUuaW5kZXhPZihcIml0YWxpY1wiKSAhPT0gLTEgfHwgZm9udE5hbWUuaW5kZXhPZihcIm9ibGlxdWVcIikgIT09IC0xICl7XG4gICAgICAgIHJldHVybiBtYXAuaXRhbGljO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG1hdGNoQm9sZEl0YWxpYyAoZm9udE5hbWUsIGZsYWdzLCBtYXApIHtcbiAgICBpZigoZmxhZ3MgJiAweDQwMDApIHx8IGZvbnROYW1lLmluZGV4T2YoXCJpdGFsaWNcIikgIT09IC0xIHx8IGZvbnROYW1lLmluZGV4T2YoXCJvYmxpcXVlXCIpICE9PSAtMSApe1xuICAgICAgICByZXR1cm4gbWFwLmJvbGRJdGFsaWM7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRGb250QnVmZmVyU3luYyAoZm9udEJhc2VVcmwsIGZvbnRNYXRjaCkge1xuICAgIGlmIChmb250QnVmZmVyQ2FjaGVbZm9udE1hdGNoXSkge1xuICAgICAgICByZXR1cm4gZm9udEJ1ZmZlckNhY2hlW2ZvbnRNYXRjaF07XG4gICAgfVxuICAgIFxuICAgIGxldCB4bWxIdHRwID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgeG1sSHR0cC5vcGVuKFwiZ2V0XCIsIGZvbnRCYXNlVXJsICsgJy8nICsgZm9udE1hdGNoICsgJy5icm90bGknLCBmYWxzZSk7XG4gICAgeG1sSHR0cC5yZXNwb25zZVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XG4gICAgeG1sSHR0cC5zZW5kKCk7XG5cbiAgICBsZXQgc3RhdHVzID0geG1sSHR0cC5zdGF0dXM7XG4gICAgbGV0IHJlc3VsdCA9IHhtbEh0dHAucmVzcG9uc2U7XG4gICAgaWYgKHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0ICYmIHJlc3VsdCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICAgIHJlc3VsdCA9IGJyb3RsaURlY29tcHJlc3MobmV3IFVpbnQ4QXJyYXkocmVzdWx0KSk7XG4gICAgICAgIHJldHVybiBmb250QnVmZmVyQ2FjaGVbZm9udE1hdGNoXSA9IHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldFRoaXJkUGFydHlGb250QnVmZmVyIChmb250QmFzZVVybCwgZm9udE5hbWUsIGNoYXJzZXQsIGl0YWxpYywgd2VpZ2h0LCBmb250RmxhZywgcmVhbE5hbWU9ZmFsc2UpIHtcbiAgICBpZighcmVhbE5hbWUpe1xuICAgICAgICBsZXQgZm9udE1hdGNoID0gZ2V0Rm9udE1hdGNoKGZvbnROYW1lLCBjaGFyc2V0LCBpdGFsaWMsIHdlaWdodCwgZm9udEZsYWcpO1xuICAgIFxuICAgICAgICBpZiAoIWZvbnRNYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdldEZvbnRCdWZmZXJTeW5jKGZvbnRCYXNlVXJsLCBmb250TWF0Y2gpO1xuICAgIH1cbiAgICBlbHNle1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgaiA9IGZvbnRNYXAubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgbWFwID0gZm9udE1hcFtpXTtcbiAgICAgICAgICAgIGlmKG1hcC5yZWd1bGFyJiYobWFwLnJlZ3VsYXIuc3BsaXQoXCIuXCIpWzBdID09PSBmb250TmFtZSkpe1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXRGb250QnVmZmVyU3luYyhmb250QmFzZVVybCwgbWFwLnJlZ3VsYXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYobWFwLmJvbGQmJihtYXAuYm9sZC5zcGxpdChcIi5cIilbMF0gPT09IGZvbnROYW1lKSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldEZvbnRCdWZmZXJTeW5jKGZvbnRCYXNlVXJsLCBtYXAuYm9sZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYoaXRhbGljKXtcbiAgICAgICAgICAgIHJldHVybiBnZXRGb250QnVmZmVyU3luYyhmb250QmFzZVVybCwgXCJOb3RvU2Fucy1JdGFsaWMudHRmXCIpXG4gICAgICAgIH1cbiAgICAgICAgaWYod2VpZ2h0ID09IDcwMCl7XG4gICAgICAgICAgICByZXR1cm4gZ2V0Rm9udEJ1ZmZlclN5bmMoZm9udEJhc2VVcmwsIFwiTm90b1NhbnMtQm9sZC50dGZcIilcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ2V0Rm9udEJ1ZmZlclN5bmMoZm9udEJhc2VVcmwsIFwiTm90b1NhbnMtUmVndWxhci50dGZcIilcbiAgICAgICAgLy8gcmVndWxhcjpcIk5vdG9TYW5zLVJlZ3VsYXIudHRmXCIsXG4gICAgICAgIC8vIGJvbGQ6XCJOb3RvU2Fucy1Cb2xkLnR0ZlwiLFxuICAgICAgICAvLyBpdGFsaWM6XCJOb3RvU2Fucy1JdGFsaWMudHRmXCIsXG4gICAgICAgIC8vIGJvbGRJdGFsaWM6XCJOb3RvU2Fucy1Cb2xkSXRhbGljLnR0ZlwiXG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0V2ViRm9udEZpbGVCdWZmZXIoZm9udEJhc2VVcmwscG9zKXtcbiAgICBsZXQgbWFwID0gZm9udE1hcFtwb3MtMV07XG4gICAgaWYoIW1hcCl7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZihtYXAucmVndWxhcil7XG4gICAgICAgIHJldHVybiBnZXRGb250QnVmZmVyU3luYyhmb250QmFzZVVybCwgbWFwLnJlZ3VsYXIpO1xuICAgIH1cbiAgICBpZihtYXAuYm9sZCl7XG4gICAgICAgIHJldHVybiBnZXRGb250QnVmZmVyU3luYyhmb250QmFzZVVybCwgbWFwLmJvbGQpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldEZvbnRGaWxlc1Bvcyhwb3Mpe1xuICAgIHJldHVybiAocG9zKzEpJWZvbnRNYXAubGVuZ3RoO1xufVxuZnVuY3Rpb24gZ2V0Q2hhcnNldEZyb21OYW1lIChmb250TmFtZSkge1xuICAgIGZvbnROYW1lID0gZm9udE5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICBmb3IgKGxldCBpID0gMCwgaiA9IGZvbnRNYXAubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICAgIGxldCBtYXAgPSBmb250TWFwW2ldO1xuICAgICAgICBmb3IgKGxldCBqIGluIG1hcCkge1xuICAgICAgICAgICAgaWYgKChtYXBbal0gKyAnJykucmVwbGFjZSgvLS9nLCAnJykudG9Mb3dlckNhc2UoKS5pbmRleE9mKGZvbnROYW1lKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBpZiAobWFwLmNoYXJTZXQgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXAuY2hhclNldFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXAuY2hhcnNldDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIDA7XG59XG5leHBvcnQgZGVmYXVsdCB7XG4gICAgZ2V0VGhpcmRQYXJ0eUZvbnRCdWZmZXIsXG4gICAgZ2V0V2ViRm9udEZpbGVCdWZmZXIsXG4gICAgZ2V0Rm9udEZpbGVzUG9zLFxuICAgIGdldEZvbnRNYXRjaCxcbiAgICBnZXRDaGFyc2V0RnJvbU5hbWUsXG59IiwiaW1wb3J0IEdyYXBoaWNzT2JqZWN0IGZyb20gXCIuL0dyYXBoaWNzT2JqZWN0XCI7XG5pbXBvcnQge2dldEdyYXBoaWNPYmplY3RzSW5mb30gZnJvbSBcIi4vZ3JhcGhpY09iamVjdE1nclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGb3JtWE9iamVjdCBleHRlbmRzIEdyYXBoaWNzT2JqZWN0e1xuICAvKipcbiAgICogXG4gICAqIEBwYXJhbSB7R1NESy5HcmFwaGljc09iamVjdH0gZ3JhcGhpY09iamVjdCBcbiAgICogQHBhcmFtIHtHU0RLLlBERlBhZ2V9IHBhZ2UgXG4gICAqIEBwYXJhbSB7R1NES30gZW5naW5lIFxuICAgKi9cbiAgY29uc3RydWN0b3IoZ3JhcGhpY09iamVjdCxjX3BhZ2UscGFnZSxlbmdpbmUpe1xuICAgIHN1cGVyKGdyYXBoaWNPYmplY3QsY19wYWdlLHBhZ2UsZW5naW5lKTtcbiAgICB0aGlzLmdyYXBoaWNzT2JqZWN0ID0gZ3JhcGhpY09iamVjdC5HZXRGb3JtWE9iamVjdCgpO1xuICB9XG4gIGdldEdyYXBoaWNzT2JqZWN0QXRQb2ludCh4LHksdHlwZSxtYW5hZ2VyKXtcbiAgICBsZXQgR09zID0gdGhpcy5ncmFwaGljc09iamVjdC5HZXRHcmFwaGljc09iamVjdHMoKTtcbiAgICBsZXQgZmlsdGVyID0gdGhpcy5lbmdpbmUuR3JhcGhpY3NPYmplY3RUeXBlLmVfVHlwZUFsbDtcblxuICAgIGxldCBwb3MgPSBHT3MuR2V0Rmlyc3RHcmFwaGljc09iamVjdFBvc2l0aW9uKGZpbHRlcik7XG4gICAgd2hpbGUocG9zKXtcbiAgICAgIGxldCBncmFwaGljc09iamVjdCA9IEdPcy5HZXRHcmFwaGljc09iamVjdChwb3MpO1xuXG4gICAgICBsZXQgcmVjdCA9IGdyYXBoaWNzT2JqZWN0LkdldFJlY3QoKTtcbiAgICAgIGlmKHJlY3QuQ29udGFpbnMoeCx5KSl7XG4gICAgICAgIGxldCBqck9iamVjdCA9IG1hbmFnZXIuZ2V0KGdyYXBoaWNzT2JqZWN0LCB0aGlzLmNfcGFnZSk7XG4gICAgICAgIGxldCBvYmpUeXBlID0gZ3JhcGhpY3NPYmplY3QuR2V0VHlwZSgpLnZhbHVlO1xuICAgICAgICBpZihvYmpUeXBlID09PSB0eXBlKXtcbiAgICAgICAgICByZXR1cm4ganJPYmplY3Q7XG4gICAgICAgIH1cbiAgICAgICAgaWYob2JqVHlwZSA9PT0gNSl7XG4gICAgICAgICAgcmV0dXJuIGpyT2JqZWN0LmdldEdyYXBoaWNzT2JqZWN0QXRQb2ludCh4LCB5LHR5cGUsbWFuYWdlcilcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBwb3MgPSBHT3MuR2V0TmV4dEdyYXBoaWNzT2JqZWN0UG9zaXRpb24ocG9zLGZpbHRlcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZ2V0R3JhcGhpY3NPYmplY3RzQXRQb2ludCh4LHksdHlwZSx0b2xlcmFuY2UsbWFuYWdlcil7XG4gICAgbGV0IHJlc3VsdCA9IFtdO1xuXG4gICAgbGV0IEdPcyA9IHRoaXMuZ3JhcGhpY3NPYmplY3QuR2V0R3JhcGhpY3NPYmplY3RzKCk7XG4gICAgbGV0IGZpbHRlciA9IHRoaXMuZW5naW5lLkdyYXBoaWNzT2JqZWN0VHlwZS5lX1R5cGVBbGw7XG4gICAgbGV0IGZvcm1YTWF0cml4ID0gdGhpcy5ncmFwaGljc09iamVjdC5HZXRNYXRyaXgoKTtcblxuICAgIGxldCBwb3MgPSBHT3MuR2V0Rmlyc3RHcmFwaGljc09iamVjdFBvc2l0aW9uKGZpbHRlcik7XG4gICAgd2hpbGUocG9zKXtcbiAgICAgIGxldCBncmFwaGljc09iamVjdCA9IEdPcy5HZXRHcmFwaGljc09iamVjdChwb3MpO1xuXG4gICAgICAvKipcbiogQHR5cGUgR1NESy5DRlhfRmxvYXRSZWN0XG4qKi9cbiAgICAgIGxldCByZWN0ID0gZ3JhcGhpY3NPYmplY3QuR2V0UmVjdCgpO1xuICAgICAgZm9ybVhNYXRyaXguVHJhbnNmb3JtUmVjdChyZWN0KTtcbiAgICAgIGlmKHJlY3QuQ29udGFpbnMoeCx5KSl7XG4gICAgICAgIGxldCBqck9iamVjdCA9IG1hbmFnZXIuZ2V0KGdyYXBoaWNzT2JqZWN0LCB0aGlzLmNfcGFnZSx0aGlzKTtcbiAgICAgICAgbGV0IG9ialR5cGUgPSBncmFwaGljc09iamVjdC5HZXRUeXBlKCkudmFsdWU7XG4gICAgICAgIGlmKG9ialR5cGUgPT09IHR5cGV8fHR5cGU9PTApe1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGpyT2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICBpZihvYmpUeXBlID09PSA1KXtcbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQuY29uY2F0KGpyT2JqZWN0LmdldEdyYXBoaWNzT2JqZWN0c0F0UG9pbnQoeCwgeSx0eXBlLG1hbmFnZXIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBwb3MgPSBHT3MuR2V0TmV4dEdyYXBoaWNzT2JqZWN0UG9zaXRpb24ocG9zLGZpbHRlcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICB0b0pzb24gKCl7XG4gICAgbGV0IGJhc2VJbmZvID0gc3VwZXIudG9Kc29uKCk7XG5cbiAgICBsZXQgZ3JhcGhpY3NPYmplY3RzID0gdGhpcy5ncmFwaGljc09iamVjdC5HZXRHcmFwaGljc09iamVjdHMoKTtcblxuICAgIGxldCBjaGlkcmVuICA9IGdldEdyYXBoaWNPYmplY3RzSW5mbyh0aGlzLmVuZ2luZSx0aGlzLmNfcGFnZSxncmFwaGljc09iamVjdHMsMCk7XG5cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSxiYXNlSW5mbyx7XG4gICAgICBjaGlkcmVuLFxuICAgIH0pXG4gIH1cbn0iLCJpbXBvcnQgZ2V0VW5pcXVlSWQgZnJvbSAnLi4vLi4vc2hhcmVkL2dldFVuaXF1ZUlkJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR3JhcGhpY3NPYmplY3Qge1xuICBjb25zdHJ1Y3RvcihvYmplY3QsY19wYWdlLCBwYWdlLCBlbmdpbmUsanIpe1xuICAgICAgdGhpcy5pZCA9IGdldFVuaXF1ZUlkKCdncmFwaGljc19vYmplY3QnKTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSBHU0RLXG4gICAgICovXG4gICAgdGhpcy5lbmdpbmUgPSBlbmdpbmU7XG4gICAgLyoqXG4gICAgICogQHR5cGUgR1NESy5QREZQYWdlXG4gICAgICovXG4gICAgdGhpcy5jX3BhZ2UgPSBjX3BhZ2U7XG4gICAgICB0aGlzLnBhZ2UgPSBwYWdlO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIEdTREsuR3JhcGhpY3NPYmplY3RcbiAgICAgKi9cbiAgICB0aGlzLmdyYXBoaWNzT2JqZWN0ID0gb2JqZWN0O1xuICAgIC8vdGhpcy5pbmRleCA9IGluZGV4O1xuXG4gICAgdGhpcy5qciA9IGpyO1xuICB9XG4gIGdldFR5cGUoKXtcbiAgICByZXR1cm4gdGhpcy5ncmFwaGljc09iamVjdC5HZXRUeXBlKCkudmFsdWU7XG4gIH1cbiAgdG9Kc29uICgpe1xuICAgIGxldCBvYmplY3QgPSB0aGlzLmdyYXBoaWNzT2JqZWN0O1xuXG4gICAgbGV0IGNsaXBQYXRoc0pTT04gPSBbXTtcblxuICAgIGxldCBjbGlwUGF0aENvdW50ID0gb2JqZWN0LkdldENsaXBQYXRoQ291bnQoKTtcbiAgICBmb3IobGV0IGluZGV4ID0gMDtpbmRleDxjbGlwUGF0aENvdW50O2luZGV4Kyspe1xuICAgICAgbGV0IGNsaXBQYXRoID0gb2JqZWN0LkdldENsaXBQYXRoKGluZGV4KTtcbiAgICAgIGxldCBjbGlwRmlsbE1vZGUgPSBvYmplY3QuR2V0Q2xpcFBhdGhGaWxsTW9kZShpbmRleCkudmFsdWU7XG4gICAgICBsZXQgbnVtYmVyID0gY2xpcFBhdGguR2V0UG9pbnRDb3VudCgpO1xuICBcbiAgICAgIGxldCBjbGlwUGF0aEpzb24gPSBbXVxuICAgICAgZm9yKGxldCBwb2ludEluZGV4ID0gMDtwb2ludEluZGV4PG51bWJlcjtwb2ludEluZGV4Kyspe1xuICAgICAgICBsZXQgcG9pbnQgPSBjbGlwUGF0aC5HZXRQb2ludChwb2ludEluZGV4KTtcbiAgICAgICAgY2xpcFBhdGhKc29uLnB1c2goe1xuICAgICAgICAgIGluZGV4OnBvaW50SW5kZXgsXG4gICAgICAgICAgeDpwb2ludC54LFxuICAgICAgICAgIHk6cG9pbnQueSxcbiAgICAgICAgICB0eXBlOmNsaXBQYXRoLkdldFBvaW50VHlwZShwb2ludEluZGV4KS52YWx1ZVxuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgY2xpcFBhdGhzSlNPTi5wdXNoKHtcbiAgICAgICAgY2xpcEZpbGxNb2RlLFxuICAgICAgICBjbGlwUGF0aEpzb25cbiAgICAgIH0pXG4gICAgfVxuICAgIFxuICAgIGxldCBibGVuZE1vZGUgPSBvYmplY3QuR2V0QmxlbmRNb2RlKCkudmFsdWU7XG5cbiAgICBsZXQgY2xpcFRleHRPYmplY3RDb3VudCA9IG9iamVjdC5HZXRDbGlwVGV4dE9iamVjdENvdW50KCk7XG4gICAgLy90b2RvXG5cbiAgICBsZXQgZmlsbENvbG9yID0gb2JqZWN0LkdldEZpbGxDb2xvcigpO1xuICAgIGxldCBzdHJva2VDb2xvciA9IG9iamVjdC5HZXRTdHJva2VDb2xvcigpO1xuXG4gICAgbGV0IGdyYXBoaWNTdGF0ZSA9IG9iamVjdC5HZXRHcmFwaFN0YXRlKCk7XG4gICAgbGV0IGRhc2hlcyA9IFtdO1xuICAgIGZvcihsZXQgaW5kZXggPSAwO2luZGV4PGdyYXBoaWNTdGF0ZS5kYXNoZXMuR2V0U2l6ZSgpO2luZGV4Kyspe1xuICAgICAgICBkYXNoZXMucHVzaChncmFwaGljU3RhdGUuZGFzaGVzLkdldEF0KGluZGV4KSk7XG4gICAgfVxuXG4gICAgbGV0IG1hdHJpeCA9IG9iamVjdC5HZXRNYXRyaXgoKTtcbiAgICBsZXQgcmVjdCA9IG9iamVjdC5HZXRSZWN0KCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBpZDogdGhpcy5pZCxcbiAgICAgIGNsaXBQYXRoczpjbGlwUGF0aHNKU09OLFxuICAgICAgZ3JhcGhTdGF0ZTp7XG4gICAgICAgIGRhc2hlcyxcbiAgICAgICAgbGluZUNhcDpncmFwaGljU3RhdGUubGluZV9jYXAudmFsdWUsXG4gICAgICAgIGxpbmVKb2luOmdyYXBoaWNTdGF0ZS5saW5lX2pvaW4udmFsdWUsXG4gICAgICAgIGxpbmVXaWR0aDpncmFwaGljU3RhdGUubGluZV93aWR0aCxcbiAgICAgICAgbGluZUxpbWl0OmdyYXBoaWNTdGF0ZS5saW5lX2xpbWl0LFxuICAgICAgfSxcbiAgICAgIGJsZW5kTW9kZSxcbiAgICAgIC8vaW5kZXg6dGhpcy5pbmRleCxcbiAgICAgIGZpbGxDb2xvcixcbiAgICAgIHN0cm9rZUNvbG9yLFxuICAgICAgaGFzVHJhbnNwYXJlbmN5Om9iamVjdC5IYXNUcmFuc3BhcmVuY3koKSxcbiAgICAgIHR5cGU6b2JqZWN0LkdldFR5cGUoKS52YWx1ZSxcbiAgICAgIG1hdHJpeDp7XG4gICAgICAgIGE6bWF0cml4LmEsXG4gICAgICAgIGI6bWF0cml4LmIsXG4gICAgICAgIGM6bWF0cml4LmMsXG4gICAgICAgIGQ6bWF0cml4LmQsXG4gICAgICAgIGU6bWF0cml4LmUsXG4gICAgICAgIGY6bWF0cml4LmYsXG4gICAgICB9LFxuICAgICAgcmVjdDp7XG4gICAgICAgIGxlZnQ6cmVjdC5sZWZ0LFxuICAgICAgICB0b3A6cmVjdC50b3AsXG4gICAgICAgIHJpZ2h0OnJlY3QucmlnaHQsXG4gICAgICAgIGJvdHRvbTpyZWN0LmJvdHRvbSxcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgc2V0TWF0cml4KHJlY3Qpe1xuICAgICAgLypsZXQgbSA9IHRoaXMuZ3JhcGhpY3NPYmplY3QuR2V0TWF0cml4KCk7XG4gICAgICBsZXQgb3JpUmVjdCA9IHRoaXMuZ3JhcGhpY3NPYmplY3QuR2V0UmVjdCgpO1xuICAgICAgbS5TZXRSZXZlcnNlKG0pO1xuICAgICAgbS5UcmFuc2Zvcm1SZWN0KG9yaVJlY3QpO1xuICAgICAgbS5kZWxldGUoKTtcblxuICAgICAgbSA9IG5ldyB0aGlzLmVuZ2luZS5NYXRyaXgoKTtcbiAgICAgIGxldCBwZGZSZWN0ID0gbmV3IHRoaXMuZW5naW5lLkNGWF9GbG9hdFJlY3QocmVjdC5sZWZ0LHJlY3QuYm90dG9tLHJlY3QucmlnaHQscmVjdC50b3ApXG4gICAgICBtLmE9cGRmUmVjdC5XaWR0aCgpL29yaVJlY3QuV2lkdGgoKTtcbiAgICAgIG0uZD1wZGZSZWN0LkhlaWdodCgpL29yaVJlY3QuSGVpZ2h0KCk7XG4gICAgICBtLmU9cGRmUmVjdC5sZWZ0LW0uYSpvcmlSZWN0LmxlZnQ7XG4gICAgICBtLmY9cGRmUmVjdC5ib3R0b20tbS5kKm9yaVJlY3QuYm90dG9tO1xuICAgICAgdGhpcy5ncmFwaGljc09iamVjdC5TZXRNYXRyaXgobSlcbiAgICAgIHRoaXMuY19wYWdlLkdlbmVyYXRlQ29udGVudCgpO1xuXG4gICAgICBtLmRlbGV0ZSgpOyovXG4gICAgbGV0IG0gPSB0aGlzLmdyYXBoaWNzT2JqZWN0LkdldE1hdHJpeCgpO1xuICAgIGxldCBvcmlSZWN0ID0gdGhpcy5ncmFwaGljc09iamVjdC5HZXRSZWN0KCk7XG4gICAgbGV0IHBkZlJlY3QgPSBuZXcgdGhpcy5lbmdpbmUuQ0ZYX0Zsb2F0UmVjdChyZWN0LmxlZnQscmVjdC5ib3R0b20scmVjdC5yaWdodCxyZWN0LnRvcCk7XG4gICAgbGV0IHN4PXBkZlJlY3QuV2lkdGgoKS9vcmlSZWN0LldpZHRoKCk7XG4gICAgbGV0IHN5PXBkZlJlY3QuSGVpZ2h0KCkvb3JpUmVjdC5IZWlnaHQoKTtcbiAgICAgIG0uU2NhbGUoc3gsc3ksMCk7XG4gICAgICBtLlRyYW5zbGF0ZShwZGZSZWN0LmxlZnQtc3gqb3JpUmVjdC5sZWZ0LHBkZlJlY3QuYm90dG9tLXN5Km9yaVJlY3QuYm90dG9tLDApO1xuICAgIHRoaXMuZ3JhcGhpY3NPYmplY3QuU2V0TWF0cml4KG0pO1xuICAgIHRoaXMuY19wYWdlLkdlbmVyYXRlQ29udGVudCgpO1xuICAgIG0uZGVsZXRlKCk7XG4gIH1cbiAgcmVuZGVyKHNjYWxlPTEpe1xuICAgIGxldCBlbmdpbmUgPSB0aGlzLmVuZ2luZTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSBHU0RLLkNGWF9GbG9hdFJlY3RcbiAgICAgKi9cbiAgICBsZXQgcmVjdCA9IHRoaXMuZ3JhcGhpY3NPYmplY3QuR2V0UmVjdCgpO1xuXG4gICAgbGV0IG9iamVjdE1hdHJpeCA9IHRoaXMuZ3JhcGhpY3NPYmplY3QuR2V0TWF0cml4KCk7XG4gICAgbGV0IG1hdHJpeCA9IG5ldyBlbmdpbmUuTWF0cml4KCk7XG4gICAgbWF0cml4LlJvdGF0ZSgtdGhpcy5jX3BhZ2UuR2V0Um90YXRpb24oKS52YWx1ZSogTWF0aC5QSS8yLDApO1xuICAgIFxuXG4gICAgbWF0cml4LlRyYW5zZm9ybVJlY3QocmVjdClcblxuICAgIG1hdHJpeC5lID0tcmVjdC5sZWZ0O1xuICAgIG1hdHJpeC5mID0gLXJlY3QuYm90dG9tO1xuXG4gICAgbWF0cml4LlNjYWxlKHNjYWxlLHNjYWxlLGZhbHNlKTtcbiAgICAvL21hdHJpeC5TZXRSZXZlcnNlKG9iamVjdE1hdHJpeCk7XG5cbiAgICBsZXQgd2lkdGggPSByZWN0LldpZHRoKCk7XG4gICAgbGV0IGhlaWdodCA9IHJlY3QuSGVpZ2h0KCk7XG5cbiAgICBsZXQgYml0bWFwV2lkdGggPSBNYXRoLm1heCh3aWR0aCAqIHNjYWxlLDEpO1xuICAgIGxldCBiaXRtYXBIZWlnaHQgPSBNYXRoLm1heChoZWlnaHQgKiBzY2FsZSwxKTtcbiAgICAgICAgICAgIFxuICAgIGxldCBiaXRtYXAgPSBuZXcgZW5naW5lLkJpdG1hcChiaXRtYXBXaWR0aCwgYml0bWFwSGVpZ2h0LCBlbmdpbmUuRElCRm9ybWF0LmVfRElCQXJnYiwgMCwgMCk7XG4gICAgbGV0IHJlbmRlcmVyID0gbmV3IGVuZ2luZS5SZW5kZXJlcihiaXRtYXAsIHRydWUpO1xuICAgIHJlbmRlcmVyLlJlbmRlckdyYXBoaWNzT2JqZWN0KHRoaXMuZ3JhcGhpY3NPYmplY3QsdGhpcy5jX3BhZ2UsIG1hdHJpeCk7XG5cbiAgICBsZXQgZmxpcEJpdG1hcCA9IGJpdG1hcC5GbGlwKGZhbHNlLHRydWUpO1xuICAgIGJpdG1hcFdpZHRoID0gZmxpcEJpdG1hcC5HZXRXaWR0aCgpO1xuICAgIGJpdG1hcEhlaWdodCA9IGZsaXBCaXRtYXAuR2V0SGVpZ2h0KCk7XG5cbiAgICBsZXQgc3RhcnQgPSBmbGlwQml0bWFwLkdldEJ1ZmZlcigpO1xuICAgIGxldCBzaXplID0gYml0bWFwSGVpZ2h0ICogZmxpcEJpdG1hcC5HZXRQaXRjaCgpO1xuICAgIGxldCBlbmQgPSBzdGFydCArIHNpemU7XG4gICAgbGV0IGltYWdlRGF0YUJ1ZmZlcjtcblxuICAgIGlmIChlbmdpbmUuSEVBUFU4LmJ1ZmZlci5zbGljZSkge1xuICAgICAgICBpbWFnZURhdGFCdWZmZXIgPSBlbmdpbmUuSEVBUFU4LmJ1ZmZlci5zbGljZShzdGFydCwgZW5kKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpbWFnZURhdGFCdWZmZXIgPSBuZXcgVWludDhBcnJheShlbmdpbmUuSEVBUFU4LmJ1ZmZlciwgc3RhcnQsIHNpemUpLmJ1ZmZlcjtcbiAgICB9ICAgICAgICAgXG5cbiAgICByZW5kZXJlci5kZWxldGUoKTtcbiAgICBiaXRtYXAuZGVsZXRlKCk7XG4gICAgZmxpcEJpdG1hcC5kZWxldGUoKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGJ1ZmZlcjogaW1hZ2VEYXRhQnVmZmVyLFxuICAgICAgICB3aWR0aDogYml0bWFwV2lkdGgsXG4gICAgICAgIGhlaWdodDogYml0bWFwSGVpZ2h0LFxuICAgIH07XG4gIH1cbiAgdXBkYXRlR3JhcGhTdGF0ZShwcm9wcmVydHksdmFsdWUsZXh0cmFQYXJhbT1bXSl7XG4gICAgbGV0IGdyYXBoaWNTdGF0ZSA9IHRoaXMuZ3JhcGhpY3NPYmplY3QuR2V0R3JhcGhTdGF0ZSgpO1xuICAgIHN3aXRjaChwcm9wcmVydHkpe1xuICAgICAgY2FzZSAnQm9yZGVyU3R5bGUnOlxuICAgICAgbGV0IGRhc2hlcyA9IG5ldyB0aGlzLmVuZ2luZS5GbG9hdEFycmF5KCk7XG4gICAgICBkYXNoZXMuU2V0U2l6ZShleHRyYVBhcmFtLmxlbmd0aCwtMSk7XG4gICAgICBmb3IobGV0IGVsZUluZGV4ID0gMDtlbGVJbmRleDxleHRyYVBhcmFtLmxlbmd0aDtlbGVJbmRleCsrKXtcbiAgICAgICAgICBkYXNoZXMuU2V0QXQoZWxlSW5kZXgsZXh0cmFQYXJhbVtlbGVJbmRleF0pO1xuICAgICAgfVxuICAgICAgZ3JhcGhpY1N0YXRlLmRhc2hlcyA9IGRhc2hlcztcbiAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnQm9yZGVyV2lkdGgnOlxuICAgICAgZ3JhcGhpY1N0YXRlLmxpbmVfd2lkdGggPSB2YWx1ZTtcbiAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnb3BhY2l0eSc6XG4gICAgfVxuICAgIHRoaXMuZ3JhcGhpY3NPYmplY3QuU2V0R3JhcGhTdGF0ZShncmFwaGljU3RhdGUpO1xuICB9XG4gIHNldEJvcmRlclN0eWxlKHN0eWxlLGRhc2hlcyxyZXNldENvbnRlbnQ9dHJ1ZSl7XG4gICAgdGhpcy51cGRhdGVHcmFwaFN0YXRlKCdCb3JkZXJTdHlsZScsc3R5bGUsZGFzaGVzKTtcbiAgICBpZihyZXNldENvbnRlbnQpe1xuICAgICAgdGhpcy5jX3BhZ2UuR2VuZXJhdGVDb250ZW50KCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnRvSnNvbigpO1xuICB9XG4gIHNldEJvcmRlcldpZHRoKHdpZHRoLHJlc2V0Q29udGVudD10cnVlKXtcbiAgICB0aGlzLnVwZGF0ZUdyYXBoU3RhdGUoJ0JvcmRlcldpZHRoJyx3aWR0aCk7XG4gICAgaWYocmVzZXRDb250ZW50KXtcbiAgICAgIHRoaXMuY19wYWdlLkdlbmVyYXRlQ29udGVudCgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy50b0pzb24oKTtcbiAgfVxuICBzZXRCb3JkZXJDb2xvcihjb2xvcixyZXNldENvbnRlbnQ9dHJ1ZSl7XG4gICAgbGV0IG9yaUNvbG9yID0gdGhpcy5ncmFwaGljc09iamVjdC5HZXRTdHJva2VDb2xvcigpO1xuICAgIGxldCBhbHBoYSA9IG9yaUNvbG9yJjB4ZmYwMDAwMDA7XG4gICAgdGhpcy5ncmFwaGljc09iamVjdC5TZXRTdHJva2VDb2xvcigoY29sb3J8YWxwaGEpPj4+MCk7XG4gICAgaWYocmVzZXRDb250ZW50KXtcbiAgICAgIHRoaXMuY19wYWdlLkdlbmVyYXRlQ29udGVudCgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy50b0pzb24oKTtcbiAgfVxuICBzZXRGaWxsQ29sb3IoY29sb3IscmVzZXRDb250ZW50PXRydWUpe1xuICAgIHRoaXMuZ3JhcGhpY3NPYmplY3QuU2V0RmlsbENvbG9yKChjb2xvcnwweGZmMDAwMDAwKT4+PjApO1xuICAgIGlmKHJlc2V0Q29udGVudCl7XG4gICAgICB0aGlzLmNfcGFnZS5HZW5lcmF0ZUNvbnRlbnQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudG9Kc29uKCk7XG4gIH1cbiAgc2V0T3BhY2l0eShvcGFjaXR5LHJlc2V0Q29udGVudD10cnVlKXtcbiAgICB0aGlzLmdyYXBoaWNzT2JqZWN0LlNldEZpbGxPcGFjaXR5KG9wYWNpdHkpO1xuICAgIHRoaXMuZ3JhcGhpY3NPYmplY3QuU2V0U3Ryb2tlT3BhY2l0eShvcGFjaXR5KTtcbiAgICBpZihyZXNldENvbnRlbnQpe1xuICAgICAgdGhpcy5jX3BhZ2UuR2VuZXJhdGVDb250ZW50KCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnRvSnNvbigpO1xuICB9XG4gIHJlbW92ZSgpe1xuICAgIHRoaXMuY19wYWdlLlJlbW92ZUdyYXBoaWNzT2JqZWN0KHRoaXMuZ3JhcGhpY3NPYmplY3QpO1xuICAgIHRoaXMuY19wYWdlLkdlbmVyYXRlQ29udGVudCgpO1xuICB9XG59IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGxpbmMgb24gMjAxOS80LzIzLlxuICovXG5pbXBvcnQgR3JhcGhpY3NPYmplY3QgZnJvbSAnLi9HcmFwaGljc09iamVjdCc7XG5pbXBvcnQgVGV4dE9iamVjdCBmcm9tIFwiLi9UZXh0T2JqZWN0XCI7XG5pbXBvcnQgUGF0aE9iamVjdCBmcm9tIFwiLi9QYXRoT2JqZWN0XCI7XG5pbXBvcnQgSW1hZ2VPYmplY3QgZnJvbSBcIi4vSW1hZ2VPYmplY3RcIjtcbmltcG9ydCBGb3JtWE9iamVjdCBmcm9tICcuL0Zvcm1YT2JqZWN0JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR3JhcGhpY3NPYmplY3RNYW5hZ2VyIHtcbiAgICBjb25zdHJ1Y3RvciAoZW5naW5lLGpyKSB7XG4gICAgICAgIHRoaXMuZW5naW5lID0gZW5naW5lO1xuICAgICAgICB0aGlzLmpyPWpyO1xuICAgIH1cbiAgICBnZXQgKG9iamVjdCwgY19wYWdlLCBwYWdlKSB7XG4gICAgICAgIGxldCBlbmdpbmUgPSB0aGlzLmVuZ2luZTtcbiAgICAgICAgbGV0IHR5cGVzID0gZW5naW5lLkdyYXBoaWNzT2JqZWN0VHlwZTtcbiAgICAgICAgc3dpdGNoIChvYmplY3QuR2V0VHlwZSgpKSB7XG4gICAgICAgICAgICBjYXNlIHR5cGVzLmVfVHlwZVRleHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBUZXh0T2JqZWN0KG9iamVjdCwgY19wYWdlLCBwYWdlLCBlbmdpbmUsdGhpcy5qcik7XG4gICAgICAgICAgICBjYXNlIHR5cGVzLmVfVHlwZVBhdGg6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQYXRoT2JqZWN0KG9iamVjdCwgY19wYWdlLCBwYWdlLCBlbmdpbmUsdGhpcy5qcik7XG4gICAgICAgICAgICBjYXNlIHR5cGVzLmVfVHlwZUltYWdlOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSW1hZ2VPYmplY3Qob2JqZWN0LCBjX3BhZ2UsIHBhZ2UsIGVuZ2luZSx0aGlzLmpyKTtcbiAgICAgICAgICAgIGNhc2UgdHlwZXMuZV9UeXBlRm9ybVhPYmplY3Q6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBGb3JtWE9iamVjdChvYmplY3QsIGNfcGFnZSwgcGFnZSwgZW5naW5lLHRoaXMuanIpO1xuICAgICAgICAgICAgZGVmYXVsdCA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBHcmFwaGljc09iamVjdChvYmplY3QsIGNfcGFnZSwgcGFnZSwgZW5naW5lLHRoaXMuanIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNyZWF0ZShpbmZvLCBjX3BhZ2UsIHBhZ2Upe1xuICAgICAgICBsZXQgZW5naW5lID0gdGhpcy5lbmdpbmU7XG4gICAgICAgIGxldCB0eXBlcyA9IGVuZ2luZS5HcmFwaGljc09iamVjdFR5cGU7XG4gICAgICAgIHN3aXRjaCAoaW5mby50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIHR5cGVzLmVfVHlwZVRleHQudmFsdWU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFRleHRPYmplY3QuY3JlYXRlKGluZm8sIGNfcGFnZSwgcGFnZSwgZW5naW5lLCB0aGlzKTtcbiAgICAgICAgICAgIGNhc2UgdHlwZXMuZV9UeXBlUGF0aC52YWx1ZTpcbiAgICAgICAgICAgICAgICByZXR1cm4gUGF0aE9iamVjdC5jcmVhdGUoaW5mbywgY19wYWdlLCBwYWdlLCBlbmdpbmUsIHRoaXMpO1xuICAgICAgICAgICAgY2FzZSB0eXBlcy5lX1R5cGVJbWFnZS52YWx1ZTpcbiAgICAgICAgICAgICAgICByZXR1cm4gSW1hZ2VPYmplY3QuY3JlYXRlKGluZm8sIGNfcGFnZSwgcGFnZSwgZW5naW5lLCB0aGlzKTtcbiAgICAgICAgICAgIGRlZmF1bHQgOlxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCBHcmFwaGljc09iamVjdCBmcm9tIFwiLi9HcmFwaGljc09iamVjdFwiO1xuaW1wb3J0IEltYWdlIGZyb20gXCIuLi9iYXNlL0ltYWdlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEltYWdlT2JqZWN0IGV4dGVuZHMgR3JhcGhpY3NPYmplY3R7XG4gICAgY29uc3RydWN0b3IoZ3JhcGhpY09iamVjdCxjX3BhZ2UscGFnZSxlbmdpbmUpe1xuICAgICAgICBzdXBlcihncmFwaGljT2JqZWN0LGNfcGFnZSxwYWdlLGVuZ2luZSk7XG4gICAgICAgIHRoaXMuaW1hZ2VPYmplY3QgPSBncmFwaGljT2JqZWN0LkdldEltYWdlT2JqZWN0KCk7XG4gICAgfVxuICAgIHNldFJvdGF0aW9uKHJvdGF0aW9uLHJlc2V0Q29udGVudD10cnVlKXtcbiAgICAgICAgbGV0IHJhZGlhbj1yb3RhdGlvbipNYXRoLlBJLzE4MDtcbiAgICAgICAgbGV0IG9yaVJlY3QgPSB0aGlzLmdyYXBoaWNzT2JqZWN0LkdldFJlY3QoKTtcbiAgICAgICAgbGV0IGNlbnRlcj17XG4gICAgICAgICAgICB4OihvcmlSZWN0LnJpZ2h0K29yaVJlY3QubGVmdCkvMixcbiAgICAgICAgICAgIHk6KG9yaVJlY3QudG9wK29yaVJlY3QuYm90dG9tKS8yXG4gICAgICAgIH07XG4gICAgICAgIGxldCBtID0gdGhpcy5ncmFwaGljc09iamVjdC5HZXRNYXRyaXgoKTtcbiAgICAgICAgbS5Sb3RhdGVBdCgtcmFkaWFuLC1jZW50ZXIueCwtY2VudGVyLnksMClcbiAgICAgICAgLy8gbS5UcmFuc2xhdGUoLWNlbnRlci54LC1jZW50ZXIueSwwKTtcbiAgICAgICAgLy8gbS5Sb3RhdGUoLXJhZGlhbiwwKTtcbiAgICAgICAgLy8gbS5UcmFuc2xhdGUoY2VudGVyLngsY2VudGVyLnksMCk7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3NPYmplY3QuU2V0TWF0cml4KG0pO1xuICAgICAgICB0aGlzLmNfcGFnZS5HZW5lcmF0ZUNvbnRlbnQoKTtcbiAgICAgICAgbS5kZWxldGUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9Kc29uKCk7XG4gICAgfVxuXG4gICAgc3RhdGljIGNyZWF0ZSAoaW5mbywgUGRmUGFnZSwgcGFnZSxlbmdpbmUsIGdyYXBoaWNzTWFuYWdlcikge1xuICAgICAgICBsZXQgaW1hZ2VPYmplY3QgPSBlbmdpbmUuSW1hZ2VPYmplY3QuQ3JlYXRlKHBhZ2UuZG9jKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCBpbWFnZT1JbWFnZS5jcmVhdGVJbWFnZShlbmdpbmUsaW5mby5idWZmZXIpO1xuICAgICAgICAgICAgaW1hZ2VPYmplY3QuU2V0SW1hZ2UoaW1hZ2UsMCk7XG4gICAgICAgICAgICBsZXQgbSA9IGltYWdlT2JqZWN0LkdldE1hdHJpeCgpO1xuICAgICAgICAgICAgY29uc3Qge2xlZnQscmlnaHQsdG9wLGJvdHRvbX09aW5mby5yZWN0O1xuICAgICAgICAgICAgbS5hPXJpZ2h0LWxlZnQ7XG4gICAgICAgICAgICBtLmQ9dG9wLWJvdHRvbTtcbiAgICAgICAgICAgIG0uVHJhbnNsYXRlKGxlZnQsYm90dG9tLDApO1xuICAgICAgICAgICAgaW1hZ2VPYmplY3QuU2V0TWF0cml4KG0pO1xuICAgICAgICAgICAgbGV0IHBvcyA9IFBkZlBhZ2UuR2V0TGFzdEdyYXBoaWNzT2JqZWN0UG9zaXRpb24gKFxuICAgICAgICAgICAgICAgIGVuZ2luZS5HcmFwaGljc09iamVjdFR5cGUuZV9UeXBlQWxsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgUGRmUGFnZS5JbnNlcnRHcmFwaGljc09iamVjdCAocG9zLCBpbWFnZU9iamVjdCk7XG5cbiAgICAgICAgICAgIFBkZlBhZ2UuR2VuZXJhdGVDb250ZW50ICgpO1xuXG4gICAgICAgICAgICBQZGZQYWdlLlN0YXJ0UGFyc2UgKDAsIG51bGwsIHRydWUpO1xuXG4gICAgICAgICAgICBwb3MgPSBQZGZQYWdlLkdldExhc3RHcmFwaGljc09iamVjdFBvc2l0aW9uIChcbiAgICAgICAgICAgICAgICBlbmdpbmUuR3JhcGhpY3NPYmplY3RUeXBlLmVfVHlwZUFsbFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGltYWdlT2JqZWN0ID0gUGRmUGFnZS5HZXRHcmFwaGljc09iamVjdChwb3MpO1xuICAgICAgICB9Y2F0Y2ggKGVycikge1xuICAgICAgICAgICAgaWYgKCFpc05hTiAoZXJyKSkge1xuICAgICAgICAgICAgICAgIGVyciA9IHRoaXMuZW5naW5lLmdldEVycm9yQ29kZSAoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnNvbGUud2FybiAoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ3JhcGhpY3NNYW5hZ2VyLmdldChpbWFnZU9iamVjdCwgUGRmUGFnZSwgcGFnZSk7XG4gICAgfVxufSIsImltcG9ydCBHcmFwaGljc09iamVjdCBmcm9tICcuL0dyYXBoaWNzT2JqZWN0JztcbmltcG9ydCBGb3JtWE9iamVjdCBmcm9tICcuL0Zvcm1YT2JqZWN0J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXRoT2JqZWN0IGV4dGVuZHMgR3JhcGhpY3NPYmplY3Qge1xuICBjb25zdHJ1Y3RvciAoZ3JhcGhpY09iamVjdCwgY19wYWdlLCBwYWdlLCBlbmdpbmUsanIpIHtcbiAgICBzdXBlciAoZ3JhcGhpY09iamVjdCwgY19wYWdlLCBwYWdlLCBlbmdpbmUsanIpO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIEdTREsuUGF0aE9iamVjdFxuICAgICAqL1xuICAgIHRoaXMuZ3JhcGhpY3NPYmplY3QgPSBncmFwaGljT2JqZWN0LkdldFBhdGhPYmplY3QgKCk7XG4gIH1cbiAgdG9Kc29uICgpIHtcbiAgICBsZXQgZ3JhcGhpY09iamVjdCA9IHRoaXMuZ3JhcGhpY3NPYmplY3Q7XG4gICAgbGV0IGJhc2VJbmZvID0gc3VwZXIudG9Kc29uICgpO1xuXG4gICAgbGV0IHBhdGggPSB0aGlzLmdyYXBoaWNzT2JqZWN0LkdldFBhdGhEYXRhICgpO1xuICAgIGxldCBudW1iZXIgPSBwYXRoLkdldFBvaW50Q291bnQgKCk7XG5cbiAgICBsZXQgcGF0aExpc3QgPSBbXTtcbiAgICBmb3IgKGxldCBwb2ludEluZGV4ID0gMDsgcG9pbnRJbmRleCA8IG51bWJlcjsgcG9pbnRJbmRleCsrKSB7XG4gICAgICBsZXQgcG9pbnQgPSBwYXRoLkdldFBvaW50IChwb2ludEluZGV4KTtcbiAgICAgIHBhdGhMaXN0LnB1c2ggKHtcbiAgICAgICAgeDogcG9pbnQueCxcbiAgICAgICAgeTogcG9pbnQueSxcbiAgICAgICAgdHlwZTogcGF0aC5HZXRQb2ludFR5cGUgKHBvaW50SW5kZXgpLnZhbHVlLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgbGV0IHBhdGhJbmZvID0ge1xuICAgICAgZmlsbE1vZGU6IGdyYXBoaWNPYmplY3QuR2V0RmlsbE1vZGUgKCkudmFsdWUsXG4gICAgICBzdHJva2VTdGF0ZTogZ3JhcGhpY09iamVjdC5HZXRTdHJva2VTdGF0ZSAoKSxcbiAgICAgIHBhdGg6IHBhdGhMaXN0LFxuICAgICAgbmVlZFN0cm9rZTogZ3JhcGhpY09iamVjdC5HZXRTdHJva2VTdGF0ZSAoKSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24gKHBhdGhJbmZvLCBiYXNlSW5mbyk7XG4gIH1cbiAgc2V0Qm9yZGVyQ29sb3IgKGNvbG9yKSB7XG4gICAgdGhpcy5ncmFwaGljc09iamVjdC5TZXRTdHJva2VTdGF0ZSAoY29sb3IgIT09IDApO1xuICAgIHN1cGVyLnNldEJvcmRlckNvbG9yIChjb2xvcik7XG4gIH1cbiAgc2V0RmlsbENvbG9yIChjb2xvciwgcmVzZXRDb250ZW50ID0gdHJ1ZSkge1xuICAgIGlmIChjb2xvciA9PT0gMCkge1xuICAgICAgdGhpcy5ncmFwaGljc09iamVjdC5TZXRGaWxsQ29sb3IgKDB4ZmYwMDAwMDAgPj4+IDApO1xuICAgICAgdGhpcy5ncmFwaGljc09iamVjdC5TZXRGaWxsTW9kZSAodGhpcy5lbmdpbmUuRmlsbE1vZGUuZV9GaWxsTW9kZU5vbmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmdyYXBoaWNzT2JqZWN0LlNldEZpbGxDb2xvciAoKGNvbG9yIHwgMHhmZjAwMDAwMCkgPj4+IDApO1xuICAgICAgdGhpcy5ncmFwaGljc09iamVjdC5TZXRGaWxsTW9kZSAodGhpcy5lbmdpbmUuRmlsbE1vZGUuZV9GaWxsTW9kZVdpbmRpbmcpO1xuICAgIH1cbiAgICBpZiAocmVzZXRDb250ZW50KSB7XG4gICAgICB0aGlzLmNfcGFnZS5HZW5lcmF0ZUNvbnRlbnQgKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnRvSnNvbiAoKTtcbiAgfVxuICBpc1BvaW50SW5MaW5lKHgseSx0b3JhbmNlID0gMyl7XG4gICAgbGV0IHBhdGggPSB0aGlzLmdyYXBoaWNzT2JqZWN0LkdldFBhdGhEYXRhICgpO1xuICAgIGxldCBudW1iZXIgPSBwYXRoLkdldFBvaW50Q291bnQgKCk7XG5cbiAgICBsZXQgc3RhcnRQb2ludDtcbiAgICBsZXQgY3VycmVudFBvaW50O1xuICAgIGxldCBlbmRQb2ludDtcblxuICAgIGxldCBkeCxkeSxwZXJjZW50YWdlO1xuXG4gICAgbGV0IG09dGhpcy5ncmFwaGljc09iamVjdC5HZXRNYXRyaXgoKTtcbiAgICBpZih0aGlzLnBhZ2UgaW5zdGFuY2VvZiBGb3JtWE9iamVjdCl7XG4gICAgICBsZXQgcGFyYW50TWF0cml4ID0gdGhpcy5wYWdlLmdyYXBoaWNzT2JqZWN0LkdldE1hdHJpeCgpO1xuICAgICAgcGFyYW50TWF0cml4LkNvbmNhdChtLmEsbS5iLG0uYyxtLmQsbS5lLG0uZixmYWxzZSk7XG4gICAgICBtLmRlbGV0ZSgpO1xuICAgICAgbT1wYXJhbnRNYXRyaXg7XG4gICAgfVxuXG5cbiAgICBsZXQgYmV6aWVyUG9pbnQ9W11cbiAgICBmb3IgKGxldCBwb2ludEluZGV4ID0gMDsgcG9pbnRJbmRleCA8IG51bWJlcjsgcG9pbnRJbmRleCsrKSB7XG4gICAgICBsZXQgcG9pbnQgPSBwYXRoLkdldFBvaW50IChwb2ludEluZGV4KTtcbiAgICAgIHBvaW50ID0gbS5UcmFuc2Zvcm1Qb2ludChwb2ludC54LHBvaW50LnkpXG4gICAgICBzd2l0Y2gocGF0aC5HZXRQb2ludFR5cGUocG9pbnRJbmRleCkudmFsdWUpe1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBjdXJyZW50UG9pbnQgPSBzdGFydFBvaW50PVtwb2ludC54LHBvaW50LnldO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6Ly9sXG4gICAgICAgICAgZW5kUG9pbnQgPSBbcG9pbnQueCxwb2ludC55XTtcbiAgICAgICAgICBkeCA9IGVuZFBvaW50WzBdLWN1cnJlbnRQb2ludFswXTtcbiAgICAgICAgICBkeSA9IGVuZFBvaW50WzFdLWN1cnJlbnRQb2ludFsxXTtcbiAgICAgICAgICBwZXJjZW50YWdlID0gTWF0aC5tYXgoTWF0aC5hYnMoZHgpLE1hdGguYWJzKGR5KSk7XG5cbiAgICAgICAgICBmb3IobGV0IGkgPTA7aTxwZXJjZW50YWdlO2krKyl7XG4gICAgICAgICAgICBsZXQgbGluZVBvaW50ID0gW2N1cnJlbnRQb2ludFswXStkeCppL3BlcmNlbnRhZ2UsY3VycmVudFBvaW50WzFdK2R5KmkvcGVyY2VudGFnZV07XG4gICAgICAgICAgICBpZihnZXRQb2ludHNMZW5ndGgoW3gseV0sbGluZVBvaW50KTx0b3JhbmNlKXtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIGN1cnJlbnRQb2ludCA9IGVuZFBvaW50XG4gICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6Ly9oXG4gICAgICAgICAgZHggPSBjdXJyZW50UG9pbnRbMF0tc3RhcnRQb2ludFswXTtcbiAgICAgICAgICBkeSA9IGN1cnJlbnRQb2ludFsxXS1zdGFydFBvaW50WzFdO1xuICAgICAgICAgIHBlcmNlbnRhZ2UgPSBNYXRoLm1heChNYXRoLmFicyhkeCksTWF0aC5hYnMoZHkpKTtcblxuICAgICAgICAgIGZvcihsZXQgaSA9MDtpPHBlcmNlbnRhZ2U7aSsrKXtcbiAgICAgICAgICAgIGxldCBsaW5lUG9pbnQgPSBbc3RhcnRQb2ludFswXStkeCppL3BlcmNlbnRhZ2Usc3RhcnRQb2ludFsxXStkeSppL3BlcmNlbnRhZ2VdO1xuICAgICAgICAgICAgaWYoZ2V0UG9pbnRzTGVuZ3RoKFt4LHldLGxpbmVQb2ludCk8dG9yYW5jZSl7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBzdGFydFBvaW50ID0gY3VycmVudFBvaW50PVtdO1xuICAgICAgICBjYXNlIDQ6Ly9jXG4gICAgICAgIGNhc2UgNTovLyBjIGhcbiAgICAgICAgICBsZXQgcCA9IFtwb2ludC54LHBvaW50LnldO1xuICAgICAgICAgIGJlemllclBvaW50LnB1c2gocCk7XG5cbiAgICAgICAgICBwZXJjZW50YWdlID0gTWF0aC5jZWlsKE1hdGgubWF4KE1hdGguYWJzKHBvaW50LngtY3VycmVudFBvaW50WzBdKSxNYXRoLmFicyhwb2ludC55LWN1cnJlbnRQb2ludFsxXSkpKTtcbiAgICAgICAgICBpZihiZXppZXJQb2ludC5sZW5ndGggPT0gMyl7XG4gICAgICAgICAgICBmb3IobGV0IGkgPTA7aTxwZXJjZW50YWdlO2krKyl7XG4gICAgICAgICAgICAgIGxldCBiZXppZXJQID0gY2FsY3VsYXRlQmV6aWVyUG9pbnRGb3JDdWJpYyhpL3BlcmNlbnRhZ2UsY3VycmVudFBvaW50LGJlemllclBvaW50WzBdLGJlemllclBvaW50WzFdLGJlemllclBvaW50WzJdKVxuXG4gICAgICAgICAgICAgIGlmKGdldFBvaW50c0xlbmd0aChbeCx5XSxiZXppZXJQKTx0b3JhbmNlKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYmV6aWVyUG9pbnQ9W11cbiAgICAgICAgICAgIGN1cnJlbnRQb2ludCA9IHA7XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBcbiAgICogQHBhcmFtIHsqfSBpbmZvIFxuICAgKiBAcGFyYW0ge0dTREsuUERGUGFnZX0gUGRmUGFnZVxuICAgKiBAcGFyYW0ge0dTREt9IGVuZ2luZSBcbiAgICovXG4gIHN0YXRpYyBjcmVhdGUgKGluZm8sIFBkZlBhZ2UsIHBhZ2UsIGVuZ2luZSwgZ3JhcGhpY3NNYW5hZ2VyKSB7XG4gICAgLyoqXG4gICAgICogQHR5cGUgR1NESy5QYXRoT2JqZWN0XG4gICAgICovXG4gICAgbGV0IHBhdGhPYmplY3QgPSBlbmdpbmUuUGF0aE9iamVjdC5DcmVhdGUgKCk7XG4gICAgdHJ5IHtcbiAgICAgIGxldCBwYXRoRGF0YSA9IG5ldyBlbmdpbmUuUGF0aCAoKTtcblxuICAgICAgbGV0IGJlemllclBvaW50cyA9IFtdO1xuICAgICAgZm9yIChsZXQgcG9pbnQgb2YgaW5mby5wb2ludHMpIHtcbiAgICAgICAgc3dpdGNoIChwb2ludFswXSkge1xuICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgcGF0aERhdGEuTW92ZVRvIChuZXcgZW5naW5lLlBvaW50RiAocG9pbnRbMV0sIHBvaW50WzJdKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdsJzpcbiAgICAgICAgICAgIHBhdGhEYXRhLkxpbmVUbyAobmV3IGVuZ2luZS5Qb2ludEYgKHBvaW50WzFdLCBwb2ludFsyXSkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnYyc6XG4gICAgICAgICAgICBiZXppZXJQb2ludHMucHVzaCAobmV3IGVuZ2luZS5Qb2ludEYgKHBvaW50WzFdLCBwb2ludFsyXSkpO1xuICAgICAgICAgICAgaWYgKGJlemllclBvaW50cy5sZW5ndGggPT0gMykge1xuICAgICAgICAgICAgICBwYXRoRGF0YS5DdWJpY0JlemllclRvIChcbiAgICAgICAgICAgICAgICBiZXppZXJQb2ludHNbMF0sXG4gICAgICAgICAgICAgICAgYmV6aWVyUG9pbnRzWzFdLFxuICAgICAgICAgICAgICAgIGJlemllclBvaW50c1syXVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBiZXppZXJQb2ludHMubGVuZ3RoID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgcGF0aERhdGEuQ2xvc2VGaWd1cmUgKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBwYXRoT2JqZWN0LlNldFBhdGhEYXRhIChwYXRoRGF0YSk7XG4gICAgICBwYXRoT2JqZWN0LlNldFN0cm9rZUNvbG9yICgweGZmMDAwMDAwKTtcblxuICAgICAgbGV0IGdyYXBoaWNTdGF0ZSA9IHBhdGhPYmplY3QuR2V0R3JhcGhTdGF0ZSAoKTtcbiAgICAgIGdyYXBoaWNTdGF0ZS5saW5lX3dpZHRoID0gaW5mby5ib3JkZXJXaWR0aCB8fCAxO1xuXG4gICAgICBwYXRoT2JqZWN0LlNldEdyYXBoU3RhdGUgKGdyYXBoaWNTdGF0ZSk7XG5cbiAgICAgIGxldCBwb3MgPSBQZGZQYWdlLkdldExhc3RHcmFwaGljc09iamVjdFBvc2l0aW9uIChcbiAgICAgICAgZW5naW5lLkdyYXBoaWNzT2JqZWN0VHlwZS5lX1R5cGVBbGxcbiAgICAgICk7XG4gICAgICBQZGZQYWdlLkluc2VydEdyYXBoaWNzT2JqZWN0IChwb3MsIHBhdGhPYmplY3QpO1xuXG4gICAgICBQZGZQYWdlLkdlbmVyYXRlQ29udGVudCAoKTtcblxuICAgICAgUGRmUGFnZS5TdGFydFBhcnNlICgwLCBudWxsLCB0cnVlKTtcblxuICAgICAgcG9zID0gUGRmUGFnZS5HZXRMYXN0R3JhcGhpY3NPYmplY3RQb3NpdGlvbiAoXG4gICAgICAgIGVuZ2luZS5HcmFwaGljc09iamVjdFR5cGUuZV9UeXBlQWxsXG4gICAgICApO1xuXG4gICAgICBwYXRoT2JqZWN0ID0gUGRmUGFnZS5HZXRHcmFwaGljc09iamVjdChwb3MpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKCFpc05hTiAoZXJyKSkge1xuICAgICAgICBlcnIgPSB0aGlzLmVuZ2luZS5nZXRFcnJvckNvZGUgKGVycik7XG4gICAgICB9XG4gICAgICBjb25zb2xlLndhcm4gKGVycik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdyYXBoaWNzTWFuYWdlci5nZXQocGF0aE9iamVjdCwgUGRmUGFnZSwgcGFnZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzUG9pbnRJbkxpbmUoc3RhcnRQb2ludCxlbmRQb2ludCx4LHksdG9yYW5jZSl7XG4gIGxldCBsZWZ0ID0gTWF0aC5taW4oc3RhcnRQb2ludFswXSxlbmRQb2ludFswXSktdG9yYW5jZTtcbiAgbGV0IHJpZ2h0ID0gTWF0aC5tYXgoc3RhcnRQb2ludFswXSxlbmRQb2ludFswXSkrdG9yYW5jZTtcbiAgbGV0IHRvcCA9IE1hdGgubWF4KHN0YXJ0UG9pbnRbMV0sZW5kUG9pbnRbMV0pK3RvcmFuY2U7XG4gIGxldCBib3R0b20gPSBNYXRoLm1pbihzdGFydFBvaW50WzBdLGVuZFBvaW50WzBdKS10b3JhbmNlO1xuXG4gIHJldHVybiB4PmxlZnQmJng8cmlnaHQgJiZ5PmJvdHRvbSYmeTx0b3A7XG59XG5mdW5jdGlvbiBnZXRQb2ludHNMZW5ndGgocDEscDIpe1xuICBsZXQgZHkgPSBwMlsxXS1wMVsxXTtcbiAgbGV0IGR4ID0gcDJbMF0tcDFbMF1cbiAgcmV0dXJuIE1hdGguc3FydChkeCpkeCtkeSpkeSk7XG59XG5mdW5jdGlvbiBjYWxjdWxhdGVCZXppZXJQb2ludEZvckN1YmljICh0LCBwMCwgcDEsIHAyLCBwMykge1xuICB2YXIgcG9pbnQgPSBbMSwxXTtcbiAgdmFyIHRlbXAgPSAxIC0gdDtcbiAgcG9pbnRbMF0gPSBwMFswXSAqIHRlbXAgKiB0ZW1wICogdGVtcCArIDMgKiBwMVswXSAqIHQgKiB0ZW1wICogdGVtcCArIDMgKiBwMlswXSAqIHQgKiB0ICogdGVtcCArIHAzWzBdICogdCAqIHQgKiB0O1xuICBwb2ludFsxXSA9IHAwWzFdICogdGVtcCAqIHRlbXAgKiB0ZW1wICsgMyAqIHAxWzFdICogdCAqIHRlbXAgKiB0ZW1wICsgMyAqIHAyWzFdICogdCAqIHQgKiB0ZW1wICsgcDNbMV0gKiB0ICogdCAqIHQ7XG4gIHJldHVybiBwb2ludDtcbn0iLCJpbXBvcnQgR3JhcGhpY3NPYmplY3QgZnJvbSAnLi9HcmFwaGljc09iamVjdCc7XG5pbXBvcnQgUERGRm9udE1nciBmcm9tICcuLi9QREZGb250TWdyJztcbmltcG9ydCBGb250RW51bXMgZnJvbSAnLi4vZ2V0VGhpcmRQYXJ0eUZvbnRCdWZmZXInO1xuXG5jbGFzcyBUZXh0T2JqZWN0IGV4dGVuZHMgR3JhcGhpY3NPYmplY3Qge1xuICBjb25zdHJ1Y3RvciAoZ3JhcGhpY09iamVjdCwgY19wYWdlLCBwYWdlLCBlbmdpbmUsIGpyKSB7XG4gICAgc3VwZXIgKGdyYXBoaWNPYmplY3QsIGNfcGFnZSwgcGFnZSwgZW5naW5lKTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSBHU0RLLlRleHRPYmplY3RcbiAgICAgKi9cbiAgICB0aGlzLmdyYXBoaWNzT2JqZWN0ID0gZ3JhcGhpY09iamVjdC5HZXRUZXh0T2JqZWN0ICgpO1xuICAgIHRoaXMuanIgPSBqcjtcbiAgfVxuICAgIHN0YXRpYyBjcmVhdGUgKGluZm8sIGNfcGFnZSwgcGFnZSwgZW5naW5lLCBncmFwaGljc09iamVjdE1hbmFnZXIpIHtcbiAgICAgICAgbGV0IHRleHRPYmplY3QgPSBlbmdpbmUuVGV4dE9iamVjdC5DcmVhdGUoKTtcbiAgICAgICAgLy8gcGRm55qE5bem5LiK6KeSXG4gICAgICAgIGxldCBvcmlnaW5Qb3NpdGlvbiA9IGluZm8ub3JpZ2luUG9zaXRpb247XG4gICAgICAgIGlmICghb3JpZ2luUG9zaXRpb24pIHtcbiAgICAgICAgICAgIHRocm93ICdvcmlnaW5Qb3NpdGlvbiBpcyByZXF1aXJlZCc7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGxlZnQgPSBvcmlnaW5Qb3NpdGlvbi54O1xuICAgICAgICBsZXQgYm90dG9tID0gb3JpZ2luUG9zaXRpb24ueTtcbiAgICAgICAgbGV0IGNoYXJzcGFjZSA9IGluZm8uY2hhcnNwYWNlIHx8IDA7XG4gICAgICAgIGxldCB3b3Jkc3BhY2UgPSBpbmZvLndvcmRzcGFjZSB8fCAwO1xuICAgICAgICBsZXQgZm9udFNpemUgPSBpbmZvLmZvbnRTaXplIHx8IDEyO1xuICAgICAgICBsZXQgdGV4dG1hdHJpeCA9IGluZm8udGV4dG1hdHJpeCB8fCBbMSwgMCwgMCwgMV07XG4gICAgICAgIGxldCB0ZXh0bW9kZSA9IGVuZ2luZS5Nb2RlLnZhbHVlc1tpbmZvLnRleHRtb2RlIHx8IDBdO1xuICAgICAgICBsZXQgZm9udDtcbiAgICAgICAgaWYgKGluZm8uZm9udCkge1xuICAgICAgICAgICAgbGV0IGZvbnRJbmZvID0gaW5mby5mb250O1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBmb250SW5mby5zdGFuZGFyZElkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGZvbnQgPSBuZXcgZW5naW5lLkZvbnQoZW5naW5lLlN0YW5kYXJkSUQudmFsdWVzW2ZvbnRJbmZvLnN0YW5kYXJkSWRdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9udCA9IG5ldyBlbmdpbmUuRm9udChuZXcgZW5naW5lLldTdHJpbmcoZm9udEluZm8ubmFtZSksIGZvbnRJbmZvLnN0eWxlcywgZW5naW5lLkNoYXJzZXQudmFsdWVzW2ZvbnRJbmZvLmNoYXJzZXQgPT0gMSA/IDAgOiBmb250SW5mby5jaGFyc2V0XSwgZm9udEluZm8ud2VpZ2h0IHx8IDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9udCA9IG5ldyBlbmdpbmUuRm9udChuZXcgZW5naW5lLldTdHJpbmcoJ0ZveGl0U2Fuc09URicpLCA0NTg4NjMsIGVuZ2luZS5DaGFyc2V0LmVfQ2hhcnNldEFOU0ksIDQwMCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHRleHRTdGF0ZSA9IHRleHRPYmplY3QuR2V0VGV4dFN0YXRlKGNfcGFnZSk7XG4gICAgICAgIHRleHRTdGF0ZS5mb250ID0gZm9udDtcbiAgICAgICAgdGV4dFN0YXRlLmZvbnRfc2l6ZSA9IGZvbnRTaXplO1xuICAgICAgICB0ZXh0U3RhdGUuY2hhcnNwYWNlID0gY2hhcnNwYWNlO1xuICAgICAgICB0ZXh0U3RhdGUud29yZHNwYWNlID0gd29yZHNwYWNlO1xuICAgICAgICB0ZXh0U3RhdGUudGV4dG1vZGUgPSB0ZXh0bW9kZTtcbiAgICAgICAgdGV4dFN0YXRlLm9yaWdpbl9wb3NpdGlvbiA9IG5ldyBlbmdpbmUuUG9pbnRGKGxlZnQsIGJvdHRvbSk7XG4gICAgICAgIHRleHRTdGF0ZS50ZXh0bWF0cml4ID0gdGV4dG1hdHJpeDtcbiAgICAgICAgLy9sZXQgdGV4dFN0YXRlID0gbmV3IGVuZ2luZS5UZXh0U3RhdGUoMSwgZm9udCwgZm9udFNpemUsIGNoYXJzcGFjZSwgd29yZHNwYWNlLCB0ZXh0bW9kZSwgbmV3IGVuZ2luZS5Qb2ludEYobGVmdCwgYm90dG9tKSwgdGV4dG1hdHJpeClcbiAgICAgICAgdGV4dE9iamVjdC5TZXRUZXh0U3RhdGUoY19wYWdlLCB0ZXh0U3RhdGUsICEhaW5mby5pdGFsaWMsIGluZm8ud2VpZ2h0IHx8IDQwMCk7XG4gICAgICAgIC8vaWYgKGluZm8udGV4dCkge1xuICAgICAgICAgICAgdGV4dE9iamVjdC5TZXRUZXh0KG5ldyBlbmdpbmUuV1N0cmluZyhpbmZvLnRleHR8fCcnKSk7XG4gICAgICAgIC8vfVxuICAgICAgICBpZiAoaW5mby5maWxsQ29sb3IpIHtcbiAgICAgICAgICAgIHRleHRPYmplY3QuU2V0RmlsbENvbG9yKChpbmZvLmZpbGxDb2xvcnwweGZmMDAwMDAwKT4+PjApO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHBvcyA9IGNfcGFnZS5HZXRMYXN0R3JhcGhpY3NPYmplY3RQb3NpdGlvbiAoXG4gICAgICAgICAgICBlbmdpbmUuR3JhcGhpY3NPYmplY3RUeXBlLmVfVHlwZUFsbFxuICAgICAgICApO1xuICAgICAgICBjX3BhZ2UuSW5zZXJ0R3JhcGhpY3NPYmplY3QgKHBvcywgdGV4dE9iamVjdCk7XG4gICAgICAgIGNfcGFnZS5HZW5lcmF0ZUNvbnRlbnQoKTtcbiAgICAgICAgLy9yZXR1cm4gcGFnZS5yZVBhcnNlUGFnZSgpLnRoZW4oKGNfcGFnZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGdyYXBoaWNzT2JqZWN0TWFuYWdlci5nZXQodGV4dE9iamVjdCwgY19wYWdlLCBwYWdlKTtcbiAgICAgICAgLy99KTtcbiAgICB9XG4gIHRvSnNvbiAoKSB7XG4gICAgbGV0IGJhc2VJbmZvID0gc3VwZXIudG9Kc29uICgpO1xuICAgIGxldCB0ZXh0SW5mbyA9IHt9O1xuICAgICAgbGV0IGVuZ2luZSA9IHRoaXMuZW5naW5lO1xuICAgICAgbGV0IGNfcGFnZSA9IHRoaXMuY19wYWdlO1xuICAgICAgbGV0IGNfZG9jID0gY19wYWdlLkdldERvY3VtZW50KCk7XG4gICAgbGV0IHRleHRTdGF0ZSA9IHRoaXMuZ3JhcGhpY3NPYmplY3QuR2V0VGV4dFN0YXRlIChjX3BhZ2UpO1xuICAgIGxldCBmb250ID0gdGV4dFN0YXRlLmZvbnQ7XG4gICAgICBsZXQgZm9udEpzb24gPSB7fTtcbiAgICAgIGlmICghZm9udC5Jc0VtcHR5KCkpIHtcbiAgICAgICAgICBmb250SnNvbi5uYW1lID0gZm9udC5HZXROYW1lKCkudG9TdHJpbmcoKTtcbiAgICAgICAgICBsZXQgZmFtaWx5TmFtZSA9IGZvbnQuR2V0RmFtaWx5TmFtZSgpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgZm9udEpzb24uZmFtaWx5TmFtZSA9IGZhbWlseU5hbWU7XG4gICAgICAgICAgbGV0IGJhc2VOYW1lID0gZm9udEpzb24uYmFzZU5hbWUgPSBmb250LkdldEJhc2VGb250TmFtZShjX2RvYykudG9TdHJpbmcoKTtcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKCdmYW1pbHlOYW1lJywgZmFtaWx5TmFtZSlcbiAgICAgICAgICBmb250SnNvbi5hc2NlbnQgPSBmb250LkdldEFzY2VudCgpO1xuICAgICAgICAgIGZvbnRKc29uLmRlc2NlbnQgPSBmb250LkdldERlc2NlbnQoKTtcbiAgICAgICAgICBmb250SnNvbi5pc0l0YWxpYyA9IGZvbnQuSXNJdGFsaWMoKTtcbiAgICAgICAgICBsZXQgaXNCb2xkID0gZm9udEpzb24uaXNCb2xkID0gZm9udC5Jc0JvbGQoKTtcbiAgICAgICAgICBsZXQgd2VpZ2h0ID0gaXNCb2xkID8gNzAwIDogNDAwO1xuICAgICAgICAgIGxldCBuYW1lS2V5O1xuXG4gICAgICAgICAgbGV0IHN0eWxlcyA9IGZvbnRKc29uLnN0eWxlcyA9IGZvbnQuR2V0U3R5bGVzKGNfZG9jKTtcbiAgICAgICAgICBsZXQgY2hhcnNldCA9IGVuZ2luZS5DaGFyc2V0LmVfQ2hhcnNldERlZmF1bHQudmFsdWU7XG4gICAgICAgICAgaWYgKGZvbnQuR2V0Rm9udFR5cGUoY19kb2MpID09IGVuZ2luZS5Gb250VHlwZXMuZV9Gb250VHlwZUNJREZvbnQpIHtcbiAgICAgICAgICAgICAgY2hhcnNldCA9IGZvbnQuR2V0Q2hhcnNldChjX2RvYyk7O1xuICAgICAgICAgICAgICAvLyBmb250LkdldENoYXJzZXQoY19kb2MpIOWAvOi/lOWbnueahOS4jeWvuVxuICAgICAgICAgICAgICBpZiAoY2hhcnNldCA9PT0gZW5naW5lLkNoYXJzZXQuZV9DaGFyc2V0RGVmYXVsdCkge1xuICAgICAgICAgICAgICAgICAgY2hhcnNldCA9IGVuZ2luZS5DaGFyc2V0LnZhbHVlc1tGb250RW51bXMuZ2V0Q2hhcnNldEZyb21OYW1lKGZvbnQuR2V0QmFzZUZvbnROYW1lKGNfZG9jKS50b1N0cmluZygpKV1cbiAgICAgICAgICAgICAgICAgIGlmICghY2hhcnNldCkge1xuICAgICAgICAgICAgICAgICAgICAgIGNoYXJzZXQgPSBlbmdpbmUuQ2hhcnNldC5lX0NoYXJzZXRBTlNJO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNoYXJzZXQgPSBjaGFyc2V0LnZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmb250SnNvbi5jaGFyc2V0ID0gY2hhcnNldDtcbiAgICAgICAgICBpZiAoZm9udC5Jc0VtYmVkZGVkIChjX2RvYykpIHtcbiAgICAgICAgICAgICAgZm9udEpzb24uaXNFbWJlZGRlZCA9IHRydWU7XG4gICAgICAgICAgICAgIGZvbnRKc29uLm5hbWVLZXkgPSAnZnZfJyArIHRoaXMuaWQ7XG4gICAgICAgICAgfSBlbHNlIGlmIChmb250LklzU3RhbmRhcmRGb250KGNfZG9jKSkge1xuICAgICAgICAgICAgICBmb250SnNvbi5pc1N0YW5kYXJkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgZm9udEpzb24uc3RhbmRhcmRJZCA9IGZvbnQuR2V0U3RhbmRhcmQxNEZvbnQoY19kb2MpLnZhbHVlO1xuICAgICAgICAgICAgICBpZiAobmFtZUtleSA9IEZvbnRFbnVtcy5nZXRGb250TWF0Y2goYmFzZU5hbWUsIGNoYXJzZXQsIDAsIHdlaWdodCwgc3R5bGVzKSkge1xuICAgICAgICAgICAgICAgICAgbmFtZUtleSA9ICdmdl8nICsgbmFtZUtleS5yZXBsYWNlKC9cXC4vZywgJ18nKTtcbiAgICAgICAgICAgICAgICAgIGZvbnRKc29uLm5hbWVLZXkgPSBuYW1lS2V5O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChuYW1lS2V5ID0gRm9udEVudW1zLmdldEZvbnRNYXRjaChiYXNlTmFtZSwgY2hhcnNldCwgMCwgd2VpZ2h0LCBzdHlsZXMpKSB7XG4gICAgICAgICAgICAgIG5hbWVLZXkgPSAnZnZfJyArIG5hbWVLZXkucmVwbGFjZSgvXFwuL2csICdfJyk7XG4gICAgICAgICAgICAgIGZvbnRKc29uLm5hbWVLZXkgPSBuYW1lS2V5O1xuICAgICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgICAvL2Jhc2VJbmZvLmZvbnR1cmwgPSBQREZGb250TWdyLmFkZEZvbnQoZm9udC5HZXRXb2ZmRGF0YSh0aGlzLmNfcGFnZS5HZXREb2N1bWVudCgpKSwgdGhpcy5lbmdpbmUpO1xuICAgIHRleHRJbmZvLnRleHRTdGF0ZSA9IHtcbiAgICAgIHRleHQ6IHRoaXMuZ3JhcGhpY3NPYmplY3QuR2V0VGV4dCAoKS50b1N0cmluZyAoKSxcbiAgICAgIGNoYXJTcGFjZTogdGV4dFN0YXRlLmNoYXJzcGFjZSxcbiAgICAgIGZvbnQ6IGZvbnRKc29uLFxuICAgICAgc2l6ZTogdGV4dFN0YXRlLmZvbnRfc2l6ZSxcbiAgICAgIHBvc2l0aW9uOiB7XG4gICAgICAgIHg6IHRleHRTdGF0ZS5vcmlnaW5fcG9zaXRpb24ueCxcbiAgICAgICAgeTogdGV4dFN0YXRlLm9yaWdpbl9wb3NpdGlvbi55LFxuICAgICAgfSxcbiAgICAgIC8vIG1hdHJpeDpbXG4gICAgICAvLyAgIHRleHRTdGF0ZS50ZXh0bWF0cml4WzBdLFxuICAgICAgLy8gICB0ZXh0U3RhdGUudGV4dG1hdHJpeFsxXSxcbiAgICAgIC8vICAgdGV4dFN0YXRlLnRleHRtYXRyaXhbMl0sXG4gICAgICAvLyAgIHRleHRTdGF0ZS50ZXh0bWF0cml4WzNdLFxuICAgICAgLy8gXSxcbiAgICAgIG1hdHJpeDogW1xuICAgICAgICB0ZXh0U3RhdGUuR2V0TWF0cml4QSAoKSxcbiAgICAgICAgdGV4dFN0YXRlLkdldE1hdHJpeEIgKCksXG4gICAgICAgIHRleHRTdGF0ZS5HZXRNYXRyaXhDICgpLFxuICAgICAgICB0ZXh0U3RhdGUuR2V0TWF0cml4RCAoKSxcbiAgICAgIF0sXG4gICAgICBtb2RlOiB0ZXh0U3RhdGUudGV4dG1vZGUudmFsdWUsXG4gICAgICB3b3JkU3BhY2U6IHRleHRTdGF0ZS53b3Jkc3BhY2UsXG4gICAgfTtcblxuICAgIHJldHVybiBPYmplY3QuYXNzaWduICh7fSwgYmFzZUluZm8sIHRleHRJbmZvKTtcbiAgfVxuICAgIHNldFRleHQgKGNoYXIpIHtcbiAgICAgICAgbGV0IGNfcGFnZSA9IHRoaXMuY19wYWdlO1xuICAgICAgICBsZXQgZ3JhcGhpY3NPYmplY3QgPSB0aGlzLmdyYXBoaWNzT2JqZWN0O1xuICAgICAgICBsZXQgdGV4dFN0YXRlID0gZ3JhcGhpY3NPYmplY3QuR2V0VGV4dFN0YXRlKGNfcGFnZSk7XG4gICAgICAgIGxldCBmb250ID0gdGV4dFN0YXRlLmZvbnQ7XG4gICAgICAgIGdyYXBoaWNzT2JqZWN0LlNldFRleHQobmV3IHRoaXMuZW5naW5lLldTdHJpbmcoY2hhcikpO1xuICAgICAgICAvL2lmICghZm9udC5Jc0VtcHR5KCkpIHtcbiAgICAgICAgLy8gICAgbGV0IGlzSXRhbGljID0gZm9udC5Jc0VtcHR5KCkgPyBmYWxzZSA6IGZvbnQuSXNJdGFsaWMoKTtcbiAgICAgICAgLy8gICAgbGV0IHdlaWdodCA9IGZvbnQuSXNFbXB0eSgpID8gNDAwIDogKGZvbnQuSXNCb2xkKCkgPyA3MDAgOiA0MDApO1xuICAgICAgICAvLyAgICBmb250ID0gbmV3IHRoaXMuZW5naW5lLkZvbnQoZm9udC5HZXROYW1lKCksIHRoaXMuZW5naW5lLlN0eWxlcy5lX1N0eWxlU2VyaWYudmFsdWUsIHRoaXMuZW5naW5lLkNoYXJzZXQuZV9DaGFyc2V0R0IyMzEyLnZhbHVlLCA0MDApO1xuICAgICAgICAvLyAgICB0ZXh0U3RhdGUuZm9udCA9IGZvbnQ7XG4gICAgICAgIC8vICAgIGdyYXBoaWNzT2JqZWN0LlNldFRleHRTdGF0ZShjX3BhZ2UsIHRleHRTdGF0ZSwgaXNJdGFsaWMsIHdlaWdodCk7XG4gICAgICAgIC8vfVxuICAgICAgICB0aGlzLmNfcGFnZS5HZW5lcmF0ZUNvbnRlbnQoKVxuICAgICAgICByZXR1cm4gdGhpcy5yZVBhcnNlUGFnZSgpO1xuICAgIH1cbiAgICBzZXRJdGFsaWMgKGl0YWxpYykge1xuICAgICAgICBsZXQgY19wYWdlID0gdGhpcy5jX3BhZ2U7XG4gICAgICAgIGxldCBjX2RvYyA9IGNfcGFnZS5HZXREb2N1bWVudCgpO1xuICAgICAgICBsZXQgZ3JhcGhpY3NPYmplY3QgPSB0aGlzLmdyYXBoaWNzT2JqZWN0O1xuICAgICAgICBsZXQgZW5naW5lID0gdGhpcy5lbmdpbmU7XG4gICAgICAgIGxldCB0ZXh0U3RhdGUgPSBncmFwaGljc09iamVjdC5HZXRUZXh0U3RhdGUgKGNfcGFnZSk7XG4gICAgICAgIGxldCBmb250ID0gdGV4dFN0YXRlLmZvbnQ7XG4gICAgICAgIGxldCBuZXdGb250O1xuICAgICAgICBpZiAoZm9udC5Jc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgfSBlbHNlIGlmIChmb250LklzU3RhbmRhcmRGb250KGNfZG9jKSkge1xuICAgICAgICAgICAgbGV0IHN0YW5kYXJkSWQgPSBmb250LkdldFN0YW5kYXJkMTRGb250KGNfZG9jKTtcbiAgICAgICAgICAgIGxldCBuZXdTdGFuZGFyZElkO1xuICAgICAgICAgICAgaWYgKGl0YWxpYykge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoc3RhbmRhcmRJZCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIGVuZ2luZS5TdGFuZGFyZElELmVfU3RkSURDb3VyaWVyOlxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3U3RhbmRhcmRJZCA9IGVuZ2luZS5TdGFuZGFyZElELmVfU3RkSURDb3VyaWVySTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIGVuZ2luZS5TdGFuZGFyZElELmVfU3RkSURDb3VyaWVyQjpcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1N0YW5kYXJkSWQgPSBlbmdpbmUuU3RhbmRhcmRJRC5lX1N0ZElEQ291cmllckJJO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgZW5naW5lLlN0YW5kYXJkSUQuZV9TdGRJREhlbHZldGljYTpcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1N0YW5kYXJkSWQgPSBlbmdpbmUuU3RhbmRhcmRJRC5lX1N0ZElESGVsdmV0aWNhSTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIGVuZ2luZS5TdGFuZGFyZElELmVfU3RkSURIZWx2ZXRpY2FCOlxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3U3RhbmRhcmRJZCA9IGVuZ2luZS5TdGFuZGFyZElELmVfU3RkSURIZWx2ZXRpY2FCSTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIGVuZ2luZS5TdGFuZGFyZElELmVfU3RkSURUaW1lczpcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1N0YW5kYXJkSWQgPSBlbmdpbmUuU3RhbmRhcmRJRC5lX1N0ZElEVGltZXNJO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgZW5naW5lLlN0YW5kYXJkSUQuZV9TdGRJRFRpbWVzQjpcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1N0YW5kYXJkSWQgPSBlbmdpbmUuU3RhbmRhcmRJRC5lX1N0ZElEVGltZXNCSTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChzdGFuZGFyZElkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgZW5naW5lLlN0YW5kYXJkSUQuZV9TdGRJRENvdXJpZXJJOlxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3U3RhbmRhcmRJZCA9IGVuZ2luZS5TdGFuZGFyZElELmVfU3RkSURDb3VyaWVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgZW5naW5lLlN0YW5kYXJkSUQuZV9TdGRJRENvdXJpZXJCSTpcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1N0YW5kYXJkSWQgPSBlbmdpbmUuU3RhbmRhcmRJRC5lX1N0ZElEQ291cmllckI7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBlbmdpbmUuU3RhbmRhcmRJRC5lX1N0ZElESGVsdmV0aWNhSTpcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1N0YW5kYXJkSWQgPSBlbmdpbmUuU3RhbmRhcmRJRC5lX1N0ZElESGVsdmV0aWNhO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgZW5naW5lLlN0YW5kYXJkSUQuZV9TdGRJREhlbHZldGljYUJJOlxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3U3RhbmRhcmRJZCA9IGVuZ2luZS5TdGFuZGFyZElELmVfU3RkSURIZWx2ZXRpY2FCO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgZW5naW5lLlN0YW5kYXJkSUQuZV9TdGRJRFRpbWVzSTpcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1N0YW5kYXJkSWQgPSBlbmdpbmUuU3RhbmRhcmRJRC5lX1N0ZElEVGltZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBlbmdpbmUuU3RhbmRhcmRJRC5lX1N0ZElEVGltZXNCSTpcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1N0YW5kYXJkSWQgPSBlbmdpbmUuU3RhbmRhcmRJRC5lX1N0ZElEVGltZXNCO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5ld1N0YW5kYXJkSWQpIHtcbiAgICAgICAgICAgICAgICBuZXdGb250ID0gbmV3IGVuZ2luZS5Gb250KG5ld1N0YW5kYXJkSWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IHN0eWxlcyA9IGZvbnQuR2V0U3R5bGVzKGNfZG9jKTtcbiAgICAgICAgICAgIGxldCBzdHlsZUl0YWxpYyA9IGVuZ2luZS5TdHlsZXMuZV9TdHlsZUl0YWxpYy52YWx1ZTtcbiAgICAgICAgICAgIGlmIChpdGFsaWMpIHtcbiAgICAgICAgICAgICAgICBzdHlsZXMgfD0gc3R5bGVJdGFsaWM7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0eWxlcyAmPSAofnN0eWxlSXRhbGljKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBjaGFyc2V0ID0gZW5naW5lLkNoYXJzZXQuZV9DaGFyc2V0QU5TSTtcbiAgICAgICAgICAgIGlmIChmb250LkdldEZvbnRUeXBlKGNfZG9jKSA9PSBlbmdpbmUuRm9udFR5cGVzLmVfRm9udFR5cGVDSURGb250KSB7XG4gICAgICAgICAgICAgICAgY2hhcnNldCA9IGZvbnQuR2V0Q2hhcnNldChjX2RvYyk7XG4gICAgICAgICAgICAgICAgLy8gZm9udC5HZXRDaGFyc2V0KGNfZG9jKSDlgLzov5Tlm57nmoTkuI3lr7lcbiAgICAgICAgICAgICAgICBpZiAoY2hhcnNldCA9PT0gZW5naW5lLkNoYXJzZXQuZV9DaGFyc2V0RGVmYXVsdCkge1xuICAgICAgICAgICAgICAgICAgICBjaGFyc2V0ID0gZW5naW5lLkNoYXJzZXQudmFsdWVzW0ZvbnRFbnVtcy5nZXRDaGFyc2V0RnJvbU5hbWUoZm9udC5HZXRCYXNlRm9udE5hbWUoY19kb2MpLnRvU3RyaW5nKCkpXVxuICAgICAgICAgICAgICAgICAgICBpZiAoIWNoYXJzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJzZXQgPSBlbmdpbmUuQ2hhcnNldC5lX0NoYXJzZXRBTlNJO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV3Rm9udCA9IG5ldyBlbmdpbmUuRm9udChuZXcgZW5naW5lLldTdHJpbmcoZm9udC5HZXRCYXNlRm9udE5hbWUoY19kb2MpKSwgc3R5bGVzLCBjaGFyc2V0LCBmb250LklzQm9sZCgpID8gNzAwIDogNDAwKVxuICAgICAgICB9XG4gICAgICAgIGlmIChuZXdGb250KSB7XG4gICAgICAgICAgICB0ZXh0U3RhdGUuZm9udCA9IG5ld0ZvbnQ7XG4gICAgICAgICAgICBncmFwaGljc09iamVjdC5TZXRUZXh0U3RhdGUoY19wYWdlLCB0ZXh0U3RhdGUsIG5ld0ZvbnQuSXNJdGFsaWMoKSwgbmV3Rm9udC5Jc0JvbGQoKSA/IDcwMCA6IDQwMClcbiAgICAgICAgICAgIGlmICghZ3JhcGhpY3NPYmplY3QuR2V0VGV4dCgpLnRvU3RyaW5nKCkpIHsvL+i/meS4quS8muinpuWPkVJlY3TnmoTorqHnrpdcbiAgICAgICAgICAgICAgICBncmFwaGljc09iamVjdC5TZXRUZXh0KG5ldyB0aGlzLmVuZ2luZS5XU3RyaW5nKCcnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjX3BhZ2UuR2VuZXJhdGVDb250ZW50KCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZVBhcnNlUGFnZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldEJvbGQgKGJvbGQpIHtcbiAgICAgICAgbGV0IGNfcGFnZSA9IHRoaXMuY19wYWdlO1xuICAgICAgICBsZXQgY19kb2MgPSBjX3BhZ2UuR2V0RG9jdW1lbnQoKTtcbiAgICAgICAgbGV0IGdyYXBoaWNzT2JqZWN0ID0gdGhpcy5ncmFwaGljc09iamVjdDtcbiAgICAgICAgbGV0IGVuZ2luZSA9IHRoaXMuZW5naW5lO1xuICAgICAgICBsZXQgdGV4dFN0YXRlID0gZ3JhcGhpY3NPYmplY3QuR2V0VGV4dFN0YXRlIChjX3BhZ2UpO1xuICAgICAgICBsZXQgZm9udCA9IHRleHRTdGF0ZS5mb250O1xuICAgICAgICBsZXQgbmV3Rm9udDtcbiAgICAgICAgaWYgKGZvbnQuSXNFbXB0eSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZm9udC5Jc1N0YW5kYXJkRm9udChjX2RvYykpIHtcbiAgICAgICAgICAgIGxldCBzdGFuZGFyZElkID0gZm9udC5HZXRTdGFuZGFyZDE0Rm9udChjX2RvYyk7XG4gICAgICAgICAgICBsZXQgbmV3U3RhbmRhcmRJZDtcbiAgICAgICAgICAgIGlmIChib2xkKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChzdGFuZGFyZElkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgZW5naW5lLlN0YW5kYXJkSUQuZV9TdGRJRENvdXJpZXI6XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdTdGFuZGFyZElkID0gZW5naW5lLlN0YW5kYXJkSUQuZV9TdGRJRENvdXJpZXJCO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgZW5naW5lLlN0YW5kYXJkSUQuZV9TdGRJRENvdXJpZXJJOlxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3U3RhbmRhcmRJZCA9IGVuZ2luZS5TdGFuZGFyZElELmVfU3RkSURDb3VyaWVyQkk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBlbmdpbmUuU3RhbmRhcmRJRC5lX1N0ZElESGVsdmV0aWNhOlxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3U3RhbmRhcmRJZCA9IGVuZ2luZS5TdGFuZGFyZElELmVfU3RkSURIZWx2ZXRpY2FCO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgZW5naW5lLlN0YW5kYXJkSUQuZV9TdGRJREhlbHZldGljYUk6XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdTdGFuZGFyZElkID0gZW5naW5lLlN0YW5kYXJkSUQuZV9TdGRJREhlbHZldGljYUJJO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgZW5naW5lLlN0YW5kYXJkSUQuZV9TdGRJRFRpbWVzOlxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3U3RhbmRhcmRJZCA9IGVuZ2luZS5TdGFuZGFyZElELmVfU3RkSURUaW1lc0I7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBlbmdpbmUuU3RhbmRhcmRJRC5lX1N0ZElEVGltZXNJOlxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3U3RhbmRhcmRJZCA9IGVuZ2luZS5TdGFuZGFyZElELmVfU3RkSURUaW1lc0JJO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHN0YW5kYXJkSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBlbmdpbmUuU3RhbmRhcmRJRC5lX1N0ZElEQ291cmllckI6XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdTdGFuZGFyZElkID0gZW5naW5lLlN0YW5kYXJkSUQuZV9TdGRJRENvdXJpZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBlbmdpbmUuU3RhbmRhcmRJRC5lX1N0ZElEQ291cmllckJJOlxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3U3RhbmRhcmRJZCA9IGVuZ2luZS5TdGFuZGFyZElELmVfU3RkSURDb3VyaWVySTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIGVuZ2luZS5TdGFuZGFyZElELmVfU3RkSURIZWx2ZXRpY2FCOlxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3U3RhbmRhcmRJZCA9IGVuZ2luZS5TdGFuZGFyZElELmVfU3RkSURIZWx2ZXRpY2E7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBlbmdpbmUuU3RhbmRhcmRJRC5lX1N0ZElESGVsdmV0aWNhQkk6XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdTdGFuZGFyZElkID0gZW5naW5lLlN0YW5kYXJkSUQuZV9TdGRJREhlbHZldGljYUk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBlbmdpbmUuU3RhbmRhcmRJRC5lX1N0ZElEVGltZXNCOlxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3U3RhbmRhcmRJZCA9IGVuZ2luZS5TdGFuZGFyZElELmVfU3RkSURUaW1lcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIGVuZ2luZS5TdGFuZGFyZElELmVfU3RkSURUaW1lc0JJOlxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3U3RhbmRhcmRJZCA9IGVuZ2luZS5TdGFuZGFyZElELmVfU3RkSURUaW1lc0k7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobmV3U3RhbmRhcmRJZCkge1xuICAgICAgICAgICAgICAgIG5ld0ZvbnQgPSBuZXcgZW5naW5lLkZvbnQobmV3U3RhbmRhcmRJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgc3R5bGVzID0gZm9udC5HZXRTdHlsZXMoY19kb2MpO1xuICAgICAgICAgICAgbGV0IHN0eWxlQm9sZCA9IGVuZ2luZS5TdHlsZXMuZV9TdHlsZXNCb2xkLnZhbHVlO1xuICAgICAgICAgICAgaWYgKGJvbGQpIHtcbiAgICAgICAgICAgICAgICBzdHlsZXMgfD0gc3R5bGVCb2xkO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdHlsZXMgJj0gKH5zdHlsZUJvbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGNoYXJzZXQgPSBlbmdpbmUuQ2hhcnNldC5lX0NoYXJzZXRBTlNJO1xuICAgICAgICAgICAgaWYgKGZvbnQuR2V0Rm9udFR5cGUoY19kb2MpID09IGVuZ2luZS5Gb250VHlwZXMuZV9Gb250VHlwZUNJREZvbnQpIHtcbiAgICAgICAgICAgICAgICBjaGFyc2V0ID0gZm9udC5HZXRDaGFyc2V0KGNfZG9jKTtcbiAgICAgICAgICAgICAgICAvLyBmb250LkdldENoYXJzZXQoY19kb2MpIOWAvOi/lOWbnueahOS4jeWvuVxuICAgICAgICAgICAgICAgIGlmIChjaGFyc2V0ID09PSBlbmdpbmUuQ2hhcnNldC5lX0NoYXJzZXREZWZhdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYXJzZXQgPSBlbmdpbmUuQ2hhcnNldC52YWx1ZXNbRm9udEVudW1zLmdldENoYXJzZXRGcm9tTmFtZShmb250LkdldEJhc2VGb250TmFtZShjX2RvYykudG9TdHJpbmcoKSldXG4gICAgICAgICAgICAgICAgICAgIGlmICghY2hhcnNldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnNldCA9IGVuZ2luZS5DaGFyc2V0LmVfQ2hhcnNldEFOU0k7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXdGb250ID0gbmV3IGVuZ2luZS5Gb250KG5ldyBlbmdpbmUuV1N0cmluZyhmb250LkdldEJhc2VGb250TmFtZShjX2RvYykpLCBzdHlsZXMsIGNoYXJzZXQsIGJvbGQgPyA3MDAgOiA0MDApXG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5ld0ZvbnQpIHtcbiAgICAgICAgICAgIHRleHRTdGF0ZS5mb250ID0gbmV3Rm9udDtcbiAgICAgICAgICAgIGdyYXBoaWNzT2JqZWN0LlNldFRleHRTdGF0ZShjX3BhZ2UsIHRleHRTdGF0ZSwgbmV3Rm9udC5Jc0l0YWxpYygpLCBuZXdGb250LklzQm9sZCgpID8gNzAwIDogNDAwKVxuICAgICAgICAgICAgaWYgKCFncmFwaGljc09iamVjdC5HZXRUZXh0KCkudG9TdHJpbmcoKSkgey8v6L+Z5Liq5Lya6Kem5Y+RUmVjdOeahOiuoeeul1xuICAgICAgICAgICAgICAgIGdyYXBoaWNzT2JqZWN0LlNldFRleHQobmV3IHRoaXMuZW5naW5lLldTdHJpbmcoJycpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNfcGFnZS5HZW5lcmF0ZUNvbnRlbnQoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlUGFyc2VQYWdlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRGb250U2l6ZSAoc2l6ZSkge1xuICAgICAgICBsZXQgY19wYWdlID0gdGhpcy5jX3BhZ2U7XG4gICAgICAgIGxldCBncmFwaGljc09iamVjdCA9IHRoaXMuZ3JhcGhpY3NPYmplY3Q7XG4gICAgICAgIGxldCB0ZXh0U3RhdGUgPSBncmFwaGljc09iamVjdC5HZXRUZXh0U3RhdGUoY19wYWdlKTtcbiAgICAgICAgbGV0IGZvbnQgPSB0ZXh0U3RhdGUuZm9udDtcbiAgICAgICAgLy90ZXh0U3RhdGUuU2V0KHRleHRTdGF0ZS52ZXJzaW9uLCB0ZXh0U3RhdGUuZm9udCwgc2l6ZSwgdGV4dFN0YXRlLmNoYXJzcGFjZSwgdGV4dFN0YXRlLndvcmRzcGFjZSwgdGV4dFN0YXRlLnRleHRtb2RlLCB0ZXh0U3RhdGUub3JpZ2luX3Bvc2l0aW9uLCB0ZXh0U3RhdGUudGV4dG1hdHJpeCk7XG4gICAgICAgIHRleHRTdGF0ZS5mb250X3NpemUgPSBzaXplO1xuICAgICAgICBsZXQgd2VpZ2h0ID0gZm9udC5Jc0VtcHR5KCkgPyA0MDAgOiAoZm9udC5Jc0JvbGQoKSA/IDcwMCA6IDQwMCk7XG4gICAgICAgIGxldCBpc0l0YWxpYyA9IGZvbnQuSXNFbXB0eSgpID8gZmFsc2UgOiBmb250LklzSXRhbGljKCk7XG4gICAgICAgIGdyYXBoaWNzT2JqZWN0LlNldFRleHRTdGF0ZShjX3BhZ2UsIHRleHRTdGF0ZSwgaXNJdGFsaWMsIHdlaWdodCk7XG4gICAgICAgIGlmICghZ3JhcGhpY3NPYmplY3QuR2V0VGV4dCgpLnRvU3RyaW5nKCkpIHsvL+i/meS4quS8muinpuWPkVJlY3TnmoTorqHnrpdcbiAgICAgICAgICAgIGdyYXBoaWNzT2JqZWN0LlNldFRleHQobmV3IHRoaXMuZW5naW5lLldTdHJpbmcoJycpKTtcbiAgICAgICAgfVxuICAgICAgICBjX3BhZ2UuR2VuZXJhdGVDb250ZW50KCk7XG4gICAgICAgIHJldHVybiB0aGlzLnJlUGFyc2VQYWdlKCk7XG4gICAgfVxuXG4gICAgc2V0U3RhbmRhcmRGb250IChpZCkge1xuICAgICAgICBsZXQgZW5naW5lID0gdGhpcy5lbmdpbmU7XG4gICAgICAgIGlkID0gZW5naW5lLlN0YW5kYXJkSUQudmFsdWVzW2lkXTtcbiAgICAgICAgbGV0IGZvbnQgPSBuZXcgZW5naW5lLkZvbnQoaWQpO1xuICAgICAgICAvL2xldCBmb250ID0gbmV3IGVuZ2luZS5Gb250KG5ldyB0aGlzLmVuZ2luZS5XU3RyaW5nKCdTaW1TdW4nKSwgNDU4ODYzLCB0aGlzLmVuZ2luZS5DaGFyc2V0LmVfQ2hhcnNldEdCMjMxMiwgNDAwKVxuICAgICAgICAvL2lmICghZm9udC5Jc0VtcHR5KCkpIHtcbiAgICAgICAgLy8gICAgbGV0IGlzSXRhbGljID0gZm9udC5Jc0VtcHR5KCkgPyBmYWxzZSA6IGZvbnQuSXNJdGFsaWMoKTtcbiAgICAgICAgLy8gICAgbGV0IHdlaWdodCA9IGZvbnQuSXNFbXB0eSgpID8gNDAwIDogKGZvbnQuSXNCb2xkKCkgPyA3MDAgOiA0MDApO1xuICAgICAgICAvLyAgICBmb250ID0gbmV3IHRoaXMuZW5naW5lLkZvbnQobmV3IGVuZ2luZS5XU3RyaW5nKGZvbnQuR2V0QmFzZUZvbnROYW1lKGNfZG9jKSksIHRoaXMuZW5naW5lLlN0eWxlcy5lX1N0eWxlU2VyaWYudmFsdWUsIHRoaXMuZW5naW5lLkNoYXJzZXQuZV9DaGFyc2V0R0IyMzEyLnZhbHVlLCA0MDApO1xuICAgICAgICAvLyAgICB0ZXh0U3RhdGUuZm9udCA9IGZvbnQ7XG4gICAgICAgIC8vICAgIGdyYXBoaWNzT2JqZWN0LlNldFRleHRTdGF0ZShjX3BhZ2UsIHRleHRTdGF0ZSwgaXNJdGFsaWMsIHdlaWdodCk7XG4gICAgICAgIC8vfVxuICAgICAgICBsZXQgY19wYWdlID0gdGhpcy5jX3BhZ2U7XG4gICAgICAgIGxldCBncmFwaGljc09iamVjdCA9IHRoaXMuZ3JhcGhpY3NPYmplY3Q7XG4gICAgICAgIGxldCB0ZXh0U3RhdGUgPSBncmFwaGljc09iamVjdC5HZXRUZXh0U3RhdGUoY19wYWdlKTtcbiAgICAgICAgLy90ZXh0U3RhdGUuU2V0KHRleHRTdGF0ZS52ZXJzaW9uLCBmb250LCB0ZXh0U3RhdGUuZm9udF9zaXplLCB0ZXh0U3RhdGUuY2hhcnNwYWNlLCB0ZXh0U3RhdGUud29yZHNwYWNlLCB0ZXh0U3RhdGUudGV4dG1vZGUsIHRleHRTdGF0ZS5vcmlnaW5fcG9zaXRpb24sIHRleHRTdGF0ZS50ZXh0bWF0cml4KTtcbiAgICAgICAgdGV4dFN0YXRlLmZvbnQgPSBmb250O1xuICAgICAgICBsZXQgd2VpZ2h0ID0gZm9udC5Jc0VtcHR5KCkgPyA0MDAgOiAoZm9udC5Jc0JvbGQoKSA/IDcwMCA6IDQwMCk7XG4gICAgICAgIGxldCBpc0l0YWxpYyA9IGZvbnQuSXNFbXB0eSgpID8gZmFsc2UgOiBmb250LklzSXRhbGljKCk7XG4gICAgICAgIGdyYXBoaWNzT2JqZWN0LlNldFRleHRTdGF0ZShjX3BhZ2UsIHRleHRTdGF0ZSwgaXNJdGFsaWMsIHdlaWdodCk7XG4gICAgICAgIGlmICghZ3JhcGhpY3NPYmplY3QuR2V0VGV4dCgpLnRvU3RyaW5nKCkpIHsvL+i/meS4quS8muinpuWPkVJlY3TnmoTorqHnrpdcbiAgICAgICAgICAgIGdyYXBoaWNzT2JqZWN0LlNldFRleHQobmV3IHRoaXMuZW5naW5lLldTdHJpbmcoJycpKTtcbiAgICAgICAgfVxuICAgICAgICBjX3BhZ2UuR2VuZXJhdGVDb250ZW50KCk7XG4gICAgICAgIHJldHVybiB0aGlzLnJlUGFyc2VQYWdlKCk7XG4gICAgfVxuXG4gICAgc2V0Rm9udEJ5TmFtZSAobmFtZSwgc3R5bGVzID0gNDU4ODYzLCBjaGFyc2V0ID0gMCkge1xuICAgICAgICBsZXQgZW5naW5lID0gdGhpcy5lbmdpbmU7XG4gICAgICAgIGxldCBmb250ID0gbmV3IGVuZ2luZS5Gb250KG5ldyBlbmdpbmUuV1N0cmluZyhuYW1lKSwgc3R5bGVzLCBlbmdpbmUuQ2hhcnNldC52YWx1ZXNbY2hhcnNldF0gfHwgZW5naW5lLkNoYXJzZXQuZV9DaGFyc2V0QU5TSSwgNDAwKTtcbiAgICAgICAgLy9sZXQgZm9udCA9IG5ldyBlbmdpbmUuRm9udChuZXcgdGhpcy5lbmdpbmUuV1N0cmluZygnU2ltU3VuJyksIDQ1ODg2MywgdGhpcy5lbmdpbmUuQ2hhcnNldC5lX0NoYXJzZXRHQjIzMTIsIDQwMClcbiAgICAgICAgLy9pZiAoIWZvbnQuSXNFbXB0eSgpKSB7XG4gICAgICAgIC8vICAgIGxldCBpc0l0YWxpYyA9IGZvbnQuSXNFbXB0eSgpID8gZmFsc2UgOiBmb250LklzSXRhbGljKCk7XG4gICAgICAgIC8vICAgIGxldCB3ZWlnaHQgPSBmb250LklzRW1wdHkoKSA/IDQwMCA6IChmb250LklzQm9sZCgpID8gNzAwIDogNDAwKTtcbiAgICAgICAgLy8gICAgZm9udCA9IG5ldyB0aGlzLmVuZ2luZS5Gb250KG5ldyBlbmdpbmUuV1N0cmluZyhmb250LkdldEJhc2VGb250TmFtZShjX2RvYykpLCB0aGlzLmVuZ2luZS5TdHlsZXMuZV9TdHlsZVNlcmlmLnZhbHVlLCB0aGlzLmVuZ2luZS5DaGFyc2V0LmVfQ2hhcnNldEdCMjMxMi52YWx1ZSwgNDAwKTtcbiAgICAgICAgLy8gICAgdGV4dFN0YXRlLmZvbnQgPSBmb250O1xuICAgICAgICAvLyAgICBncmFwaGljc09iamVjdC5TZXRUZXh0U3RhdGUoY19wYWdlLCB0ZXh0U3RhdGUsIGlzSXRhbGljLCB3ZWlnaHQpO1xuICAgICAgICAvL31cbiAgICAgICAgbGV0IGNfcGFnZSA9IHRoaXMuY19wYWdlO1xuICAgICAgICBsZXQgZ3JhcGhpY3NPYmplY3QgPSB0aGlzLmdyYXBoaWNzT2JqZWN0O1xuICAgICAgICBsZXQgdGV4dFN0YXRlID0gZ3JhcGhpY3NPYmplY3QuR2V0VGV4dFN0YXRlKGNfcGFnZSk7XG4gICAgICAgIC8vdGV4dFN0YXRlLlNldCh0ZXh0U3RhdGUudmVyc2lvbiwgZm9udCwgdGV4dFN0YXRlLmZvbnRfc2l6ZSwgdGV4dFN0YXRlLmNoYXJzcGFjZSwgdGV4dFN0YXRlLndvcmRzcGFjZSwgdGV4dFN0YXRlLnRleHRtb2RlLCB0ZXh0U3RhdGUub3JpZ2luX3Bvc2l0aW9uLCB0ZXh0U3RhdGUudGV4dG1hdHJpeCk7XG4gICAgICAgIHRleHRTdGF0ZS5mb250ID0gZm9udDtcbiAgICAgICAgbGV0IHdlaWdodCA9IGZvbnQuSXNFbXB0eSgpID8gNDAwIDogKGZvbnQuSXNCb2xkKCkgPyA3MDAgOiA0MDApO1xuICAgICAgICBsZXQgaXNJdGFsaWMgPSBmb250LklzRW1wdHkoKSA/IGZhbHNlIDogZm9udC5Jc0l0YWxpYygpO1xuICAgICAgICBncmFwaGljc09iamVjdC5TZXRUZXh0U3RhdGUoY19wYWdlLCB0ZXh0U3RhdGUsIGlzSXRhbGljLCB3ZWlnaHQpO1xuICAgICAgICBpZiAoIWdyYXBoaWNzT2JqZWN0LkdldFRleHQoKS50b1N0cmluZygpKSB7Ly/ov5nkuKrkvJrop6blj5FSZWN055qE6K6h566XXG4gICAgICAgICAgICBncmFwaGljc09iamVjdC5TZXRUZXh0KG5ldyB0aGlzLmVuZ2luZS5XU3RyaW5nKCcnKSk7XG4gICAgICAgIH1cbiAgICAgICAgY19wYWdlLkdlbmVyYXRlQ29udGVudCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5yZVBhcnNlUGFnZSgpO1xuICAgIH1cblxuICAgIHNldEZpbGxDb2xvcihjb2xvcil7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3NPYmplY3QuU2V0RmlsbENvbG9yKChjb2xvcnwweGZmMDAwMDAwKT4+PjApO1xuICAgICAgICB0aGlzLmNfcGFnZS5HZW5lcmF0ZUNvbnRlbnQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9Kc29uKCk7XG4gICAgfVxuICAgIHJlUGFyc2VQYWdlICgpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICByZXR1cm4gdGhpcy5wYWdlLnJlUGFyc2VQYWdlKCkudGhlbigocGFnZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jX3BhZ2UgPSBwYWdlO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBnZXRXb2ZmICgpIHtcbiAgICAgICAgbGV0IGVuZ2luZSA9IHRoaXMuZW5naW5lO1xuICAgICAgICBsZXQgY19wYWdlID0gdGhpcy5jX3BhZ2U7XG4gICAgICAgIGxldCBjX2RvYyA9IGNfcGFnZS5HZXREb2N1bWVudCgpO1xuICAgICAgICBsZXQgdGV4dFN0YXRlID0gdGhpcy5ncmFwaGljc09iamVjdC5HZXRUZXh0U3RhdGUgKGNfcGFnZSk7XG4gICAgICAgIGxldCBmb250ID0gdGV4dFN0YXRlLmZvbnQ7XG4gICAgICAgIGlmIChmb250LklzRW1wdHkoKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0gZWxzZSBpZiAoZm9udC5Jc0VtYmVkZGVkKGNfZG9jKSkge1xuICAgICAgICAgICAgcmV0dXJuIFBERkZvbnRNZ3IuZ2V0V29mZkRhdGFCdWZmZXIoZm9udC5HZXRXb2ZmRGF0YShjX2RvYyksIHRoaXMuZW5naW5lKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IGNoYXJzZXQgPSBlbmdpbmUuQ2hhcnNldC5lX0NoYXJzZXRBTlNJLnZhbHVlO1xuICAgICAgICAgICAgaWYgKGZvbnQuR2V0Rm9udFR5cGUoY19kb2MpID09IGVuZ2luZS5Gb250VHlwZXMuZV9Gb250VHlwZUNJREZvbnQpIHtcbiAgICAgICAgICAgICAgICBjaGFyc2V0ID0gZm9udC5HZXRDaGFyc2V0KGNfZG9jKS52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBidWZmZXIgPSB0aGlzLmpyLmdldEZvbnRCdWZmZXIgKFxuICAgICAgICAgICAgICAgIGZvbnQuR2V0QmFzZUZvbnROYW1lKGNfZG9jKS50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGZvbnQuR2V0U3R5bGVzKGNfZG9jKSxcbiAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgIGNoYXJzZXQsXG4gICAgICAgICAgICAgICAgZm9udC5Jc0JvbGQoKSA/IDcwMCA6IDQwMCxcbiAgICAgICAgICAgICAgICB0cnVlXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKGJ1ZmZlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiB7YnVmZmVyfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFRleHRPYmplY3Q7XG4iLCJpbXBvcnQgVGV4dE9iamVjdCBmcm9tICcuL1RleHRPYmplY3QnO1xuaW1wb3J0IFBhdGhPYmplY3QgZnJvbSAnLi9QYXRoT2JqZWN0JztcbmltcG9ydCBGb3JtWE9iamVjdCBmcm9tICcuL0Zvcm1YT2JqZWN0JztcblxuY2xhc3MgR3JhcGhpY3NPYmplY3RGYXRvcnkge1xuICBzdGF0aWMgZ2V0IChlbmdpbmUsIHBhZ2UsIG9iamVjdCwgaW5kZXgpIHtcbiAgICBzd2l0Y2ggKG9iamVjdC5HZXRUeXBlICgpLnZhbHVlKSB7XG4gICAgICBjYXNlIDE6IC8vZV9UeXBlVGV4dFxuICAgICAgICByZXR1cm4gbmV3IFRleHRPYmplY3QgKG9iamVjdCwgcGFnZSwgb2JqZWN0LCBpbmRleCk7XG4gICAgICBjYXNlIDI6IC8vZV9UeXBlUGF0aFxuICAgICAgICByZXR1cm4gbmV3IFBhdGhPYmplY3QgKG9iamVjdCwgcGFnZSwgb2JqZWN0LCBpbmRleCk7XG4gICAgICBjYXNlIDM6IC8vZV9UeXBlSW1hZ2VcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICBjYXNlIDQ6IC8vZV9UeXBlU2hhZGluZ1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIGNhc2UgNTogLy9lX1R5cGVGb3JtWE9iamVjdFxuICAgICAgICByZXR1cm4gbmV3IEZvcm1YT2JqZWN0IChvYmplY3QsIHBhZ2UsIG9iamVjdCwgaW5kZXgpO1xuICAgIH1cbiAgfVxufVxuXG5jb25zdCBnZXRHcmFwaGljT2JqZWN0c0luZm8gPSAoZW5naW5lLCBwYWdlLCBncmFwaGljc09iamVjdHMsIHR5cGUpID0+IHtcbiAgbGV0IG9iamVjdExpc3QgPSBbXTtcbiAgaWYgKCFncmFwaGljc09iamVjdHMpIHtcbiAgICBncmFwaGljc09iamVjdHMgPSBwYWdlO1xuICB9XG4gIGxldCBwb3NpdGlvbiA9IGdyYXBoaWNzT2JqZWN0cy5HZXRGaXJzdEdyYXBoaWNzT2JqZWN0UG9zaXRpb24gKHt2YWx1ZTogdHlwZX0pO1xuICB3aGlsZSAocG9zaXRpb24gIT09IDApIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSBCYXNlR3JhcGhpY09iamVjdFxuICAgICAqL1xuICAgIGxldCBvYmplY3QgPSBHcmFwaGljc09iamVjdEZhdG9yeS5nZXQgKFxuICAgICAgZW5naW5lLFxuICAgICAgcGFnZSxcbiAgICAgIGdyYXBoaWNzT2JqZWN0cy5HZXRHcmFwaGljc09iamVjdCAocG9zaXRpb24pLFxuICAgICAgcG9zaXRpb25cbiAgICApO1xuICAgIG9iamVjdCAmJiBvYmplY3RMaXN0LnB1c2ggKG9iamVjdC50b0pzb24gKCkpO1xuXG4gICAgcG9zaXRpb24gPSBncmFwaGljc09iamVjdHMuR2V0TmV4dEdyYXBoaWNzT2JqZWN0UG9zaXRpb24gKHBvc2l0aW9uLCB7XG4gICAgICB2YWx1ZTogdHlwZSxcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBvYmplY3RMaXN0O1xufTtcbmNvbnN0IHNldEdyYXBoaWNPYmplY3RQcm9wZXJ0eSA9IChcbiAgZW5naW5lLFxuICBwYWdlSW5kZXgsXG4gIG9iamVjdEluZGV4LFxuICBwcm9wZXJ0eUtleSxcbiAgcHJvcGVydHlWYWx1ZVxuKSA9PiB7fTtcbmV4cG9ydCB7Z2V0R3JhcGhpY09iamVjdHNJbmZvLCBzZXRHcmFwaGljT2JqZWN0UHJvcGVydHl9O1xuIiwiaW1wb3J0IExvZ2dlckZhY3RvcnkgZnJvbSAnLi4vc2hhcmVkL2xvZ2dlci9Mb2dnZXJGYWN0b3J5JztcblxuY29uc3QgbG9nZ2VyID0gTG9nZ2VyRmFjdG9yeS5nZXRMb2dnZXIgKCdwZGYtanIuV2ViU0RLSWNvbnMnKTtcblxuY2xhc3MgV2ViU0RLSWNvbnMge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5kb2NzTWFwID0ge307XG4gICAgdGhpcy5mb3Jtc01hcCA9IHt9O1xuICAgIHRoaXMuaWNvbkNhdGFsb2cgPSAnU3RhdGljJztcbiAgICB0aGlzLl9lbmFibGUgPSBmYWxzZTtcbiAgICB0aGlzLnNlcGVyYXRvciA9ICcsJ1xuICAgIHRoaXMudGltZUZvcm1hdCA9ICdZWVlZLU1NLURELCBISDptbTpTUyc7XG4gICAgdGhpcy5pY29ucz17fTtcbiAgfVxuICBzZXRJY29ucyAoaWNvbnMpIHtcbiAgICBpZiAodHlwZW9mIGljb25zID09PSAnc3RyaW5nJykgdGhpcy5pY29ucyA9IEpTT04ucGFyc2UgKGljb25zKTtcbiAgICBlbHNlIHRoaXMuaWNvbnMgPSBpY29ucztcbiAgfVxuICBhZGRJY29uIChpY29uKSB7XG4gICAgbGV0IGFubm90VHlwZSA9IGljb24uYW5ub3RUeXBlO1xuICAgIGxldCBjYXRhbG9nID0gaWNvbi5jYXRhZ29yeTtcbiAgICBsZXQgbmFtZSA9IGljb24ubmFtZTtcbiAgICBsZXQgZmlsZVR5cGUgPSBpY29uLmZpbGVUeXBlO1xuICAgIGxldCBzdHJVcmwgPSBpY29uLnVybDtcblxuICAgIGlmICghKGFubm90VHlwZSBpbiB0aGlzLmljb25zKSkge1xuICAgICAgdGhpcy5pY29uc1thbm5vdFR5cGVdID0ge307XG4gICAgfVxuXG4gICAgaWYgKCEoY2F0YWxvZyBpbiB0aGlzLmljb25zW2Fubm90VHlwZV0pKSB7XG4gICAgICB0aGlzLmljb25zW2Fubm90VHlwZV1bY2F0YWxvZ10gPSB7fTtcbiAgICB9XG4gICAgdGhpcy5pY29uc1thbm5vdFR5cGVdW2NhdGFsb2ddW25hbWVdID0ge1xuICAgICAgdXJsOiBzdHJVcmwsXG4gICAgICB0eXBlOiBmaWxlVHlwZSxcbiAgICB9O1xuICB9XG4gIHJlbW92ZUljb24gKGFubm90VHlwZSwgY2F0YWxvZywgbmFtZSkge1xuICAgIGlmIChuYW1lKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuaWNvbnNbYW5ub3RUeXBlXVtjYXRhbG9nXSAmJlxuICAgICAgICB0aGlzLmljb25zW2Fubm90VHlwZV1bY2F0YWxvZ11bbmFtZV1cbiAgICAgIClcbiAgICAgICAgZGVsZXRlIHRoaXMuaWNvbnNbYW5ub3RUeXBlXVtjYXRhbG9nXVtuYW1lXTtcblxuICAgICAgaWYgKFxuICAgICAgICB0aGlzLmRvY3NNYXBbYW5ub3RUeXBlXSAmJlxuICAgICAgICB0aGlzLmRvY3NNYXBbYW5ub3RUeXBlXVtjYXRhbG9nXSAmJlxuICAgICAgICB0aGlzLmRvY3NNYXBbYW5ub3RUeXBlXVtjYXRhbG9nXVtuYW1lXVxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuZG9jc01hcFthbm5vdFR5cGVdW2NhdGFsb2ddW25hbWVdLmRlbGV0ZSAoKTtcbiAgICAgICAgZGVsZXRlIHRoaXMuZG9jc01hcFthbm5vdFR5cGVdW2NhdGFsb2ddW25hbWVdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5kb2NzTWFwW2Fubm90VHlwZV0gJiYgdGhpcy5kb2NzTWFwW2Fubm90VHlwZV1bY2F0YWxvZ10pIHtcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMuaWNvbnNbYW5ub3RUeXBlXVtjYXRhbG9nXSkge1xuICAgICAgICAgIGxldCBkb2MgPSB0aGlzLmRvY3NNYXBbYW5ub3RUeXBlXVtjYXRhbG9nXVtrZXldO1xuICAgICAgICAgIGlmIChkb2MpIHtcbiAgICAgICAgICAgIGRvYy5kZWxldGUgKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRlbGV0ZSB0aGlzLmRvY3NNYXBbYW5ub3RUeXBlXVtjYXRhbG9nXVtuYW1lXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBkZWxldGUgdGhpcy5pY29uc1thbm5vdFR5cGVdW2NhdGFsb2ddO1xuICAgIH1cbiAgfVxuICBzZXRJY29uQ2F0YWxvZyAoY2F0YWxvZykge1xuICAgIHRoaXMuaWNvbkNhdGFsb2cgPSBjYXRhbG9nO1xuICAgIHRoaXMuX2VuYWJsZSA9IHRydWU7XG4gIH1cbiAgc2V0RHluYW1pY0luZm9Gb3JtdWxhIChzZXBlcmF0b3IsIHRpbWVGb3JtYXQpIHtcbiAgICB0aGlzLnNlcGVyYXRvciA9IHNlcGVyYXRvcjtcbiAgICB0aGlzLnRpbWVGb3JtYXQgPSB0aW1lRm9ybWF0O1xuICB9XG4gIGVuYWJsZSAoZW5hYmxlKSB7XG4gICAgdGhpcy5fZW5hYmxlID0gZW5hYmxlO1xuICB9XG4gIGdldFBERkRvYyAodHlwZSwga2V5LCBuYW1lKSB7XG4gICAgaWYgKFxuICAgICAgdGhpcy5kb2NzTWFwW3R5cGVdICYmXG4gICAgICB0aGlzLmRvY3NNYXBbdHlwZV1ba2V5XSAmJlxuICAgICAgdGhpcy5kb2NzTWFwW3R5cGVdW2tleV1bbmFtZV1cbiAgICApIHtcbiAgICAgIHJldHVybiB0aGlzLmRvY3NNYXBbdHlwZV1ba2V5XVtuYW1lXTtcbiAgICB9XG5cbiAgICBsZXQgZW5naW5lID0gdGhpcy5lbmdpbmU7XG4gICAgbGV0IGpyID0gdGhpcy5qcjtcblxuICAgIGxldCBmaWxlSW5mbyA9IHRoaXMuaWNvbnNbdHlwZV1ba2V5XVtuYW1lXTtcbiAgICBpZiAoIWZpbGVJbmZvKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBsZXQgZG9jO1xuICAgIGxldCBmb3JtO1xuICAgIGxldCBwYWdlO1xuICAgIGxldCBmaWVsZDtcblxuICAgIGxldCByZWFkZXJDYWxsYmFjayA9IGVuZ2luZS5SZWFkZXJDYWxsYmFjay5pbXBsZW1lbnQgKHtcbiAgICAgIHVybDogZmlsZUluZm8udXJsLFxuICAgICAgUmVsZWFzZTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZWxlYXNlICgpO1xuICAgICAgfSxcbiAgICAgIEdldFNpemU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuc2l6ZSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnNpemU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHhociA9IGpyLnJlcXVlc3REYXRhICgnR0VUJywgZmFsc2UsIHRoaXMudXJsLCAwLCAxLCB0cnVlKTtcbiAgICAgICAgbGV0IHNpemUgPSB4aHJcbiAgICAgICAgICAuZ2V0UmVzcG9uc2VIZWFkZXIgKCdDb250ZW50LVJhbmdlJylcbiAgICAgICAgICAubWF0Y2ggKC9ieXRlcyBbXFxzXFxTXSo/LVtcXHNcXFNdKj9cXC8oXFxkKikvKVsxXTtcbiAgICAgICAgcmV0dXJuICh0aGlzLnNpemUgPSBwYXJzZUludCAoc2l6ZSkpO1xuICAgICAgfSxcbiAgICAgIFJlYWRCbG9jazogZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBzaXplKSB7XG4gICAgICAgIGxldCBzcmMgPSBuZXcgVWludDhBcnJheSAoXG4gICAgICAgICAganIucmVxdWVzdERhdGEgKCdHRVQnLCBmYWxzZSwgdGhpcy51cmwsIG9mZnNldCwgc2l6ZSlcbiAgICAgICAgKTtcbiAgICAgICAgaWYoc3JjLmJ5dGVMZW5ndGggIT0gc2l6ZSl7XG4gICAgICAgICAgdGhpcy5zaXplID0gc3JjLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgc3JjID0gc3JjLnNsaWNlKG9mZnNldCxvZmZzZXQrc2l6ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZW5naW5lLkhFQVBVOC5zZXQgKHNyYywgYnVmZmVyKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgc3dpdGNoIChmaWxlSW5mby50eXBlKSB7XG4gICAgICBjYXNlICdwZGYnOlxuICAgICAgICBkb2MgPSBlbmdpbmUuY3JlYXRlUERGRG9jV2l0aFJlYWRlckNhbGxiYWNrIChyZWFkZXJDYWxsYmFjaywgZmFsc2UpO1xuICAgICAgICBsZXQgZXJyb3IgPSBkb2MuTG9hZCAobmV3IGVuZ2luZS5TdHJpbmcgKCcnKSk7XG5cbiAgICAgICAgZm9ybSA9IG5ldyBlbmdpbmUuRm9ybSAoZG9jKTtcbiAgICAgICAgaWYgKGZvcm0uSXNFbXB0eSAoKSkge1xuICAgICAgICAgIGZpZWxkID0gbnVsbDtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgZmllbGQgPSBmb3JtLkdldEZpZWxkKDAsbmV3IGVuZ2luZS5XU3RyaW5nKCcnKSlcbiAgICAgICAgICBmaWVsZCA9IGZpZWxkLklzRW1wdHkoKT9udWxsOmZpZWxkO1xuICAgICAgICB9XG4gICAgICAgIHBhZ2U9ZG9jLkdldFBhZ2UoMCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnYm1wJzpcbiAgICAgIGNhc2UgJ2pwZyc6XG4gICAgICBjYXNlICdqcGVnJzpcbiAgICAgIGNhc2UgJ3BuZyc6XG4gICAgICBjYXNlICd0aWYnOlxuICAgICAgY2FzZSAndGlmZic6XG4gICAgICAgIGxldCBpbWFnZSA9IG5ldyBlbmdpbmUuSW1hZ2UgKHJlYWRlckNhbGxiYWNrKTtcbiAgICAgICAgbGV0IGJtcCA9IGltYWdlLkdldEZyYW1lQml0bWFwICgwKTtcblxuICAgICAgICBkb2MgPSBuZXcgZW5naW5lLlBERkRvYyAoKTtcblxuICAgICAgICBwYWdlID0gZG9jLkluc2VydFBhZ2UgKDAsIGJtcC5HZXRXaWR0aCAoKSwgYm1wLkdldEhlaWdodCAoKSk7XG4gICAgICAgIHBhZ2UuU3RhcnRQYXJzZSAoMCwgbnVsbCwgZmFsc2UpO1xuICAgICAgICBwYWdlLkFkZEltYWdlIChcbiAgICAgICAgICBpbWFnZSxcbiAgICAgICAgICAwLFxuICAgICAgICAgIG5ldyBlbmdpbmUuUG9pbnRGICgwLCAwKSxcbiAgICAgICAgICBwYWdlLkdldFdpZHRoICgpLFxuICAgICAgICAgIHBhZ2UuR2V0SGVpZ2h0ICgpLFxuICAgICAgICAgIHRydWVcbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgdGhpcy5kb2NzTWFwW3R5cGVdID0gdGhpcy5kb2NzTWFwW3R5cGVdIHx8IHt9O1xuICAgIHRoaXMuZG9jc01hcFt0eXBlXVtrZXldID0gdGhpcy5kb2NzTWFwW3R5cGVdW2tleV0gfHwge307XG4gICAgcmV0dXJuIHRoaXMuZG9jc01hcFt0eXBlXVtrZXldW25hbWVdID0ge1xuICAgICAgZG9jLFxuICAgICAgcGFnZSxcbiAgICAgIGZvcm0sXG4gICAgICBmaWVsZCxcbiAgICB9XG4gIH1cbiAgaW5pdEljb25Qcm92aWRlciAoanIsIGVuZ2luZSkge1xuICAgIGlmICh0aGlzLmVuZ2luZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuanIgPSBqcjtcbiAgICAhdGhpcy5lbmdpbmUmJih0aGlzLmVuZ2luZSA9IGVuZ2luZSk7XG4gICAgXG4gICAgZW5naW5lLnNldEFubm90SWNvblByb3ZpZGVyQ2FsbGJhY2sgKHRoaXMuZ2V0RW5naW5lSWNvblByb3ZpZGVyKGVuZ2luZSkpO1xuICB9XG4gIHNldEZpZWxkVmFsdWUoaWNvbkRvYyl7XG4gICAgdHJ5IHtcbiAgICAgIGlmKGljb25Eb2MuZmllbGQmJiAhaWNvbkRvYy5maWVsZC5Jc0VtcHR5ICgpKXtcbiAgICAgICAgbGV0IHVzZXJOYW1lID0gdGhpcy5qci5nZXRVc2VyTmFtZSAoKTtcblxuICAgICAgICBsZXQgZmllbGRWYWx1ZSA9IHVzZXJOYW1lO1xuICAgICAgICBpZih0aGlzLnRpbWVGb3JtYXQubGVuZ3RoPjApe1xuICAgICAgICAgIGlmKGZpZWxkVmFsdWUubGVuZ3RoPjApe1xuICAgICAgICAgICAgZmllbGRWYWx1ZSs9IHRoaXMuc2VwZXJhdG9yO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmaWVsZFZhbHVlKz0gZm9ybWF0RGF0ZVRpbWUgKHRoaXMudGltZUZvcm1hdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWNvbkRvYy5maWVsZC5TZXRWYWx1ZSAobmV3IHRoaXMuZW5naW5lLldTdHJpbmcgKGZpZWxkVmFsdWUpKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGlmICghaXNOYU4gKGVycikpIHtcbiAgICAgICAgZXJyID0gdGhpcy5lbmdpbmUuZ2V0RXJyb3JDb2RlIChlcnIpO1xuICAgICAgfVxuICAgICAgY29uc29sZS53YXJuIChlcnIpO1xuICAgIH1cbiAgfVxuICBnZXRFbmdpbmVJY29uUHJvdmlkZXIoKXtcbiAgICBsZXQgZW5naW5lID0gdGhpcy5lbmdpbmVcbiAgICByZXR1cm4gZW5naW5lLkljb25Qcm92aWRlckNhbGxiYWNrLmltcGxlbWVudCAoe1xuICAgICAgUmVsZWFzZTogKCkgPT4ge1xuICAgICAgICBmb3IgKGxldCB0eXBlIGluIHRoaXMuZG9jc01hcCkge1xuICAgICAgICAgIGZvciAobGV0IGtleSBpbiB0aGlzLmRvY3NNYXBbdHlwZV0pIHtcbiAgICAgICAgICAgIGZvciAobGV0IGRvY0luZGV4IGluIHRoaXMuZG9jc01hcFt0eXBlXVtrZXldKSB7XG4gICAgICAgICAgICAgIHRoaXMuZG9jc01hcFt0eXBlXVtrZXldW2RvY0luZGV4XS5kZWxldGUgKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgR2V0UHJvdmlkZXJJRDogKCkgPT4ge1xuICAgICAgICByZXR1cm4gbmV3IGVuZ2luZS5TdHJpbmcgKCdnc2RrJyk7XG4gICAgICB9LFxuICAgICAgR2V0UHJvdmlkZXJWZXJzaW9uOiAoKSA9PiB7XG4gICAgICAgIHJldHVybiBuZXcgZW5naW5lLlN0cmluZyAodGhpcy5pY29uQ2F0YWxvZyArIG5ldyBEYXRlICgpLnZhbHVlT2YgKCkpO1xuICAgICAgfSxcbiAgICAgIEhhc0ljb246IChhbm5vdF90eXBlLCBpY29uX25hbWUpID0+IHtcbiAgICAgICAgaWYgKCF0aGlzLl9lbmFibGUpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgXG4gICAgICAgIGxldCBqck5hbWUgPSBpY29uX25hbWUudG9TdHJpbmcoKTtcbiAgICAgICAgbGV0IHN0ckFubm90VHlwZSA9ICdzdGFtcCc7XG4gICAgICAgIHN3aXRjaCAoYW5ub3RfdHlwZS52YWx1ZSkge1xuICAgICAgICAgIGNhc2UgMDogLy8nTm90ZSc6XG4gICAgICAgICAgICBzdHJBbm5vdFR5cGUgPSAnbm90ZSc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDEzOiAvLydTdGFtcCc6XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHRoaXMuaWNvbnMgJiZcbiAgICAgICAgICB0aGlzLmljb25zW3N0ckFubm90VHlwZV0gJiZcbiAgICAgICAgICB0aGlzLmljb25zW3N0ckFubm90VHlwZV1bdGhpcy5pY29uQ2F0YWxvZ10gJiZcbiAgICAgICAgICB0aGlzLmljb25zW3N0ckFubm90VHlwZV1bdGhpcy5pY29uQ2F0YWxvZ11banJOYW1lXVxuICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9LFxuICAgICAgQ2FuQ2hhbmdlQ29sb3I6IChhbm5vdF90eXBlLCBpY29uX25hbWUpID0+IHRydWUsXG4gICAgICBHZXRJY29uOiAoYW5ub3RfdHlwZSwgaWNvbl9uYW1lLCBjb2xvcikgPT4ge1xuICAgICAgICBpY29uX25hbWUgPSBpY29uX25hbWUudG9TdHJpbmcgKCk7XG4gICAgICAgIHN3aXRjaCAoYW5ub3RfdHlwZS52YWx1ZSkge1xuICAgICAgICAgIGNhc2UgMDogLy8nTm90ZSc6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDEzOiAvLydTdGFtcCc6XG4gICAgICAgICAgICBsZXQgaWNvbkRvYyA9IHRoaXMuZ2V0UERGRG9jICgnc3RhbXAnLCB0aGlzLmljb25DYXRhbG9nLCBpY29uX25hbWUpO1xuICAgICAgICAgICAgaWYgKGljb25Eb2MpIHtcbiAgICAgICAgICAgICAgdGhpcy5zZXRGaWVsZFZhbHVlKGljb25Eb2MpO1xuICBcbiAgICAgICAgICAgICAgcmV0dXJuIGljb25Eb2MucGFnZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgdGhpcy5lbmdpbmUuUERGUGFnZSAobnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBHZXRTaGFkaW5nQ29sb3I6IChcbiAgICAgICAgYW5ub3RfdHlwZSxcbiAgICAgICAgaWNvbl9uYW1lLFxuICAgICAgICByZWZlcmVuY2VkX2NvbG9yLFxuICAgICAgICBzaGFkaW5nX2luZGV4LFxuICAgICAgICBjb2xvclxuICAgICAgKSA9PiB7XG4gICAgICAgIGNvbG9yLmZpcnN0X2NvbG9yID0gcmVmZXJlbmNlZF9jb2xvcjtcbiAgICAgICAgY29sb3Iuc2Vjb25kX2NvbG9yID0gcmVmZXJlbmNlZF9jb2xvcjtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9LFxuICAgICAgR2V0RGlzcGxheVdpZHRoOiAoYW5ub3RfdHlwZSwgaWNvbl9uYW1lKSA9PiAwLFxuICAgICAgR2V0RGlzcGxheUhlaWdodDogKGFubm90X3R5cGUsIGljb25fbmFtZSkgPT4gMCxcbiAgICB9KTtcbiAgfVxufVxuXG5sZXQgV2VlayA9IFsn5pelJywgJ+S4gCcsICfkuownLCAn5LiJJywgJ+WbmycsICfkupQnLCAn5YWtJ107XG52YXIgZm9ybWF0RGF0ZVRpbWUgPSBmdW5jdGlvbiAoZm9ybWF0U3RyKSB7XG4gIGxldCBkYXRlID0gbmV3IERhdGUoKTtcbiAgbGV0IHN0ciA9IGZvcm1hdFN0cjtcblxuICBzdHIgPSBzdHIucmVwbGFjZSAoL3l5eXl8WVlZWS8sIGRhdGUuZ2V0RnVsbFllYXIgKCkpO1xuICBzdHIgPSBzdHIucmVwbGFjZSAoXG4gICAgL3l5fFlZLyxcbiAgICBkYXRlLmdldFllYXIgKCkgJSAxMDAgPiA5XG4gICAgICA/IChkYXRlLmdldFllYXIgKCkgJSAxMDApLnRvU3RyaW5nICgpXG4gICAgICA6ICcwJyArIGRhdGUuZ2V0WWVhciAoKSAlIDEwMFxuICApO1xuXG4gIGxldCBtb250aCA9IGRhdGUuZ2V0TW9udGgoKSsxO1xuICBzdHIgPSBzdHIucmVwbGFjZSAoXG4gICAgL01NLyxcbiAgICBtb250aCA+IDkgPyBtb250aC50b1N0cmluZyAoKSA6ICcwJyArIG1vbnRoXG4gICk7XG4gIHN0ciA9IHN0ci5yZXBsYWNlICgvTS9nLCBtb250aCk7XG5cbiAgc3RyID0gc3RyLnJlcGxhY2UgKC93fFcvZywgV2Vla1tkYXRlLmdldERheSAoKV0pO1xuXG4gIHN0ciA9IHN0ci5yZXBsYWNlIChcbiAgICAvZGR8REQvLFxuICAgIGRhdGUuZ2V0RGF0ZSAoKSA+IDkgPyBkYXRlLmdldERhdGUgKCkudG9TdHJpbmcgKCkgOiAnMCcgKyBkYXRlLmdldERhdGUgKClcbiAgKTtcbiAgc3RyID0gc3RyLnJlcGxhY2UgKC9kfEQvZywgZGF0ZS5nZXREYXRlICgpKTtcblxuICBzdHIgPSBzdHIucmVwbGFjZSAoXG4gICAgL2hofEhILyxcbiAgICBkYXRlLmdldEhvdXJzICgpID4gOSA/IGRhdGUuZ2V0SG91cnMgKCkudG9TdHJpbmcgKCkgOiAnMCcgKyBkYXRlLmdldEhvdXJzICgpXG4gICk7XG4gIHN0ciA9IHN0ci5yZXBsYWNlICgvaHxIL2csIGRhdGUuZ2V0SG91cnMgKCkpO1xuICBzdHIgPSBzdHIucmVwbGFjZSAoXG4gICAgL21tLyxcbiAgICBkYXRlLmdldE1pbnV0ZXMgKCkgPiA5XG4gICAgICA/IGRhdGUuZ2V0TWludXRlcyAoKS50b1N0cmluZyAoKVxuICAgICAgOiAnMCcgKyBkYXRlLmdldE1pbnV0ZXMgKClcbiAgKTtcbiAgc3RyID0gc3RyLnJlcGxhY2UgKC9tL2csIGRhdGUuZ2V0TWludXRlcyAoKSk7XG5cbiAgc3RyID0gc3RyLnJlcGxhY2UgKFxuICAgIC9zc3xTUy8sXG4gICAgZGF0ZS5nZXRTZWNvbmRzICgpID4gOVxuICAgICAgPyBkYXRlLmdldFNlY29uZHMgKCkudG9TdHJpbmcgKClcbiAgICAgIDogJzAnICsgZGF0ZS5nZXRTZWNvbmRzICgpXG4gICk7XG4gIHN0ciA9IHN0ci5yZXBsYWNlICgvc3xTL2csIGRhdGUuZ2V0U2Vjb25kcyAoKSk7XG5cbiAgcmV0dXJuIHN0cjtcbn07XG5cbmxldCB3ZWJTREtJY29ucztcbmxldCBnZXRJY29uUHJvdmlkZXIgPSAoKSA9PiB7XG4gIGlmICh3ZWJTREtJY29ucykge1xuICAgIHJldHVybiB3ZWJTREtJY29ucztcbiAgfVxuXG4gIHJldHVybiAod2ViU0RLSWNvbnMgPSBuZXcgV2ViU0RLSWNvbnMgKCkpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZ2V0SWNvblByb3ZpZGVyO1xuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUERGT2JqZWN0IHtcbiAgICBjb25zdHJ1Y3RvcihwZGZEb2MscGRmT2JqZWN0KXtcbiAgICAgICAgdGhpcy5wZGZEb2M9cGRmRG9jO1xuICAgICAgICB0aGlzLnBkZk9iamVjdD1wZGZPYmplY3Q7XG4gICAgfVxuICAgIGdldERpY3QoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMucGRmT2JqZWN0LkdldERpY3QoKTtcbiAgICB9XG59IiwiaWYgKCFVaW50OEFycmF5LnByb3RvdHlwZS5zbGljZSkge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFVpbnQ4QXJyYXkucHJvdG90eXBlLCAnc2xpY2UnLCB7XHJcbiAgICAgIHZhbHVlOiBBcnJheS5wcm90b3R5cGUuc2xpY2VcclxuICAgIH0pO1xyXG4gIH0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcm9ncmVzc2l2ZUNvdW50aW5lIChwcm9ncmVzc2l2ZSwgY29udGludWVTdGF0ZSwgZmluc2hlZFN0YXRlKSB7XHJcbiAgICBsZXQgc3RhdGUgPSBwcm9ncmVzc2l2ZS5Db250aW51ZSgpO1xyXG4gICAgaWYgKHN0YXRlID09PSBjb250aW51ZVN0YXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIHByb2dyZXNzaXZlQ29udGludWUocHJvZ3Jlc3NpdmUsIGNvbnRpbnVlU3RhdGUsIGZpbnNoZWRTdGF0ZSk7XHJcbiAgICB9XHJcbiAgICBwcm9ncmVzc2l2ZS5kZWxldGUoKTtcclxuICAgIHJldHVybiBzdGF0ZSA9PT0gZmluc2hlZFN0YXRlO1xyXG59IiwiY2xhc3MgRGVmYXVsdEFQe1xuICAgIGNvbnN0cnVjdG9yKGVuZ2luZURBKXtcbiAgICAgICAgdGhpcy5lbmdpbmVEQSA9IGVuZ2luZURBO1xuICAgIH1cbiAgICB0b0pzb24oKXtcbiAgICAgICAgcmV0dXJuIHt9XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBEZWZhdWx0QVA7IiwiaW1wb3J0IENvbW1vblJlY3RPcGVyYXRvciBmcm9tICcuLi8uLi9zaGFyZWQvUmVjdE9wZXJhdG9yJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVjdE9wZXJhdG9yIGV4dGVuZHMgQ29tbW9uUmVjdE9wZXJhdG9yIHtcbiAgICBzdGF0aWMgb24odGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVjdE9wZXJhdG9yKHRhcmdldClcbiAgICB9XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHBhcmFtIHtlbmdpbmUuQ0ZYX0Zsb2F0UmVjdH0gdGFyZ2V0IFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRhcmdldCkge1xuICAgICAgICBzdXBlcih0YXJnZXQpO1xuICAgICAgICB0aGlzLkNvbnN0cnVjdG9yID0gdGFyZ2V0LmNvbnN0cnVjdG9yO1xuICAgIH1cblxuICAgIGV4dHJhY3QoKSB7XG4gICAgICAgIGNvbnN0IGxlZnQgPSB0aGlzLnRhcmdldC5sZWZ0ICsgdGhpcy5vZmZzZXRMZWZ0O1xuICAgICAgICBjb25zdCByaWdodCA9IHRoaXMudGFyZ2V0LnJpZ2h0ICsgdGhpcy5vZmZzZXRSaWdodDtcbiAgICAgICAgY29uc3QgdG9wID0gdGhpcy50YXJnZXQudG9wICsgdGhpcy5vZmZzZXRUb3A7XG4gICAgICAgIGNvbnN0IGJvdHRvbSA9IHRoaXMudGFyZ2V0LmJvdHRvbSArIHRoaXMub2Zmc2V0Qm90dG9tO1xuICAgICAgICByZXR1cm4gbmV3IHRoaXMuQ29uc3RydWN0b3IobGVmdCwgYm90dG9tLCByaWdodCwgdG9wKTtcbiAgICB9XG59IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGxpbmMgb24gMjAxOS8xLzI4LlxuICovXG5mdW5jdGlvbiBnZXRFbmdpbmVSZWN0RiAoZW5naW5lLCByZWN0KSB7XG4gICAgbGV0IFJlY3RGID0gZW5naW5lLkNGWF9GbG9hdFJlY3Q7XG4gICAgcmV0dXJuIG5ldyBSZWN0RihyZWN0LmxlZnQsIHJlY3QuYm90dG9tLCByZWN0LnJpZ2h0LCByZWN0LnRvcCk7XG59XG5cbmV4cG9ydCB7XG4gICAgZ2V0RW5naW5lUmVjdEYsXG59IiwiZXhwb3J0IGNsYXNzIFJlY3REaWZmZXIge1xuICAgIGNvbnN0cnVjdG9yKHRvcCA9IDAsIGxlZnQgPSB0b3AsIGJvdHRvbSA9IHRvcCwgcmlnaHQgPSBsZWZ0KSB7XG4gICAgICAgIHRoaXMudG9wID0gdG9wO1xuICAgICAgICB0aGlzLmxlZnQgPSBsZWZ0O1xuICAgICAgICB0aGlzLmJvdHRvbSA9IGJvdHRvbTtcbiAgICAgICAgdGhpcy5yaWdodCA9IHJpZ2h0O1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFJlY3Qge1xuICAgIGNvbnN0cnVjdG9yKHRvcCA9IDAsIGxlZnQgPSAwLCBib3R0b20gPSAwLCByaWdodCA9IDApIHtcbiAgICAgICAgdGhpcy50b3AgPSB0b3A7XG4gICAgICAgIHRoaXMubGVmdCA9IGxlZnQ7XG4gICAgICAgIHRoaXMuYm90dG9tID0gYm90dG9tO1xuICAgICAgICB0aGlzLnJpZ2h0ID0gcmlnaHQ7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQm91bmRhcnkge1xuICAgIGNvbnN0cnVjdG9yKHRvcCwgbGVmdCwgd2lkdGgsIGhlaWdodCl7XG4gICAgICAgIHRoaXMudG9wID0gdG9wO1xuICAgICAgICB0aGlzLmxlZnQgPSBsZWZ0O1xuICAgICAgICB0aGlzLmJvdHRvbSA9IGJvdHRvbTtcbiAgICAgICAgdGhpcy5yaWdodCA9IHJpZ2h0O1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVjdE9wZXJhdG9yIHtcbiAgICBzdGF0aWMgb24odGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVjdE9wZXJhdG9yKHRhcmdldClcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtSZWN0fSBtaW51ZW5kXG4gICAgICogQHBhcmFtIHtSZWN0fSBzdWJ0cmFoZW5kXG4gICAgICogQHJldHVybnMge1JlY3REaWZmZXJ9XG4gICAgICogQG1lbWJlcm9mIFJlY3RPcGVyYXRvclxuICAgICAqL1xuICAgIHN0YXRpYyBzdWJ0cmFjdChtaW51ZW5kLCBzdWJ0cmFoZW5kKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVjdERpZmZlcihcbiAgICAgICAgICAgIG1pbnVlbmQudG9wIC0gc3VidHJhaGVuZC50b3AsXG4gICAgICAgICAgICBtaW51ZW5kLmxlZnQgLSBzdWJ0cmFoZW5kLmxlZnQsXG4gICAgICAgICAgICBtaW51ZW5kLmJvdHRvbSAtIHN1YnRyYWhlbmQuYm90dG9tLFxuICAgICAgICAgICAgbWludWVuZC5yaWdodCAtIHN1YnRyYWhlbmQucmlnaHRcbiAgICAgICAgKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtSZWN0fSBpbm5lclxuICAgICAqIEBwYXJhbSB7UmVjdH0gb3V0ZXJcbiAgICAgKiBAbWVtYmVyb2YgUmVjdE9wZXJhdG9yXG4gICAgICogQHJldHVybnMge1JlY3REaWZmZXJ9XG4gICAgICovXG4gICAgc3RhdGljIGV4cGFuZE9mZnNldChpbm5lciwgb3V0ZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWN0RGlmZmVyKFxuICAgICAgICAgICAgaW5uZXIudG9wIC0gb3V0ZXIudG9wLFxuICAgICAgICAgICAgaW5uZXIubGVmdCAtIG91dGVyLmxlZnQsXG4gICAgICAgICAgICBvdXRlci5ib3R0b20gLSBpbm5lci5ib3R0b20sXG4gICAgICAgICAgICBvdXRlci5yaWdodCAtIGlubmVyLnJpZ2h0XG4gICAgICAgICk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtSZWN0fSBmcm9tXG4gICAgICogQHBhcmFtIHtSZWN0fSBkZXN0XG4gICAgICogQG1lbWJlcm9mIFJlY3RPcGVyYXRvclxuICAgICAqL1xuICAgIHN0YXRpYyBjb3B5VG8oZnJvbSwgZGVzdCl7XG4gICAgICAgIGRlc3QubGVmdCA9IGZyb20ubGVmdDtcbiAgICAgICAgZGVzdC50b3AgPSBmcm9tLnRvcDtcbiAgICAgICAgZGVzdC5yaWdodCA9IGZyb20ucmlnaHQ7XG4gICAgICAgIGRlc3QuYm90dG9tID0gZnJvbS5ib3R0b207XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBwYXJhbSB7UmVjdH0gdGFyZ2V0IFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRhcmdldCkge1xuICAgICAgICB0aGlzLm9mZnNldExlZnQgPSAwO1xuICAgICAgICB0aGlzLm9mZnNldFRvcCA9IDA7XG4gICAgICAgIHRoaXMub2Zmc2V0UmlnaHQgPSAwO1xuICAgICAgICB0aGlzLm9mZnNldEJvdHRvbSA9IDA7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgIH1cblxuICAgIG1vdmVMZWZ0KG9mZnNldCkge1xuICAgICAgICB0aGlzLm9mZnNldExlZnQgKz0gb2Zmc2V0O1xuICAgICAgICB0aGlzLm9mZnNldFJpZ2h0ICs9IG9mZnNldDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIG1vdmVUb3Aob2Zmc2V0KSB7XG4gICAgICAgIHRoaXMub2Zmc2V0VG9wICs9IG9mZnNldDtcbiAgICAgICAgdGhpcy5vZmZzZXRCb3R0b20gKz0gb2Zmc2V0O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgbW92ZShvZmZzZXRYLCBvZmZzZXRZKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vdmVMZWZ0KG9mZnNldFgpLm1vdmVUb3Aob2Zmc2V0WSk7XG4gICAgfVxuICAgIG1vdmVUbyhsZWZ0LCB0b3ApIHtcbiAgICAgICAgdGhpcy5vZmZzZXRMZWZ0ID0gdGhpcy5vZmZzZXRSaWdodCA9IHRoaXMudGFyZ2V0LmxlZnQgLSBsZWZ0O1xuICAgICAgICB0aGlzLm9mZnNldFRvcCA9IHRoaXMub2Zmc2V0Qm90dG9tID0gdGhpcy50YXJnZXQudG9wIC0gdG9wO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2hyaW5rKG9mZnNldFRvcCA9IDAsIG9mZnNldExlZnQgPSBvZmZzZXRUb3AsIG9mZnNldEJvdHRvbSA9IG9mZnNldFRvcCwgb2Zmc2V0UmlnaHQgPSBvZmZzZXRMZWZ0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZChuZXcgUmVjdERpZmZlcihvZmZzZXRUb3AsIG9mZnNldExlZnQsIC1vZmZzZXRCb3R0b20sIC1vZmZzZXRSaWdodCkpO1xuICAgIH1cbiAgICBleHBhbmQob2Zmc2V0VG9wID0gMCwgb2Zmc2V0TGVmdCA9IG9mZnNldFRvcCwgb2Zmc2V0Qm90dG9tID0gb2Zmc2V0VG9wLCBvZmZzZXRSaWdodCA9IG9mZnNldExlZnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkKG5ldyBSZWN0RGlmZmVyKC1vZmZzZXRUb3AsIC1vZmZzZXRMZWZ0LCBvZmZzZXRCb3R0b20sIG9mZnNldFJpZ2h0KSk7XG4gICAgfVxuICAgIHpvb20oc2NhbGUgPSAxLCBvcmlnaW5oPSdjZW50ZXInLCBvcmlnaW52PSdjZW50ZXInKSB7XG5cbiAgICAgICAgY29uc3Qgd2lkdGggPSAodGhpcy50YXJnZXQucmlnaHQgKyB0aGlzLm9mZnNldFJpZ2h0KSAtICh0aGlzLnRhcmdldC5sZWZ0ICsgdGhpcy5vZmZzZXRMZWZ0KTtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gKHRoaXMudGFyZ2V0LmJvdHRvbSArIHRoaXMub2Zmc2V0Qm90dG9tKSAtICh0aGlzLnRhcmdldC50b3AgKyB0aGlzLm9mZnNldFRvcCk7XG4gICAgICAgIGNvbnN0IG5ld1dpZHRoID0gd2lkdGggKiBzY2FsZTtcbiAgICAgICAgY29uc3QgbmV3SGVpZ2h0ID0gaGVpZ2h0ICogc2NhbGU7XG5cbiAgICAgICAgY29uc3Qgb2Zmc2V0V2lkdGggPSBuZXdXaWR0aCAtIHdpZHRoO1xuICAgICAgICBjb25zdCBvZmZzZXRIZWlnaHQgPSBuZXdIZWlnaHQgLSBoZWlnaHQ7XG5cbiAgICAgICAgbGV0IG9mZnNldExlZnQgPSAwLCBvZmZzZXRSaWdodCA9IDA7XG4gICAgICAgIGxldCBvZmZzZXRUb3AgPSAwLCBvZmZzZXRCb3R0b20gPSAwO1xuXG4gICAgICAgIHN3aXRjaChvcmlnaW5oKSB7XG4gICAgICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgICAgICAgb2Zmc2V0TGVmdCA9IC1vZmZzZXRXaWR0aDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2NlbnRlcic6XG4gICAgICAgICAgICAgICAgb2Zmc2V0TGVmdCA9IC0gb2Zmc2V0V2lkdGggLyAyO1xuICAgICAgICAgICAgICAgIG9mZnNldFJpZ2h0ID0gb2Zmc2V0V2lkdGggLyAyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIG9mZnNldFJpZ2h0ID0gb2Zmc2V0V2lkdGg7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2gob3JpZ2ludikge1xuICAgICAgICAgICAgY2FzZSAnYm90dG9tJzpcbiAgICAgICAgICAgIG9mZnNldFRvcCA9IC1vZmZzZXRIZWlnaHQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2NlbnRlcic6XG4gICAgICAgICAgICBvZmZzZXRUb3AgPSAtb2Zmc2V0SGVpZ2h0IC8gMjtcbiAgICAgICAgICAgIG9mZnNldEJvdHRvbSA9IG9mZnNldEhlaWdodCAvIDI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3RvcCc6XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIG9mZnNldEJvdHRvbSA9IG9mZnNldEhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5hZGQobmV3IFJlY3REaWZmZXIob2Zmc2V0VG9wLCBvZmZzZXRMZWZ0LCBvZmZzZXRCb3R0b20sIG9mZnNldFJpZ2h0KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtSZWN0RGlmZmVyIHwgUmVjdH0gZGlmZlxuICAgICAqIEByZXR1cm5zXG4gICAgICogQG1lbWJlcm9mIFJlY3RPcGVyYXRvclxuICAgICAqL1xuICAgIGFkZCh7XG4gICAgICAgIHRvcCA9IDAsXG4gICAgICAgIGxlZnQgPSB0b3AsXG4gICAgICAgIGJvdHRvbSA9IHRvcCxcbiAgICAgICAgcmlnaHQgPSBsZWZ0XG4gICAgfSA9IHt9KSB7XG4gICAgICAgIHRoaXMub2Zmc2V0TGVmdCArPSBsZWZ0O1xuICAgICAgICB0aGlzLm9mZnNldFJpZ2h0ICs9IHJpZ2h0O1xuICAgICAgICB0aGlzLm9mZnNldEJvdHRvbSArPSBib3R0b207XG4gICAgICAgIHRoaXMub2Zmc2V0VG9wICs9IHRvcDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIFxuICAgIGV4dHJhY3QoKSB7XG4gICAgICAgIGNvbnN0IGxlZnQgPSB0aGlzLnRhcmdldC5sZWZ0ICsgdGhpcy5vZmZzZXRMZWZ0O1xuICAgICAgICBjb25zdCByaWdodCA9IHRoaXMudGFyZ2V0LnJpZ2h0ICsgdGhpcy5vZmZzZXRSaWdodDtcbiAgICAgICAgY29uc3QgdG9wID0gdGhpcy50YXJnZXQudG9wICsgdGhpcy5vZmZzZXRUb3A7XG4gICAgICAgIGNvbnN0IGJvdHRvbSA9IHRoaXMudGFyZ2V0LmJvdHRvbSArIHRoaXMub2Zmc2V0Qm90dG9tO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGVmdCwgdG9wLCByaWdodCwgYm90dG9tXG4gICAgICAgIH07XG4gICAgfVxuICAgIGJvdW5kYXJ5KCl7XG4gICAgICAgIGNvbnN0IGxlZnQgPSB0aGlzLnRhcmdldC5sZWZ0ICsgdGhpcy5vZmZzZXRMZWZ0O1xuICAgICAgICBjb25zdCByaWdodCA9IHRoaXMudGFyZ2V0LnJpZ2h0ICsgdGhpcy5vZmZzZXRSaWdodDtcbiAgICAgICAgY29uc3QgdG9wID0gdGhpcy50YXJnZXQudG9wICsgdGhpcy5vZmZzZXRUb3A7XG4gICAgICAgIGNvbnN0IGJvdHRvbSA9IHRoaXMudGFyZ2V0LmJvdHRvbSArIHRoaXMub2Zmc2V0Qm90dG9tO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGVmdCwgdG9wLCB3aWR0aDogcmlnaHQgLSBsZWZ0LCBoZWlnaHQ6IGJvdHRvbSAtIHRvcFxuICAgICAgICB9XG4gICAgfVxuICAgIHRvUGxhaW5PYmplY3QoKXtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxlZnQ6IHRoaXMudGFyZ2V0LmxlZnQsXG4gICAgICAgICAgICByaWdodDogdGhpcy50YXJnZXQucmlnaHQsXG4gICAgICAgICAgICB0b3A6IHRoaXMudGFyZ2V0LnRvcCxcbiAgICAgICAgICAgIGJvdHRvbTogdGhpcy50YXJnZXQuYm90dG9tXG4gICAgICAgIH07XG4gICAgfVxufSIsImV4cG9ydCBkZWZhdWx0IHtcbiAgICBOb25lOiBcIm5vbmVcIixcbiAgICBSQzQ6IFwicmM0XCIsXG4gICAgQUVTMTI4OiBcImFlczEyOFwiLFxuICAgIEFFUzI1NjogXCJhZXMyNTZcIlxufSIsIi8qKlxuICog5bCGIDB4RkZGRkZGIOagvOW8j+eahOminOiJsuaVsOWtl+i9rOS4uiPkuLrliY3nvIDnmoTljYHlha3ov5vliLbpopzoibLvvIxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRGcm9tTnVtYmVyVG9IZXgoY29sb3IpIHtcbiAgICBpZih0eXBlb2YgY29sb3IgIT09ICdudW1iZXInKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VuZXhwZWN0ZWQgY29sb3IgdmFsdWU6JyArIGNvbG9yKTtcbiAgICB9XG4gICAgaWYoY29sb3IgPCAwKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgbGV0IGhleCA9IGNvbG9yLnRvU3RyaW5nKDE2KTtcbiAgICBsZXQgbGVuID0gNjsgXG4gICAgaWYoY29sb3IgPiAweEZGRkZGRikge1xuICAgICAgICBsZW4gPSA4O1xuICAgIH1cbiAgICB3aGlsZShoZXgubGVuZ3RoIDwgbGVuKSB7XG4gICAgICAgIGhleCA9ICcwJyArIGhleDtcbiAgICB9XG4gICAgcmV0dXJuIGAjYCArIGhleDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRGcm9tTnVtYmVyVG9SR0JBKGNvbG9yKSB7XG4gICAgbGV0IHIsIGcsIGIsIGE7XG4gICAgaWYoY29sb3IgPCAweDAxMDAwMDAwKSB7XG4gICAgICAgIGEgPSAweEZGO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGEgPSAoY29sb3IgPj4gMjQpICYgMHhGRjtcbiAgICAgICAgY29sb3IgPSBjb2xvciAmIDB4RkZGRkZGO1xuICAgIH1cbiAgICBiID0gY29sb3IgJiAweEZGO1xuICAgIGcgPSAoY29sb3IgPj4gOCkgJiAweEZGOyBcbiAgICByID0gKGNvbG9yID4+IDE2KSAmIDB4RkY7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgciwgZywgYiwgYVxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gY29sb3JDb252ZXJ0b3IoY29sb3Isb3V0VHlwZSA9ICdIVE1MJyxvcGFjaXR5ID0gMSl7XG4gICAgdmFyIHZhbHVlO1xuICAgIHZhciBSLCBHLCBCO1xuICAgIGxldCBjb21wb25lbnRzO1xuICAgIGlmKHR5cGVvZiBjb2xvciA9PSAnbnVtYmVyJyl7XG4gICAgICAgIGNvbG9yID0gWydpbnQnLGNvbG9yXTtcbiAgICB9XG5cdHN3aXRjaCAoY29sb3JbMF0pIHtcblx0XHRjYXNlICdpbnQnOlxuXHRcdFIgPSAoY29sb3JbMV0mMHgwMGZmMDAwMCk+PjE2O1xuXHRcdEcgPSAoY29sb3JbMV0mMHgwMDAwZmYwMCk+Pjg7XG5cdFx0QiA9IChjb2xvclsxXSYweDAwMDAwMGZmKTtcblx0XHRicmVhaztcblx0XHRjYXNlICdUJzpcblx0XHRcdFIgPSAtMTtcblx0XHRcdEcgPSAtMTtcblx0XHRcdEIgPSAtMTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ0cnOlxuXHRcdFx0UiA9IEcgPSBCID0gY29sb3JbMV0gKiAyNTU7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICdSR0InOlxuXHRcdFx0UiA9IGNvbG9yWzFdICogMjU1O1xuXHRcdFx0RyA9IGNvbG9yWzJdICogMjU1O1xuXHRcdFx0QiA9IGNvbG9yWzNdICogMjU1O1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAnQ01ZSyc6XG5cdFx0XHRSID0gKCgxIC0gY29sb3JbNF0pICogKDEgLSBjb2xvclsxXSkpICogMjU1O1xuXHRcdFx0RyA9ICgoMSAtIGNvbG9yWzRdKSAqICgxIC0gY29sb3JbMl0pKSAqIDI1NTtcblx0XHRcdEIgPSAoKDEgLSBjb2xvcls0XSkgKiAoMSAtIGNvbG9yWzNdKSkgKiAyNTU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAncic6XG4gICAgICAgICAgICBjb21wb25lbnRzID0gY29sb3IubWF0Y2goL3JnYmE/XFwoKFxcZCopLCAoXFxkKiksIChcXGQqKSw/ID8oW1xcLjAtOV0qKT9cXCkvKTtcbiAgICAgICAgICAgIFI9K2NvbXBvbmVudHNbMV07XG4gICAgICAgICAgICBHPStjb21wb25lbnRzWzJdO1xuICAgICAgICAgICAgQj0rY29tcG9uZW50c1szXTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICcjJzpcbiAgICAgICAgICAgIGxldCBwID0gY29sb3IubGVuZ3RoPT00Py8jKFswLTlhLWZBLUZdKShbMC05YS1mQS1GXSkoWzAtOWEtZkEtRl0pJC86LyMoWzAtOWEtZkEtRl17Mn0pKFswLTlhLWZBLUZdezJ9KShbMC05YS1mQS1GXXsyfSkkL1xuICAgICAgICAgICAgY29tcG9uZW50cyA9IGNvbG9yLm1hdGNoKHApO1xuICAgICAgICAgICAgUj1wYXJzZUludChjb21wb25lbnRzWzFdLDE2KTtcbiAgICAgICAgICAgIEc9cGFyc2VJbnQoY29tcG9uZW50c1syXSwxNik7XG4gICAgICAgICAgICBCPXBhcnNlSW50KGNvbXBvbmVudHNbM10sMTYpO1xuXHR9XG5cdHN3aXRjaChvdXRUeXBlKXtcblx0XHRjYXNlICdIVE1MJzpcblx0XHRcdGlmIChSID09PSBHICYmIEcgPT09IEIgJiYgQiA9PT0gLTEpIHsgdmFsdWUgPSAndHJhbnNwYXJlbnQnIH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHR2YWx1ZSA9ICdyZ2JhKCcgKyBwYXJzZUludChSKSArICcsJyArIHBhcnNlSW50KEcpICsgJywnICsgcGFyc2VJbnQoQikgKyAnLCcrb3BhY2l0eSsnKSc7XG5cdFx0XHR9XG4gICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICcjJzpcbiAgICAgICAgICAgIHZhbHVlID0gMDtcbiAgICAgICAgICAgIHZhbHVlIHw9IFI8PDE2O1xuXHRcdFx0dmFsdWUgfD0gRzw8ODtcblx0XHRcdHZhbHVlIHw9IEI7XG4gICAgICAgICAgICB2YWx1ZT1jb252ZXJ0RnJvbU51bWJlclRvSGV4KHZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG5cdFx0Y2FzZSAnaW50Jzpcblx0XHRcdHZhbHVlID0gMDtcblxuXHRcdFx0b3BhY2l0eSo9MjU1O1xuXHRcdFx0dmFsdWUgfD0gb3BhY2l0eTw8MjQ7XG5cdFx0XHR2YWx1ZSB8PSBSPDwxNjtcblx0XHRcdHZhbHVlIHw9IEc8PDg7XG5cdFx0XHR2YWx1ZSB8PSBCO1xuXHRcdFx0dmFsdWUgPSB2YWx1ZT4+PjBcblx0XHRicmVhaztcblx0fVxuXHRcblxuXHRyZXR1cm4gdmFsdWU7XG59XG5jb25zdCBGRjAwMDAwMCA9IDB4RkYwMDAwMDA7XG5leHBvcnQgZnVuY3Rpb24gc3RhbmRhcmRDb2xvckFzQVJHQk51bWJlcihjb2xvclZhbHVlKSB7XG4gICAgaWYoY29sb3JWYWx1ZSA8PSAweEZGRkZGRikge1xuICAgICAgICByZXR1cm4gRkYwMDAwMDAgKyBjb2xvclZhbHVlO1xuICAgIH0gZWxzZSBpZihjb2xvclZhbHVlID4gMHhGRkZGRkYpIHtcbiAgICAgICAgcmV0dXJuIGNvbG9yVmFsdWU7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29sb3JWYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29sb3JWYWx1ZSA9IGNvbG9yVmFsdWUucmVwbGFjZSgnIycsICcnKS50cmltKCk7XG4gICAgICAgIGlmKGNvbG9yVmFsdWUubWF0Y2goL15bMC05QS1GXXs4fSQvaSkpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUludChjb2xvclZhbHVlLCAxNik7XG4gICAgICAgIH0gZWxzZSBpZihjb2xvclZhbHVlLm1hdGNoKC9eWzAtOUEtRl17Nn0kL2kpKSB7XG4gICAgICAgICAgICByZXR1cm4gRkYwMDAwMDAgKyBwYXJzZUludChjb2xvclZhbHVlLCAxNik7XG4gICAgICAgIH0gZWxzZSBpZihjb2xvclZhbHVlLm1hdGNoKC9ecmdiXFwoXFxkezEsM30oLFxcZHsxLDN9KXsyfVxcKSQvaSkpIHtcbiAgICAgICAgICAgIGNvbnN0IFsscixnLGIsXSA9IGNvbG9yVmFsdWUuc3BsaXQoL1xcRCsvKS5tYXAoeD0+cGFyc2VJbnQoeCkpO1xuICAgICAgICAgICAgcmV0dXJuIEZGMDAwMDAwICsgKHIgPDwgMTYpICsgKGcgPDwgOCkgKyBiO1xuICAgICAgICB9IGVsc2UgaWYoY29sb3JWYWx1ZS5tYXRjaCgvXnJnYmFcXChcXGR7MSwzfSgsXFxkezEsM30pezN9XFwpJC9pKSkge1xuICAgICAgICAgICAgY29uc3QgWyxyLGcsYixhLF0gPSBjb2xvclZhbHVlLnNwbGl0KC9cXEQrLykubWFwKHg9PnBhcnNlSW50KHgpKTtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKGEgKiBGRjAwMDAwMCkgKyAociA8PCAxNikgKyAoZyA8PCA4KSArIGI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKGBpbmNvcnJlY3QgY29sb3IgZm9ybWF0OiBcIiR7Y29sb3JWYWx1ZX1cImApO1xufSIsIi8qKlxuICogQHByaXZhdGVcbiAqIEBkZWZncm91cCBBbm5vdENvbnN0cyBBbm5vdGF0aW9uJ3MgQ29uc3RhbnRzIHZhcmlhYmxlLlxuICogQGluZ3JvdXAgVmlld2VyQW5ub3RhdGlvbnNcbiAqL1xuXG5leHBvcnQgY29uc3QgQk9SREVSX1NUWUxFID0ge1xuICAgIC8qKlxuICAgICAqIEBicmVpZiBUaGlzIGlzIG9ubHkgdXNlZnVsIGZvciBsaW5rLCBmcmVlIHRleHQsIGxpbmUsIHNxdWFyZSwgY2lyY2xlLCBwb2x5Z29uLCBwb2x5bGluZSBhbmQgc2NyZWVuIGFubm90YXRpb24uIFxuICAgICAqIElmIHRoaXMgaXMgc2V0IHRvIG90aGVyIHR5cGUgYW5ub3RhdGlvbiwgRm94aXQgUERGIFNESyB3aWxsIGNoYW5nZSB0byBzZXQgYm9yZGVyIHN0eWxlIGFzIEJvcmRlckluZm86OmVfU29saWQgYnkgZGVmYXVsdCBpbnRlcm5hbGx5LlxuICAgICAqL1xuICAgIFNPTElEOiAwLCAvLyAwIGVuZ2luZS5TdHlsZS5lX1NvbGlkXG4gICAgLyoqXG4gICAgICogQGJyZWlmIFRoaXMgaXMgb25seSB1c2VmdWwgZm9yIGxpbmssIGZyZWUgdGV4dCwgbGluZSwgc3F1YXJlLCBjaXJjbGUsIHBvbHlnb24sIHBvbHlsaW5lIGFuZCBzY3JlZW4gYW5ub3RhdGlvbi4gXG4gICAgICogSWYgdGhpcyBpcyBzZXQgdG8gb3RoZXIgdHlwZSBhbm5vdGF0aW9uLCBGb3hpdCBQREYgU0RLIHdpbGwgY2hhbmdlIHRvIHNldCBib3JkZXIgc3R5bGUgYXMgQm9yZGVySW5mbzo6ZV9Tb2xpZCBieSBkZWZhdWx0IGludGVybmFsbHkuXG4gICAgICovXG4gICAgREFTSEVEOiAxLCAvLyAxIGVuZ2luZS5TdHlsZS5lX0Rhc2hlZFxuICAgIC8qKlxuICAgICAqIEBicmVpZiBUaGlzIGlzIG9ubHkgdXNlZnVsIGZvciBsaW5rIGFubm90YXRpb24uIFxuICAgICAqIElmIHRoaXMgaXMgc2V0IHRvIG90aGVyIHR5cGUgYW5ub3RhdGlvbiwgRm94aXQgUERGIFNESyB3aWxsIGNoYW5nZSB0byBzZXQgYm9yZGVyIHN0eWxlIGFzIEJvcmRlckluZm86OmVfU29saWQgYnkgZGVmYXVsdCBpbnRlcm5hbGx5LiBcbiAgICAgKi9cbiAgICBVTkRFUkxJTkU6IDIsIC8vIDIgZW5naW5lLlN0eWxlLmVfVW5kZXJsaW5lXG4gICAgLyoqXG4gICAgICogQGJyZWlmIEN1cnJlbnRseSwgRm94aXQgUERGIFNESyBkb2VzIG5vdCBzdXBwb3J0IHRoZSBhbm5vdGF0aW9uIGFwcGVhcmFuY2Ugb2YgdGhpcyBib3JkZXIgc3R5bGUuIFxuICAgICAqIElmIHRoaXMgaXMgc2V0IHRvIGFueSBhbm5vdGF0aW9uLCBGb3hpdCBQREYgU0RLIHdpbGwgY2hhbmdlIHRvIHNldCBib3JkZXIgc3R5bGUgYXMgQm9yZGVySW5mbzo6ZV9Tb2xpZCBieSBkZWZhdWx0IGludGVybmFsbHkuIFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgQkVWRUxFRDogMywgLy8gMyBlbmdpbmUuU3R5bGUuZV9CZXZlbGVkXG4gICAgLyoqXG4gICAgICogQGJyZWlmIEN1cnJlbnRseSwgRm94aXQgUERGIFNESyBkb2VzIG5vdCBzdXBwb3J0IHRoZSBhbm5vdGF0aW9uIGFwcGVhcmFuY2Ugb2YgdGhpcyBib3JkZXIgc3R5bGUuIFxuICAgICAqIElmIHRoaXMgaXMgc2V0IHRvIGFueSBhbm5vdGF0aW9uLCBGb3hpdCBQREYgU0RLIHdpbGwgY2hhbmdlIHRvIHNldCBib3JkZXIgc3R5bGUgYXMgQm9yZGVySW5mbzo6ZV9Tb2xpZCBieSBkZWZhdWx0IGludGVybmFsbHkuXG4gICAgICovXG4gICAgSU5TRVQ6IDQsIC8vIDQgZW5naW5lLlN0eWxlLmVfSW5zZXRcbiAgICAvKipcbiAgICAgKiBAYnJlaWYgVGhpcyBpcyBvbmx5IHVzZWZ1bCBmb3IgZnJlZSB0ZXh0LCBzcXVhcmUsIGNpcmNsZSwgYW5kIHBvbHlnb24gYW5ub3RhdGlvbnMuIFxuICAgICAqIElmIHRoaXMgaXMgc2V0IHRvIG90aGVyIHR5cGUgYW5ub3RhdGlvbiwgRm94aXQgUERGIFNESyB3aWxsIGNoYW5nZSB0byBzZXQgYm9yZGVyIHN0eWxlIGFzIEJvcmRlckluZm86OmVfU29saWQgYnkgZGVmYXVsdCBpbnRlcm5hbGx5LiBcbiAgICAgKi9cbiAgICBDTE9VRFk6IDUsLy8gNSBlbmdpbmUuU3R5bGUuZV9DbG91ZHlcbn07XG5leHBvcnQgY29uc3QgTUFSS1VQX0FOTk9UQVRJT05fU1RBVEUgPSB7XG4gICAgTUFSS0VEOiAnbWFya2VkJyxcbiAgICBVTk1BUktFRDogJ3VubWFya2VkJyxcbiAgICBBQ0NFUFRFRDogJ2FjY2VwdGVkJyxcbiAgICBSRUpFQ1RFRDogJ3JlamVjdGVkJyxcbiAgICBDQU5DRUxMRUQ6ICdjYW5jZWxsZWQnLFxuICAgIENPTVBMRVRFRDogJ2NvbXBsZXRlZCcsXG4gICAgTk9ORTogJ25vbmUnXG59O1xuLyoqXG4gKiBFbnVtZXJhdGlvbiBmb3IgcG9pbnQgdHlwZSBpbiBwYXRoLiBcbiAqIFZhbHVlcyBvZiB0aGlzIGVudW1lcmF0aW9uIHNob3VsZCBiZSB1c2VkIGFsb25lLlxuICovXG5leHBvcnQgY29uc3QgUE9JTlRfVFlQRSA9IHtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBJbmRpY2F0ZXMgdGhhdCB0aGUgcG9pbnQgaXMgdGhlIGZpcnN0IHBvaW50IG9mIGEgXG4gICAgICovXG4gICAgTU9WRV9UTzogMSwgLy8gZW5naW5lLlBvaW50VHlwZS5lX1R5cGVNb3ZlVG9cbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgdGhhdCBhIGxpbmUgaXMgZHJhd24gZnJvbSB0aGUgcHJldmlvdXMgcG9pbnQgdG8gdGhpcyBwb2ludFxuICAgICAqL1xuICAgIExJTkVfVE86IDIsIC8vIGVuZ2luZS5Qb2ludFR5cGUuZV9UeXBlTGluZVRvXG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHRoYXQgYSBsaW5lIGlzIGRyYXduIGZyb20gdGhlIHByZXZpb3VzIHBvaW50IHRvIHRoaXMgcG9pbnQsIFxuICAgICAqIGFuZCB0aGlzIHBvaW50IHdpbGwgYWxzbyBiZSBjb25uZWN0ZWQgdG8gdGhlIG5lYXJlc3Qge0BsaW5rIFBPSU5UX1RZUEUuTU9WRV9UT30gcG9pbnQgYmVmb3JlIHRoaXMgcG9pbnQsIGluIG9yZGVyIHRvIGNsb3NlIGN1cnJlbnQgZmlndXJlXG4gICAgICovXG4gICAgTElORV9UT19DTE9TRV9GSUdVUkU6IDMsIC8vIGVuZ2luZS5Qb2ludFR5cGUuZV9UeXBlTGluZVRvQ2xvc2VGaWd1cmVcbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgdGhhdCB0aGlzIHBvaW50IGlzIGEgY29udHJvbCBwb2ludCBvciBlbmRpbmcgcG9pbnQgZm9yIGEgQmV6aWVyIHNwbGluZVxuICAgICAqL1xuICAgIEJFWklFUl9UTzogNCwgLy8gZW5naW5lLlBvaW50VHlwZS5lX1R5cGVCZXppZXJUb1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB0aGF0IHRoaXMgcG9pbnQgaXMgdGhlIGVuZGluZyBwb2ludCBmb3IgYSBCZXppZXIgc3BsaW5lLCBcbiAgICAgKiBhbmQgdGhpcyBwb2ludCB3aWxsIGFsc28gYmUgY29ubmVjdGVkIHRvIHRoZSBuZWFyZXN0IHtAbGluayBQT0lOVF9UWVBFLkJFWklFUl9UT30gcG9pbnQgYmVmb3JlIHRoaXMgcG9pbnQsIGluIG9yZGVyIHRvIGNsb3NlIGN1cnJlbnQgXG4gICAgICovXG4gICAgQkVaSUVSX1RPX0NMT1NFX0ZJR1VSRTogNSAvLyBlbmdpbmUuUG9pbnRUeXBlLmVfVHlwZUJlemllclRvQ2xvc2VGaWd1cmVcbn07XG5leHBvcnQgY29uc3QgSW50ZW50cyA9IHtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIElmIGEgbGluZSBhbm5vdGF0aW9uJ3MgaW50ZW50IGlzIHRvIGJlIHNldCB0byBcIkxpbmVBcnJvd1wiLCBcbiAgICAgKiB0aGUgbGluZSBhbm5vdGF0aW9uJ3MgbGluZSBlbmRpbmcgc3R5bGVzIHdpbGwgYmUgTWFya3VwOjplX0VuZGluZ1N0eWxlTm9uZSBmb3Igc3RhcnQgcG9pbnQgYW5kIFxuICAgICAqIE1hcmt1cDo6ZV9FbmRpbmdTdHlsZU9wZW5BcnJvdyBmb3IgZW5kIHBvaW50IGJ5IGRlZmF1bHRcbiAgICAgKi9cbiAgICBMSU5FX0FSUk9XOiAnTGluZUFycm93JyxcbiAgICBMSU5FX0RJTUVOU0lPTjogJ0xpbmVEaW1lbnNpb24nLFxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogSWYgYSBwb2x5Z29uIGFubm90YXRpb24ncyBpbnRlbnQgaXMgdG8gYmUgc2V0IHRvIFwiUG9seWdvbkNsb3VkXCIsIFxuICAgICAqIHRoZSBwb2x5Z29uIGFubm90YXRpb24ncyBib3JkZXIgc3R5bGUgd2lsbCBiZSBjaGFuZ2VkIHRvIEJvcmRlckluZm86OmVfQ2xvdWR5IGFuZCBcbiAgICAgKiBCb3JkZXJJbmZvOjpjbG91ZF9pbnRlbnNpdHkgd2lsbCBiZSBzZXQgdG8gMiBieSBkZWZhdWx0LiBcbiAgICAgKi9cbiAgICBQT0xZR09OX0NMT1VEOiAnUG9seWdvbkNsb3VkJyxcbiAgICBQT0xZR09OX0RJTUVOU0lPTjogJ1BvbHlnb25EaW1lbnNpb24nLFxuICAgIFBPTFlMSU5FX0RJTUVOU0lPTjogJ1BvbHlMaW5lRGltZW5zaW9uJyxcbiAgICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQSBmcmVlIHRleHQgYW5ub3RhdGlvbiBkaXNwbGF5cyB0ZXh0IGRpcmVjdGx5IG9uIHRoZSBwYWdlLiBcbiAgICAgKiBTbyBmcmVlIHRleHQgYW5ub3RhdGlvbiBkb2VzIG5vdCBuZWVkIGEgcmVsYXRlZCBwb3AtdXAgYW5ub3RhdGlvbiB0byBzaG93IHRoZSB0ZXh0LlxuICAgICAqIEZyZWUgdGV4dCBhbm5vdGF0aW9uIGlzIGEga2luZCBvZiBtYXJrdXAgYW5ub3RhdGlvblxuICAgICAqIHNvIGNsYXNzIEZyZWVUZXh0IGlzIGRlcml2ZWQgZnJvbSBjbGFzcyBNYXJrdXAsXG4gICAgICogYW5kIGFsc28gb2ZmZXJzIGZ1bmN0aW9ucyB0byBnZXQvc2V0IGZyZWUgdGV4dCBhbm5vdGF0aW9uJ3MgcHJvcGVydGllcyBhbmQgcmVzZXQgYXBwZWFyYW5jZSBzdHJlYW0gb2YgYSBmcmVlIHRleHQgYW5ub3RhdGlvbi4gICAgICBcbiAgICAgKi9cbiAgICBGUkVFVEVYVF9UWVBFV1JJVEVSOiAnRnJlZVRleHRUeXBld3JpdGVyJyxcbiAgICBGUkVFVEVYVF9DQUxMT1VUOiAnRnJlZVRleHRDYWxsb3V0JyxcblxuICAgIFNUUklLRU9VVF9URVhURURJVDogJ1N0cmlrZU91dFRleHRFZGl0Jyxcbn07XG5cbmV4cG9ydCBjb25zdCBMaW5lRW5kaW5nTmFtZSA9IHtcbiAgICAwOlwiTm9uZVwiLFxuICAgIDE6XCJTcXVhcmVcIixcbiAgICAyOlwiQ2lyY2xlXCIsXG4gICAgMzpcIkRpYW1vbmRcIixcbiAgICA0OlwiT3BlbkFycm93XCIsXG4gICAgNTpcIkNsb3NlZEFycm93XCIsXG4gICAgNjpcIkJ1dHRcIixcbiAgICA3OlwiUk9wZW5BcnJvd1wiLFxuICAgIDg6XCJSQ2xvc2VkQXJyb3dcIixcbiAgICA5OlwiU2xhc2hcIixcbn07XG5cbmV4cG9ydCBjb25zdCBMaW5lRW5kaW5nU3R5bGUgPSBPYmplY3Qua2V5cyhMaW5lRW5kaW5nTmFtZSkucmVkdWNlKChwcmV2LCBrZXkpID0+IHtcbiAgICBwcmV2W0xpbmVFbmRpbmdOYW1lW2tleV1dID0ga2V5O1xuICAgIHJldHVybiBwcmV2O1xufSwge30pO1xuXG5leHBvcnQgY29uc3QgQW5ub3RGbGFnc05hbWUgPSB7XG4gICAgMDpcImludmlzaWJsZVwiLFxuICAgIDE6XCJoaWRkZW5cIixcbiAgICAyOlwicHJpbnRcIixcbiAgICAzOlwibm96b29tXCIsXG4gICAgNDpcIm5vcm90YXRlXCIsXG4gICAgNTpcIm5vdmlld1wiLFxuICAgIDY6XCJyZWFkb25seVwiLFxuICAgIDc6XCJsb2NrZWRcIixcbiAgICA4OlwidG9nZ2xlbm92aWV3XCIsXG59XG5cbmV4cG9ydCBjb25zdCBQREZEb2NQZXJtaXNzaW9uID0ge1xuICAgIFByaW50TG93UXVhbGl0eTo0LFxuICAgIE1vZGlmeURvY3VtZW50OjgsXG4gICAgRXh0cmFjdDoxNixcbiAgICBBbm5vdEZvcm06MzIsXG4gICAgRmlsbEZvcm06MjU2LFxuICAgIEV4dHJhY3RBY2Nlc3M6NTEyLFxuICAgIEFzc2VtYmxlOjEwMjQsXG4gICAgUHJpbnRIaWdoUXVhbGl0eToyMDQ4LFxuICB9IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlRGVmZXJyZWQgKCkge1xyXG4gICAgdmFyIGRlZmVycmVkID0ge307XHJcbiAgICBkZWZlcnJlZC5wcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIGRlZmVycmVkLnJlc29sdmUgPSByZXNvbHZlO1xyXG4gICAgICAgIGRlZmVycmVkLnJlamVjdCA9IHJlamVjdDtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGRlZmVycmVkO1xyXG59IiwiY29uc3QgdW5pcXVlUHJlZml4ID0gJ3VuaXF1ZV8nICsgRGF0ZS5ub3coKTtcclxudmFyIGluZGV4ID0gMDtcclxuLy8gU3ltYm9sIOS4jeiDveiiq3Bvc3RNZXNzYWdl5Lyg6YCSXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVuaXF1ZUlkIChwcmVmaXgpIHtcclxuICAgIHJldHVybiBbcHJlZml4IHx8ICcnLCB1bmlxdWVQcmVmaXgsIGluZGV4KytdLmpvaW4oJ18nKTtcclxufSIsIi8qKlxuICogQ3JlYXRlZCBieSBsaW5jIG9uIDIwMTkvMi8xNC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ3VpZCgpIHtcbiAgICByZXR1cm4gJ3h4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbiAoYykge1xuICAgICAgICB2YXIgciA9IE1hdGgucmFuZG9tKCkgKiAxNiB8IDAsXG4gICAgICAgICAgICB2ID0gYyA9PSAneCcgPyByIDogKHIgJiAweDMgfCAweDgpO1xuICAgICAgICByZXR1cm4gdi50b1N0cmluZygxNik7XG4gICAgfSk7XG59IiwiaW1wb3J0IG5vdEltcGxlbWVudGVkIGZyb20gXCIuLi9ub3RJbXBsZW1lbnRlZFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBcHBlbmRlciB7XG4gICAgcHJpbnQoZGF0YSwgbGV2ZWwpIHtcbiAgICAgICAgbm90SW1wbGVtZW50ZWQoZGF0YSwgbGV2ZWwpO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBMRVZFTF9ERUJVRywgTEVWRUxfSU5GTywgTEVWRUxfV0FSTiwgTEVWRUxfRVJST1IgfSBmcm9tIFwiLi9jb25zdHNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcGxleExheW91dCB7XG4gICAgZm9ybWF0KG1vZHVsZSwgbGV2ZWwsIG1lc3NhZ2VzKSB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICAgIGxldCByZWFsVHJhY2U7XG4gICAgICAgIGlmKHN0YWNrKSB7XG4gICAgICAgICAgICBjb25zdCB0cmFjZXN0YWNrID0gc3RhY2suc3BsaXQoJ1xcbicpO1xuICAgICAgICAgICAgcmVhbFRyYWNlID0gJ1xcbiAgJyArIHRyYWNlc3RhY2tbNF0udHJpbSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbe1xuICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICBzdHlsZTogYGNvbG9yOiAke3RoaXMubGV2ZWxDb2xvcihsZXZlbCl9O2AsXG4gICAgICAgICAgICB2YWx1ZTogYFske3RoaXMubGV2ZWxUZXh0KGxldmVsKX1dYFxuICAgICAgICB9LCB7XG4gICAgICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgIHN0eWxlOiAnY29sb3I6IG1hZ2VudGEnLFxuICAgICAgICAgICAgdmFsdWU6IGB7JHttb2R1bGV9fWBcbiAgICAgICAgfV0uY29uY2F0KG1lc3NhZ2VzLm1hcChtc2cgPT4ge1xuICAgICAgICAgICAgaWYobXNnID09PSB1bmRlZmluZWQgfHwgbXNnID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogdHlwZW9mIG1zZyxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6ICdjb2xvcjogbWVnZW50YTtmb250LXdlaWdodDogYm9sZCcsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBtc2cgKyAnJ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZih0eXBlb2YgbXNnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IHR5cGVvZiBtc2csXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiBgY29sb3I6ICR7dGhpcy5sZXZlbENvbG9yKGxldmVsKX1gLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbXNnXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogdHlwZW9mIG1zZyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG1zZ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKS5jb25jYXQoe1xuICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICBzdHlsZTogJ2NvbG9yOiBncmV5OycsXG4gICAgICAgICAgICB2YWx1ZTogcmVhbFRyYWNlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBsZXZlbENvbG9yKGxldmVsKSB7XG4gICAgICAgIHN3aXRjaChsZXZlbCkge1xuICAgICAgICAgICAgY2FzZSBMRVZFTF9ERUJVRzpcbiAgICAgICAgICAgIHJldHVybiAnYmx1ZSc7XG4gICAgICAgICAgICBjYXNlIExFVkVMX0lORk86XG4gICAgICAgICAgICByZXR1cm4gJ2dyZWVuJztcbiAgICAgICAgICAgIGNhc2UgTEVWRUxfV0FSTjpcbiAgICAgICAgICAgIHJldHVybiAnIzVDM0MwMCc7XG4gICAgICAgICAgICBjYXNlIExFVkVMX0VSUk9SOlxuICAgICAgICAgICAgcmV0dXJuICdyZWQnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnIzAwMCc7XG4gICAgfVxuICAgIGxldmVsVGV4dChsZXZlbCkge1xuICAgICAgICBzd2l0Y2gobGV2ZWwpIHtcbiAgICAgICAgICAgIGNhc2UgTEVWRUxfREVCVUc6XG4gICAgICAgICAgICByZXR1cm4gJ0RFQlVHJztcbiAgICAgICAgICAgIGNhc2UgTEVWRUxfSU5GTzpcbiAgICAgICAgICAgIHJldHVybiAnSU5GTyc7XG4gICAgICAgICAgICBjYXNlIExFVkVMX1dBUk46XG4gICAgICAgICAgICByZXR1cm4gJ1dBUk4nO1xuICAgICAgICAgICAgY2FzZSBMRVZFTF9FUlJPUjpcbiAgICAgICAgICAgIHJldHVybiAnRVJST1InO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnVU5LTk9XTiBMRVZFTCc7XG4gICAgfVxufSIsImltcG9ydCB7IExFVkVMX0RFQlVHLCBMRVZFTF9JTkZPLCBMRVZFTF9XQVJOLCBMRVZFTF9FUlJPUiB9IGZyb20gXCIuL2NvbnN0c1wiO1xuaW1wb3J0IEFwcGVuZGVyIGZyb20gXCIuL0FwcGVuZGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnNvbGVBcHBlbmRlciBleHRlbmRzIEFwcGVuZGVyIHtcbiAgICBwcmludChkYXRhLCBsZXZlbCkge3JldHVybjtcbiAgICAgICAgY29uc3QgbXNnID0gZGF0YS5tYXAoaXRlbSA9PiB7XG4gICAgICAgICAgICBpZihpdGVtLnR5cGUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcgJW8nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyAlYycgKyBpdGVtLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KS5qb2luKCcnKS50cmltKCk7XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IGRhdGEubWFwKGl0ZW0gPT4ge1xuICAgICAgICAgICAgc3dpdGNoKGl0ZW0udHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLnN0eWxlO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcGFyYW1zLnNwbGljZSgwLCAwLCBtc2cpO1xuICAgICAgICBzd2l0Y2gobGV2ZWwpIHtcbiAgICAgICAgICAgIGNhc2UgTEVWRUxfREVCVUc6XG4gICAgICAgICAgICBjb25zb2xlLmRlYnVnKC4uLnBhcmFtcyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgTEVWRUxfSU5GTzpcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbyguLi5wYXJhbXMpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIExFVkVMX1dBUk46XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oLi4ucGFyYW1zKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBMRVZFTF9FUlJPUjpcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoLi4ucGFyYW1zKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKC4uLnBhcmFtcyk7XG4gICAgICAgIH1cbiAgICB9XG59IiwiaW1wb3J0IHtcbiAgICBMRVZFTF9ERUJVRyxcbiAgICBMRVZFTF9JTkZPLFxuICAgIExFVkVMX1dBUk4sXG4gICAgTEVWRUxfRVJST1Jcbn0gZnJvbSBcIi4vY29uc3RzXCI7XG5cbmltcG9ydCAqIGFzIGNvbmZpZyBmcm9tICcuL2NvbmZpZyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvZ2dlciB7XG4gICAgY29uc3RydWN0b3IoYXBwZW5kZXIsIGxheW91dCwgbW9kdWxlLCBtaW5MZXZlbCkge1xuICAgICAgICB0aGlzLmFwcGVuZGVyID0gYXBwZW5kZXI7XG4gICAgICAgIHRoaXMubGF5b3V0ID0gbGF5b3V0O1xuICAgICAgICB0aGlzLm1vZHVsZSA9IG1vZHVsZTtcbiAgICAgICAgdGhpcy5taW5MZXZlbCA9IG1pbkxldmVsO1xuICAgICAgICB0aGlzLmxvZ09mZiA9IGZhbHNlO1xuICAgIH1cbiAgICB0b2dnbGUobG9nT2ZmKSB7XG4gICAgICAgIGlmKHR5cGVvZiBsb2dPZmYgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgdGhpcy5sb2dPZmYgPSBsb2dPZmY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmxvZ09mZiA9ICFjb25maWcubG9nT2ZmO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldExldmVsKGxldmVsKSB7XG4gICAgICAgIHRoaXMubWluTGV2ZWwgPSBsZXZlbDtcbiAgICB9XG4gICAgZG9Mb2cobGV2ZWwsIC4uLm1lc3NhZ2VzKSB7XG4gICAgICAgIGlmICh0aGlzLmxvZ09mZiB8fCBjb25maWcubG9nT2ZmIHx8IGxldmVsIDwgdGhpcy5taW5MZXZlbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmxheW91dC5mb3JtYXQodGhpcy5tb2R1bGUsIGxldmVsLCBtZXNzYWdlcyk7XG4gICAgICAgIHRoaXMuYXBwZW5kZXIucHJpbnQoZGF0YSwgbGV2ZWwpO1xuICAgIH1cbiAgICBsb2cobGV2ZWwsIC4uLm1lc3NhZ2VzKSB7XG4gICAgICAgIHRoaXMuZG9Mb2cobGV2ZWwsIC4uLm1lc3NhZ2VzKTtcbiAgICB9XG4gICAgZGVidWcoLi4ubWVzc2FnZXMpIHtcbiAgICAgICAgdGhpcy5kb0xvZyhMRVZFTF9ERUJVRywgLi4ubWVzc2FnZXMpO1xuICAgIH1cbiAgICBpbmZvKC4uLm1lc3NhZ2VzKSB7XG4gICAgICAgIHRoaXMuZG9Mb2coTEVWRUxfSU5GTywgLi4ubWVzc2FnZXMpO1xuICAgIH1cbiAgICB3YXJuKC4uLm1lc3NhZ2VzKSB7XG4gICAgICAgIHRoaXMuZG9Mb2coTEVWRUxfV0FSTiwgLi4ubWVzc2FnZXMpO1xuICAgIH1cbiAgICBlcnJvciguLi5tZXNzYWdlcykge1xuICAgICAgICB0aGlzLmRvTG9nKExFVkVMX0VSUk9SLCAuLi5tZXNzYWdlcyk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIE5vTG9nZ2VyIGV4dGVuZHMgTG9nZ2VyIHtcbiAgICBkb0xvZygpIHt9XG59IiwiaW1wb3J0ICogYXMgY29uZmlnIGZyb20gJy4vY29uZmlnJztcbmltcG9ydCBTaW1wbGVMYXlvdXQgZnJvbSAnLi9TaW1wbGVMYXlvdXQnO1xuaW1wb3J0IHsgTEVWRUxfREVCVUcsIExFVkVMX1dBUk4sIExFVkVMX0VSUk9SLCBMRVZFTF9JTkZPIH0gZnJvbSAnLi9jb25zdHMnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcuL0xvZ2dlcic7XG5pbXBvcnQgQ29uc29sZUFwcGVuZGVyIGZyb20gJy4vQ29uc29sZUFwcGVuZGVyJztcbmltcG9ydCBDb21wbGV4TGF5b3V0IGZyb20gJy4vQ29tcGxleExheW91dCc7XG5pbXBvcnQgTXVsdGlwbGVBcHBlbmRlciBmcm9tICcuL011bHRpcGxlQXBwZW5kZXInO1xuaW1wb3J0IEFwcGVuZGVyIGZyb20gJy4vQXBwZW5kZXInO1xuXG5jb25zdCBsb2dnZXJTdG9yYWdlID0ge307XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvZ2dlckZhY3Rvcnkge1xuICAgIHN0YXRpYyB0b2dnbGVMb2dnZXIobG9nT2ZmKSB7XG4gICAgICAgIGlmKHR5cGVvZiBsb2dPZmYgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgY29uZmlnLmxvZ09mZiA9IGxvZ09mZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbmZpZy5sb2dPZmYgPSAhY29uZmlnLmxvZ09mZjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICAgKiBAcmV0dXJucyB7TG9nZ2VyfVxuICAgICAqIEBtZW1iZXJvZiBMb2dnZXJGYWN0b3J5XG4gICAgICovXG4gICAgc3RhdGljIGdldExvZ2dlcihuYW1lKSB7XG4gICAgICAgIHJldHVybiBsb2dnZXJTdG9yYWdlW25hbWVdID0gbG9nZ2VyU3RvcmFnZVtuYW1lXSB8fCB0aGlzLmNyZWF0ZUxvZ2dlcihuYW1lKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICAgKiBAcmV0dXJucyB7TG9nZ2VyfVxuICAgICAqIEBtZW1iZXJvZiBMb2dnZXJGYWN0b3J5XG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZUxvZ2dlcihuYW1lKSB7XG4gICAgICAgIGxldCBsYXlvdXQsIGxldmVsLCBhcHBlbmRlcnMgPSBbXTtcbiAgICAgICAgc3dpdGNoKGNvbmZpZy5sb2dMYXlvdXQpIHtcbiAgICAgICAgICAgIGNhc2UgJ2NvbXBsZXgnOlxuICAgICAgICAgICAgbGF5b3V0ID0gbmV3IENvbXBsZXhMYXlvdXQoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc2ltcGxlJzogXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgbGF5b3V0ID0gbmV3IFNpbXBsZUxheW91dCgpO1xuXG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoKGNvbmZpZy5sb2dMZXZlbCkge1xuICAgICAgICAgICAgY2FzZSAnZGVidWcnOlxuICAgICAgICAgICAgbGV2ZWwgPSBMRVZFTF9ERUJVRztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaW5mbyc6XG4gICAgICAgICAgICBsZXZlbCA9IExFVkVMX0lORk87XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3dhcm4nOlxuICAgICAgICAgICAgbGV2ZWwgPSBMRVZFTF9XQVJOO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdlcnJvcic6XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgbGV2ZWwgPSBMRVZFTF9FUlJPUjtcbiAgICAgICAgfVxuICAgICAgICBhcHBlbmRlcnMgPSBjb25maWcubG9nQXBwZW5kZXJzLm1hcChuYW1lID0+IHtcbiAgICAgICAgICAgIHN3aXRjaChuYW1lKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnY29uc29sZSc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29uc29sZUFwcGVuZGVyKCk7XG4gICAgICAgICAgICAgICAgY2FzZSAnd2Vic29ja2V0JzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBXZWJzb2NrZXRBcHBlbmRlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KS5maWx0ZXIoYXBwZW5kZXIgPT4gYXBwZW5kZXIgaW5zdGFuY2VvZiBBcHBlbmRlcik7XG4gICAgICAgIHJldHVybiBuZXcgTG9nZ2VyKG5ldyBNdWx0aXBsZUFwcGVuZGVyKGFwcGVuZGVycyksIGxheW91dCwgbmFtZSwgbGV2ZWwpO1xuICAgIH1cbn0iLCJpbXBvcnQgQ29uc29sZUFwcGVuZGVyIGZyb20gXCIuL0NvbnNvbGVBcHBlbmRlclwiO1xuaW1wb3J0IEFwcGVuZGVyIGZyb20gXCIuL0FwcGVuZGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE11bHRpcGxlQXBwZW5kZXIgZXh0ZW5kcyBBcHBlbmRlciB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHBhcmFtIHtBcHBlbmRlcn0gYXBwZW5kZXJzIFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGFwcGVuZGVycykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmFwcGVuZGVycyA9IGFwcGVuZGVycyB8fCBbXTtcbiAgICB9XG4gICAgcHJpbnQoZGF0YSwgbGV2ZWwpIHtcbiAgICAgICAgdGhpcy5hcHBlbmRlcnMuZm9yRWFjaChhcHBlbmRlciA9PiBhcHBlbmRlci5wcmludChkYXRhLCBsZXZlbCkpO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBMRVZFTF9ERUJVRywgTEVWRUxfSU5GTywgTEVWRUxfV0FSTiwgTEVWRUxfRVJST1IgfSBmcm9tIFwiLi9jb25zdHNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2ltcGxlTGF5b3V0IHtcbiAgICBmb3JtYXQobW9kdWxlLCBsZXZlbCwgbWVzc2FnZXMpIHtcbiAgICAgICAgcmV0dXJuIFt7XG4gICAgICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgIHZhbHVlOiBgWyR7dGhpcy5sZXZlbFRleHQobGV2ZWwpfV1gXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICAgICAgdmFsdWU6IGB7JHttb2R1bGV9fWBcbiAgICAgICAgfV0uY29uY2F0KG1lc3NhZ2VzLm1hcChtc2cgPT4ge1xuICAgICAgICAgICAgaWYobXNnID09PSB1bmRlZmluZWQgfHwgbXNnID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogdHlwZW9mIG1zZyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG1zZyArICcnXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKHR5cGVvZiBtc2cgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogdHlwZW9mIG1zZyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG1zZ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IHR5cGVvZiBtc2csXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBtc2dcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGxldmVsVGV4dChsZXZlbCkge1xuICAgICAgICBzd2l0Y2gobGV2ZWwpIHtcbiAgICAgICAgICAgIGNhc2UgTEVWRUxfREVCVUc6XG4gICAgICAgICAgICByZXR1cm4gJ0RFQlVHJztcbiAgICAgICAgICAgIGNhc2UgTEVWRUxfSU5GTzpcbiAgICAgICAgICAgIHJldHVybiAnSU5GTyc7XG4gICAgICAgICAgICBjYXNlIExFVkVMX1dBUk46XG4gICAgICAgICAgICByZXR1cm4gJ1dBUk4nO1xuICAgICAgICAgICAgY2FzZSBMRVZFTF9FUlJPUjpcbiAgICAgICAgICAgIHJldHVybiAnRVJST1InO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnVU5LTk9XTiBMRVZFTCc7XG4gICAgfVxufSIsImV4cG9ydCBjb25zdCBsb2dMZXZlbCA9IHByb2Nlc3MuZW52LkxPR19MRVZFTDtcbmV4cG9ydCBjb25zdCBsb2dMYXlvdXQgPSBwcm9jZXNzLmVudi5MT0dfTEFZT1VUO1xuZXhwb3J0IGNvbnN0IGxvZ0FwcGVuZGVycyA9IHByb2Nlc3MuZW52LkxPR19BUFBFTkRFUjtcbmV4cG9ydCBsZXQgbG9nT2ZmID0gZmFsc2U7IiwiZXhwb3J0IGNvbnN0IExFVkVMX0RFQlVHID0gMDtcbmV4cG9ydCBjb25zdCBMRVZFTF9JTkZPID0gMjtcbmV4cG9ydCBjb25zdCBMRVZFTF9XQVJOID0gNDtcbmV4cG9ydCBjb25zdCBMRVZFTF9FUlJPUiA9IDg7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub3RJbXBsZW1lbnRlZCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQnKTtcbn07IiwiaW1wb3J0IFwiYmFiZWwtcG9seWZpbGxcIjtcbmltcG9ydCBQREZKUiBmcm9tICcuLi9wZGYtanIvUERGSlInO1xuaW1wb3J0IGNyZWF0ZURlZmZlcnJlZCBmcm9tICcuLi9zaGFyZWQvY3JlYXRlRGVmZXJyZWQnO1xuaW1wb3J0IGdldFVuaXF1ZUlkIGZyb20gJy4uL3NoYXJlZC9nZXRVbmlxdWVJZCc7XG5pbXBvcnQge2pzSGFzaCxhc21KU0hhc2ggfSBmcm9tICcuLi9qci1lbmdpbmUvZ3Nkay9nc2RrLmhhc2gnO1xuLy9pbXBvcnQgeyBQcm9taXNlIGFzIEVTNlByb21pc2UgfSBmcm9tICdlczYtcHJvbWlzZSc7XG5pbXBvcnQgZXh0ZW5kc0Zvcm1BUEkgZnJvbSAnLi93b3JrZXJBUElGb3JGb3JtJ1xuaW1wb3J0IGV4dGVuZHNHcmFwaGljQVBJIGZyb20gJy4vd29ya2VyQVBJRm9yR3JhcGhpY09iamVjdCdcbmltcG9ydCBnZXRJY29uUHJvdmlkZXIgZnJvbSAnLi4vcGRmLWpyL2ljb25Qcm92aWRlcic7XG5cbmZ1bmN0aW9uIGlzSUUxMCAoKSB7XG4gICAgbGV0IHVzZXJBZ2VudCA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbiAgICBsZXQgbWF0Y2g7XG4gICAgaWYgKCdBY3RpdmVYT2JqZWN0JyBpbiBzZWxmICYmIChtYXRjaCA9IHVzZXJBZ2VudC5tYXRjaCgvbXNpZSAoW1xcZFxcLl0rKS8pKSkge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQobWF0Y2hbMV0pID09PSAxMDtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxubGV0IGNfdGV4dFNlYXJjaENhY2hlID0ge307XG4vL0VTNlByb21pc2UucHJvdG90eXBlLl9vbmVycm9yID0gZnVuY3Rpb24gKGUpIHtcbi8vICAgIGNvbnNvbGUud2FybihlKTtcbi8vfTtcbi8vc2VsZi5Qcm9taXNlID0gc2VsZi5Qcm9taXNlIHx8IEVTNlByb21pc2U7XG5cbmNvbnN0IERPQ19JU19OVUxMID0gJ1RoZSBkb2N1bWVudCBkb2VzIG5vdCBleGlzdCBhbmQgbWF5IGhhdmUgYmVlbiBkZXN0cm95ZWQnO1xubGV0IHBkZkpSRGVmZXJyZWQgPSBjcmVhdGVEZWZmZXJyZWQoKTtcbmxldCBwZGZKUlByb21pc2UgPSBwZGZKUkRlZmVycmVkLnByb21pc2U7XG4vLyBqcuW8leaTjuaWh+S7tuW3suWKoOi9vVxubGV0IGpyRW5naW5lSXNMb2FkZWQgPSBmYWxzZTtcbi8vIGpy5byV5pOO5bey5YeG5aSH5aW95LqG77yMa2V56K6k6K+B6YCa6L+HXG5sZXQganJFbmdpbmVJc1JlYWR5ID0gZmFsc2U7XG4vLyDnp7vpmaTpgJrov4dnZXRQREZEb2NCeUFycmF5QnVmZmVy5o6l5Y+j5omT5byA55qE5paH5qGj55qEQXJyYXlCdWZmZXLnvJPlrZhcbmxldCBkZXN0cm95QXJyYXlCdWZmZXJEb2NNYXAgPSB7fTtcblxubGV0IGZ1bmN0aW9uTWFwID0ge307XG5leHRlbmRzRm9ybUFQSShmdW5jdGlvbk1hcCxfZ2V0UERGRG9jQnlJZCxwZGZKUlByb21pc2Usd29ya2VyUmVzb2x2ZSx3b3JrZXJSZWplY3QpO1xubGV0IGdyYXBoaWNzTW9kdWxlID0gZXh0ZW5kc0dyYXBoaWNBUEkoZnVuY3Rpb25NYXAsX2dldFBERkRvY0J5SWQsIF9nZXRQYWdlQnlJZCxwZGZKUlByb21pc2Usd29ya2VyUmVzb2x2ZSx3b3JrZXJSZWplY3QpO1xuXG5sZXQgYmFja01hcCA9IHt9O1xubGV0IGFzeW5jQ2FsbENhY2hlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgY2FjaGUgPSB7fTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHB1c2g6IGZ1bmN0aW9uIChpZCwgLi4uY2FsbHMpIHtcbiAgICAgICAgICAgIGxldCBhcnJheSA9IGNhY2hlW2lkXSA9IGNhY2hlW2lkXSB8fCBbXTtcbiAgICAgICAgICAgIGFycmF5LnB1c2goLi4uY2FsbHMpO1xuICAgICAgICB9LFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgICAgcmV0dXJuIGNhY2hlW2lkXSB8fCBbXTtcbiAgICAgICAgfVxuICAgIH1cbn0pKCk7XG5sZXQgZ3Nka09iakNhY2hlID0ge307XG5sZXQgcmFuZ2VNYXAgPSB7fTtcbmxldCByYW5nZURvY01hcCA9IHt9O1xuc2VsZi5vbm1lc3NhZ2UgPSAoZXZlbnQpID0+IHtcbiAgICBjb25zdCBkYXRhID0gZXZlbnQuZGF0YTtcbiAgICBjb25zdCBwYXJhbXMgPSBkYXRhLnBhcmFtcztcbiAgICBjb25zdCBiYWNrSWQgPSBkYXRhLmJhY2tJZDtcbiAgICBpZiAoYmFja0lkKSB7XG4gICAgICAgIHJldHVybiBiYWNrTWFwW2JhY2tJZF0ocGFyYW1zKTtcbiAgICB9XG4gICAgY29uc3QgbmFtZSA9IGRhdGEubmFtZTtcbiAgICBjb25zdCBpZCA9IGRhdGEuaWQ7XG5cbiAgICB0cnkge1xuICAgICAgICBsZXQgZm4gPSBmdW5jdGlvbk1hcFtuYW1lXTtcbiAgICAgICAgaWYgKGZuKSB7XG4gICAgICAgICAgICBmbihpZCwgcGFyYW1zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGV4ZWNHU0RLKGRhdGEpXG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHdvcmtlclJlamVjdChpZCwge2Vycm9yOiAtMSwgbWVzc2FnZTogJ3dlYi1wZGYtanItd29ya2VyLWVycm9yXFxyXFxuJyArIG5hbWUgKyAnXFxyXFxuJyArIGUudG9TdHJpbmcoKSwgc3RhY2s6IGUuc3RhY2t9KTtcbiAgICB9XG59XG5mdW5jdGlvbiBleGVjR1NESyAoZGF0YSkge1xuICAgIGNvbnN0IGlkID0gZGF0YS5pZDtcbiAgICBsZXQgbmFtZSA9IGRhdGEubmFtZTtcbiAgICBsZXQgbmFtZXMgPSBuYW1lLnNwbGl0KCcuJyk7XG4gICAgcmV0dXJuIHBkZkpSUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChwZGZKcikge1xuICAgICAgICByZXR1cm4gcGRmSnIuZW5naW5lO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKGVuZ2luZSkge1xuICAgICAgICBsZXQgY3VycmVudCA9IGVuZ2luZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGogPSBuYW1lcy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBrZXkgPSBuYW1lc1tpXTtcbiAgICAgICAgICAgIGxldCBPYmo7XG4gICAgICAgICAgICBpZiAoT2JqID0gY3VycmVudFtrZXldKSB7XG4gICAgICAgICAgICAgICAgbGV0IG5leHRLZXkgPSBuYW1lc1tpICsgMV07XG4gICAgICAgICAgICAgICAgaWYgKG5leHRLZXkgPT09ICdwcm90b3R5cGUnKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB0aGF0O1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCA9IGRhdGEubW9yZS5zZWxmO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IGdldE9iakZyb21DYWNoZSh0aGF0KTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IG5ldyBPYmooKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuYW1lc1tpICsgMV0gPT09ICdkZXN0cm95Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlT2JqRnJvbUNhY2hlKHRoYXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoYXQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5leHRLZXkgPT09ICdjcmVhdGUnKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBuZXcgT2JqLmFwcGx5KE9iaiwgcGFyc2VScXVlc3RQYXJhbXMoZGF0YSkpO1xuICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgT2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBPYmouYXBwbHkoY3VycmVudCwgcGFyc2VScXVlc3RQYXJhbXMoZGF0YSkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBPYmo7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXRPYmpUb0NhY2hlKGN1cnJlbnQpO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHRoYXQpIHtcbiAgICAgICAgd29ya2VyUmVzb2x2ZShpZCwgdGhhdCk7XG4gICAgfSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgd29ya2VyUmVqZWN0KGlkLCB7Y29kZTogZS5jb2RlLCBzdGFjazogZS5zdGFjaywgbWVzc2FnZTogZS5tZXNzYWdlfSk7XG4gICAgfSlcbn1cbmZ1bmN0aW9uIGdldE9iakZyb21DYWNoZSAoaWQpIHtcbiAgICByZXR1cm4gZ3Nka09iakNhY2hlW2lkXTtcbn1cbmZ1bmN0aW9uIHNldE9ialRvQ2FjaGUgKG9iaikge1xuICAgIGlmICghb2JqKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgbGV0IGlkID0gZ2V0VW5pcXVlSWQoJ29iaicpO1xuICAgIGdzZGtPYmpDYWNoZVtpZF0gPSBvYmo7XG4gICAgcmV0dXJuIGlkO1xufVxuZnVuY3Rpb24gcmVtb3ZlT2JqRnJvbUNhY2hlIChpZCkge1xuXG59XG5mdW5jdGlvbiBwYXJzZVJxdWVzdFBhcmFtcyAoZGF0YSwgZW5naW5lKSB7XG4gICAgbGV0IHBhcmFtcyA9IGRhdGEucGFyYW1zIHx8IFtdO1xuICAgIGxldCBwYXJhbXNJbmZvID0gZGF0YS5tb3JlLnBhcmFtc0luZm8gfHwgW107XG4gICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSBwYXJhbXMubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgIGxldCBwYXJhbSA9IHBhcmFtc1tpXTtcbiAgICAgICAgbGV0IHBhcmFtSW5mbyA9IHBhcmFtc0luZm9baV0gfHwge307XG4gICAgICAgIGlmIChwYXJhbUluZm8uaXNPYmplY3QpIHtcbiAgICAgICAgICAgIGlmICghKHJlc3VsdFtpXSA9IGdldE9iakZyb21DYWNoZShwYXJhbSkpICYmIHBhcmFtSW5mby5lbnVtTmFtZSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdFtpXSA9IGdldEVudW1PYmoocGFyYW0sIHBhcmFtSW5mby5lbnVtTmFtZSwgZW5naW5lKVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0W2ldID0gcGFyYW1zW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBnZXRFbnVtT2JqICh2YWx1ZSwgbmFtZSwgZW5naW5lKSB7XG4gICAgbGV0IGtleXMgPSBuYW1lLnNwbGl0KCcuJyk7XG4gICAgbGV0IGVudW1PYmogPSBlbmdpbmU7XG4gICAgZm9yIChsZXQgaSA9IDAsIGogPSBrZXlzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgICBlbnVtT2JqID0gZW51bU9ialtrZXlzW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudW1PYmoudmFsdWVzW3ZhbHVlXTtcbn1cbmZ1bmN0aW9uIHdvcmtlclJlamVjdCAoaWQsIHJlc3VsdCA9IHtlcnJvcjogLTF9LCB0cmFuc2ZlciA9IFtdLGVycm9yKSB7XG4gICAgY29uc29sZS53YXJuKGVycm9yKTtcbiAgICBpZiAoaXNJRTEwKCkpIHtcbiAgICAgICAgdHJhbnNmZXIgPSBudWxsO1xuICAgIH1cbiAgICBzZWxmLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgaWQsXG4gICAgICAgIHR5cGU6IDEsXG4gICAgICAgIHBhcmFtczogcmVzdWx0XG4gICAgfSwgdHJhbnNmZXIpO1xufVxuZnVuY3Rpb24gd29ya2VyUmVzb2x2ZSAoaWQsIHJlc3VsdCwgdHJhbnNmZXIgPSBbXSkge1xuICAgIGlmIChpc0lFMTAoKSkge1xuICAgICAgICB0cmFuc2ZlciA9IG51bGw7XG4gICAgfVxuICAgIHNlbGYucG9zdE1lc3NhZ2Uoe1xuICAgICAgICBpZCxcbiAgICAgICAgdHlwZTogMCxcbiAgICAgICAgcGFyYW1zOiByZXN1bHRcbiAgICB9LCB0cmFuc2Zlcik7XG59XG5mdW5jdGlvbiB3b3JrZXJDb250aW51ZSAoY2FsbElkLCBwYXJhbXMsIHRyYW5zZmVyID0gW10pIHtcbiAgICBpZiAoaXNJRTEwKCkpIHtcbiAgICAgICAgdHJhbnNmZXIgPSBudWxsO1xuICAgIH1cbiAgICBsZXQgYmFja0lkID0gZ2V0VW5pcXVlSWQoJ3dvcmtlcl9iYWNrJyk7XG4gICAgbGV0IGRlZmVycmVkID0gY3JlYXRlRGVmZmVycmVkKCk7XG4gICAgYmFja01hcFtiYWNrSWRdID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHBhcmFtcyk7XG4gICAgICAgIGRlbGV0ZSBiYWNrTWFwW2JhY2tJZF07XG4gICAgfVxuICAgIHNlbGYucG9zdE1lc3NhZ2Uoe1xuICAgICAgICBjYWxsSWQsXG4gICAgICAgIHBhcmFtcyxcbiAgICAgICAgYmFja0lkLFxuICAgIH0sIHRyYW5zZmVyKTtcbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbn1cbmZ1bmN0aW9uIHdvcmtlckNvbnRpbnVlRW5kIChkZXN0cm95SWQpIHtcbiAgICBzZWxmLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgZGVzdHJveUlkXG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGluaXRKUkVuZ2luZSAoaWQsIHtlbmdpbmVQYXRoLCBsaWNlbnNlU04sIGxpY2Vuc2VLZXksIGZvbnRQYXRofSkge1xuICAgIGlmIChqckVuZ2luZUlzUmVhZHkpIHtcbiAgICAgICAgcmV0dXJuIHdvcmtlclJlc29sdmUoaWQpO1xuICAgIH1cbiAgICBwZGZKUlByb21pc2UudGhlbigocGRmSnIpID0+IHtcbiAgICAgICAgd29ya2VyUmVzb2x2ZShpZCk7XG4gICAgfSk7XG4gICAgaWYgKGpyRW5naW5lSXNMb2FkZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBsZXQgYWdlbnQgPSBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGxldCB3YXNtRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICBsZXQgaXNTYWZhcmkgPSBhZ2VudC5pbmRleE9mKCdzYWZhcmknKSA+IC0xICYmIGFnZW50LmluZGV4T2YoJ2Nocm9tZScpID09IC0xO1xuICAgICAgICBpZiAoaXNTYWZhcmkgJiYgcGFyc2VGbG9hdChhZ2VudC5tYXRjaCgvIGFwcGxld2Via2l0XFwvKFxcZCspLylbMV0pIDwgNjA3KSB7XG4gICAgICAgICAgICB3YXNtRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2FzbUVuYWJsZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHdhc21FbmFibGVkICYmIHR5cGVvZiBXZWJBc3NlbWJseSA9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICBpbXBvcnRTY3JpcHRzKGVuZ2luZVBhdGggKyAnL2dzZGsuanM/aD0nICsganNIYXNoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGltcG9ydFNjcmlwdHMoZW5naW5lUGF0aCArICcvZ3Nkay5hc20uanM/aD0nICsgYXNtSlNIYXNoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGpyRW5naW5lSXNMb2FkZWQgPSB0cnVlO1xuICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGV4KVxuICAgICAgICByZXR1cm4gd29ya2VyUmVqZWN0KGlkLCB7ZXJyb3I6IDF9KTtcbiAgICB9XG4gICAgbGV0IHBkZkpyID0gbmV3IFBERkpSKEdTREssIHtcbiAgICAgICAgZW5naW5lUGF0aCxcbiAgICAgICAgZm9udFBhdGgsXG4gICAgfSk7XG4gICAgcGRmSnIuanJFbmdpbmVQcm9taXNlLmNhdGNoKChbYSxiXSkgPT4ge1xuICAgICAgICB3b3JrZXJSZWplY3QoaWQsIHtlcnJvcjogW2EsIGJdfSk7XG4gICAgfSlcbiAgICBwZGZKci5jaGVja0xpY2Vuc2UobGljZW5zZVNOLCBsaWNlbnNlS2V5KS50aGVuKChmbGFnKSA9PiB7XG4gICAgICAgIGlmIChmbGFnKSB7XG4gICAgICAgICAgICBqckVuZ2luZUlzUmVhZHkgPSB0cnVlO1xuICAgICAgICAgICAgcGRmSlJEZWZlcnJlZC5yZXNvbHZlKHBkZkpyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdvcmtlclJlamVjdChpZCwge2Vycm9yOiAyfSk7XG4gICAgICAgIH1cbiAgICB9KVxufVxuZnVuY3Rpb25NYXAuaW5pdEpSRW5naW5lID0gaW5pdEpSRW5naW5lO1xuXG5mdW5jdGlvbiBnZXRQREZEb2NCeUZpbGUgKGlkLCB7ZmlsZX0pIHtcbiAgICBwZGZKUlByb21pc2UudGhlbigocGRmSnIpID0+IHtcbiAgICAgICAgbGV0IGZpbGVTaXplID0gX2dldEZpbGVTaXplKGZpbGUpO1xuICAgICAgICBsZXQgZmlsZVN5bmNSZWFkZXIgPSBfZ2V0RmlsZVN5bmNSZWFkZXIoZmlsZSk7XG4gICAgICAgIHJldHVybiBwZGZKci5nZXRQREZEb2Moe1xuICAgICAgICAgICAgc2l6ZTogZmlsZVNpemUsXG4gICAgICAgICAgICBnZXRCdWZmZXI6IGZ1bmN0aW9uIChvZmZzZXQsIHNpemUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlsZVN5bmNSZWFkZXIob2Zmc2V0LCBzaXplKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSkudGhlbigocGRmRG9jKSA9PiB7XG4gICAgICAgIHJldHVybiBwZGZEb2MuaWQ7XG4gICAgfSkudGhlbigocGRmRG9jSWQpID0+IHtcbiAgICAgICAgd29ya2VyUmVzb2x2ZShpZCwgcGRmRG9jSWQpO1xuICAgIH0pO1xufVxuZnVuY3Rpb25NYXAuZ2V0UERGRG9jQnlGaWxlID0gZ2V0UERGRG9jQnlGaWxlO1xuZnVuY3Rpb24gZ2V0UERGRG9jQnlBcnJheUJ1ZmZlciAoaWQsIHtidWZmZXJ9KSB7XG4gICAgcGRmSlJQcm9taXNlLnRoZW4oKHBkZkpyKSA9PiB7XG4gICAgICAgIHJldHVybiBwZGZKci5nZXRQREZEb2Moe1xuICAgICAgICAgICAgc2l6ZTogYnVmZmVyLmJ5dGVMZW5ndGgsXG4gICAgICAgICAgICBnZXRCdWZmZXI6IGZ1bmN0aW9uIChvZmZzZXQsIHNpemUpIHtcbiAgICAgICAgICAgICAgICBpZiAoYnVmZmVyLnNsaWNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBidWZmZXIuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBzaXplKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyLCBvZmZzZXQsIHNpemUpLmJ1ZmZlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pLnRoZW4oKHBkZkRvYykgPT4ge1xuICAgICAgICBsZXQgaWQgPSBwZGZEb2MuaWQ7XG4gICAgICAgIGRlc3Ryb3lBcnJheUJ1ZmZlckRvY01hcFtpZF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBidWZmZXIgPSBudWxsO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gcGRmRG9jLmlkO1xuICAgIH0pLnRoZW4oKHBkZkRvY0lkKSA9PiB7XG4gICAgICAgIHdvcmtlclJlc29sdmUoaWQsIHBkZkRvY0lkKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uTWFwLmdldFBERkRvY0J5QXJyYXlCdWZmZXIgPSBnZXRQREZEb2NCeUFycmF5QnVmZmVyO1xuXG5mdW5jdGlvbiBjcmVhdGVOZXdEb2MoaWQsIHt0aXRsZSwgYXV0aG9yLCBwYWdlU2l6ZX0pe1xuICAgIHBkZkpSUHJvbWlzZS50aGVuKChwZGZKcikgPT4ge1xuICAgICAgICByZXR1cm4gcGRmSnIuY3JlYXRlTmV3RG9jKHRpdGxlLCBhdXRob3IsIHBhZ2VTaXplKTtcbiAgICB9KS50aGVuKChwZGZEb2MpID0+IHtcbiAgICAgICAgbGV0IGlkID0gcGRmRG9jLmlkO1xuICAgICAgICBkZXN0cm95QXJyYXlCdWZmZXJEb2NNYXBbaWRdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYnVmZmVyID0gbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHBkZkRvYy5pZDtcbiAgICB9KS50aGVuKChwZGZEb2NJZCkgPT4ge1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGlkLCBwZGZEb2NJZCk7XG4gICAgfSk7XG59XG5mdW5jdGlvbk1hcC5jcmVhdGVOZXdEb2MgPSBjcmVhdGVOZXdEb2M7XG5cbmZ1bmN0aW9uIHNldEljb25zKGNhbGxJZCx7aWNvbnN9KXtcbiAgICBnZXRJY29uUHJvdmlkZXIoKS5zZXRJY29ucyhpY29ucyk7XG4gICAgd29ya2VyUmVzb2x2ZShjYWxsSWQpO1xufVxuZnVuY3Rpb25NYXAuc2V0SWNvbnMgPSBzZXRJY29ucztcblxuZnVuY3Rpb24gYWRkSWNvbihjYWxsSWQse2ljb259KXtcbiAgICBnZXRJY29uUHJvdmlkZXIoKS5hZGRJY29uKGljb24pO1xuICAgIHdvcmtlclJlc29sdmUoY2FsbElkKTtcbn1cbmZ1bmN0aW9uTWFwLmFkZEljb24gPSBhZGRJY29uO1xuXG5mdW5jdGlvbiByZW1vdmVJY29uKGNhbGxJZCx7dHlwZSxjYXRhbG9nLG5hbWV9KXtcbiAgICBnZXRJY29uUHJvdmlkZXIoKS5yZW1vdmVJY29uKHR5cGUsY2F0YWxvZyxuYW1lKTtcbiAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCk7XG59XG5mdW5jdGlvbk1hcC5yZW1vdmVJY29uID0gcmVtb3ZlSWNvbjtcblxuZnVuY3Rpb24gcGFyc2VQREZEb2NCeVBhc3N3b3JkIChjYWxsSWQsIHtpZCwgcGFzc3dvcmQsIGluaXREYXRhID0ge319KSB7XG4gICAgbGV0IHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICBpZiAoaW5pdERhdGEuZmRmICYmIGluaXREYXRhLmZkZi5maWxlKSB7XG4gICAgICAgIGxldCBmZGYgPSBpbml0RGF0YS5mZGYuZmlsZTtcbiAgICAgICAgcHJvbWlzZSA9IHBkZkpSUHJvbWlzZS50aGVuKChwZGZKcikgPT57XG4gICAgICAgICAgICBsZXQgZmlsZVNpemUgPSBfZ2V0RmlsZVNpemUoZmRmKTtcbiAgICAgICAgICAgIGxldCBmaWxlU3luY1JlYWRlciA9IF9nZXRGaWxlU3luY1JlYWRlcihmZGYpO1xuICAgICAgICAgICAgcmV0dXJuIHBkZkpyLmdldEZERkRvYyh7XG4gICAgICAgICAgICAgICAgc2l6ZTogZmlsZVNpemUsXG4gICAgICAgICAgICAgICAgZ2V0QnVmZmVyOiBmdW5jdGlvbiAob2Zmc2V0LCBzaXplKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWxlU3luY1JlYWRlcihvZmZzZXQsIHNpemUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KS50aGVuKChmZGYpID0+IHtcbiAgICAgICAgICAgIGluaXREYXRhLmZkZi5maWxlID0gZmRmO1xuICAgICAgICB9KVxuICAgIH1cbiAgICBsZXQgX3BkZkRvYztcbiAgICBwcm9taXNlLnRoZW4oKCkgPT4ge1xuICAgICAgICByZXR1cm4gX2dldFBERkRvY0J5SWQoaWQpO1xuICAgIH0pLnRoZW4oKHBkZkRvYykgPT4ge1xuICAgICAgICBpZiAoIXBkZkRvYykge1xuICAgICAgICAgICAgdGhyb3cgRE9DX0lTX05VTEw7XG4gICAgICAgIH1cbiAgICAgICAgX3BkZkRvYyA9IHBkZkRvYztcblxuICAgICAgICByZXR1cm4gcGRmRG9jLnBhcnNlQnlQYXNzd29yZChwYXNzd29yZCwgaW5pdERhdGEpO1xuICAgIH0pLnRoZW4oKGNvZGUpID0+IHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHtjb2RlfTtcbiAgICAgICAgaWYgKGNvZGUgPT09IDApIHtcbiAgICAgICAgICAgIHJlc3VsdC5pbmZvID0gX3BkZkRvYy50b0pzb24oKTtcbiAgICAgICAgfVxuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCwgcmVzdWx0KTtcbiAgICB9LCAoKSA9PiB7XG4gICAgICAgIHdvcmtlclJlamVjdChjYWxsSWQpO1xuICAgIH0pO1xufVxuZnVuY3Rpb25NYXAucGFyc2VQREZEb2NCeVBhc3N3b3JkID0gcGFyc2VQREZEb2NCeVBhc3N3b3JkO1xuZnVuY3Rpb24gZ2V0UGFnZUNvdW50IChjYWxsSWQsIGlkKSB7XG4gICAgX2dldFBERkRvY0J5SWQoaWQpLnRoZW4oKHBkZkRvYykgPT4ge1xuICAgICAgICBpZiAoIXBkZkRvYykge1xuICAgICAgICAgICAgdGhyb3cgRE9DX0lTX05VTEw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBkZkRvYy5nZXRQYWdlQ291bnQoKTtcbiAgICB9KS50aGVuKChjb3VudCkgPT4ge1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCwgY291bnQpO1xuICAgIH0sICgpID0+IHtcbiAgICAgICAgd29ya2VyUmVqZWN0KGNhbGxJZCk7XG4gICAgfSk7XG59XG5mdW5jdGlvbk1hcC5nZXRQYWdlQ291bnQgPSBnZXRQYWdlQ291bnQ7XG5mdW5jdGlvbiBfZ2V0UERGRG9jQnlJZCAoaWQpIHtcbiAgICByZXR1cm4gcGRmSlJQcm9taXNlLnRoZW4oKHBkZkpyKSA9PiB7XG4gICAgICAgIHJldHVybiBwZGZKci5nZXRQREZEb2NCeUlkKGlkKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGdldFBERkRvY0luZm9CeUlkIChjYWxsSWQsIGlkKSB7XG4gICAgX2dldFBERkRvY0J5SWQoaWQpLnRoZW4oKHBkZkRvYykgPT4ge1xuICAgICAgICBpZiAoIXBkZkRvYykge1xuICAgICAgICAgICAgcmV0dXJuIHdvcmtlclJlamVjdChjYWxsSWQsIHtlcnJvcjogNDA0fSk7XG4gICAgICAgIH1cbiAgICAgICAgd29ya2VyUmVzb2x2ZShjYWxsSWQsIHBkZkRvYy50b0pzb24oKSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbk1hcC5nZXRQREZEb2NJbmZvQnlJZCA9IGdldFBERkRvY0luZm9CeUlkO1xuXG5mdW5jdGlvbiBnZXRNZXRhZGF0YSAoY2FsbElkLCBpZCkge1xuICAgIF9nZXRQREZEb2NCeUlkKGlkKS50aGVuKChwZGZEb2MpID0+IHtcbiAgICAgICAgaWYgKCFwZGZEb2MpIHtcbiAgICAgICAgICAgIHJldHVybiB3b3JrZXJSZWplY3QoY2FsbElkLCB7ZXJyb3I6IDQwNH0pO1xuICAgICAgICB9XG4gICAgICAgIHdvcmtlclJlc29sdmUoY2FsbElkLCBwZGZEb2MuZ2V0TWV0YWRhdGEoKSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbk1hcC5nZXRNZXRhZGF0YSA9IGdldE1ldGFkYXRhO1xuXG5mdW5jdGlvbiBzZXRNZXRhZGF0YVZhbHVlIChjYWxsSWQsIGlkKSB7XG4gICAgX2dldFBERkRvY0J5SWQoaWQpLnRoZW4oKHBkZkRvYykgPT4ge1xuICAgICAgICBpZiAoIXBkZkRvYykge1xuICAgICAgICAgICAgcmV0dXJuIHdvcmtlclJlamVjdChjYWxsSWQsIHtlcnJvcjogNDA0fSk7XG4gICAgICAgIH1cbiAgICAgICAgd29ya2VyUmVzb2x2ZShjYWxsSWQsIHBkZkRvYy5zZXRNZXRhZGF0YVZhbHVlKCkpO1xuICAgIH0pO1xufVxuZnVuY3Rpb25NYXAuc2V0TWV0YWRhdGFWYWx1ZSA9IHNldE1ldGFkYXRhVmFsdWU7XG5cbmZ1bmN0aW9uIGdldFBhZ2VJbmZvQnlJbmRleCAoY2FsbElkLCB7aWQsIGluZGV4fSkge1xuICAgIF9nZXRQREZEb2NCeUlkKGlkKS50aGVuKChwZGZEb2MpID0+IHtcbiAgICAgICAgaWYgKCFwZGZEb2MpIHtcbiAgICAgICAgICAgIHRocm93IERPQ19JU19OVUxMO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwZGZEb2MuZ2V0UGFnZUJ5SW5kZXgoaW5kZXgpO1xuICAgIH0pLnRoZW4oKHBhZ2UpID0+IHtcbiAgICAgICAgaWYgKCFwYWdlKSB7XG4gICAgICAgICAgICByZXR1cm4gd29ya2VyUmVqZWN0KGNhbGxJZCk7XG4gICAgICAgIH1cbiAgICAgICAgd29ya2VyUmVzb2x2ZShjYWxsSWQsIHBhZ2UudG9Kc29uKCkpO1xuICAgIH0sICgpID0+IHtcbiAgICAgICAgd29ya2VyUmVqZWN0KGNhbGxJZCk7XG4gICAgfSk7XG59XG5mdW5jdGlvbk1hcC5nZXRQYWdlSW5mb0J5SW5kZXggPSBnZXRQYWdlSW5mb0J5SW5kZXg7XG5mdW5jdGlvbiBnZXREb2NQZXJtaXNzaW9uIChjYWxsSWQsIGlkKSB7XG4gICAgX2dldFBERkRvY0J5SWQoaWQpLnRoZW4oKHBkZkRvYykgPT4ge1xuICAgICAgICBpZiAoIXBkZkRvYykge1xuICAgICAgICAgICAgdGhyb3cgRE9DX0lTX05VTEw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBkZkRvYy5nZXRQZXJtaXNzaW9uKCk7XG4gICAgfSkudGhlbigocGVybWlzc2lvbikgPT4ge1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCwgcGVybWlzc2lvbik7XG4gICAgfSwgKCkgPT4ge1xuICAgICAgICB3b3JrZXJSZWplY3QoY2FsbElkKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uTWFwLmdldERvY1Blcm1pc3Npb24gPSBnZXREb2NQZXJtaXNzaW9uO1xuZnVuY3Rpb24gZ2V0UGFnZVdpZHRoIChjYWxsSWQsIHtkb2NJZCwgcGFnZUlkfSkge1xuICAgIF9nZXRQYWdlQnlJZChkb2NJZCwgcGFnZUlkKS50aGVuKChwYWdlKSA9PiB7XG4gICAgICAgIHJldHVybiBwYWdlLmdldFdpZHRoKCk7XG4gICAgfSkudGhlbigod2lkdGgpID0+IHtcbiAgICAgICAgd29ya2VyUmVzb2x2ZShjYWxsSWQsIHdpZHRoKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uTWFwLmdldFBhZ2VXaWR0aCA9IGdldFBhZ2VXaWR0aDtcbmZ1bmN0aW9uIGdldFBhZ2VIZWlnaHQgKGNhbGxJZCwge2RvY0lkLCBwYWdlSWR9KSB7XG4gICAgX2dldFBhZ2VCeUlkKGRvY0lkLCBwYWdlSWQpLnRoZW4oKHBhZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuIHBhZ2UuZ2V0SGVpZ2h0KCk7XG4gICAgfSkudGhlbigoaGVpZ2h0KSA9PiB7XG4gICAgICAgIHdvcmtlclJlc29sdmUoY2FsbElkLCBoZWlnaHQpO1xuICAgIH0sICgpID0+IHtcbiAgICAgICAgd29ya2VyUmVqZWN0KGNhbGxJZCk7XG4gICAgfSk7XG59XG5mdW5jdGlvbk1hcC5nZXRQYWdlSGVpZ2h0ID0gZ2V0UGFnZUhlaWdodDtcbmZ1bmN0aW9uIGdldFBhZ2VJbWFnZURhdGEgKGNhbGxJZCwge2RvY0lkLCBwYWdlSWQsIHNjYWxlfSkge1xuICAgIF9nZXRQYWdlQnlJZChkb2NJZCwgcGFnZUlkKS50aGVuKChwYWdlKSA9PiB7XG4gICAgICAgIHJldHVybiBwYWdlLmdldEltYWdlRGF0YShzY2FsZSk7XG4gICAgfSkudGhlbigoaW1hZ2VEYXRhKSA9PiB7XG4gICAgICAgIGxldCB0cmFuc2ZlciA9IFtdO1xuICAgICAgICBpZiAoaW1hZ2VEYXRhLmJ1ZmZlcikge1xuICAgICAgICAgICAgdHJhbnNmZXIgPSBbaW1hZ2VEYXRhLmJ1ZmZlcl07XG4gICAgICAgIH1cbiAgICAgICAgd29ya2VyUmVzb2x2ZShjYWxsSWQsIGltYWdlRGF0YSwgdHJhbnNmZXIpO1xuICAgIH0sICgpID0+IHtcbiAgICAgICAgd29ya2VyUmVqZWN0KGNhbGxJZCk7XG4gICAgfSk7XG59XG5mdW5jdGlvbk1hcC5nZXRQYWdlSW1hZ2VEYXRhID0gZ2V0UGFnZUltYWdlRGF0YTtcbmZ1bmN0aW9uIF9nZXRQYWdlQnlJZCAoZG9jSWQsIHBhZ2VJZCkge1xuICAgIHJldHVybiBfZ2V0UERGRG9jQnlJZChkb2NJZCkudGhlbigocGRmRG9jKSA9PiB7XG4gICAgICAgIGlmICghcGRmRG9jKSB7XG4gICAgICAgICAgICB0aHJvdyBET0NfSVNfTlVMTDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGRmRG9jLmdldFBhZ2VCeUlkKHBhZ2VJZCk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBkZXN0cm95RG9jIChjYWxsSWQsIHtpZH0pIHtcbiAgICBhc3luY0NhbGxDYWNoZS5nZXQoaWQpLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHdvcmtlckNvbnRpbnVlRW5kKHZhbHVlKTtcbiAgICB9KTtcbiAgICBpZiAocmFuZ2VEb2NNYXBbaWRdKSB7XG4gICAgICAgIGRlbGV0ZSByYW5nZU1hcFtyYW5nZURvY01hcFtpZF1dO1xuICAgIH1cbiAgICBfZ2V0UERGRG9jQnlJZChpZCkudGhlbigocGRmRG9jKSA9PiB7XG4gICAgICAgIGlmICghcGRmRG9jKSB7XG4gICAgICAgICAgICB0aHJvdyBET0NfSVNfTlVMTDtcbiAgICAgICAgfVxuICAgICAgICBwZGZKUlByb21pc2UudGhlbihmdW5jdGlvbihwZGZqcikge1xuICAgICAgICAgICAgcGRmanIuZGVzdHJveURvYyhpZCk7XG4gICAgICAgIH0pO1xuICAgICAgICBncmFwaGljc01vZHVsZS5jbGVhck9iamVjdEZyb21DYWNoZShpZCk7XG4gICAgICAgIHBkZkRvYy5kZXN0cm95KCk7XG4gICAgICAgIGxldCBkZXN0cm95QXJyYXlCdWZmZXJDYWxsYmFjayA9IGRlc3Ryb3lBcnJheUJ1ZmZlckRvY01hcFtpZF07XG4gICAgICAgIGlmIChkZXN0cm95QXJyYXlCdWZmZXJDYWxsYmFjaykge1xuICAgICAgICAgICAgZGVzdHJveUFycmF5QnVmZmVyQ2FsbGJhY2soKTtcbiAgICAgICAgICAgIGRlbGV0ZSBkZXN0cm95QXJyYXlCdWZmZXJEb2NNYXBbaWRdO1xuICAgICAgICB9XG4gICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgd29ya2VyUmVqZWN0KGNhbGxJZCk7XG4gICAgfSk7XG4gICAgd29ya2VyUmVzb2x2ZShjYWxsSWQpO1xufVxuZnVuY3Rpb25NYXAuZGVzdHJveURvYyA9IGRlc3Ryb3lEb2M7XG5mdW5jdGlvbiBnZXRQREZEb2NBc3luYyAoY2FsbElkLCB7c2l6ZSwgZ2V0Q2h1bmt9KSB7XG4gICAgcmV0dXJuIHBkZkpSUHJvbWlzZS50aGVuKChwZGZKcikgPT4ge1xuICAgICAgICByZXR1cm4gcGRmSnIuZ2V0UERGRG9jQXN5bmMoe1xuICAgICAgICAgICAgc2l6ZTogc2l6ZSxcbiAgICAgICAgICAgIGdldEJ1ZmZlcjogZnVuY3Rpb24gKG9mZnNldCwgc2l6ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB3b3JrZXJDb250aW51ZShnZXRDaHVuaywge29mZnNldCwgc2l6ZX0pLnRoZW4oKGJsb2IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJsb2IgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJsb2I7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbGV0IGZpbGVSZWFkZXJTeW5jID0gbmV3IEZpbGVSZWFkZXJTeW5jKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWxlUmVhZGVyU3luYy5yZWFkQXNBcnJheUJ1ZmZlcihibG9iKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSkudGhlbigocGRmRG9jKSA9PiB7XG4gICAgICAgIGFzeW5jQ2FsbENhY2hlLnB1c2gocGRmRG9jLmlkLCBnZXRDaHVuayk7XG4gICAgICAgIHJldHVybiBwZGZEb2MuaWQ7XG4gICAgfSkudGhlbigocGRmRG9jSWQpID0+IHtcbiAgICAgICAgd29ya2VyUmVzb2x2ZShjYWxsSWQsIHBkZkRvY0lkKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uTWFwLmdldFBERkRvY0FzeW5jID0gZ2V0UERGRG9jQXN5bmM7XG5mdW5jdGlvbiBnZXRJbWFnZURhdGFCeVRpbGUgKGNhbGxJZCwge2RvY0lkLCBwYWdlSWQsIHgsIHksIHdpZHRoLCBoZWlnaHQsIHNjYWxlLCByb3RhdGV9LCByZW5kZXJGbGFncykge1xuICAgIF9nZXRQYWdlQnlJZChkb2NJZCwgcGFnZUlkKS50aGVuKChwYWdlKSA9PiB7XG4gICAgICAgIHJldHVybiBwYWdlLmdldEltYWdlRGF0YUJ5VGlsZSh4LCB5ICx3aWR0aCwgaGVpZ2h0LCBzY2FsZSwgcm90YXRlLCByZW5kZXJGbGFncyk7XG4gICAgfSkudGhlbigoaW1hZ2VEYXRhKSA9PiB7XG4gICAgICAgIGxldCB0cmFuc2ZlciA9IFtdO1xuICAgICAgICBpZiAoaW1hZ2VEYXRhLmJ1ZmZlcikge1xuICAgICAgICAgICAgdHJhbnNmZXIgPSBbaW1hZ2VEYXRhLmJ1ZmZlcl07XG4gICAgICAgIH1cbiAgICAgICAgd29ya2VyUmVzb2x2ZShjYWxsSWQsIGltYWdlRGF0YSwgdHJhbnNmZXIpO1xuICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIHdvcmtlclJlamVjdChjYWxsSWQsbnVsbCxbXSxlKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uTWFwLmdldEltYWdlRGF0YUJ5VGlsZSA9IGdldEltYWdlRGF0YUJ5VGlsZTtcbmZ1bmN0aW9uIGdldEltYWdlRGF0YVdpdGhvdXRBbm5vdEJ5VGlsZSAoY2FsbElkLCB7ZG9jSWQsIHBhZ2VJZCwgeCwgeSwgd2lkdGgsIGhlaWdodCwgc2NhbGUsIHJvdGF0ZX0pIHtcbiAgICBwZGZKUlByb21pc2UudGhlbigocGRmSnIpID0+IHtcbiAgICAgICAgZ2V0SW1hZ2VEYXRhQnlUaWxlKGNhbGxJZCwge2RvY0lkLCBwYWdlSWQsIHgsIHksIHdpZHRoLCBoZWlnaHQsIHNjYWxlLCByb3RhdGV9LCAgW3BkZkpyLmVuZ2luZS5Db250ZW50RmxhZy5lX1JlbmRlclBhZ2UudmFsdWVdKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uTWFwLmdldEltYWdlRGF0YVdpdGhvdXRBbm5vdEJ5VGlsZSA9IGdldEltYWdlRGF0YVdpdGhvdXRBbm5vdEJ5VGlsZTtcblxuZnVuY3Rpb24gZ2V0QW5ub3QgKGNhbGxJZCwge2RvY0lkLCBwYWdlSWQsIGFubm90SWR9KSB7XG4gICAgX2dldFBhZ2VCeUlkKGRvY0lkLCBwYWdlSWQpLnRoZW4oKHBhZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuIHBhZ2UuZ2V0QW5ub3RCeUlkKGFubm90SWQpO1xuICAgIH0pLnRoZW4oKGFubm90KSA9PiB7XG4gICAgICAgIHJldHVybiBhbm5vdC50b0pzb24oKTtcbiAgICB9KS50aGVuKGZ1bmN0aW9uIChpbmZvKSB7XG4gICAgICAgIHdvcmtlclJlc29sdmUoY2FsbElkLCBpbmZvKTtcbiAgICB9KS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICB3b3JrZXJSZWplY3QoY2FsbElkLG51bGwsW10sZSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbk1hcC5nZXRBbm5vdCA9IGdldEFubm90O1xuXG5mdW5jdGlvbk1hcC5nZXRQYWdlQW5ub3RJRExpc3QgPSBmdW5jdGlvbiBnZXRQYWdlQW5ub3RJRExpc3QoY2FsbElkLCB7ZG9jSWQsIHBhZ2VJZH0pIHtcbiAgICBfZ2V0UGFnZUJ5SWQoZG9jSWQsIHBhZ2VJZClcbiAgICAgICAgLnRoZW4ocGFnZSA9PiBwYWdlLmdldEFubm90SURMaXN0KCkpXG4gICAgICAgIC50aGVuKGlkTGlzdCA9PiB7XG4gICAgICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCxpZExpc3QpO1xuICAgICAgICB9KS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICAgICAgd29ya2VyUmVqZWN0KGNhbGxJZCxudWxsLFtdLGUpO1xuICAgICAgICB9KTtcbn07XG5cbmZ1bmN0aW9uTWFwLmdldEFubm90cyA9IGZ1bmN0aW9uIGdldEFubm90cyhjYWxsSWQsIHtkb2NJZCwgcGFnZUlkLCBpZExpc3R9KSB7XG4gICAgX2dldFBhZ2VCeUlkKGRvY0lkLCBwYWdlSWQpXG4gICAgICAgIC50aGVuKHBhZ2UgPT4gcGFnZS5nZXRBbm5vdHMoaWRMaXN0KSlcbiAgICAgICAgLnRoZW4oYW5ub3RzID0+IFxuICAgICAgICAgICAgYW5ub3RzLm1hcChcbiAgICAgICAgICAgICAgICBhbm5vdCA9PiBhbm5vdCAmJiBhbm5vdC50b0pzb24oKVxuICAgICAgICAgICAgKVxuICAgICAgICApLnRoZW4oYW5ub3RzID0+IHtcbiAgICAgICAgICAgIHdvcmtlclJlc29sdmUoY2FsbElkLCBhbm5vdHMpO1xuICAgICAgICB9KS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICAgICAgd29ya2VyUmVqZWN0KGNhbGxJZCk7XG4gICAgICAgIH0pO1xufVxuZnVuY3Rpb24gc2V0UmVuZGVyRmxhZyhjYWxsSWQse2RvY0lkLGZsYWdzfSl7XG4gICAgX2dldFBERkRvY0J5SWQoZG9jSWQpLnRoZW4oZG9jPT57XG4gICAgICAgIGRvYy5zZXRSZW5kZXJGbGFnKGZsYWdzKVxuICAgIH0pXG59XG5mdW5jdGlvbk1hcC5zZXRSZW5kZXJGbGFnID0gc2V0UmVuZGVyRmxhZztcbmZ1bmN0aW9uIGdldFBhZ2VCaXRtYXAgKGNhbGxJZCwge2RvY0lkLCBwYWdlSWQsIHNjYWxlLCByb3RhdGUsIHJlY3QsIGZsYWdzfSkge1xuICAgIF9nZXRQYWdlQnlJZChkb2NJZCwgcGFnZUlkKS50aGVuKChwYWdlKSA9PiB7XG4gICAgICAgIHJldHVybiBwYWdlLmdldEJpdG1hcChzY2FsZSwgcm90YXRlLCByZWN0LCBmbGFncyk7XG4gICAgfSkudGhlbigoaW1hZ2VEYXRhKSA9PiB7XG4gICAgICAgIGxldCB0cmFuc2ZlciA9IFtdO1xuICAgICAgICBpZiAoaW1hZ2VEYXRhLmJ1ZmZlcikge1xuICAgICAgICAgICAgdHJhbnNmZXIgPSBbaW1hZ2VEYXRhLmJ1ZmZlcl07XG4gICAgICAgIH1cbiAgICAgICAgd29ya2VyUmVzb2x2ZShjYWxsSWQsIGltYWdlRGF0YSwgdHJhbnNmZXIpO1xuICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIHdvcmtlclJlamVjdChjYWxsSWQpO1xuICAgIH0pO1xufVxuZnVuY3Rpb25NYXAuZ2V0UGFnZUJpdG1hcCA9IGdldFBhZ2VCaXRtYXA7XG5mdW5jdGlvbiBnZXRQYWdlQW5kSGlnaGxpZ2h0Qml0bWFwIChjYWxsSWQsIHtkb2NJZCwgcGFnZUlkLCBzY2FsZSwgcm90YXRlLCByZWN0fSkge1xuICAgIF9nZXRQYWdlQnlJZChkb2NJZCwgcGFnZUlkKS50aGVuKChwYWdlKSA9PiB7XG4gICAgICAgIHJldHVybiBwYWdlLmdldFBhZ2VBbmRIaWdobGlnaHRCaXRtYXAoc2NhbGUsIHJvdGF0ZSwgcmVjdCk7XG4gICAgfSkudGhlbigoaW1hZ2VEYXRhKSA9PiB7XG4gICAgICAgIGxldCB0cmFuc2ZlciA9IFtdO1xuICAgICAgICBpZiAoaW1hZ2VEYXRhLmJ1ZmZlcikge1xuICAgICAgICAgICAgdHJhbnNmZXIgPSBbaW1hZ2VEYXRhLmJ1ZmZlcl07XG4gICAgICAgIH1cbiAgICAgICAgd29ya2VyUmVzb2x2ZShjYWxsSWQsIGltYWdlRGF0YSwgdHJhbnNmZXIpO1xuICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIHdvcmtlclJlamVjdChjYWxsSWQsbnVsbCxbXSxlKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uTWFwLmdldFBhZ2VBbmRIaWdobGlnaHRCaXRtYXAgPSBnZXRQYWdlQW5kSGlnaGxpZ2h0Qml0bWFwO1xuZnVuY3Rpb24gZ2V0QW5ub3RCaXRtYXAgKGNhbGxJZCwge2RvY0lkLCBwYWdlSWQsIGFubm90SWQsIHNjYWxlLCByb3RhdGUsIHJlY3R9KSB7XG4gICAgX2dldFBhZ2VCeUlkKGRvY0lkLCBwYWdlSWQpLnRoZW4oKHBhZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuIHBhZ2UuZ2V0QW5ub3RCaXRtYXAoYW5ub3RJZCwgc2NhbGUsIHJvdGF0ZSwgcmVjdCk7XG4gICAgfSkudGhlbigoaW1hZ2VEYXRhKSA9PiB7XG4gICAgICAgIGxldCB0cmFuc2ZlciA9IFtdO1xuICAgICAgICBpZiAoaW1hZ2VEYXRhLmJ1ZmZlcikge1xuICAgICAgICAgICAgdHJhbnNmZXIgPSBbaW1hZ2VEYXRhLmJ1ZmZlcl07XG4gICAgICAgIH1cbiAgICAgICAgd29ya2VyUmVzb2x2ZShjYWxsSWQsIGltYWdlRGF0YSwgdHJhbnNmZXIpO1xuICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIHdvcmtlclJlamVjdChjYWxsSWQsbnVsbCxbXSxlKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uTWFwLmdldEFubm90Qml0bWFwID0gZ2V0QW5ub3RCaXRtYXA7XG5mdW5jdGlvbiBnZXRBbm5vdEJpdG1hcEJ5UmFuZ2UgKGNhbGxJZCwge2RvY0lkLCBwYWdlSWQsIHJhbmdlLCBzY2FsZSwgcm90YXRlLCByZWN0fSkge1xuICAgIF9nZXRQYWdlQnlJZChkb2NJZCwgcGFnZUlkKS50aGVuKChwYWdlKSA9PiB7XG4gICAgICAgIHJldHVybiBwYWdlLmdldEFubm90Qml0bWFwQnlSYW5nZShyYW5nZSwgc2NhbGUsIHJvdGF0ZSwgcmVjdCk7XG4gICAgfSkudGhlbigoaW1hZ2VEYXRhKSA9PiB7XG4gICAgICAgIGxldCB0cmFuc2ZlciA9IFtdO1xuICAgICAgICBpZiAoaW1hZ2VEYXRhLmJ1ZmZlcikge1xuICAgICAgICAgICAgdHJhbnNmZXIgPSBbaW1hZ2VEYXRhLmJ1ZmZlcl07XG4gICAgICAgIH1cbiAgICAgICAgd29ya2VyUmVzb2x2ZShjYWxsSWQsIGltYWdlRGF0YSwgdHJhbnNmZXIpO1xuICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGUpXG4gICAgICAgIHdvcmtlclJlamVjdChjYWxsSWQsbnVsbCxbXSxlKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uTWFwLmdldEFubm90Qml0bWFwQnlSYW5nZSA9IGdldEFubm90Qml0bWFwQnlSYW5nZTtcbmZ1bmN0aW9uIGdldEFubm90SWRBdFBvaW50IChjYWxsSWQsIHtkb2NJZCwgcGFnZUlkLCBwb2ludHMsIHRvbGVyYW5jZX0pIHtcbiAgICBfZ2V0UGFnZUJ5SWQoZG9jSWQsIHBhZ2VJZCkudGhlbigocGFnZSkgPT4ge1xuICAgICAgICByZXR1cm4gcGFnZS5nZXRBbm5vdElkQXREZXZpY2VQb2ludChwb2ludHMueCwgcG9pbnRzLnksIHRvbGVyYW5jZSk7XG4gICAgfSkudGhlbihpZCA9PiB7XG4gICAgICAgIHdvcmtlclJlc29sdmUoY2FsbElkLCBpZCk7XG4gICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgd29ya2VyUmVqZWN0KGNhbGxJZCxudWxsLFtdLGUpO1xuICAgIH0pO1xufVxuZnVuY3Rpb25NYXAuZ2V0QW5ub3RJZEF0UG9pbnQgPSBnZXRBbm5vdElkQXRQb2ludDtcbmZ1bmN0aW9uIGdldEFubm90SWRBdERldmljZVBvaW50IChjYWxsSWQsIHtkb2NJZCwgcGFnZUlkLCBwb2ludHMsIHRvbGVyYW5jZSwgbWF0cml4fSkge1xuICAgIF9nZXRQYWdlQnlJZChkb2NJZCwgcGFnZUlkKS50aGVuKChwYWdlKSA9PiB7XG4gICAgICAgIHJldHVybiBwYWdlLmdldEFubm90SWRBdERldmljZVBvaW50KHBvaW50cy54LCBwb2ludHMueSwgdG9sZXJhbmNlLCBtYXRyaXgpO1xuICAgIH0pLnRoZW4oaWQgPT4ge1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCwgaWQpO1xuICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIHdvcmtlclJlamVjdChjYWxsSWQsbnVsbCxbXSxlKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uTWFwLmdldEFubm90SWRBdERldmljZVBvaW50ID0gZ2V0QW5ub3RJZEF0RGV2aWNlUG9pbnQ7XG5mdW5jdGlvbiBnZXRDaGFySW5mb0F0UG9pbnQgKGNhbGxJZCwge2RvY0lkLCBwYWdlSWQsIHBvaW50cywgdG9sZXJhbmNlfSkge1xuICAgIF9nZXRQYWdlQnlJZChkb2NJZCwgcGFnZUlkKS50aGVuKChwYWdlKSA9PiB7XG4gICAgICAgIHJldHVybiBwYWdlLmdldENoYXJJbmZvQXRQb2ludChwb2ludHMueCwgcG9pbnRzLnksIHRvbGVyYW5jZSk7XG4gICAgfSkudGhlbigoaW5mbykgPT4ge1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCwgaW5mbyk7XG4gICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgd29ya2VyUmVqZWN0KGNhbGxJZCxudWxsLFtdLGUpO1xuICAgIH0pO1xufVxuZnVuY3Rpb25NYXAuZ2V0Q2hhckluZm9BdFBvaW50ID0gZ2V0Q2hhckluZm9BdFBvaW50O1xuZnVuY3Rpb24gZ2V0VGh1bWIoY2FsbElkLCB7ZG9jSWQsIHBhZ2VJZH0pe1xuICAgIF9nZXRQYWdlQnlJZChkb2NJZCwgcGFnZUlkKS50aGVuKChwYWdlKSA9PiB7XG4gICAgICAgIHJldHVybiBwYWdlLmdldFRodW1iKCk7XG4gICAgfSkudGhlbigoYnVmZmVyKSA9PiB7XG4gICAgICAgIHdvcmtlclJlc29sdmUoY2FsbElkLCBidWZmZXIpO1xuICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIHdvcmtlclJlamVjdChjYWxsSWQsbnVsbCxbXSxlKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uTWFwLmdldFRodW1iID0gZ2V0VGh1bWI7XG5mdW5jdGlvbiB1cGRhdGVBbm5vdFF1YWRQb2ludHNCeUNoYXJJbmRleCAoY2FsbElkLCB7ZG9jSWQsIHBhZ2VJZCwgYW5ub3RJZCwgc3RhcnRDaGFySW5kZXgsIGVuZENoYXJJbmRleH0pIHtcbiAgICBfZ2V0UGFnZUJ5SWQoZG9jSWQsIHBhZ2VJZCkudGhlbigocGFnZSkgPT4ge1xuICAgICAgICByZXR1cm4gcGFnZS5nZXRBbm5vdEJ5SWQoYW5ub3RJZCk7XG4gICAgfSkudGhlbigoYW5ub3QpID0+IHtcbiAgICAgICAgcmV0dXJuIGFubm90LnVwZGF0ZVF1YWRQb2ludHNCeUNoYXJJbmRleChzdGFydENoYXJJbmRleCwgZW5kQ2hhckluZGV4KTtcbiAgICB9KS50aGVuKChmbGFnKSA9PiB7XG4gICAgICAgIHdvcmtlclJlc29sdmUoY2FsbElkLCBmbGFnKTtcbiAgICB9KS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICB3b3JrZXJSZWplY3QoY2FsbElkLG51bGwsW10sZSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbk1hcC51cGRhdGVBbm5vdFF1YWRQb2ludHNCeUNoYXJJbmRleCA9IHVwZGF0ZUFubm90UXVhZFBvaW50c0J5Q2hhckluZGV4O1xuZnVuY3Rpb24gc2V0QW5ub3RDb250ZW50IChjYWxsSWQsIHtkb2NJZCwgcGFnZUlkLCBhbm5vdElkLCBjb250ZW50fSkge1xuICAgIF9nZXRQYWdlQnlJZChkb2NJZCwgcGFnZUlkKS50aGVuKChwYWdlKSA9PiB7XG4gICAgICAgIHJldHVybiBwYWdlLmdldEFubm90QnlJZChhbm5vdElkKTtcbiAgICB9KS50aGVuKChhbm5vdCkgPT4ge1xuICAgICAgICByZXR1cm4gYW5ub3Quc2V0Q29udGVudChjb250ZW50KTtcbiAgICB9KS50aGVuKChpZCkgPT4ge1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCwgaWQpO1xuICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIHdvcmtlclJlamVjdChjYWxsSWQsbnVsbCxbXSxlKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uTWFwLnNldEFubm90Q29udGVudCA9IHNldEFubm90Q29udGVudDtcbmZ1bmN0aW9uIHNldEFubm90Qm9yZGVyQ29sb3IgKGNhbGxJZCwge2RvY0lkLCBwYWdlSWQsIGFubm90SWQsIGNvbG9yfSkge1xuICAgIF9nZXRQYWdlQnlJZChkb2NJZCwgcGFnZUlkKS50aGVuKChwYWdlKSA9PiB7XG4gICAgICAgIHJldHVybiBwYWdlLmdldEFubm90QnlJZChhbm5vdElkKTtcbiAgICB9KS50aGVuKChhbm5vdCkgPT4ge1xuICAgICAgICByZXR1cm4gYW5ub3Quc2V0Qm9yZGVyQ29sb3IoY29sb3IpO1xuICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCwgdHJ1ZSk7XG4gICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgd29ya2VyUmVqZWN0KGNhbGxJZCxudWxsLFtdLGUpO1xuICAgIH0pO1xufVxuZnVuY3Rpb25NYXAuc2V0QW5ub3RCb3JkZXJDb2xvciA9IHNldEFubm90Qm9yZGVyQ29sb3I7XG5mdW5jdGlvbiBzZXRBbm5vdE9wYWNpdHkgKGNhbGxJZCwge2RvY0lkLCBwYWdlSWQsIGFubm90SWQsIG9wYWNpdHl9KSB7XG4gICAgX2dldFBhZ2VCeUlkKGRvY0lkLCBwYWdlSWQpLnRoZW4oKHBhZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuIHBhZ2UuZ2V0QW5ub3RCeUlkKGFubm90SWQpO1xuICAgIH0pLnRoZW4oKGFubm90KSA9PiB7XG4gICAgICAgIHJldHVybiBhbm5vdC5zZXRPcGFjaXR5KG9wYWNpdHkpO1xuICAgIH0pLnRoZW4oKG1vZGlmaWVkSWRzKSA9PiB7XG4gICAgICAgIHdvcmtlclJlc29sdmUoY2FsbElkLCBtb2RpZmllZElkcyk7XG4gICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgd29ya2VyUmVqZWN0KGNhbGxJZCxudWxsLFtdLGUpO1xuICAgIH0pO1xufVxuZnVuY3Rpb25NYXAuc2V0QW5ub3RPcGFjaXR5ID0gc2V0QW5ub3RPcGFjaXR5O1xuZnVuY3Rpb24gc2V0QW5ub3RSb3RhdGlvbiAoY2FsbElkLCB7ZG9jSWQsIHBhZ2VJZCwgYW5ub3RJZCwgcm90YXRpb259KSB7XG4gICAgX2dldFBhZ2VCeUlkKGRvY0lkLCBwYWdlSWQpLnRoZW4oKHBhZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuIHBhZ2UuZ2V0QW5ub3RCeUlkKGFubm90SWQpO1xuICAgIH0pLnRoZW4oKGFubm90KSA9PiB7XG4gICAgICAgIHJldHVybiBhbm5vdC5zZXRSb3RhdGlvbihyb3RhdGlvbik7XG4gICAgfSkudGhlbigobW9kaWZpZWRJZHMpID0+IHtcbiAgICAgICAgd29ya2VyUmVzb2x2ZShjYWxsSWQsIG1vZGlmaWVkSWRzKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uTWFwLnNldEFubm90Um90YXRpb24gPSBzZXRBbm5vdFJvdGF0aW9uO1xuZnVuY3Rpb24gcmVtb3ZlQW5ub3QgKGNhbGxJZCwge2RvY0lkLCBwYWdlSWQsIGFubm90SWR9KSB7XG4gICAgX2dldFBhZ2VCeUlkKGRvY0lkLCBwYWdlSWQpLnRoZW4oKHBhZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuIHBhZ2UuZ2V0QW5ub3RCeUlkKGFubm90SWQpO1xuICAgIH0pLnRoZW4oKGFubm90KSA9PiB7XG4gICAgICAgIHJldHVybiBhbm5vdC5yZW1vdmUoKTtcbiAgICB9KS50aGVuKChyZW1vdmVkSWRzKSA9PiB7XG4gICAgICAgIHdvcmtlclJlc29sdmUoY2FsbElkLCByZW1vdmVkSWRzIHx8IFtdKTtcbiAgICB9KS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICB3b3JrZXJSZWplY3QoY2FsbElkKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uTWFwLnJlbW92ZUFubm90ID0gcmVtb3ZlQW5ub3Q7XG5cbmZ1bmN0aW9uIGFubm90QWRkUmVwbHkgKGNhbGxJZCwge2RvY0lkLCBwYWdlSWQsIGFubm90SWQsIGNvbnRlbnR9KSB7XG4gICAgX2dldFBhZ2VCeUlkKGRvY0lkLCBwYWdlSWQpLnRoZW4oKHBhZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuIHBhZ2UuZ2V0QW5ub3RCeUlkKGFubm90SWQpO1xuICAgIH0pLnRoZW4oKGFubm90KSA9PiB7XG4gICAgICAgIHJldHVybiBhbm5vdC5hZGRSZXBseShjb250ZW50KTtcbiAgICB9KS50aGVuKGFubm90ID0+IHtcbiAgICAgICAgcmV0dXJuIGFubm90LnBkZlBhZ2UudXBkYXRlKCkudGhlbigoKSA9PiBhbm5vdCk7XG4gICAgfSkudGhlbigoYW5ub3QpID0+IHtcbiAgICAgICAgd29ya2VyUmVzb2x2ZShjYWxsSWQsIGFubm90LnRvSnNvbigpKTtcbiAgICB9KS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICB3b3JrZXJSZWplY3QoY2FsbElkLG51bGwsW10sZSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbk1hcC5hbm5vdEFkZFJlcGx5ID0gYW5ub3RBZGRSZXBseTtcblxuZnVuY3Rpb24gc2V0QW5ub3RSZWN0KGNhbGxJZCx7ZG9jSWQsIHBhZ2VJZCwgYW5ub3RJZCwgcmVjdH0pe1xuICAgIF9nZXRQYWdlQnlJZChkb2NJZCwgcGFnZUlkKS50aGVuKChwYWdlKSA9PiB7XG4gICAgICAgIHJldHVybiBwYWdlLmdldEFubm90QnlJZChhbm5vdElkKTtcbiAgICB9KS50aGVuKChhbm5vdCkgPT4ge1xuICAgICAgICBsZXQgcmV0ID0gYW5ub3Quc2V0UmVjdChyZWN0KTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9KS50aGVuKChmbGFnKSA9PiB7XG4gICAgICAgIHdvcmtlclJlc29sdmUoY2FsbElkLCBmbGFnKTtcbiAgICB9KS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICB3b3JrZXJSZWplY3QoY2FsbElkLG51bGwsW10sZSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbk1hcC5zZXRBbm5vdFJlY3QgPSBzZXRBbm5vdFJlY3Q7XG5cbmZ1bmN0aW9uIGdldEFubm90SW5uZXJSZWN0KGNhbGxJZCwge2RvY0lkLCBwYWdlSWQsIGFubm90SWR9KSB7XG4gICAgX2dldFBhZ2VCeUlkKGRvY0lkLCBwYWdlSWQpLnRoZW4ocGFnZSA9PiBcbiAgICAgICAgcGFnZS5nZXRBbm5vdEJ5SWQoYW5ub3RJZClcbiAgICApXG4gICAgLnRoZW4oYW5ub3QgPT4ge1xuICAgICAgICBpZihhbm5vdC5nZXRJbm5lclJlY3QpIHtcbiAgICAgICAgICAgIHdvcmtlclJlc29sdmUoY2FsbElkLCBhbm5vdC5nZXRJbm5lclJlY3QoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5mdW5jdGlvbk1hcC5nZXRBbm5vdElubmVyUmVjdCA9IGdldEFubm90SW5uZXJSZWN0O1xuXG5mdW5jdGlvbk1hcC5tb3ZlQW5ub3RUbyA9IGZ1bmN0aW9uIG1vdmVBbm5vdFRvKGNhbGxJZCwge2RvY0lkLCBwYWdlSWQsIGFubm90SWQsIHBvc2l0aW9ufSkge1xuICAgIF9nZXRQYWdlQnlJZChkb2NJZCwgcGFnZUlkKSAvL1xuICAgICAgICAudGhlbihwYWdlID0+IHBhZ2UuZ2V0QW5ub3RCeUlkKGFubm90SWQpKSAvL1xuICAgICAgICAudGhlbihhbm5vdCA9PiBhbm5vdC5tb3ZlVG8ocG9zaXRpb24ubGVmdCwgcG9zaXRpb24udG9wKSkgLy9cbiAgICAgICAgLnRoZW4oZmxhZyA9PiB3b3JrZXJSZXNvbHZlKGNhbGxJZCwgZmxhZykpXG4gICAgICAgIC5jYXRjaCgoKSA9PiB7XG4gICAgICAgICAgICB3b3JrZXJSZWplY3QoY2FsbElkKTtcbiAgICAgICAgfSk7XG59O1xuXG5mdW5jdGlvbk1hcC5zZXRBbm5vdElubmVyUmVjdCA9IGZ1bmN0aW9uIHNldEFubm90SW5uZXJSZWN0KGNhbGxJZCwge2RvY0lkLCBwYWdlSWQsIGFubm90SWQsIHJlY3R9KXtcbiAgICBfZ2V0UGFnZUJ5SWQoZG9jSWQsIHBhZ2VJZCkgLy9cbiAgICAgICAgLnRoZW4ocGFnZSA9PiBwYWdlLmdldEFubm90QnlJZChhbm5vdElkKSkgLy9cbiAgICAgICAgLnRoZW4oYW5ub3QgPT4gYW5ub3Quc2V0SW5uZXJSZWN0KHJlY3QpKSAvL1xuICAgICAgICAudGhlbihmbGFnID0+IHdvcmtlclJlc29sdmUoY2FsbElkLCBmbGFnKSlcbiAgICAgICAgLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICAgIHdvcmtlclJlamVjdChjYWxsSWQpO1xuICAgICAgICB9KTtcbn07XG5cbmZ1bmN0aW9uTWFwLnNldEFubm90QVBCaXRtYXAgPSBmdW5jdGlvbiBzZXRBbm5vdEFQQml0bWFwKGNhbGxJZCwge2RvY0lkLCBwYWdlSWQsIGFubm90SWQsIHVybCxzaXplfSl7XG4gICAgX2dldFBhZ2VCeUlkKGRvY0lkLCBwYWdlSWQpIC8vXG4gICAgLnRoZW4ocGFnZSA9PiBwYWdlLmdldEFubm90QnlJZChhbm5vdElkKSkgLy9cbiAgICAudGhlbihhbm5vdCA9PiBhbm5vdC5zZXRBbm5vdEFQQml0bWFwKHVybCxzaXplKSkgLy9cbiAgICAudGhlbihmbGFnID0+IHdvcmtlclJlc29sdmUoY2FsbElkLCBmbGFnKSlcbiAgICAgICAgLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICAgIHdvcmtlclJlamVjdChjYWxsSWQpO1xuICAgICAgICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0UERGRG9jU3RyZWFtIChjYWxsSWQsIHtkb2NJZCwgd3JpdGVTdHJlYW19KSB7XG4gICAgbGV0IF9wZGZEb2M7XG4gICAgX2dldFBERkRvY0J5SWQoZG9jSWQpLnRoZW4oKHBkZkRvYykgPT4ge1xuICAgICAgICBpZiAoIXBkZkRvYykge1xuICAgICAgICAgICAgdGhyb3cgRE9DX0lTX05VTEw7XG4gICAgICAgIH1cbiAgICAgICAgX3BkZkRvYyA9IHBkZkRvYztcbiAgICAgICAgcmV0dXJuIHBkZkRvYy5nZXRTdHJlYW0oe1xuICAgICAgICAgICAgd3JpdGVTdHJlYW06IGZ1bmN0aW9uIChhcnJheUJ1ZmZlciwgb2Zmc2V0LCBzaXplKSB7XG4gICAgICAgICAgICAgICAgd29ya2VyQ29udGludWUod3JpdGVTdHJlYW0sIHthcnJheUJ1ZmZlciwgb2Zmc2V0LCBzaXplfSwgW2FycmF5QnVmZmVyXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pLnRoZW4oKHNpemUpID0+IHtcbiAgICAgICAgYXN5bmNDYWxsQ2FjaGUucHVzaChfcGRmRG9jLmlkLCB3cml0ZVN0cmVhbSk7XG4gICAgICAgIHdvcmtlclJlc29sdmUoY2FsbElkLCBzaXplKTtcbiAgICB9LCAoZSkgPT4ge1xuICAgICAgICBjb25zb2xlLndhcm4oZSlcbiAgICAgICAgd29ya2VyUmVqZWN0KGNhbGxJZCk7XG4gICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgY29uc29sZS53YXJuKGUpXG4gICAgICAgIHdvcmtlclJlamVjdChjYWxsSWQpO1xuICAgIH0pO1xufVxuZnVuY3Rpb25NYXAuZ2V0UERGRG9jU3RyZWFtID0gZ2V0UERGRG9jU3RyZWFtO1xuXG5mdW5jdGlvbiBzZXRBbm5vdEJvcmRlclN0eWxlKGNhbGxJZCx7ZG9jSWQscGFnZUlkLCBhbm5vdElkLHN0eWxlLHN0eWxlUGFyYW19KXtcbiAgICBfZ2V0UGFnZUJ5SWQoZG9jSWQsIHBhZ2VJZCkudGhlbigocGFnZSkgPT4ge1xuICAgICAgICByZXR1cm4gcGFnZS5nZXRBbm5vdEJ5SWQoYW5ub3RJZCk7XG4gICAgfSkudGhlbigoYW5ub3QpID0+IHtcbiAgICAgICAgbGV0IGFubm90SWRzID0gYW5ub3Quc2V0Qm9yZGVyU3R5bGUoc3R5bGUsc3R5bGVQYXJhbSk7XG4gICAgICAgIHJldHVybiBhbm5vdElkcztcbiAgICB9KS50aGVuKChhbm5vdElkcykgPT4ge1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCwgYW5ub3RJZHMpO1xuICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIHdvcmtlclJlamVjdChjYWxsSWQsbnVsbCxbXSxlKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uTWFwLnNldEFubm90Qm9yZGVyU3R5bGUgPSBzZXRBbm5vdEJvcmRlclN0eWxlO1xuXG5mdW5jdGlvbiBzZXRBbm5vdEJvcmRlcldpZHRoKGNhbGxJZCx7ZG9jSWQscGFnZUlkLCBhbm5vdElkLHdpZHRofSl7XG4gICAgX2dldFBhZ2VCeUlkKGRvY0lkLCBwYWdlSWQpLnRoZW4oKHBhZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuIHBhZ2UuZ2V0QW5ub3RCeUlkKGFubm90SWQpO1xuICAgIH0pLnRoZW4oKGFubm90KSA9PiB7XG4gICAgICAgIGxldCByZXQgPSBhbm5vdC5zZXRCb3JkZXJXaWR0aCh3aWR0aCk7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfSkudGhlbigoZmxhZykgPT4ge1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCwgZmxhZyk7XG4gICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgd29ya2VyUmVqZWN0KGNhbGxJZCxudWxsLFtdLGUpO1xuICAgIH0pO1xufVxuZnVuY3Rpb25NYXAuc2V0QW5ub3RCb3JkZXJXaWR0aCA9IHNldEFubm90Qm9yZGVyV2lkdGg7XG5cbmZ1bmN0aW9uIHNldEFubm90RmlsbENvbG9yKGNhbGxJZCx7ZG9jSWQscGFnZUlkLCBhbm5vdElkLGNvbG9yfSl7XG4gICAgX2dldFBhZ2VCeUlkKGRvY0lkLCBwYWdlSWQpLnRoZW4oKHBhZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuIHBhZ2UuZ2V0QW5ub3RCeUlkKGFubm90SWQpO1xuICAgIH0pLnRoZW4oKGFubm90KSA9PiB7XG4gICAgICAgIGxldCByZXQgPSBhbm5vdC5zZXRGaWxsQ29sb3IoY29sb3IpO1xuICAgICAgICByZXR1cm4gISFyZXQubGVuZ3RoO1xuICAgIH0pLnRoZW4oKGZsYWcpID0+IHtcbiAgICAgICAgd29ya2VyUmVzb2x2ZShjYWxsSWQsIGZsYWcpO1xuICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIHdvcmtlclJlamVjdChjYWxsSWQsbnVsbCxbXSxlKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uTWFwLnNldEFubm90RmlsbENvbG9yID0gc2V0QW5ub3RGaWxsQ29sb3I7XG5cbmZ1bmN0aW9uIHNldFJlZGFjdEFwcGx5RmlsbENvbG9yKGNhbGxJZCx7ZG9jSWQscGFnZUlkLCBhbm5vdElkLGNvbG9yfSl7XG4gICAgX2dldFBhZ2VCeUlkKGRvY0lkLCBwYWdlSWQpLnRoZW4oKHBhZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuIHBhZ2UuZ2V0QW5ub3RCeUlkKGFubm90SWQpO1xuICAgIH0pLnRoZW4oKGFubm90KSA9PiB7XG4gICAgICAgIHJldHVybiBhbm5vdC5zZXRSZWRhY3RBcHBseUZpbGxDb2xvcihjb2xvcik7XG4gICAgfSkudGhlbigoZmxhZykgPT4ge1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCwgZmxhZyk7XG4gICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgd29ya2VyUmVqZWN0KGNhbGxJZCxudWxsLFtdLGUpO1xuICAgIH0pO1xufVxuZnVuY3Rpb25NYXAuc2V0UmVkYWN0QXBwbHlGaWxsQ29sb3IgPSBzZXRSZWRhY3RBcHBseUZpbGxDb2xvcjtcblxuZnVuY3Rpb24gc2V0QW5ub3RJY29uTmFtZShjYWxsSWQse2RvY0lkLHBhZ2VJZCwgYW5ub3RJZCxpY29uTmFtZX0pIHtcbiAgICBfZ2V0UGFnZUJ5SWQoZG9jSWQsIHBhZ2VJZCkudGhlbigocGFnZSkgPT4ge1xuICAgICAgICByZXR1cm4gcGFnZS5nZXRBbm5vdEJ5SWQoYW5ub3RJZCk7XG4gICAgfSkudGhlbigoYW5ub3QpID0+IHtcbiAgICAgICAgcmV0dXJuIGFubm90LnNldEljb25OYW1lKGljb25OYW1lKTtcbiAgICB9KS50aGVuKChmbGFnKSA9PiB7XG4gICAgICAgIHdvcmtlclJlc29sdmUoY2FsbElkLCBmbGFnKTtcbiAgICB9KS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICB3b3JrZXJSZWplY3QoY2FsbElkLG51bGwsW10sZSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbk1hcC5zZXRBbm5vdEljb25OYW1lID0gc2V0QW5ub3RJY29uTmFtZTtcblxuZnVuY3Rpb24gZ2V0RmlsZWF0dGFjaG1lbnRTdHJlYW0oY2FsbElkLHtkb2NJZCxwYWdlSWQsIGFubm90SWQsd3JpdGVTdHJlYW19KSB7XG4gICAgX2dldFBhZ2VCeUlkKGRvY0lkLCBwYWdlSWQpLnRoZW4oKHBhZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuIHBhZ2UuZ2V0QW5ub3RCeUlkKGFubm90SWQpO1xuICAgIH0pLnRoZW4oKGFubm90KSA9PiB7XG4gICAgICAgcmV0dXJuIGFubm90LmdldFN0cmVhbSh7XG4gICAgICAgICAgIHdyaXRlU3RyZWFtOiBmdW5jdGlvbiAoYXJyYXlCdWZmZXIsIG9mZnNldCwgc2l6ZSkge1xuICAgICAgICAgICAgICAgd29ya2VyQ29udGludWUod3JpdGVTdHJlYW0sIHthcnJheUJ1ZmZlciwgb2Zmc2V0LCBzaXplfSwgW2FycmF5QnVmZmVyXSk7XG4gICAgICAgICAgIH1cbiAgICAgICB9KTtcbiAgICB9KS50aGVuKChzaXplKSA9PiB7XG4gICAgICAgIGFzeW5jQ2FsbENhY2hlLnB1c2goYW5ub3RJZCwgd3JpdGVTdHJlYW0pO1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCwgc2l6ZSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbk1hcC5nZXRGaWxlYXR0YWNobWVudFN0cmVhbSA9IGdldEZpbGVhdHRhY2htZW50U3RyZWFtO1xuXG5mdW5jdGlvbiBzZXRBbm5vdEVuZGluZ1N0eWxlKGNhbGxJZCx7ZG9jSWQscGFnZUlkLCBhbm5vdElkLGlzQmVnaW5uaW5nLCBzdHlsZX0pIHtcbiAgICBfZ2V0UGFnZUJ5SWQoZG9jSWQsIHBhZ2VJZCkudGhlbigocGFnZSkgPT4ge1xuICAgICAgICByZXR1cm4gcGFnZS5nZXRBbm5vdEJ5SWQoYW5ub3RJZCk7XG4gICAgfSkudGhlbigoYW5ub3QpID0+IHtcbiAgICAgICAgc3R5bGUgPSBwYXJzZUludChzdHlsZSk7XG4gICAgICAgIGlmKGlzQmVnaW5uaW5nKXtcbiAgICAgICAgICAgIGFubm90LnNldExpbmVTdGFydFN0eWxlKHN0eWxlKTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBhbm5vdC5zZXRMaW5lRW5kU3R5bGUoc3R5bGUpO1xuICAgICAgICB9XG4gICAgfSkudGhlbigoKT0+e1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCk7XG4gICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgd29ya2VyUmVqZWN0KGNhbGxJZCxudWxsLFtdLGUpO1xuICAgIH0pO1xufVxuZnVuY3Rpb25NYXAuc2V0QW5ub3RFbmRpbmdTdHlsZSA9IHNldEFubm90RW5kaW5nU3R5bGU7XG5cbmZ1bmN0aW9uIGVuYWJsZUxpbmVDYXB0aW9uKGNhbGxJZCx7ZG9jSWQscGFnZUlkLCBhbm5vdElkLGVuYWJsZX0pIHtcbiAgICBfZ2V0UGFnZUJ5SWQoZG9jSWQsIHBhZ2VJZCkudGhlbigocGFnZSkgPT4ge1xuICAgICAgICByZXR1cm4gcGFnZS5nZXRBbm5vdEJ5SWQoYW5ub3RJZCk7XG4gICAgfSkudGhlbigoYW5ub3QpID0+IHtcbiAgICAgICAgYW5ub3QuZW5hYmxlQ2FwdGlvbihlbmFibGUpO1xuICAgIH0pLnRoZW4oKCk9PntcbiAgICAgICAgd29ya2VyUmVzb2x2ZShjYWxsSWQpO1xuICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIHdvcmtlclJlamVjdChjYWxsSWQsbnVsbCxbXSxlKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uTWFwLmVuYWJsZUxpbmVDYXB0aW9uID0gZW5hYmxlTGluZUNhcHRpb247XG5cbmZ1bmN0aW9uIHNldExpbmVTdGFydFBvaW50KGNhbGxJZCx7ZG9jSWQscGFnZUlkLCBhbm5vdElkLHgseX0pIHtcbiAgICBfZ2V0UGFnZUJ5SWQoZG9jSWQsIHBhZ2VJZCkudGhlbigocGFnZSkgPT4ge1xuICAgICAgICByZXR1cm4gcGFnZS5nZXRBbm5vdEJ5SWQoYW5ub3RJZCk7XG4gICAgfSkudGhlbigoYW5ub3QpID0+IHtcbiAgICAgICAgYW5ub3Quc2V0U3RhcnRQb2ludCh4LHkpO1xuICAgIH0pLnRoZW4oKCk9PntcbiAgICAgICAgd29ya2VyUmVzb2x2ZShjYWxsSWQpO1xuICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIHdvcmtlclJlamVjdChjYWxsSWQsbnVsbCxbXSxlKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uTWFwLnNldExpbmVTdGFydFBvaW50ID0gc2V0TGluZVN0YXJ0UG9pbnQ7XG5cbmZ1bmN0aW9uIHNldExpbmVFbmRQb2ludChjYWxsSWQse2RvY0lkLHBhZ2VJZCwgYW5ub3RJZCx4LHl9KSB7XG4gICAgX2dldFBhZ2VCeUlkKGRvY0lkLCBwYWdlSWQpLnRoZW4oKHBhZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuIHBhZ2UuZ2V0QW5ub3RCeUlkKGFubm90SWQpO1xuICAgIH0pLnRoZW4oKGFubm90KSA9PiB7XG4gICAgICAgIGFubm90LnNldEVuZFBvaW50KHgseSk7XG4gICAgfSkudGhlbigoKT0+e1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCk7XG4gICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgd29ya2VyUmVqZWN0KGNhbGxJZCxudWxsLFtdLGUpO1xuICAgIH0pO1xufVxuZnVuY3Rpb25NYXAuc2V0TGluZUVuZFBvaW50ID0gc2V0TGluZUVuZFBvaW50O1xuXG5mdW5jdGlvbiBzZXRBbm5vdExlYWRlckxpbmVMZW5ndGgoY2FsbElkLHtkb2NJZCxwYWdlSWQsIGFubm90SWQsbGVuZ3RofSkge1xuICAgIF9nZXRQYWdlQnlJZChkb2NJZCwgcGFnZUlkKS50aGVuKChwYWdlKSA9PiB7XG4gICAgICAgIHJldHVybiBwYWdlLmdldEFubm90QnlJZChhbm5vdElkKTtcbiAgICB9KS50aGVuKChhbm5vdCkgPT4ge1xuICAgICAgICBhbm5vdC5zZXRMZWFkZXJMaW5lTGVuZ3RoKGxlbmd0aCk7XG4gICAgfSkudGhlbigoKT0+e1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCk7XG4gICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgd29ya2VyUmVqZWN0KGNhbGxJZCxudWxsLFtdLGUpO1xuICAgIH0pO1xufVxuZnVuY3Rpb25NYXAuc2V0QW5ub3RMZWFkZXJMaW5lTGVuZ3RoID0gc2V0QW5ub3RMZWFkZXJMaW5lTGVuZ3RoO1xuXG5mdW5jdGlvbiB1cGRhdGVBbm5vdFZlcnRleGVzKGNhbGxJZCx7ZG9jSWQscGFnZUlkLCBhbm5vdElkLHBvaW50SW5kZXgseCx5fSkge1xuICAgIF9nZXRQYWdlQnlJZChkb2NJZCwgcGFnZUlkKS50aGVuKChwYWdlKSA9PiB7XG4gICAgICAgIHJldHVybiBwYWdlLmdldEFubm90QnlJZChhbm5vdElkKTtcbiAgICB9KS50aGVuKChhbm5vdCkgPT4ge1xuICAgICAgICBhbm5vdC51cGRhdGVWZXJ0ZXhlcyhwb2ludEluZGV4LHgseSk7XG4gICAgfSkudGhlbigoKT0+e1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCk7XG4gICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgd29ya2VyUmVqZWN0KGNhbGxJZCxudWxsLFtdLGUpO1xuICAgIH0pO1xufVxuZnVuY3Rpb25NYXAudXBkYXRlQW5ub3RWZXJ0ZXhlcyA9IHVwZGF0ZUFubm90VmVydGV4ZXM7XG5cbmZ1bmN0aW9uIHNldEFubm90VmVydGV4ZXMoY2FsbElkLCB7ZG9jSWQsIHBhZ2VJZCwgYW5ub3RJZCwgdmVydGV4ZXN9KSB7XG4gICAgX2dldFBhZ2VCeUlkKGRvY0lkLCBwYWdlSWQpLnRoZW4oKHBhZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuIHBhZ2UuZ2V0QW5ub3RCeUlkKGFubm90SWQpO1xuICAgIH0pLnRoZW4oKGFubm90KSA9PiB7XG4gICAgICAgIGFubm90LnNldFZlcnRleGVzKHZlcnRleGVzKTtcbiAgICB9KS50aGVuKCgpPT57XG4gICAgICAgIHdvcmtlclJlc29sdmUoY2FsbElkKTtcbiAgICB9KS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICB3b3JrZXJSZWplY3QoY2FsbElkLG51bGwsW10sZSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbk1hcC5zZXRBbm5vdFZlcnRleGVzID0gc2V0QW5ub3RWZXJ0ZXhlcztcblxuZnVuY3Rpb24gc2V0SGlnaGxpZ2h0aW5nTW9kZShjYWxsSWQse2RvY0lkLHBhZ2VJZCwgYW5ub3RJZCxoaWdobGlnaHRpbmdNb2RlfSl7XG4gICAgX2dldFBhZ2VCeUlkKGRvY0lkLCBwYWdlSWQpLnRoZW4oKHBhZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuIHBhZ2UuZ2V0QW5ub3RCeUlkKGFubm90SWQpO1xuICAgIH0pLnRoZW4oKGFubm90KSA9PiB7XG4gICAgICAgIHJldHVybiBhbm5vdC5zZXRIaWdobGlnaHRpbmdNb2RlKGhpZ2hsaWdodGluZ01vZGUpO1xuICAgIH0pLnRoZW4oKG1vZGlmaWVkSWRzKT0+e1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCxtb2RpZmllZElkcyk7XG4gICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgd29ya2VyUmVqZWN0KGNhbGxJZCxudWxsLFtdLGUpO1xuICAgIH0pO1xufVxuZnVuY3Rpb25NYXAuc2V0SGlnaGxpZ2h0aW5nTW9kZSA9IHNldEhpZ2hsaWdodGluZ01vZGU7XG5cbmZ1bmN0aW9uIF9nZXRGaWxlU2l6ZSAoYmxvYikge1xuICAgIHJldHVybiBibG9iIGluc3RhbmNlb2YgQmxvYiA/IGJsb2Iuc2l6ZSA6IGJsb2IuYnl0ZUxlbmd0aDtcbn1cbmZ1bmN0aW9uIF9nZXRGaWxlU3luY1JlYWRlciAoZmlsZSkge1xuICAgIGlmIChmaWxlIGluc3RhbmNlb2YgQmxvYikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG9mZnNldCwgc2l6ZSkge1xuICAgICAgICAgICAgbGV0IGZpbGVSZWFkZXJTeW5jID0gbmV3IEZpbGVSZWFkZXJTeW5jKCk7XG4gICAgICAgICAgICByZXR1cm4gZmlsZVJlYWRlclN5bmMucmVhZEFzQXJyYXlCdWZmZXIoZmlsZS5zbGljZShvZmZzZXQsIG9mZnNldCArIHNpemUpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoZmlsZS5zbGljZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG9mZnNldCwgc2l6ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZpbGUuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBzaXplKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKG9mZnNldCwgc2l6ZSkge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoZmlsZSwgb2Zmc2V0LCBzaXplKS5idWZmZXI7XG4gICAgfVxufVxuZnVuY3Rpb24gaW1wb3J0RnJvbUZERihjYWxsSWQse2RvY0lkLGZkZixkYXRhVHlwZX0pe1xuICAgIHBkZkpSUHJvbWlzZS50aGVuKChwZGZKcikgPT57XG4gICAgICAgIGxldCBmaWxlU2l6ZSA9IF9nZXRGaWxlU2l6ZShmZGYpO1xuICAgICAgICBsZXQgZmlsZVN5bmNSZWFkZXIgPSBfZ2V0RmlsZVN5bmNSZWFkZXIoZmRmKTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFtwZGZKci5nZXRGREZEb2Moe1xuICAgICAgICAgICAgc2l6ZTogZmlsZVNpemUsXG4gICAgICAgICAgICBnZXRCdWZmZXI6IGZ1bmN0aW9uIChvZmZzZXQsIHNpemUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlsZVN5bmNSZWFkZXIob2Zmc2V0LCBzaXplKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksIF9nZXRQREZEb2NCeUlkKGRvY0lkKV0pO1xuICAgIH0pLnRoZW4oKFtmZGZkb2MsIHBkZkRvY10pPT57XG4gICAgICAgIHBkZkRvYy5pbXBvcnRGcm9tRkRGKGZkZmRvYyxkYXRhVHlwZSk7XG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChwZGZEb2MuZ2V0QWxsTG9hZGVkUGFnZXMoKS5tYXAocGFnZSA9PiBwYWdlLnVwZGF0ZSgpKSk7XG4gICAgfSkudGhlbigoKT0+e1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCk7XG4gICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgd29ya2VyUmVqZWN0KGNhbGxJZCxudWxsLFtdLGUpO1xuICAgIH0pXG5cbn1cbmZ1bmN0aW9uTWFwLmltcG9ydEZyb21GREYgPSBpbXBvcnRGcm9tRkRGO1xuZnVuY3Rpb24gaW1wb3J0RnJvbUZERkZpbGUgKGNhbGxJZCwge2RvY0lkLCBmaWxlLHNpemUsIHR5cGV9KSB7XG4gICAgcGRmSlJQcm9taXNlLnRoZW4oKHBkZkpyKSA9PiB7XG4gICAgICAgIGxldCBwcm9taXNlO1xuICAgICAgICBpZihmaWxlIGluc3RhbmNlb2YgVWludDhBcnJheSl7XG4gICAgICAgICAgICBwcm9taXNlID0gcGRmSnIuZ2V0RkRGRG9jKHtcbiAgICAgICAgICAgICAgICBzaXplOiBmaWxlLmJ5dGVMZW5ndGgsXG4gICAgICAgICAgICAgICAgZ2V0QnVmZmVyOiBmdW5jdGlvbiAob2Zmc2V0LCBzaXplKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWxlLnNsaWNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmlsZS5zbGljZShvZmZzZXQsIG9mZnNldCArIHNpemUpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGZpbGUsIG9mZnNldCwgc2l6ZSkuYnVmZmVyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfWVsc2UgaWYgKHR5cGVvZiBmaWxlID09PSBcInN0cmluZ1wiKXtcbiAgICAgICAgICAgIHByb21pc2UgPSBwZGZKci5nZXRGREZGcm9tVVJMKGZpbGUsc2l6ZSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9KS50aGVuKChmZGYpID0+IHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFtmZGYsIF9nZXRQREZEb2NCeUlkKGRvY0lkKV0pO1xuICAgIH0pLnRoZW4oKFtmZGYsIGRvY10pID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gZG9jLmltcG9ydEZyb21GREYoZmRmLCB0eXBlKTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKGRvYy5nZXRBbGxMb2FkZWRQYWdlcygpLm1hcChwYWdlID0+IHBhZ2UudXBkYXRlKCkpKS50aGVuKCgpID0+IHJlc3VsdCk7XG4gICAgfSkudGhlbigoZmxhZyk9PntcbiAgICAgICAgd29ya2VyUmVzb2x2ZShjYWxsSWQsIGZsYWcpO1xuICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIHdvcmtlclJlamVjdChjYWxsSWQsbnVsbCxbXSxlKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uTWFwLmltcG9ydEZyb21GREZGaWxlID0gaW1wb3J0RnJvbUZERkZpbGU7XG5cbmZ1bmN0aW9uIHNldENhbGxvdXRMaW5lRW5kaW5nU3R5bGUoY2FsbElkLHtkb2NJZCxwYWdlSWQsIGFubm90SWQsZW5kaW5nU3R5bGV9KXtcbiAgICBfZ2V0UGFnZUJ5SWQoZG9jSWQsIHBhZ2VJZCkudGhlbigocGFnZSkgPT4ge1xuICAgICAgICByZXR1cm4gcGFnZS5nZXRBbm5vdEJ5SWQoYW5ub3RJZCk7XG4gICAgfSkudGhlbigoYW5ub3QpID0+IHtcbiAgICAgICAgYW5ub3Quc2V0Q2FsbG91dExpbmVFbmRpbmdTdHlsZShlbmRpbmdTdHlsZSk7XG4gICAgfSkudGhlbigoKT0+e1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCk7XG4gICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgd29ya2VyUmVqZWN0KGNhbGxJZCxudWxsLFtdLGUpO1xuICAgIH0pO1xufVxuZnVuY3Rpb25NYXAuc2V0Q2FsbG91dExpbmVFbmRpbmdTdHlsZSA9IHNldENhbGxvdXRMaW5lRW5kaW5nU3R5bGU7XG5cbmZ1bmN0aW9uIHNldEFjdGlvbihjYWxsSWQse2RvY0lkLHBhZ2VJZCwgYW5ub3RJZCx0eXBlfSl7XG4gICAgX2dldFBhZ2VCeUlkKGRvY0lkLCBwYWdlSWQpLnRoZW4oKHBhZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuIHBhZ2UuZ2V0QW5ub3RCeUlkKGFubm90SWQpO1xuICAgIH0pLnRoZW4oKGFubm90KSA9PiB7XG4gICAgICAgIHJldHVybiBhbm5vdC5zZXRBY3Rpb24odHlwZSk7XG4gICAgfSkudGhlbigoYWN0aW9uKT0+e1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCxhY3Rpb24udG9Kc29uKCkpO1xuICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIHdvcmtlclJlamVjdChjYWxsSWQsbnVsbCxbXSxlKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uTWFwLnNldEFjdGlvbiA9IHNldEFjdGlvbjtcblxuXG5mdW5jdGlvbiBhZGRBbm5vdFJldmlld1N0YXRlKGNhbGxJZCwge2RvY0lkLCBwYWdlSWQsIGFubm90SWQsIHN0YXRlTmFtZX0pIHtcbiAgICBfZ2V0UGFnZUJ5SWQoZG9jSWQsIHBhZ2VJZCkudGhlbihwYWdlID0+IHtcbiAgICAgICAgcmV0dXJuIHBhZ2UuZ2V0QW5ub3RCeUlkKGFubm90SWQpO1xuICAgIH0pLnRoZW4oYW5ub3QgPT4ge1xuICAgICAgICByZXR1cm4gYW5ub3QuYWRkUmV2aWV3U3RhdGUoc3RhdGVOYW1lKTtcbiAgICB9KS50aGVuKGFubm90ID0+IHtcbiAgICAgICAgcmV0dXJuIGFubm90LnBkZlBhZ2UudXBkYXRlKCkudGhlbigoKSA9PiBhbm5vdCk7XG4gICAgfSkudGhlbigoYW5ub3QpID0+IHtcbiAgICAgICAgd29ya2VyUmVzb2x2ZShjYWxsSWQsIGFubm90LnRvSnNvbigpKTtcbiAgICB9KS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICB3b3JrZXJSZWplY3QoY2FsbElkLG51bGwsW10sZSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbk1hcC5hZGRBbm5vdFJldmlld1N0YXRlID0gYWRkQW5ub3RSZXZpZXdTdGF0ZTtcblxuZnVuY3Rpb24gYWRkQW5ub3RNYXJrZWRTdGF0ZShjYWxsSWQsIHtkb2NJZCwgcGFnZUlkLCBhbm5vdElkLCBzdGF0ZU5hbWV9KSB7XG4gICAgX2dldFBhZ2VCeUlkKGRvY0lkLCBwYWdlSWQpLnRoZW4ocGFnZSA9PiB7XG4gICAgICAgIHJldHVybiBwYWdlLmdldEFubm90QnlJZChhbm5vdElkKTtcbiAgICB9KS50aGVuKGFubm90ID0+IHtcbiAgICAgICAgcmV0dXJuIGFubm90LmFkZE1hcmtlZFN0YXRlKHN0YXRlTmFtZSk7XG4gICAgfSkudGhlbihhbm5vdCA9PiB7XG4gICAgICAgIHJldHVybiBhbm5vdC5wZGZQYWdlLnVwZGF0ZSgpLnRoZW4oKCkgPT4gYW5ub3QpO1xuICAgIH0pLnRoZW4oKGFubm90KSA9PiB7XG4gICAgICAgIHdvcmtlclJlc29sdmUoY2FsbElkLCBhbm5vdC50b0pzb24oKSk7XG4gICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgd29ya2VyUmVqZWN0KGNhbGxJZCxudWxsLFtdLGUpO1xuICAgIH0pO1xufVxuZnVuY3Rpb25NYXAuYWRkQW5ub3RNYXJrZWRTdGF0ZSA9IGFkZEFubm90TWFya2VkU3RhdGU7XG5cbmZ1bmN0aW9uTWFwLnJlbW92ZUFsbFN0YXRlQW5ub3RzID0gZnVuY3Rpb24gcmVtb3ZlQWxsU3RhdGVBbm5vdHMoY2FsbElkLCB7ZG9jSWQsIHBhZ2VJZCwgYW5ub3RJZH0pIHtcbiAgICBfZ2V0UGFnZUJ5SWQoZG9jSWQsIHBhZ2VJZCkudGhlbihwYWdlID0+IHtcbiAgICAgICAgcmV0dXJuIHBhZ2UuZ2V0QW5ub3RCeUlkKGFubm90SWQpO1xuICAgIH0pXG4gICAgLnRoZW4oYW5ub3QgPT4ge1xuICAgICAgICBjb25zdCBpc1N1Y2Nlc3MgPSBhbm5vdC5yZW1vdmVBbGxTdGF0ZUFubm90cygpO1xuICAgICAgICBpZihpc1N1Y2Nlc3MpIHtcbiAgICAgICAgICAgIHJldHVybiBhbm5vdC5wZGZQYWdlLnVwZGF0ZSgpLnRoZW4oXyA9PiBpc1N1Y2Nlc3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KVxuICAgIC50aGVuKGlzU3VjY2VzcyA9PiB3b3JrZXJSZXNvbHZlKGNhbGxJZCwgaXNTdWNjZXNzKSlcbiAgICAuY2F0Y2gocmVhc29uID0+IHdvcmtlclJlamVjdChjYWxsSWQsIHJlYXNvbikpXG4gICAgO1xufVxuXG5mdW5jdGlvbk1hcC5zZXRTdGF0ZU5hbWUgPSBmdW5jdGlvbiBzZXRTdGF0ZU5hbWUoY2FsbElkLCB7IGRvY0lkLCBwYWdlSWQsIHN0YXRlQW5ub3RJZCwgc3RhdGVOYW1lIH0pe1xuICAgIF9nZXRQYWdlQnlJZChkb2NJZCwgcGFnZUlkKS50aGVuKHBhZ2UgPT4ge1xuICAgICAgICByZXR1cm4gcGFnZS5nZXRBbm5vdEJ5SWQoc3RhdGVBbm5vdElkKTtcbiAgICB9KVxuICAgIC50aGVuKGFubm90ID0+IHtcbiAgICAgICAgYW5ub3Quc2V0U3RhdGVOYW1lKHN0YXRlTmFtZSk7XG4gICAgICAgIHdvcmtlclJlc29sdmUoY2FsbElkLCB0cnVlKTtcbiAgICB9KVxuICAgIC5jYXRjaChyZWFzb24gPT4gd29ya2VyUmVqZWN0KGNhbGxJZCwgcmVhc29uKSk7XG59XG5cbmZ1bmN0aW9uTWFwLnNldE5vdGVPcGVuU3RhdHVzID0gZnVuY3Rpb24gc2V0Tm90ZU9wZW5TdGF0dXMoY2FsbElkLCB7ZG9jSWQsIHBhZ2VJZCwgYW5ub3RJZCwgaXNPcGVuIH0pIHtcbiAgICBfZ2V0UGFnZUJ5SWQoZG9jSWQsIHBhZ2VJZClcbiAgICAgICAgLnRoZW4ocGFnZSA9PiBwYWdlLmdldEFubm90QnlJZChhbm5vdElkKSlcbiAgICAgICAgLnRoZW4oYW5ub3QgPT4ge1xuICAgICAgICAgICAgY29uc3QgaXNTdWNjZXNzID0gYW5ub3Quc2V0T3BlblN0YXR1cyhpc09wZW4pO1xuICAgICAgICAgICAgd29ya2VyUmVzb2x2ZShjYWxsSWQsIGlzU3VjY2Vzcyk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChyZWFzb24gPT4gd29ya2VyUmVqZWN0KGNhbGxJZCwgcmVhc29uKSk7XG59XG5cbmZ1bmN0aW9uIHNldEFjdGlvbkRhdGFCeUluZGV4KGNhbGxJZCx7ZG9jSWQscGFnZUlkLCBhbm5vdElkLGRhdGEsYWN0aW9uSW5kZXh9KSB7XG4gICAgX2dldFBhZ2VCeUlkKGRvY0lkLCBwYWdlSWQpLnRoZW4oKHBhZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuIHBhZ2UuZ2V0QW5ub3RCeUlkKGFubm90SWQpO1xuICAgIH0pLnRoZW4oKGFubm90KSA9PiB7XG4gICAgICAgIHJldHVybiBhbm5vdC5hY3Rpb24uc2V0QWN0aW9uRGF0YUJ5SW5kZXgoZGF0YSxhY3Rpb25JbmRleCk7XG4gICAgfSkudGhlbigoYWN0aW9uKT0+e1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCxhY3Rpb24udG9Kc29uKCkpO1xuICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIHdvcmtlclJlamVjdChjYWxsSWQsbnVsbCxbXSxlKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uTWFwLnNldEFjdGlvbkRhdGFCeUluZGV4ID0gc2V0QWN0aW9uRGF0YUJ5SW5kZXg7XG5cbmZ1bmN0aW9uIHNldENhbGxvdXRMaW5lUG9pbnRzKGNhbGxJZCx7ZG9jSWQscGFnZUlkLCBhbm5vdElkLGNhbGxvdXRMaW5lUG9pbnRzfSl7XG4gICAgX2dldFBhZ2VCeUlkKGRvY0lkLCBwYWdlSWQpLnRoZW4oKHBhZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuIHBhZ2UuZ2V0QW5ub3RCeUlkKGFubm90SWQpO1xuICAgIH0pLnRoZW4oKGFubm90KSA9PiB7XG4gICAgICAgIHJldHVybiBhbm5vdC5zZXRDYWxsb3V0TGluZVBvaW50cyhjYWxsb3V0TGluZVBvaW50cyk7XG4gICAgfSkudGhlbigoKT0+e1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCk7XG4gICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgd29ya2VyUmVqZWN0KGNhbGxJZCxudWxsLFtdLGUpO1xuICAgIH0pO1xufVxuZnVuY3Rpb25NYXAuc2V0Q2FsbG91dExpbmVQb2ludHMgPSBzZXRDYWxsb3V0TGluZVBvaW50cztcblxuZnVuY3Rpb24gc2V0U3ViamVjdChjYWxsSWQse2RvY0lkLHBhZ2VJZCwgYW5ub3RJZCxzdWJqZWN0fSl7XG4gICAgX2dldFBhZ2VCeUlkKGRvY0lkLCBwYWdlSWQpLnRoZW4oKHBhZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuIHBhZ2UuZ2V0QW5ub3RCeUlkKGFubm90SWQpO1xuICAgIH0pLnRoZW4oKGFubm90KSA9PiB7XG4gICAgICAgIGxldCByZXQgPSBhbm5vdC5zZXRTdWJqZWN0KHN1YmplY3QpO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH0pLnRoZW4oKG1vZGlmaWVkSWRzKSA9PiB7XG4gICAgICAgIHdvcmtlclJlc29sdmUoY2FsbElkLCBtb2RpZmllZElkcyk7XG4gICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgd29ya2VyUmVqZWN0KGNhbGxJZCxudWxsLFtdLGUpO1xuICAgIH0pO1xufVxuZnVuY3Rpb25NYXAuc2V0U3ViamVjdCA9IHNldFN1YmplY3Q7XG5cbmZ1bmN0aW9uIHNldFRpdGxlKGNhbGxJZCx7ZG9jSWQscGFnZUlkLCBhbm5vdElkLHRpdGxlfSl7XG4gICAgX2dldFBhZ2VCeUlkKGRvY0lkLCBwYWdlSWQpLnRoZW4oKHBhZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuIHBhZ2UuZ2V0QW5ub3RCeUlkKGFubm90SWQpO1xuICAgIH0pLnRoZW4oKGFubm90KSA9PiB7XG4gICAgICAgIGxldCByZXQgPSBhbm5vdC5zZXRUaXRsZSh0aXRsZSk7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfSkudGhlbigobW9kaWZpZWRJZHMpID0+IHtcbiAgICAgICAgd29ya2VyUmVzb2x2ZShjYWxsSWQsIG1vZGlmaWVkSWRzKTtcbiAgICB9KS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICB3b3JrZXJSZWplY3QoY2FsbElkLG51bGwsW10sZSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbk1hcC5zZXRUaXRsZSA9IHNldFRpdGxlO1xuXG5mdW5jdGlvbiBzZXRDcmVhdGVEYXRlVGltZShjYWxsSWQse2RvY0lkLHBhZ2VJZCwgYW5ub3RJZCxkYXRlfSl7XG4gICAgX2dldFBhZ2VCeUlkKGRvY0lkLCBwYWdlSWQpLnRoZW4oKHBhZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuIHBhZ2UuZ2V0QW5ub3RCeUlkKGFubm90SWQpO1xuICAgIH0pLnRoZW4oKGFubm90KSA9PiB7XG4gICAgICAgIGxldCByZXQgPSBhbm5vdC5zZXRDcmVhdGVEYXRlVGltZShkYXRlKTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9KS50aGVuKChtb2RpZmllZElkcykgPT4ge1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCwgbW9kaWZpZWRJZHMpO1xuICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIHdvcmtlclJlamVjdChjYWxsSWQsbnVsbCxbXSxlKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uTWFwLnNldENyZWF0ZURhdGVUaW1lID0gc2V0Q3JlYXRlRGF0ZVRpbWU7XG5cbmZ1bmN0aW9uIHNldE1vZGlmaWVkRGF0ZVRpbWUoY2FsbElkLHtkb2NJZCxwYWdlSWQsIGFubm90SWQsZGF0ZX0pe1xuICAgIF9nZXRQYWdlQnlJZChkb2NJZCwgcGFnZUlkKS50aGVuKChwYWdlKSA9PiB7XG4gICAgICAgIHJldHVybiBwYWdlLmdldEFubm90QnlJZChhbm5vdElkKTtcbiAgICB9KS50aGVuKChhbm5vdCkgPT4ge1xuICAgICAgICBsZXQgcmV0ID0gYW5ub3Quc2V0TW9kaWZpZWREYXRlVGltZShkYXRlKTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9KS50aGVuKChmbGFnKSA9PiB7XG4gICAgICAgIHdvcmtlclJlc29sdmUoY2FsbElkLCBmbGFnKTtcbiAgICB9KS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICB3b3JrZXJSZWplY3QoY2FsbElkLG51bGwsW10sZSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbk1hcC5zZXRNb2RpZmllZERhdGVUaW1lID0gc2V0TW9kaWZpZWREYXRlVGltZTtcblxuZnVuY3Rpb24gc2V0RGVmYXVsdEFwKGNhbGxJZCx7ZG9jSWQscGFnZUlkLCBhbm5vdElkLGRlZmF1bHRBcHBlYXJhbmNlfSl7XG4gICAgX2dldFBhZ2VCeUlkKGRvY0lkLCBwYWdlSWQpLnRoZW4oKHBhZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuIHBhZ2UuZ2V0QW5ub3RCeUlkKGFubm90SWQpO1xuICAgIH0pLnRoZW4oKGFubm90KSA9PiB7XG4gICAgICAgIGxldCByZXQgPSBhbm5vdC5zZXREZWZhdWx0QXAoZGVmYXVsdEFwcGVhcmFuY2UpO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH0pLnRoZW4oKGZsYWcpID0+IHtcbiAgICAgICAgd29ya2VyUmVzb2x2ZShjYWxsSWQsIGZsYWcpO1xuICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIHdvcmtlclJlamVjdChjYWxsSWQsbnVsbCxbXSxlKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uTWFwLnNldERlZmF1bHRBcCA9IHNldERlZmF1bHRBcDtcblxuZnVuY3Rpb24gZXhwb3J0VG9GREYoY2FsbElkLHtkb2NJZCxmaWxlVHlwZSxkYXRhVHlwZX0pe1xuICAgIF9nZXRQREZEb2NCeUlkKGRvY0lkKS50aGVuKChwZGZEb2MpID0+IHtcbiAgICAgICAgcmV0dXJuIHBkZkRvYy5leHBvcnRUb0ZERihmaWxlVHlwZSxkYXRhVHlwZSk7XG4gICAgfSkudGhlbihfPT57XG4gICAgICAgIHdvcmtlclJlc29sdmUoY2FsbElkLCBfKTtcbiAgICB9KS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICB3b3JrZXJSZWplY3QoY2FsbElkLG51bGwsW10sZSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbk1hcC5leHBvcnRUb0ZERiA9IGV4cG9ydFRvRkRGO1xuXG5cbmZ1bmN0aW9uIHNldEFubm90RmxhZyhjYWxsSWQse2RvY0lkLHBhZ2VJZCwgYW5ub3RJZCxmbGFnfSl7XG4gICAgX2dldFBhZ2VCeUlkKGRvY0lkLCBwYWdlSWQpLnRoZW4oKHBhZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuIHBhZ2UuZ2V0QW5ub3RCeUlkKGFubm90SWQpO1xuICAgIH0pLnRoZW4oKGFubm90KSA9PiB7XG4gICAgICAgIGxldCByZXQgPSBhbm5vdC5zZXRGbGFncyhmbGFnKTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9KS50aGVuKF8gPT4ge1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCwgdHJ1ZSk7XG4gICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgd29ya2VyUmVqZWN0KGNhbGxJZCxudWxsLFtdLGUpO1xuICAgIH0pO1xufVxuZnVuY3Rpb25NYXAuc2V0QW5ub3RGbGFnID0gc2V0QW5ub3RGbGFnO1xuXG5mdW5jdGlvbiBhZGRBbm5vdCAoY2FsbElkLCB7ZG9jSWQsIHBhZ2VJZCwgYW5ub3R9KSB7XG4gICAgX2dldFBhZ2VCeUlkKGRvY0lkLCBwYWdlSWQpLnRoZW4oKHBhZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuIHBhZ2UuYWRkQW5ub3QoYW5ub3QpO1xuICAgIH0pLnRoZW4oKGFubm90cykgPT4ge1xuICAgICAgICBsZXQgbGlzdCA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgaiA9IGFubm90cy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBhbm5vdCA9IGFubm90c1tpXTtcbiAgICAgICAgICAgIGlmICghYW5ub3QpIHtcbiAgICAgICAgICAgICAgICBsaXN0W2ldID0gbnVsbDtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxpc3RbaV0gPSBhbm5vdC50b0pzb24oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGlzdDtcbiAgICB9KS50aGVuKChhbm5vdHMpID0+IHtcbiAgICAgICAgd29ya2VyUmVzb2x2ZShjYWxsSWQsIGFubm90cyk7XG4gICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgd29ya2VyUmVqZWN0KGNhbGxJZCxudWxsLFtdLGUpO1xuICAgIH0pO1xufVxuZnVuY3Rpb25NYXAuYWRkQW5ub3QgPSBhZGRBbm5vdDtcblxuZnVuY3Rpb24gZ2V0TGF5ZXJOb2RlcyhjYWxsSWQsIHtkb2NJZH0pe1xuICAgIF9nZXRQREZEb2NCeUlkKGRvY0lkKS50aGVuKChwZGZEb2MpID0+IHtcbiAgICAgICAgcmV0dXJuIHBkZkRvYy5nZXRMYXllck5vZGVzKCk7XG4gICAgfSkudGhlbihfPT57XG4gICAgICAgIHdvcmtlclJlc29sdmUoY2FsbElkLCBfKTtcbiAgICB9KS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICB3b3JrZXJSZWplY3QoY2FsbElkLG51bGwsW10sZSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbk1hcC5nZXRMYXllck5vZGVzID0gZ2V0TGF5ZXJOb2RlcztcblxuZnVuY3Rpb24gc2V0TGF5ZXJOb2RlVmlzaWFibGUoY2FsbElkLCB7ZG9jSWQsIGxheWVySWQsIHZpc2lhYmxlfSl7XG4gICAgX2dldFBERkRvY0J5SWQoZG9jSWQpLnRoZW4oKHBkZkRvYykgPT4ge1xuICAgICAgICBpZihwZGZEb2MucGRmTGF5ZXIpe1xuICAgICAgICAgICAgcmV0dXJuIHBkZkRvYy5wZGZMYXllci5zZXRMYXllck5vZGVWaXNpYWJsZShsYXllcklkLCB2aXNpYWJsZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pLnRoZW4oXz0+e1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCwgXyk7XG4gICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgd29ya2VyUmVqZWN0KGNhbGxJZCxudWxsLFtdLGUpO1xuICAgIH0pO1xufVxuZnVuY3Rpb25NYXAuc2V0TGF5ZXJOb2RlVmlzaWFibGUgPSBzZXRMYXllck5vZGVWaXNpYWJsZTtcblxuZnVuY3Rpb24gYWRkQW5ub3RHcm91cCAoY2FsbElkLCB7ZG9jSWQsIHBhZ2VJZCwgYW5ub3RzLGhlYWRlckluZGV4fSkge1xuICAgIF9nZXRQYWdlQnlJZChkb2NJZCwgcGFnZUlkKS50aGVuKChwYWdlKSA9PiB7XG4gICAgICAgIHJldHVybiBwYWdlLmFkZEFubm90R3JvdXAoYW5ub3RzLGhlYWRlckluZGV4KTtcbiAgICB9KS50aGVuKChhbm5vdHMpID0+IHtcbiAgICAgICAgbGV0IGxpc3QgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGogPSBhbm5vdHMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgYW5ub3QgPSBhbm5vdHNbaV07XG4gICAgICAgICAgICBpZiAoIWFubm90KSB7XG4gICAgICAgICAgICAgICAgbGlzdFtpXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsaXN0W2ldID0gYW5ub3QudG9Kc29uKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgfSkudGhlbigoYW5ub3RzKSA9PiB7XG4gICAgICAgIHdvcmtlclJlc29sdmUoY2FsbElkLCBhbm5vdHMpO1xuICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIHdvcmtlclJlamVjdChjYWxsSWQsbnVsbCxbXSxlKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uTWFwLmFkZEFubm90R3JvdXAgPSBhZGRBbm5vdEdyb3VwO1xuXG5mdW5jdGlvbiBnZXRCb29rbWFya3MoY2FsbElkLCB7ZG9jSWR9KXtcbiAgICBfZ2V0UERGRG9jQnlJZChkb2NJZCkudGhlbigocGRmRG9jKSA9PiB7XG4gICAgICAgIHJldHVybiBwZGZEb2MuZ2V0Qm9va21hcmtzKCk7XG4gICAgfSkudGhlbihfPT57XG4gICAgICAgIHdvcmtlclJlc29sdmUoY2FsbElkLCBfKTtcbiAgICB9KS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICB3b3JrZXJSZWplY3QoY2FsbElkLG51bGwsW10sZSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbk1hcC5nZXRCb29rbWFya3MgPSBnZXRCb29rbWFya3M7XG5cbmZ1bmN0aW9uIGNyZWF0ZVJvb3RCb29rbWFyayhjYWxsSWQsIHtkb2NJZH0pe1xuICAgIF9nZXRQREZEb2NCeUlkKGRvY0lkKS50aGVuKChwZGZEb2MpID0+IHtcbiAgICAgICAgcmV0dXJuIHBkZkRvYy5jcmVhdGVSb290Qm9va21hcmsoKTtcbiAgICB9KS50aGVuKF89PntcbiAgICAgICAgd29ya2VyUmVzb2x2ZShjYWxsSWQsIF8pO1xuICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIHdvcmtlclJlamVjdChjYWxsSWQsbnVsbCxbXSxlKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uTWFwLmNyZWF0ZVJvb3RCb29rbWFyayA9IGNyZWF0ZVJvb3RCb29rbWFyaztcblxuZnVuY3Rpb24gaW5zZXJ0Qm9va21hcmsoY2FsbElkLCB7ZG9jSWQsIHBia0lkLCB0aXRsZSwgcGFnZUluZGV4LCB0b3AsIGxlZnR9KXtcbiAgICBfZ2V0UERGRG9jQnlJZChkb2NJZCkudGhlbigocGRmRG9jKSA9PiB7XG4gICAgICAgIHJldHVybiBwZGZEb2MuaW5zZXJ0Qm9va21hcmsocGJrSWQsIHRpdGxlLCBwYWdlSW5kZXgsIHRvcCwgbGVmdCk7XG4gICAgfSkudGhlbihfPT57XG4gICAgICAgIHdvcmtlclJlc29sdmUoY2FsbElkLCBfKTtcbiAgICB9KS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICB3b3JrZXJSZWplY3QoY2FsbElkLG51bGwsW10sZSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbk1hcC5pbnNlcnRCb29rbWFyayA9IGluc2VydEJvb2ttYXJrO1xuXG5mdW5jdGlvbiBzZXRCb29rbWFya1Byb3BlcnR5KGNhbGxJZCwge2RvY0lkLCBia0lkLCBwcm9wZXJ0aWVzfSl7XG4gICAgX2dldFBERkRvY0J5SWQoZG9jSWQpLnRoZW4oKHBkZkRvYykgPT4ge1xuICAgICAgICByZXR1cm4gcGRmRG9jLnNldEJvb2ttYXJrUHJvcGVydHkoYmtJZCwgcHJvcGVydGllcyk7XG4gICAgfSkudGhlbihfPT57XG4gICAgICAgIHdvcmtlclJlc29sdmUoY2FsbElkLCBfKTtcbiAgICB9KS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICB3b3JrZXJSZWplY3QoY2FsbElkLG51bGwsW10sZSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbk1hcC5zZXRCb29rbWFya1Byb3BlcnR5ID0gc2V0Qm9va21hcmtQcm9wZXJ0eTtcblxuZnVuY3Rpb24gcmVtb3ZlQm9va21hcmsoY2FsbElkLCB7ZG9jSWQsIGJrSWR9KXtcbiAgICBfZ2V0UERGRG9jQnlJZChkb2NJZCkudGhlbigocGRmRG9jKSA9PiB7XG4gICAgICAgIHJldHVybiBwZGZEb2MucmVtb3ZlQm9va21hcmsoYmtJZCk7XG4gICAgfSkudGhlbihfPT57XG4gICAgICAgIHdvcmtlclJlc29sdmUoY2FsbElkLCBfKTtcbiAgICB9KS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICB3b3JrZXJSZWplY3QoY2FsbElkLG51bGwsW10sZSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbk1hcC5yZW1vdmVCb29rbWFyayA9IHJlbW92ZUJvb2ttYXJrO1xuXG5mdW5jdGlvbiBnZXRUZXh0UmVjdHNBdFJlY3QgKGNhbGxJZCwge2RvY0lkLCBwYWdlSWQsIHJlY3R9KSB7XG4gICAgX2dldFBhZ2VCeUlkKGRvY0lkLCBwYWdlSWQpLnRoZW4oKHBhZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuIHBhZ2UuZ2V0VGV4dFJlY3RzQXRSZWN0KHJlY3QpO1xuICAgIH0pLnRoZW4oKHJlY3RBcnJheSkgPT4ge1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCwgcmVjdEFycmF5KTtcbiAgICB9KS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICB3b3JrZXJSZWplY3QoY2FsbElkLG51bGwsW10sZSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbk1hcC5nZXRUZXh0UmVjdHNBdFJlY3QgPSBnZXRUZXh0UmVjdHNBdFJlY3Q7XG5mdW5jdGlvbiBnZXRUZXh0Q29udGludW91c1JlY3RzQXRSZWN0IChjYWxsSWQsIHtkb2NJZCwgcGFnZUlkLCByZWN0fSkge1xuICAgIF9nZXRQYWdlQnlJZChkb2NJZCwgcGFnZUlkKS50aGVuKChwYWdlKSA9PiB7XG4gICAgICAgIHJldHVybiBwYWdlLmdldFRleHRDb250aW51b3VzUmVjdHNBdFJlY3QocmVjdCk7XG4gICAgfSkudGhlbigocmVjdEFycmF5KSA9PiB7XG4gICAgICAgIHdvcmtlclJlc29sdmUoY2FsbElkLCByZWN0QXJyYXkpO1xuICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIHdvcmtlclJlamVjdChjYWxsSWQsbnVsbCxbXSxlKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uTWFwLmdldFRleHRDb250aW51b3VzUmVjdHNBdFJlY3QgPSBnZXRUZXh0Q29udGludW91c1JlY3RzQXRSZWN0O1xuZnVuY3Rpb24gZ2V0VGV4dENvbnRpbnVvdXNDaGFyc0F0UmVjdCAoY2FsbElkLCB7ZG9jSWQsIHBhZ2VJZCwgcmVjdH0pIHtcbiAgICBfZ2V0UGFnZUJ5SWQoZG9jSWQsIHBhZ2VJZCkudGhlbigocGFnZSkgPT4ge1xuICAgICAgICByZXR1cm4gcGFnZS5nZXRUZXh0Q29udGludW91c0NoYXJzQXRSZWN0KHJlY3QpO1xuICAgIH0pLnRoZW4oKHJlY3RBcnJheSkgPT4ge1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCwgcmVjdEFycmF5KTtcbiAgICB9KS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICB3b3JrZXJSZWplY3QoY2FsbElkLG51bGwsW10sZSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbk1hcC5nZXRUZXh0Q29udGludW91c0NoYXJzQXRSZWN0ID0gZ2V0VGV4dENvbnRpbnVvdXNDaGFyc0F0UmVjdDtcblxuZnVuY3Rpb24gZ2V0VGV4dFNlYXJjaCAoY2FsbElkLCB7ZG9jSWQsIHBhZ2VJZCwgcGF0dGVybiwgZmxhZ3N9KSB7XG4gICAgX2dldFBhZ2VCeUlkKGRvY0lkLCBwYWdlSWQpLnRoZW4oKHBhZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuIHBhZ2UuZ2V0VGV4dFNlYXJjaChwYXR0ZXJuLCBmbGFncyk7XG4gICAgfSkudGhlbigodGV4dFNlYXJjaCkgPT4ge1xuICAgICAgICBsZXQgaWQgPSBnZXRVbmlxdWVJZCgncGFnZV90ZXh0X3NlYXJjaCcpO1xuICAgICAgICBjX3RleHRTZWFyY2hDYWNoZVtpZF0gPSB0ZXh0U2VhcmNoO1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCwgaWQpO1xuICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIHdvcmtlclJlamVjdChjYWxsSWQsbnVsbCxbXSxlKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uTWFwLmdldFRleHRTZWFyY2ggPSBnZXRUZXh0U2VhcmNoO1xuZnVuY3Rpb24gdGV4dFNlYXJjaEZpbmROZXh0IChjYWxsSWQsIHtpZH0pIHtcbiAgICBsZXQgY190ZXh0U2VhcmNoID0gY190ZXh0U2VhcmNoQ2FjaGVbaWRdO1xuICAgIGlmICghY190ZXh0U2VhcmNoKSB7XG4gICAgICAgIHJldHVybiB3b3JrZXJSZWplY3QoY2FsbElkKTtcbiAgICB9XG4gICAgbGV0IGJGaW5kID0gY190ZXh0U2VhcmNoLkZpbmROZXh0KCk7XG4gICAgaWYgKCFiRmluZCkge1xuICAgICAgICByZXR1cm4gd29ya2VyUmVzb2x2ZShjYWxsSWQsIG51bGwpO1xuICAgIH1cblxuICAgIHdvcmtlclJlc29sdmUoY2FsbElkLCBfZ2V0VGV4dFNlYXJjaE1hdGNoKGNfdGV4dFNlYXJjaCkpO1xufVxuZnVuY3Rpb25NYXAudGV4dFNlYXJjaEZpbmROZXh0ID0gdGV4dFNlYXJjaEZpbmROZXh0O1xuZnVuY3Rpb24gdGV4dFNlYXJjaEZpbmRQcmV2IChjYWxsSWQsIHtpZH0pIHtcbiAgICBsZXQgY190ZXh0U2VhcmNoID0gY190ZXh0U2VhcmNoQ2FjaGVbaWRdO1xuICAgIGlmICghY190ZXh0U2VhcmNoKSB7XG4gICAgICAgIHJldHVybiB3b3JrZXJSZWplY3QoY2FsbElkKTtcbiAgICB9XG4gICAgbGV0IGJGaW5kID0gY190ZXh0U2VhcmNoLkZpbmRQcmV2KCk7XG4gICAgaWYgKCFiRmluZCkge1xuICAgICAgICByZXR1cm4gd29ya2VyUmVzb2x2ZShjYWxsSWQsIG51bGwpO1xuICAgIH1cblxuICAgIHdvcmtlclJlc29sdmUoY2FsbElkLCBfZ2V0VGV4dFNlYXJjaE1hdGNoKGNfdGV4dFNlYXJjaCkpO1xufVxuZnVuY3Rpb25NYXAudGV4dFNlYXJjaEZpbmRQcmV2ID0gdGV4dFNlYXJjaEZpbmRQcmV2O1xuZnVuY3Rpb24gX2dldFRleHRTZWFyY2hNYXRjaCAoY190ZXh0U2VhcmNoKSB7XG4gICAgbGV0IHJlY3RBcnJheSA9IFtdO1xuICAgIGxldCBjX3JlY3RzID0gY190ZXh0U2VhcmNoLkdldE1hdGNoUmVjdHMoKTtcbiAgICBmb3IgKGxldCBpID0gMCwgaiA9IGNfcmVjdHMuR2V0U2l6ZSgpOyBpIDwgajsgaSsrKSB7XG4gICAgICAgIGxldCBjX3JlY3QgPSBjX3JlY3RzLkdldEF0KGkpO1xuICAgICAgICByZWN0QXJyYXlbaV0gPSB7XG4gICAgICAgICAgICBsZWZ0OiBjX3JlY3QubGVmdCxcbiAgICAgICAgICAgIHJpZ2h0OiBjX3JlY3QucmlnaHQsXG4gICAgICAgICAgICB0b3A6IGNfcmVjdC50b3AsXG4gICAgICAgICAgICBib3R0b206IGNfcmVjdC5ib3R0b20sXG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcGFnZUluZGV4OiBjX3RleHRTZWFyY2guR2V0TWF0Y2hQYWdlSW5kZXgoKSxcbiAgICAgICAgc3RhcnRDaGFySW5kZXg6IGNfdGV4dFNlYXJjaC5HZXRNYXRjaFN0YXJ0Q2hhckluZGV4KCksXG4gICAgICAgIGVuZENoYXJJbmRleDogY190ZXh0U2VhcmNoLkdldE1hdGNoRW5kQ2hhckluZGV4KCksXG4gICAgICAgIHNlbnRlbmNlU3RhcnRJbmRleDogY190ZXh0U2VhcmNoLkdldE1hdGNoU2VudGVuY2VTdGFydEluZGV4KCksXG4gICAgICAgIHNlbnRlbmNlOiBjX3RleHRTZWFyY2guR2V0TWF0Y2hTZW50ZW5jZSgpLnRvU3RyaW5nKCksXG4gICAgICAgIHJlY3RBcnJheVxuICAgIH1cbn1cbmZ1bmN0aW9uIHRleHRTZWFyY2hEZXN0cm95IChjYWxsSWQsIHtpZH0pIHtcbiAgICBsZXQgY190ZXh0U2VhcmNoID0gY190ZXh0U2VhcmNoQ2FjaGVbaWRdO1xuICAgIGlmICghY190ZXh0U2VhcmNoKSB7XG4gICAgICAgIHJldHVybiB3b3JrZXJSZWplY3QoY2FsbElkKTtcbiAgICB9XG4gICAgY190ZXh0U2VhcmNoLmRlbGV0ZSgpO1xuICAgIGRlbGV0ZSBjX3RleHRTZWFyY2hDYWNoZVtpZF07XG59XG5cbmZ1bmN0aW9uTWFwLnRleHRTZWFyY2hEZXN0cm95ID0gdGV4dFNlYXJjaERlc3Ryb3k7XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyU2VjdXJpdHlDYWxsYmFjayAoY2FsbElkLCB7dHlwZSwgb3B0aW9uc30pIHtcbiAgICBwZGZKUlByb21pc2UudGhlbigocGRmSnIpID0+IHtcbiAgICAgICAgcmV0dXJuIHBkZkpyLnJlZ2lzdGVyU2VjdXJpdHlDYWxsYmFjayh0eXBlLCBvcHRpb25zKTtcbiAgICB9KS50aGVuKChmbGFnKSA9PiB7XG4gICAgICAgIHdvcmtlclJlc29sdmUoY2FsbElkLCBmbGFnKTtcbiAgICB9KVxufVxuZnVuY3Rpb25NYXAucmVnaXN0ZXJTZWN1cml0eUNhbGxiYWNrID0gcmVnaXN0ZXJTZWN1cml0eUNhbGxiYWNrO1xuXG5mdW5jdGlvbiBzZXRQb3B1cE9wZW5TdGF0dXMgKGNhbGxJZCwge2RvY0lkLCBwYWdlSWQsIGluZGV4LCBzdGF0dXN9KSB7XG4gICAgX2dldFBhZ2VCeUlkKGRvY0lkLCBwYWdlSWQpLnRoZW4oKHBhZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuIHBhZ2UuZ2V0QW5ub3QoaW5kZXgpO1xuICAgIH0pLnRoZW4oKGFubm90KSA9PiB7XG4gICAgICAgIHJldHVybiBhbm5vdC5zZXRPcGVuU3RhdHVzKHN0YXR1cyk7XG4gICAgfSkudGhlbigoZmxhZykgPT4ge1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCwgZmxhZyk7XG4gICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgd29ya2VyUmVqZWN0KGNhbGxJZCxudWxsLFtdLGUpO1xuICAgIH0pO1xufVxuZnVuY3Rpb25NYXAuc2V0UG9wdXBPcGVuU3RhdHVzID0gc2V0UG9wdXBPcGVuU3RhdHVzO1xuXG5mdW5jdGlvbiBzZXREb2NPcGVuQWN0aW9uKGNhbGxJZCwge2RvY0lkLHR5cGV9KSB7XG4gICAgX2dldFBERkRvY0J5SWQoZG9jSWQpLnRoZW4oKGRvYyk9PntcbiAgICAgICAgcmV0dXJuIGRvYy5zZXRPcGVuQWN0aW9uKHR5cGUpO1xuICAgIH0pLnRoZW4oKGZsYWcpID0+IHtcbiAgICAgICAgd29ya2VyUmVzb2x2ZShjYWxsSWQsIGZsYWcpO1xuICAgIH0pO1xufVxuZnVuY3Rpb25NYXAuc2V0RG9jT3BlbkFjdGlvbj1zZXREb2NPcGVuQWN0aW9uO1xuXG5mdW5jdGlvbiBzZXREb2NBY3Rpb25EYXRhKGNhbGxJZCwge2RvY0lkLGRhdGEsaW5kZXh9KXtcbiAgICBfZ2V0UERGRG9jQnlJZChkb2NJZCkudGhlbigoZG9jKT0+e1xuICAgICAgICByZXR1cm4gZG9jLmFjdGlvbi5zZXRBY3Rpb25EYXRhQnlJbmRleChkYXRhLGluZGV4KTtcbiAgICB9KS50aGVuKChkb2MpID0+IHtcbiAgICAgICAgd29ya2VyUmVzb2x2ZShjYWxsSWQsIGRvYy50b0pzb24oKSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbk1hcC5zZXREb2NBY3Rpb25EYXRhPXNldERvY0FjdGlvbkRhdGE7XG5cbmZ1bmN0aW9uIG1vdmVDYXJldFJlY3RCeUNoYXJJbmRleCAoY2FsbElkLCB7ZG9jSWQsIHBhZ2VJZCwgYW5ub3RJZCwgY2hhckluZGV4fSkge1xuICAgIF9nZXRQYWdlQnlJZChkb2NJZCwgcGFnZUlkKS50aGVuKChwYWdlKSA9PiB7XG4gICAgICAgIHJldHVybiBwYWdlLmdldEFubm90QnlJZChhbm5vdElkKTtcbiAgICB9KS50aGVuKChhbm5vdCkgPT4ge1xuICAgICAgICBsZXQgcmV0ID0gYW5ub3QubW92ZVJlY3RCeUNoYXJJbmRleChjaGFySW5kZXgpO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH0pLnRoZW4oXyA9PiB7XG4gICAgICAgIHdvcmtlclJlc29sdmUoY2FsbElkLCB0cnVlKTtcbiAgICB9KS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICB3b3JrZXJSZWplY3QoY2FsbElkLG51bGwsW10sZSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbk1hcC5tb3ZlQ2FyZXRSZWN0QnlDaGFySW5kZXggPSBtb3ZlQ2FyZXRSZWN0QnlDaGFySW5kZXg7XG5cbmZ1bmN0aW9uIHNldEFubm90SW50ZW50IChjYWxsSWQsIHtkb2NJZCwgcGFnZUlkLCBhbm5vdElkLCBpbnRlbnR9KSB7XG4gICAgX2dldFBhZ2VCeUlkKGRvY0lkLCBwYWdlSWQpLnRoZW4oKHBhZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuIHBhZ2UuZ2V0QW5ub3RCeUlkKGFubm90SWQpO1xuICAgIH0pLnRoZW4oKGFubm90KSA9PiB7XG4gICAgICAgIGxldCByZXQgPSBhbm5vdC5zZXRJbnRlbnQoaW50ZW50KTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9KS50aGVuKGFubm90SWRzID0+IHtcbiAgICAgICAgd29ya2VyUmVzb2x2ZShjYWxsSWQsIGFubm90SWRzKTtcbiAgICB9KS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICB3b3JrZXJSZWplY3QoY2FsbElkLG51bGwsW10sZSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbk1hcC5zZXRBbm5vdEludGVudCA9IHNldEFubm90SW50ZW50O1xuXG5mdW5jdGlvbiBzZXRJbmtMaXN0KGNhbGxJZCwge2RvY0lkLCBwYWdlSWQsIGFubm90SWQsIGlua0xpc3R9KXtcbiAgICBfZ2V0UGFnZUJ5SWQoZG9jSWQsIHBhZ2VJZCkudGhlbigocGFnZSkgPT4ge1xuICAgICAgICByZXR1cm4gcGFnZS5nZXRBbm5vdEJ5SWQoYW5ub3RJZCk7XG4gICAgfSkudGhlbigoYW5ub3QpID0+IHtcbiAgICAgICAgbGV0IGZsYWcgPSBhbm5vdC5zZXRJbmtMaXN0KGlua0xpc3QpO1xuICAgICAgICByZXR1cm4gZmxhZztcbiAgICB9KS50aGVuKGZsYWcgPT4ge1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCwgZmxhZyk7XG4gICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgd29ya2VyUmVqZWN0KGNhbGxJZCxudWxsLFtdLGUpO1xuICAgIH0pO1xufVxuZnVuY3Rpb25NYXAuc2V0SW5rTGlzdCA9IHNldElua0xpc3Q7XG5cbmZ1bmN0aW9uIHNldFVzZXJOYW1lKGNhbGxJZCwge25hbWV9KXtcbiAgICBwZGZKUlByb21pc2UudGhlbigocGRmSnIpID0+IHtcbiAgICAgICAgcmV0dXJuIHBkZkpyLnNldFVzZXJOYW1lKG5hbWUpO1xuICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCk7XG4gICAgfSlcbn1cbmZ1bmN0aW9uTWFwLnNldFVzZXJOYW1lID0gc2V0VXNlck5hbWU7XG5cbmZ1bmN0aW9uTWFwLmdldFVzZXJOYW1lID0gZnVuY3Rpb24gZ2V0VXNlck5hbWUoY2FsbElkKSB7XG4gICAgcGRmSlJQcm9taXNlXG4gICAgICAgIC50aGVuKHBkZkpyID0+IHBkZkpyLmdldFVzZXJOYW1lKCkpXG4gICAgICAgIC50aGVuKHVzZXJOYW1lID0+IHdvcmtlclJlc29sdmUoY2FsbElkLCB1c2VyTmFtZSkpO1xufVxuXG5mdW5jdGlvbiBmbGF0dGVuKGNhbGxJZCwge2RvY0lkLCBwYWdlSWQsIG9wdGlvbn0pe1xuICAgIF9nZXRQYWdlQnlJZChkb2NJZCwgcGFnZUlkKS50aGVuKChwYWdlKSA9PiB7XG4gICAgICAgIHJldHVybiBwYWdlLmZsYXR0ZW4ob3B0aW9uKTtcbiAgICB9KS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgIGlmKHJlc3VsdCl7XG4gICAgICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCwgcmVzdWx0KTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICB3b3JrZXJSZWplY3QoY2FsbElkKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZnVuY3Rpb25NYXAuZmxhdHRlbiA9IGZsYXR0ZW47XG5cbmZ1bmN0aW9uIHNldER5bmFtaWNJbmZvRm9ybXVsYShjYWxsSWQsIHtzZXBlcmF0b3IsdGltZUZvcm1hdH0pe1xuICAgIGdldEljb25Qcm92aWRlcigpLnNldER5bmFtaWNJbmZvRm9ybXVsYShzZXBlcmF0b3IsdGltZUZvcm1hdCk7XG4gICAgd29ya2VyUmVzb2x2ZShjYWxsSWQpO1xufVxuXG5mdW5jdGlvbk1hcC5zZXREeW5hbWljSW5mb0Zvcm11bGEgPSBzZXREeW5hbWljSW5mb0Zvcm11bGE7XG5cblxuZnVuY3Rpb24gdXBkYXRlUGFnZUluZm8gKGNhbGxJZCwge2RvY0lkLCBwYWdlSWR9KSB7XG4gICAgX2dldFBhZ2VCeUlkKGRvY0lkLCBwYWdlSWQpLnRoZW4oKHBhZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuIHBhZ2UudG9Kc29uKCk7XG4gICAgfSkudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCwgcmVzdWx0KTtcbiAgICB9LCAoKSA9PiB7XG4gICAgICAgIHdvcmtlclJlamVjdChjYWxsSWQpO1xuICAgIH0pO1xufVxuZnVuY3Rpb25NYXAudXBkYXRlUGFnZUluZm8gPSB1cGRhdGVQYWdlSW5mbztcbmZ1bmN0aW9uIHNldFBhZ2VSb3RhdGlvbiAoY2FsbElkLCB7ZG9jSWQsIHBhZ2VJZCwgcm90YXRpb259KSB7XG4gICAgX2dldFBhZ2VCeUlkKGRvY0lkLCBwYWdlSWQpLnRoZW4oKHBhZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuIHBhZ2Uuc2V0Um90YXRpb24ocm90YXRpb24pO1xuICAgIH0pLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgLy9pZihyZXN1bHQpe1xuICAgICAgICAgICAgd29ya2VyUmVzb2x2ZShjYWxsSWQsIHJlc3VsdCk7XG4gICAgICAgIC8vfWVsc2V7XG4gICAgICAgIC8vICAgIHdvcmtlclJlamVjdChjYWxsSWQpO1xuICAgICAgICAvL31cbiAgICB9LCAoKSA9PiB7XG4gICAgICAgIHdvcmtlclJlamVjdChjYWxsSWQpO1xuICAgIH0pO1xufVxuZnVuY3Rpb25NYXAuc2V0UGFnZVJvdGF0aW9uID0gc2V0UGFnZVJvdGF0aW9uO1xuXG5mdW5jdGlvbiBzZXRQYXNzd29yZEFuZFBlcm1pc3Npb24gKGNhbGxJZCwge2RvY0lkLCB1c2VyUGFzc3dvcmQsIG93bmVyUGFzc3dvcmQsIHBlcm1pc3Npb24sIGNpcGhlciwgaXNFbmNyeXB0TWV0YURhdGF9KXtcbiAgICBfZ2V0UERGRG9jQnlJZChkb2NJZCkudGhlbigoZG9jKT0+e1xuICAgICAgICByZXR1cm4gZG9jLnNldFBhc3N3b3JkQW5kUGVybWlzc2lvbih1c2VyUGFzc3dvcmQsIG93bmVyUGFzc3dvcmQsIHBlcm1pc3Npb24sIGNpcGhlciwgaXNFbmNyeXB0TWV0YURhdGEpO1xuICAgIH0pLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCwgcmVzdWx0KTtcbiAgICB9KS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICB3b3JrZXJSZWplY3QoY2FsbElkLCBlKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uTWFwLnNldFBhc3N3b3JkQW5kUGVybWlzc2lvbiA9IHNldFBhc3N3b3JkQW5kUGVybWlzc2lvbjtcblxuZnVuY3Rpb24gcmVtb3ZlU2VjdXJpdHkgKGNhbGxJZCwge2RvY0lkfSl7XG4gICAgX2dldFBERkRvY0J5SWQoZG9jSWQpLnRoZW4oKGRvYyk9PntcbiAgICAgICAgcmV0dXJuIGRvYy5yZW1vdmVTZWN1cml0eSgpO1xuICAgIH0pLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCwgcmVzdWx0KTtcbiAgICB9KS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICB3b3JrZXJSZWplY3QoY2FsbElkLCBlKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uTWFwLnJlbW92ZVNlY3VyaXR5ID0gcmVtb3ZlU2VjdXJpdHk7XG5cbmZ1bmN0aW9uIGNoZWNrUGFzc3dvcmQgKGNhbGxJZCwge2RvY0lkLCBwYXNzd29yZH0pe1xuICAgIF9nZXRQREZEb2NCeUlkKGRvY0lkKS50aGVuKChkb2MpPT57XG4gICAgICAgIHJldHVybiBkb2MuY2hlY2tQYXNzd29yZChwYXNzd29yZCk7XG4gICAgfSkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgIHdvcmtlclJlc29sdmUoY2FsbElkLCByZXN1bHQpO1xuICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIHdvcmtlclJlamVjdChjYWxsSWQsIGUpO1xuICAgIH0pO1xufVxuZnVuY3Rpb25NYXAuY2hlY2tQYXNzd29yZCA9IGNoZWNrUGFzc3dvcmQ7XG5cbmZ1bmN0aW9uIGdldFBlcm1pc3Npb24oY2FsbElkLCB7ZG9jSWR9KXtcbiAgICBfZ2V0UERGRG9jQnlJZChkb2NJZCkudGhlbigoZG9jKT0+e1xuICAgICAgICByZXR1cm4gZG9jLmdldFBlcm1pc3Npb24oKTtcbiAgICB9KS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgd29ya2VyUmVzb2x2ZShjYWxsSWQsIHJlc3VsdCk7XG4gICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgd29ya2VyUmVqZWN0KGNhbGxJZCwgZSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbk1hcC5nZXRQZXJtaXNzaW9uID0gZ2V0UGVybWlzc2lvbjtcblxuZnVuY3Rpb24gZ2V0U3RkQ2lwaGVyT3B0aW9ucyhjYWxsSWQsIHtkb2NJZH0pe1xuICAgIF9nZXRQREZEb2NCeUlkKGRvY0lkKS50aGVuKChkb2MpPT57XG4gICAgICAgIHJldHVybiBkb2MuZ2V0U3RkQ2lwaGVyT3B0aW9ucygpO1xuICAgIH0pLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCwgcmVzdWx0KTtcbiAgICB9KS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICB3b3JrZXJSZWplY3QoY2FsbElkLCBlKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uTWFwLmdldFN0ZENpcGhlck9wdGlvbnMgPSBnZXRTdGRDaXBoZXJPcHRpb25zO1xuXG5mdW5jdGlvbiBhZGRQYWdlSW1hZ2UoY2FsbElkLCB7ZG9jSWQsIHBhZ2VJZCxpbWFnZUJ1ZmZlcixwb2ludCx3aWR0aCxoZWlnaHR9KXtcbiAgICBfZ2V0UGFnZUJ5SWQoZG9jSWQsIHBhZ2VJZCkudGhlbigocGFnZSkgPT4ge1xuICAgICAgICByZXR1cm4gcGFnZS5hZGRJbWFnZShpbWFnZUJ1ZmZlcixwb2ludCx3aWR0aCxoZWlnaHQpO1xuICAgIH0pLnRoZW4oKGZsYWcpID0+IHtcbiAgICAgICAgd29ya2VyUmVzb2x2ZShjYWxsSWQsIGZsYWcpO1xuICAgIH0pO1xufVxuZnVuY3Rpb25NYXAuYWRkUGFnZUltYWdlPWFkZFBhZ2VJbWFnZTtcblxuZnVuY3Rpb24gYWRkV2F0ZXJtYXJrKGNhbGxJZCwge2RvY0lkLCBwYWdlSWQsZGF0YX0pe1xuICAgIF9nZXRQYWdlQnlJZChkb2NJZCwgcGFnZUlkKS50aGVuKChwYWdlKSA9PiB7XG4gICAgICAgIHJldHVybiBwYWdlLmFkZFdhdGVybWFyayhkYXRhKTtcbiAgICB9KS50aGVuKChmbGFnKSA9PiB7XG4gICAgICAgIHdvcmtlclJlc29sdmUoY2FsbElkLCBmbGFnKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uTWFwLmFkZFdhdGVybWFyaz1hZGRXYXRlcm1hcms7XG5cbmZ1bmN0aW9uIGdldFVzZXJQYXNzd29yZChjYWxsSWQsIHtkb2NJZCwgcGFzc3dvcmR9KXtcbiAgICBfZ2V0UERGRG9jQnlJZChkb2NJZCkudGhlbigoZG9jKT0+e1xuICAgICAgICByZXR1cm4gZG9jLmdldFVzZXJQYXNzd29yZChwYXNzd29yZCk7XG4gICAgfSkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgIHdvcmtlclJlc29sdmUoY2FsbElkLCByZXN1bHQpO1xuICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIHdvcmtlclJlamVjdChjYWxsSWQsIGUpO1xuICAgIH0pO1xufVxuZnVuY3Rpb25NYXAuZ2V0VXNlclBhc3N3b3JkPWdldFVzZXJQYXNzd29yZDtcblxuZnVuY3Rpb24gZ2V0UGFzc3dvcmRUeXBlKGNhbGxJZCwge2RvY0lkfSl7XG4gICAgX2dldFBERkRvY0J5SWQoZG9jSWQpLnRoZW4oKGRvYyk9PntcbiAgICAgICAgcmV0dXJuIGRvYy5nZXRQYXNzd29yZFR5cGUoKTtcbiAgICB9KS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgd29ya2VyUmVzb2x2ZShjYWxsSWQsIHJlc3VsdCk7XG4gICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgd29ya2VyUmVqZWN0KGNhbGxJZCwgZSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbk1hcC5nZXRQYXNzd29yZFR5cGU9Z2V0UGFzc3dvcmRUeXBlO1xuXG5mdW5jdGlvbiBzZXRQYXNzd29yZFR5cGUoY2FsbElkLCB7ZG9jSWQsIHR5cGV9KXtcbiAgICBfZ2V0UERGRG9jQnlJZChkb2NJZCkudGhlbigoZG9jKT0+e1xuICAgICAgICByZXR1cm4gZG9jLnNldFBhc3N3b3JkVHlwZSh0eXBlKTtcbiAgICB9KS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgd29ya2VyUmVzb2x2ZShjYWxsSWQsIHJlc3VsdCk7XG4gICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgd29ya2VyUmVqZWN0KGNhbGxJZCwgZSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbk1hcC5zZXRQYXNzd29yZFR5cGU9c2V0UGFzc3dvcmRUeXBlO1xuXG5mdW5jdGlvbiBtb3ZlUGFnZVRvKGNhbGxJZCwge2RvY0lkLCBwYWdlSWQsIGRlc3RJbmRleCB9KSB7XG4gICAgX2dldFBERkRvY0J5SWQoZG9jSWQpLnRoZW4oKGRvYyk9PntcbiAgICAgICAgcmV0dXJuIGRvYy5tb3ZlUGFnZVRvKHBhZ2VJZCwgZGVzdEluZGV4KTtcbiAgICB9KS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgd29ya2VyUmVzb2x2ZShjYWxsSWQsIHJlc3VsdCk7XG4gICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgd29ya2VyUmVqZWN0KGNhbGxJZCwgZSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbk1hcC5tb3ZlUGFnZVRvID0gbW92ZVBhZ2VUbztcbmZ1bmN0aW9uIGluc2VydFBhZ2UoY2FsbElkLCB7ZG9jSWQsIHBhZ2VJbmRleCwgd2lkdGgsIGhlaWdodH0pe1xuICAgIF9nZXRQREZEb2NCeUlkKGRvY0lkKS50aGVuKChkb2MpPT57XG4gICAgICAgIHJldHVybiBkb2MuaW5zZXJ0UGFnZShwYWdlSW5kZXgsIHdpZHRoLCBoZWlnaHQpO1xuICAgIH0pLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCwgcmVzdWx0KTtcbiAgICB9KS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICB3b3JrZXJSZWplY3QoY2FsbElkLCBlKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uTWFwLmluc2VydFBhZ2UgPSBpbnNlcnRQYWdlO1xuZnVuY3Rpb24gcmVtb3ZlUGFnZShjYWxsSWQsIHtkb2NJZCwgcGFnZUluZGV4fSl7XG4gICAgbGV0IHBhZ2VJZDtcbiAgICBfZ2V0UERGRG9jQnlJZChkb2NJZCkudGhlbigoZG9jKT0+e1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcGFnZUlkID0gZG9jLnBhZ2VJbmRleE1hcFtwYWdlSW5kZXhdLmlkO1xuICAgICAgICB9IGNhdGNoKGUpe31cbiAgICAgICAgcmV0dXJuIGRvYy5yZW1vdmVQYWdlKHBhZ2VJbmRleCk7XG4gICAgfSkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIGdyYXBoaWNzTW9kdWxlLmNsZWFyT2JqZWN0RnJvbUNhY2hlKGRvY0lkLCBwYWdlSWQpO1xuICAgICAgICB9XG4gICAgICAgIHdvcmtlclJlc29sdmUoY2FsbElkLCByZXN1bHQpO1xuICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIHdvcmtlclJlamVjdChjYWxsSWQsIGUpO1xuICAgIH0pO1xufVxuZnVuY3Rpb25NYXAucmVtb3ZlUGFnZSA9IHJlbW92ZVBhZ2U7XG5cbmZ1bmN0aW9uIG1hcmtSZWRhY3RBbm5vdCAoY2FsbElkLCB7ZG9jSWQsIHBhZ2VJZCwgcmVjdHMgfSkge1xuICAgIF9nZXRQYWdlQnlJZChkb2NJZCwgcGFnZUlkKS50aGVuKChwYWdlKSA9PiB7XG4gICAgICAgIHJldHVybiBwYWdlLm1hcmtSZWRhY3RBbm5vdChyZWN0cyk7XG4gICAgfSkudGhlbigoYW5ub3RzKSA9PiB7XG4gICAgICAgIGxldCBsaXN0ID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBqID0gYW5ub3RzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgICAgICAgbGV0IGFubm90ID0gYW5ub3RzW2ldO1xuICAgICAgICAgICAgaWYgKCFhbm5vdCkge1xuICAgICAgICAgICAgICAgIGxpc3RbaV0gPSBudWxsO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGlzdFtpXSA9IGFubm90LnRvSnNvbigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsaXN0O1xuICAgIH0pLnRoZW4oKGFubm90cykgPT4ge1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCwgYW5ub3RzKTtcbiAgICB9KS5jYXRjaCgoKSA9PiB7XG4gICAgICAgIHdvcmtlclJlamVjdChjYWxsSWQpO1xuICAgIH0pO1xufVxuZnVuY3Rpb25NYXAubWFya1JlZGFjdEFubm90ID0gbWFya1JlZGFjdEFubm90O1xuZnVuY3Rpb24gYXBwbHlSZWRhY3Rpb24oY2FsbElkLCB7ZG9jSWR9KXtcbiAgICBfZ2V0UERGRG9jQnlJZChkb2NJZCkudGhlbigoZG9jKT0+e1xuICAgICAgICByZXR1cm4gZG9jLmFwcGx5UmVkYWN0aW9uKCk7XG4gICAgfSkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgIHdvcmtlclJlc29sdmUoY2FsbElkLCByZXN1bHQpO1xuICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIHdvcmtlclJlamVjdChjYWxsSWQsIGUpO1xuICAgIH0pO1xufVxuZnVuY3Rpb25NYXAuYXBwbHlSZWRhY3Rpb24gPSBhcHBseVJlZGFjdGlvbjtcblxuZnVuY3Rpb24gcmVkYWN0QXBwbHkoY2FsbElkLCB7ZG9jSWQsIHBhZ2VJZCwgYW5ub3RJZH0pe1xuICAgIF9nZXRQYWdlQnlJZChkb2NJZCwgcGFnZUlkKS50aGVuKChwYWdlKSA9PiB7XG4gICAgICAgIHJldHVybiBwYWdlLmdldEFubm90QnlJZChhbm5vdElkKTtcbiAgICB9KS50aGVuKChhbm5vdCkgPT4ge1xuICAgICAgICByZXR1cm4gYW5ub3QuYXBwbHkoKTtcbiAgICB9KS50aGVuKChpZCkgPT4ge1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCwgaWQpO1xuICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIHdvcmtlclJlamVjdChjYWxsSWQsIGUpO1xuICAgIH0pO1xufVxuZnVuY3Rpb25NYXAucmVkYWN0QXBwbHkgPSByZWRhY3RBcHBseTtcblxuZnVuY3Rpb24gaW5zZXJ0U3ViQWN0aW9uKGNhbGxJZCwge2RvY0lkLCBvYmpOdW0sIGluZGV4LCB0eXBlfSkge1xuICAgIF9nZXRQREZEb2NCeUlkKGRvY0lkKS50aGVuKChkb2MpPT57XG4gICAgICAgIHJldHVybiBkb2MuZ2V0SW5kaXJlY3RPYmplY3Qob2JqTnVtKTtcbiAgICB9KS50aGVuKChvYmplY3QpPT57XG4gICAgICAgIHJldHVybiBwZGZKUlByb21pc2UudGhlbihmdW5jdGlvbihwZGZqcikge1xuICAgICAgICAgICAgbGV0IGRvYz1vYmplY3QucGRmRG9jO1xuICAgICAgICAgICAgbGV0IGFjdGlvbj1wZGZqci5hY3Rpb25NYW5hZ2VyLmdldChwZGZqci5hY3Rpb25NYW5hZ2VyLmdldEFjdGlvbkJ5RGljdChkb2Msb2JqZWN0LmdldERpY3QoKSksZG9jLHBkZmpyKTtcbiAgICAgICAgICAgIGFjdGlvbi5pbnNlcnRTdWJBY3Rpb24oaW5kZXgsdHlwZSk7XG4gICAgICAgICAgICByZXR1cm4gYWN0aW9uO1xuICAgICAgICB9KTtcbiAgICB9KS50aGVuKChhY3Rpb24pPT57XG4gICAgICAgIHdvcmtlclJlc29sdmUoY2FsbElkLGFjdGlvbi50b0pzb24oKSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbk1hcC5pbnNlcnRTdWJBY3Rpb24gPSBpbnNlcnRTdWJBY3Rpb247XG5cbmZ1bmN0aW9uIHNldFN1YkFjdGlvbihjYWxsSWQsIHtkb2NJZCwgb2JqTnVtLCBpbmRleCwgdHlwZX0pIHtcbiAgICBfZ2V0UERGRG9jQnlJZChkb2NJZCkudGhlbigoZG9jKT0+e1xuICAgICAgICByZXR1cm4gZG9jLmdldEluZGlyZWN0T2JqZWN0KG9iak51bSk7XG4gICAgfSkudGhlbigob2JqZWN0KT0+e1xuICAgICAgICByZXR1cm4gcGRmSlJQcm9taXNlLnRoZW4oZnVuY3Rpb24ocGRmanIpIHtcbiAgICAgICAgICAgIGxldCBkb2M9b2JqZWN0LnBkZkRvYztcbiAgICAgICAgICAgIGxldCBhY3Rpb249cGRmanIuYWN0aW9uTWFuYWdlci5nZXQocGRmanIuYWN0aW9uTWFuYWdlci5nZXRBY3Rpb25CeURpY3QoZG9jLG9iamVjdC5nZXREaWN0KCkpLGRvYyxwZGZqcik7XG4gICAgICAgICAgICBhY3Rpb24uc2V0U3ViQWN0aW9uKGluZGV4LHR5cGUpO1xuICAgICAgICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICAgICAgfSk7XG4gICAgfSkudGhlbigoYWN0aW9uKT0+e1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCxhY3Rpb24udG9Kc29uKCkpO1xuICAgIH0pO1xufVxuZnVuY3Rpb25NYXAuc2V0U3ViQWN0aW9uID0gc2V0U3ViQWN0aW9uO1xuXG5mdW5jdGlvbiByZW1vdmVBbGxTdWJBY3Rpb25zKGNhbGxJZCwge2RvY0lkLCBvYmpOdW19KSB7XG4gICAgX2dldFBERkRvY0J5SWQoZG9jSWQpLnRoZW4oKGRvYyk9PntcbiAgICAgICAgcmV0dXJuIGRvYy5nZXRJbmRpcmVjdE9iamVjdChvYmpOdW0pO1xuICAgIH0pLnRoZW4oKG9iamVjdCk9PntcbiAgICAgICAgcmV0dXJuIHBkZkpSUHJvbWlzZS50aGVuKGZ1bmN0aW9uKHBkZmpyKSB7XG4gICAgICAgICAgICBsZXQgZG9jPW9iamVjdC5wZGZEb2M7XG4gICAgICAgICAgICBsZXQgYWN0aW9uPXBkZmpyLmFjdGlvbk1hbmFnZXIuZ2V0KHBkZmpyLmFjdGlvbk1hbmFnZXIuZ2V0QWN0aW9uQnlEaWN0KGRvYyxvYmplY3QuZ2V0RGljdCgpKSxkb2MscGRmanIpO1xuICAgICAgICAgICAgYWN0aW9uLnJlbW92ZUFsbFN1YkFjdGlvbnMoKTtcbiAgICAgICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgICAgIH0pO1xuICAgIH0pLnRoZW4oKGFjdGlvbik9PntcbiAgICAgICAgd29ya2VyUmVzb2x2ZShjYWxsSWQsYWN0aW9uLnRvSnNvbigpKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uTWFwLnJlbW92ZUFsbFN1YkFjdGlvbnMgPSByZW1vdmVBbGxTdWJBY3Rpb25zO1xuXG5mdW5jdGlvbiByZW1vdmVTdWJBY3Rpb24oY2FsbElkLCB7ZG9jSWQsIG9iak51bSwgaW5kZXh9KSB7XG4gICAgX2dldFBERkRvY0J5SWQoZG9jSWQpLnRoZW4oKGRvYyk9PntcbiAgICAgICAgcmV0dXJuIGRvYy5nZXRJbmRpcmVjdE9iamVjdChvYmpOdW0pO1xuICAgIH0pLnRoZW4oKG9iamVjdCk9PntcbiAgICAgICAgcmV0dXJuIHBkZkpSUHJvbWlzZS50aGVuKGZ1bmN0aW9uKHBkZmpyKSB7XG4gICAgICAgICAgICBsZXQgZG9jPW9iamVjdC5wZGZEb2M7XG4gICAgICAgICAgICBsZXQgYWN0aW9uPXBkZmpyLmFjdGlvbk1hbmFnZXIuZ2V0KHBkZmpyLmFjdGlvbk1hbmFnZXIuZ2V0QWN0aW9uQnlEaWN0KGRvYyxvYmplY3QuZ2V0RGljdCgpKSxkb2MscGRmanIpO1xuICAgICAgICAgICAgYWN0aW9uLnJlbW92ZVN1YkFjdGlvbihpbmRleCk7XG4gICAgICAgICAgICByZXR1cm4gYWN0aW9uO1xuICAgICAgICB9KTtcbiAgICB9KS50aGVuKChhY3Rpb24pPT57XG4gICAgICAgIHdvcmtlclJlc29sdmUoY2FsbElkLGFjdGlvbi50b0pzb24oKSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbk1hcC5yZW1vdmVTdWJBY3Rpb24gPSByZW1vdmVTdWJBY3Rpb247XG5cbmZ1bmN0aW9uIHNldEFjdGlvbkRhdGEoY2FsbElkLCB7ZG9jSWQsIG9iak51bSwgZGF0YX0pIHtcbiAgICBfZ2V0UERGRG9jQnlJZChkb2NJZCkudGhlbigoZG9jKT0+e1xuICAgICAgICByZXR1cm4gZG9jLmdldEluZGlyZWN0T2JqZWN0KG9iak51bSk7XG4gICAgfSkudGhlbigob2JqZWN0KT0+e1xuICAgICAgICByZXR1cm4gcGRmSlJQcm9taXNlLnRoZW4oZnVuY3Rpb24ocGRmanIpIHtcbiAgICAgICAgICAgIGxldCBkb2M9b2JqZWN0LnBkZkRvYztcbiAgICAgICAgICAgIGxldCBhY3Rpb249cGRmanIuYWN0aW9uTWFuYWdlci5nZXQocGRmanIuYWN0aW9uTWFuYWdlci5nZXRBY3Rpb25CeURpY3QoZG9jLG9iamVjdC5nZXREaWN0KCkpLGRvYyxwZGZqcik7XG4gICAgICAgICAgICBhY3Rpb24uc2V0QWN0aW9uRGF0YShkYXRhKTtcbiAgICAgICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgICAgIH0pO1xuICAgIH0pLnRoZW4oKGFjdGlvbik9PntcbiAgICAgICAgd29ya2VyUmVzb2x2ZShjYWxsSWQsYWN0aW9uLnRvSnNvbigpKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uTWFwLnNldEFjdGlvbkRhdGEgPSBzZXRBY3Rpb25EYXRhO1xuXG5mdW5jdGlvbiBnZXRBY3Rpb25GaWxlU3RyZWFtKGNhbGxJZCwge2RvY0lkLCBvYmpOdW0sd3JpdGVTdHJlYW19KXtcbiAgICBfZ2V0UERGRG9jQnlJZChkb2NJZCkudGhlbigoZG9jKT0+e1xuICAgICAgICByZXR1cm4gZG9jLmdldEluZGlyZWN0T2JqZWN0KG9iak51bSk7XG4gICAgfSkudGhlbigob2JqZWN0KT0+e1xuICAgICAgICByZXR1cm4gcGRmSlJQcm9taXNlLnRoZW4oZnVuY3Rpb24ocGRmanIpIHtcbiAgICAgICAgICAgIGxldCBkb2M9b2JqZWN0LnBkZkRvYztcbiAgICAgICAgICAgIGxldCBhY3Rpb249cGRmanIuYWN0aW9uTWFuYWdlci5nZXQocGRmanIuYWN0aW9uTWFuYWdlci5nZXRBY3Rpb25CeURpY3QoZG9jLG9iamVjdC5nZXREaWN0KCkpLGRvYyxwZGZqcik7XG4gICAgICAgICAgICByZXR1cm4gYWN0aW9uLmdldEZpbGVTcGVjKCkuZ2V0U3RyZWFtKGZ1bmN0aW9uIChhcnJheUJ1ZmZlciwgb2Zmc2V0LCBzaXplKSB7XG4gICAgICAgICAgICAgICAgICAgIHdvcmtlckNvbnRpbnVlKHdyaXRlU3RyZWFtLCB7YXJyYXlCdWZmZXIsIG9mZnNldCwgc2l6ZX0sIFthcnJheUJ1ZmZlcl0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9KS50aGVuKChzaXplKSA9PiB7XG4gICAgICAgIHdvcmtlclJlc29sdmUoY2FsbElkLCBzaXplKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uTWFwLmdldEFjdGlvbkZpbGVTdHJlYW0gPSBnZXRBY3Rpb25GaWxlU3RyZWFtO1xuXG5mdW5jdGlvbiBnZXRQREZEb2NJZEJ5SHR0cFJhbmdlUmVxdWVzdCAoY2FsbElkLCB7c2l6ZSwgcmFuZ2UgPSB7fX0pIHtcbiAgICBsZXQgc2l6ZVByb21pc2U7XG4gICAgaWYgKHNpemUpIHtcbiAgICAgICAgc2l6ZVByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoc2l6ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHNpemVEZWZlcnJlZCA9IGNyZWF0ZURlZmZlcnJlZCgpO1xuICAgICAgICBzaXplUHJvbWlzZSA9IHNpemVEZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICBsZXQgeG1sSHR0cCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICB4bWxIdHRwLm9wZW4ocmFuZ2UudHlwZSB8fCAnR0VUJywgcmFuZ2UudXJsIHx8IHJhbmdlLnVybCwgdHJ1ZSwgcmFuZ2UudXNlciwgcmFuZ2UucGFzc3dvcmQpO1xuICAgICAgICAvL2lmICh0eXBlb2YgcmFuZ2Uud2l0aENyZWRlbnRpYWxzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAvLyAgICB4bWxIdHRwLndpdGhDcmVkZW50aWFscyA9IHJhbmdlLndpdGhDcmVkZW50aWFsc1xuICAgICAgICAvL31cbiAgICAgICAgeG1sSHR0cC5yZXNwb25zZVR5cGUgPSAnYXJyYXlidWZmZXInO1xuICAgICAgICBpZiAocmFuZ2UuaGVhZGVycykge1xuICAgICAgICAgICAgbGV0IGhlYWRlcnMgPSByYW5nZS5oZWFkZXJzO1xuICAgICAgICAgICAgZm9yIChsZXQgaSBpbiBoZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgeG1sSHR0cC5zZXRSZXF1ZXN0SGVhZGVyKGksIGhlYWRlcnNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgeG1sSHR0cC5zZXRSZXF1ZXN0SGVhZGVyKCdSYW5nZScsICdieXRlcz0wLTAnKTtcbiAgICAgICAgeG1sSHR0cC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoeG1sSHR0cC5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgICAgICAgaWYgKCh4bWxIdHRwLnN0YXR1cyA+PSAyMDAgJiYgeG1sSHR0cC5zdGF0dXMgPCAzMDApIHx8IHhtbEh0dHAuc3RhdHVzID09PSAzMDQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbnRlbnRSYW5nZSA9IHhtbEh0dHAuZ2V0UmVzcG9uc2VIZWFkZXIoJ0NvbnRlbnQtUmFuZ2UnKSB8fCB4bWxIdHRwLmdldFJlc3BvbnNlSGVhZGVyKCdjb250ZW50LXJhbmdlJyk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBsYXN0SW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGlmICgobGFzdEluZGV4ID0gY29udGVudFJhbmdlLmxhc3RJbmRleE9mKCcvJykpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZURlZmVycmVkLnJlc29sdmUoK2NvbnRlbnRSYW5nZS5zbGljZShsYXN0SW5kZXggKyAxKSlcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemVEZWZlcnJlZC5yZWplY3QoeG1sSHR0cC5zdGF0dXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2l6ZURlZmVycmVkLnJlamVjdCh4bWxIdHRwLnN0YXR1cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHhtbEh0dHAuc2VuZChyYW5nZS5kYXRhKTtcbiAgICB9XG4gICAgUHJvbWlzZS5hbGwoW3NpemVQcm9taXNlLCBwZGZKUlByb21pc2VdKS50aGVuKChbc2l6ZSwgcGRmSnJdKSA9PiB7XG4gICAgICAgIGxldCB0b3RhbFNpemUgPSBzaXplO1xuICAgICAgICByZXR1cm4gcGRmSnIuZ2V0UERGRG9jKHtcbiAgICAgICAgICAgIHNpemUsXG4gICAgICAgICAgICBnZXRCdWZmZXI6IGZ1bmN0aW9uIChvZmZzZXQsIHNpemUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlsZVJlYWRlckJ5U3luY0h0dHBSYW5nZShyYW5nZSwgb2Zmc2V0LCBzaXplLCB0b3RhbFNpemUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KS50aGVuKChwZGZEb2MpID0+IHtcbiAgICAgICAgcmFuZ2VEb2NNYXBbcGRmRG9jLmlkXSA9IHJhbmdlLmlkIHx8IHJhbmdlLnVybDtcbiAgICAgICAgcmV0dXJuIHBkZkRvYy5pZDtcbiAgICB9KS50aGVuKChwZGZEb2NJZCkgPT4ge1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCwgcGRmRG9jSWQpO1xuICAgIH0pO1xufVxuZnVuY3Rpb25NYXAuZ2V0UERGRG9jSWRCeUh0dHBSYW5nZVJlcXVlc3QgPSBnZXRQREZEb2NJZEJ5SHR0cFJhbmdlUmVxdWVzdDtcbmZ1bmN0aW9uIGZpbGVSZWFkZXJCeVN5bmNIdHRwUmFuZ2UgKHJhbmdlLCBvZmZzZXQsIHNpemUsIHRvdGFsU2l6ZSkge1xuICAgIGxldCB1cmwgPSByYW5nZS51cmw7XG4gICAgbGV0IGlkID0gcmFuZ2UuaWQgfHwgdXJsO1xuICAgIGxldCBtYXAgPSByYW5nZU1hcFtpZF0gPSByYW5nZU1hcFtpZF0gfHwge2J1ZmZlcnM6W119O1xuICAgIGxldCBjaHVua1NpemUgPSArKHJhbmdlLmNodW5rU2l6ZSB8fCAxMzEwNzIpOyAvLyAxMjgqMTAyNCAxMjhLQlxuICAgIGxldCBzdGFydEJsb2NrID0gTWF0aC5mbG9vcihvZmZzZXQgLyBjaHVua1NpemUpO1xuICAgIGxldCBlbmRCbG9jayA9IE1hdGguZmxvb3IoKG9mZnNldCArIHNpemUpIC8gY2h1bmtTaXplKTtcbiAgICBsZXQgYnVmZmVycyA9IG1hcC5idWZmZXJzO1xuICAgIGZvciAobGV0IGkgPSBzdGFydEJsb2NrLCBqID0gZW5kQmxvY2s7IGkgPD0gajsgaSsrKSB7XG4gICAgICAgIGlmICghYnVmZmVyc1tpXSkge1xuICAgICAgICAgICAgYnVmZmVyc1tpXSA9IHN5bmNIdHRwUmVxdWVzdEFycmF5QnVmZmVyKHJhbmdlLCBpICogY2h1bmtTaXplLCBjaHVua1NpemUsIHRvdGFsU2l6ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHN0YXJ0QmxvY2sgPT09IGVuZEJsb2NrKSB7XG4gICAgICAgIGxldCBidWZmZXIgPSBidWZmZXJzW3N0YXJ0QmxvY2tdO1xuICAgICAgICBsZXQgc3RhcnQgPSBvZmZzZXQgLSBzdGFydEJsb2NrICogY2h1bmtTaXplO1xuICAgICAgICBpZiAoYnVmZmVyLnNsaWNlKSB7XG4gICAgICAgICAgICByZXR1cm4gYnVmZmVyLnNsaWNlKHN0YXJ0LCBzdGFydCArIHNpemUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyLCBzdGFydCwgc2l6ZSkuYnVmZmVyO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHVJbnQ4QXJyYXkgPSBuZXcgVWludDhBcnJheShzaXplKTtcbiAgICAgICAgbGV0IGJ1ZmZlciA9IGJ1ZmZlcnNbc3RhcnRCbG9ja107XG4gICAgICAgIGxldCBzdGFydCA9IG9mZnNldCAtIHN0YXJ0QmxvY2sgKiBjaHVua1NpemU7XG4gICAgICAgIHVJbnQ4QXJyYXkuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZmZlciwgc3RhcnQpKTtcbiAgICAgICAgbGV0IGJ1ZmZlckxlbmd0aCA9IGNodW5rU2l6ZSAtIHN0YXJ0O1xuICAgICAgICBmb3IgKGxldCBpID0gc3RhcnRCbG9jayArIDEsIGogPSBlbmRCbG9jayAtIDE7IGkgPD0gajsgaSsrKSB7XG4gICAgICAgICAgICBidWZmZXIgPSBidWZmZXJzW2ldO1xuICAgICAgICAgICAgdUludDhBcnJheS5zZXQobmV3IFVpbnQ4QXJyYXkoYnVmZmVyKSwgYnVmZmVyTGVuZ3RoKTtcbiAgICAgICAgICAgIGJ1ZmZlckxlbmd0aCArPSBjaHVua1NpemU7XG4gICAgICAgIH1cbiAgICAgICAgYnVmZmVyID0gYnVmZmVyc1tlbmRCbG9ja107XG4gICAgICAgIHVJbnQ4QXJyYXkuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZmZlciwgMCwgKG9mZnNldCArIHNpemUpICUgY2h1bmtTaXplKSwgYnVmZmVyTGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIHVJbnQ4QXJyYXkuYnVmZmVyO1xuICAgIH1cblxufVxuZnVuY3Rpb24gc3luY0h0dHBSZXF1ZXN0QXJyYXlCdWZmZXIgKHJhbmdlLCBvZmZzZXQsIHNpemUsIHRvdGFsU2l6ZSkge1xuICAgIGxldCB4bWxIdHRwID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgeG1sSHR0cC5vcGVuKHJhbmdlLnR5cGUgfHwgJ0dFVCcsIHJhbmdlLnVybCB8fCByYW5nZS51cmwsIGZhbHNlLCByYW5nZS51c2VyLCByYW5nZS5wYXNzd29yZCk7XG4gICAgLy9pZiAodHlwZW9mIHJhbmdlLndpdGhDcmVkZW50aWFscyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyAgICB4bWxIdHRwLndpdGhDcmVkZW50aWFscyA9IHJhbmdlLndpdGhDcmVkZW50aWFsc1xuICAgIC8vfVxuICAgIHhtbEh0dHAucmVzcG9uc2VUeXBlID0gJ2FycmF5YnVmZmVyJztcbiAgICBpZiAocmFuZ2UuaGVhZGVycykge1xuICAgICAgICBsZXQgaGVhZGVycyA9IHJhbmdlLmhlYWRlcnM7XG4gICAgICAgIGZvciAobGV0IGkgaW4gaGVhZGVycykge1xuICAgICAgICAgICAgeG1sSHR0cC5zZXRSZXF1ZXN0SGVhZGVyKGksIGhlYWRlcnNbaV0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHhtbEh0dHAuc2V0UmVxdWVzdEhlYWRlcignUmFuZ2UnLCAnYnl0ZXM9JyArIG9mZnNldCArICctJyArIE1hdGgubWluKChvZmZzZXQgKyBzaXplIC0gMSksIHRvdGFsU2l6ZSAtIDEpKTtcbiAgICB4bWxIdHRwLnNlbmQocmFuZ2UuZGF0YSk7XG4gICAgaWYgKCEoKHhtbEh0dHAuc3RhdHVzID49IDIwMCAmJiB4bWxIdHRwLnN0YXR1cyA8IDMwMCkgfHwgeG1sSHR0cC5zdGF0dXMgPT09IDMwNCkpIHtcbiAgICAgICAgdGhyb3cgJ3JlcXVlc3QgZXJyb3I6ICcgKyB4bWxIdHRwLnN0YXR1cztcbiAgICB9XG4gICAgcmV0dXJuIHhtbEh0dHAucmVzcG9uc2U7XG59XG5mdW5jdGlvbiBzZXRQb3B1cE9wZW5TdGF0dXMgKGNhbGxJZCwge2RvY0lkLCBwYWdlSWQsIGFubm90SWQsIHN0YXR1c30pIHtcbiAgICBfZ2V0UGFnZUJ5SWQoZG9jSWQsIHBhZ2VJZCkudGhlbigocGFnZSkgPT4ge1xuICAgICAgICByZXR1cm4gcGFnZS5nZXRBbm5vdEJ5SWQoYW5ub3RJZCk7XG4gICAgfSkudGhlbigoYW5ub3QpID0+IHtcbiAgICAgICAgbGV0IHJldCA9IGFubm90LnNldE9wZW5TdGF0dXMoc3RhdHVzKTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9KS50aGVuKGFubm90SWRzID0+IHtcbiAgICAgICAgd29ya2VyUmVzb2x2ZShjYWxsSWQsIGFubm90SWRzKTtcbiAgICB9KS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICB3b3JrZXJSZWplY3QoY2FsbElkLG51bGwsW10sZSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbk1hcC5zZXRQb3B1cE9wZW5TdGF0dXMgPSBzZXRQb3B1cE9wZW5TdGF0dXM7XG5cbmZ1bmN0aW9uIHJlbW92ZVBhZ2VBbGxBbm5vdCAoY2FsbElkLCB7ZG9jSWQsIHBhZ2VJZH0pIHtcbiAgICBfZ2V0UGFnZUJ5SWQoZG9jSWQsIHBhZ2VJZCkudGhlbigocGFnZSkgPT4ge1xuICAgICAgICByZXR1cm4gcGFnZS5yZW1vdmVBbGxBbm5vdCgpO1xuICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICB3b3JrZXJSZXNvbHZlKGNhbGxJZCk7XG4gICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgd29ya2VyUmVqZWN0KGNhbGxJZCk7XG4gICAgfSk7XG59XG5mdW5jdGlvbk1hcC5yZW1vdmVQYWdlQWxsQW5ub3QgPSByZW1vdmVQYWdlQWxsQW5ub3Q7XG5cbmZ1bmN0aW9uIGdldEFubm90V29mZiAoY2FsbElkLCB7ZG9jSWQsIHBhZ2VJZCwgaWR9KSB7XG4gICAgX2dldFBhZ2VCeUlkKGRvY0lkLCBwYWdlSWQpLnRoZW4oKHBhZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuIHBhZ2UuZ2V0QW5ub3RCeUlkKGlkKTtcbiAgICB9KS50aGVuKChhbm5vdCkgPT4ge1xuICAgICAgICByZXR1cm4gYW5ub3QuZ2V0V29mZigpO1xuICAgIH0pLnRoZW4od29mZiA9PiB7XG4gICAgICAgIHdvcmtlclJlc29sdmUoY2FsbElkLCB3b2ZmKTtcbiAgICB9KS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICB3b3JrZXJSZWplY3QoY2FsbElkLG51bGwsW10sZSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbk1hcC5nZXRBbm5vdFdvZmYgPSBnZXRBbm5vdFdvZmY7XG5cbmZ1bmN0aW9uIGRybUVuY3J5cHQgKGNhbGxJZCwge2RvY0lkLCBvcHRpb25zfSkge1xuICAgIF9nZXRQREZEb2NCeUlkKGRvY0lkKS50aGVuKGZ1bmN0aW9uIChwZGZEb2MpIHtcbiAgICAgICAgaWYgKCFwZGZEb2MpIHtcbiAgICAgICAgICAgIHRocm93IERPQ19JU19OVUxMO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwZGZEb2MuZHJtRW5jcnlwdChvcHRpb25zKTtcbiAgICB9KS50aGVuKGZ1bmN0aW9uIChmbGFnKSB7XG4gICAgICAgIGlmIChmbGFnKSB7XG4gICAgICAgICAgICByZXR1cm4gd29ya2VyUmVzb2x2ZShjYWxsSWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHdvcmtlclJlamVjdChjYWxsSWQsIHtlcnJvcjogLTF9KTtcbiAgICAgICAgfVxuICAgIH0sIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmIChlICYmIGUuZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiB3b3JrZXJSZWplY3QoY2FsbElkLCBlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd29ya2VyUmVqZWN0KGNhbGxJZCk7XG4gICAgfSlcbn1cbmZ1bmN0aW9uTWFwLmRybUVuY3J5cHQgPSBkcm1FbmNyeXB0OyIsIlxuXG5sZXQgd29ya2VyT2JqPXt9O1xuZnVuY3Rpb24gZXh0ZW5kc1dvcmtlckFQSShmb250TWFwLGdldFBERkRvY0J5SWQscGRmSlJQcm9taXNlLHJlc29sdmUscmVqZWN0KXtcbiAgICBmb3IobGV0IGtleSBpbiBmb3JtQVBJSGFuZGxlcil7XG4gICAgICAgIGZvbnRNYXBba2V5XSA9IGZvcm1BUElIYW5kbGVyW2tleV07XG4gICAgfVxuICAgIHdvcmtlck9iaj17XG4gICAgICAgIGdldERvY0J5SUQ6Z2V0UERGRG9jQnlJZCxcbiAgICAgICAganJQcm9taXNlOnBkZkpSUHJvbWlzZSxcbiAgICAgICAgcmVzb2x2ZTpyZXNvbHZlLFxuICAgICAgICByZWplY3Q6cmVqZWN0XG4gICAgfVxufVxuXG5sZXQgZm9ybUFQSUhhbmRsZXIgPSB7fVxubGV0IGZvcm07XG5sZXQgZW5naW5lO1xuXG5mb3JtQVBJSGFuZGxlci5sb2FkRm9ybSA9IChjYWxsSWQse2RvY0lkfSk9PntcbiAgICBpZihlbmdpbmUpe1xuICAgICAgICByZXR1cm4gc3luY0xvYWRGb3JtKGNhbGxJZCxlbmdpbmUsZG9jSWQpO1xuICAgIH1cblxuICAgIGxldCBlbmdpbmVQcm9taXNlID0gd29ya2VyT2JqLmpyUHJvbWlzZTtcbiAgICBlbmdpbmVQcm9taXNlLnRoZW4oKHBkZmpyKT0+e1xuICAgICAgICBlbmdpbmUgPSBwZGZqci5lbmdpbmU7XG4gICAgICAgIHJldHVybiBzeW5jTG9hZEZvcm0oY2FsbElkLGVuZ2luZSxkb2NJZCk7XG4gICAgfSlcbn1cblxuZnVuY3Rpb24gc3luY0xvYWRGb3JtKGNhbGxJZCxlbmdpbmUsZG9jSWQpe1xuICAgIHJldHVybiB3b3JrZXJPYmouZ2V0RG9jQnlJRChkb2NJZCkudGhlbigocGRmRG9jKT0+e1xuICAgICAgICBpZihwZGZEb2MuZG9jLkhhc0Zvcm0oKSl7XG4gICAgICAgICAgICBsZXQgZm9ybSA9IHBkZkRvYy5sb2FkRm9ybSgpO1xuICAgICAgICAgICAgcmV0dXJuIGZvcm0udG9Kc29uKCk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfSkudGhlbigoZm9ybUpzb24pPT57XG4gICAgICAgIHdvcmtlck9iai5yZXNvbHZlKGNhbGxJZCxmb3JtSnNvbilcbiAgICB9KS5jYXRjaCgoZXJyKT0+e1xuICAgICAgICBpZiAoIWlzTmFOIChlcnIpKSB7XG4gICAgICAgICAgICBlcnIgPSBlbmdpbmUuZ2V0RXJyb3JDb2RlIChlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGlmKGVyciA9PT0gZW5naW5lLkVycm9yQ29kZS5lX0VyckRhdGFOb3RSZWFkeSl7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBzeW5jTG9hZEZvcm0oY2FsbElkLGVuZ2luZSxkb2NJZClcbiAgICAgICAgICAgIH0sMjAwKTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oZXJyKTtcbiAgICAgICAgfVxuICAgIH0pXG59XG5cbmZvcm1BUElIYW5kbGVyLmZvcm1GaWxsZXJFdmVudD0oY2FsbElkLHtkb2NJZCx0eXBlLHBhZ2VJbmRleCxwb2ludH0pPT57XG4gICAgcmV0dXJuIHdvcmtlck9iai5nZXREb2NCeUlEKGRvY0lkKS50aGVuKChwZGZEb2MpPT57XG4gICAgICAgIGxldCBmb3JtID0gcGRmRG9jLmxvYWRGb3JtKCk7XG4gICAgICAgIGxldCBwYWdlID0gcGRmRG9jLmdldFBhZ2VCeUlkKHBhZ2VJbmRleCk7XG4gICAgICAgIHJldHVybiBmb3JtLmZpbGwodHlwZSxwYWdlLHBvaW50KTtcbiAgICB9KS50aGVuKF89PntcbiAgICAgICAgd29ya2VyT2JqLnJlc29sdmUoY2FsbElkKVxuICAgIH0pO1xufVxuXG5mb3JtQVBJSGFuZGxlci51cGRhdGVGaWVsZD0oY2FsbElkLHtkb2NJZCx0aXRsZSxrZXksdmFsdWV9KT0+e1xuICAgIHJldHVybiB3b3JrZXJPYmouZ2V0RG9jQnlJRChkb2NJZCkudGhlbigocGRmRG9jKT0+e1xuICAgICAgICBpZighcGRmRG9jKXtcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybihkb2NJZCk7XG4gICAgICAgICAgICB0aHJvdyBkb2NJZDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZm9ybSA9IHBkZkRvYy5sb2FkRm9ybSgpO1xuICAgICAgICBsZXQgZmllbGQgPSBmb3JtLmdldEZpZWxkKHRpdGxlKTtcbiAgICAgICAgZmllbGQudXBkYXRlKGtleSx2YWx1ZSk7XG4gICAgICAgIHJldHVybiBmaWVsZC50b0pzb24oKTtcbiAgICB9KS50aGVuKChmaWVsZEpzb24pPT57XG4gICAgICAgIHdvcmtlck9iai5yZXNvbHZlKGNhbGxJZCxmaWVsZEpzb24pXG4gICAgfSk7XG59O1xuXG5mb3JtQVBJSGFuZGxlci5zZXRGaWVsZFZhbHVlPShjYWxsSWQse2RvY0lkLHRpdGxlLHZhbHVlfSk9PntcbiAgICByZXR1cm4gd29ya2VyT2JqLmdldERvY0J5SUQoZG9jSWQpLnRoZW4oKHBkZkRvYyk9PntcbiAgICAgICAgaWYoIXBkZkRvYyl7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oZG9jSWQpO1xuICAgICAgICAgICAgdGhyb3cgZG9jSWQ7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGZvcm0gPSBwZGZEb2MubG9hZEZvcm0oKTtcbiAgICAgICAgbGV0IGZpZWxkID0gZm9ybS5nZXRGaWVsZCh0aXRsZSk7XG4gICAgICAgIGZpZWxkLnNldFZhbHVlKHZhbHVlKTtcbiAgICB9KS50aGVuKF89PntcbiAgICAgICAgd29ya2VyT2JqLnJlc29sdmUoY2FsbElkKVxuICAgIH0pO1xufTtcblxuZm9ybUFQSUhhbmRsZXIudXBkYXRlTUtQcm9wZXJ0eT0oY2FsbElkLHtkb2NJZCxwYWdlSWQsYW5ub3RJZCxrZXksdmFsdWV9KT0+e1xuICAgIHJldHVybiB3b3JrZXJPYmouZ2V0RG9jQnlJRChkb2NJZCkudGhlbigocGRmRG9jKSA9PiB7XG4gICAgICAgIHJldHVybiBwZGZEb2MuZ2V0UGFnZUJ5SWQocGFnZUlkKS5nZXRBbm5vdEJ5SWQoYW5ub3RJZCk7XG4gICAgfSkudGhlbihhbm5vdD0+e1xuICAgICAgICByZXR1cm4gYW5ub3QudXBkYXRlTUtQcm9wZXJ0eShrZXksdmFsdWUpO1xuICAgIH0pLnRoZW4oXz0+e1xuICAgICAgICB3b3JrZXJPYmoucmVzb2x2ZShjYWxsSWQpXG4gICAgfSk7XG59O1xuXG5mb3JtQVBJSGFuZGxlci5zZXRXaWRnZXRBUz0oY2FsbElkLHtkb2NJZCxwYWdlSWQsYW5ub3RJZCxBU30pPT57XG4gICAgcmV0dXJuIHdvcmtlck9iai5nZXREb2NCeUlEKGRvY0lkKS50aGVuKChwZGZEb2MpID0+IHtcbiAgICAgICAgcmV0dXJuIHBkZkRvYy5nZXRQYWdlQnlJZChwYWdlSWQpLmdldEFubm90QnlJZChhbm5vdElkKTtcbiAgICB9KS50aGVuKGFubm90PT57XG4gICAgICAgIHJldHVybiBhbm5vdC5zZXRBUyhBUyk7XG4gICAgfSkudGhlbihfPT57XG4gICAgICAgIHdvcmtlck9iai5yZXNvbHZlKGNhbGxJZClcbiAgICB9KTtcbn1cblxuZm9ybUFQSUhhbmRsZXIuZ2V0RmllbGRzVmFsdWU9KGNhbGxJZCx7ZG9jSWR9KT0+e1xuICAgIHJldHVybiB3b3JrZXJPYmouZ2V0RG9jQnlJRChkb2NJZCkudGhlbigocGRmRG9jKSA9PiB7XG4gICAgICAgIGxldCBmb3JtID0gcGRmRG9jLmxvYWRGb3JtKCk7XG4gICAgICAgIHJldHVybiBmb3JtLmdldEZpZWxkc1ZhbHVlKCk7XG4gICAgfSkudGhlbihqc29uPT57XG4gICAgICAgIHdvcmtlck9iai5yZXNvbHZlKGNhbGxJZCxqc29uKVxuICAgIH0pXG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgZXh0ZW5kc1dvcmtlckFQSTsiLCIvL2ltcG9ydCB7Z2V0R3JhcGhpY09iamVjdHNJbmZvfSBmcm9tICcuLi9wZGYtanIvZ3JhcGhpY3MvR3JhcGhpY3NPYmplY3RNZ3InO1xuXG52YXIgb2JqZWN0Q2FjaGVNYXAgPSB7fTtcbmZ1bmN0aW9uIHB1c2hPYmplY3RUb0NhY2hlIChvYmosIGRvY0lkLCBwYWdlSWQpIHtcbiAgICBsZXQgbWFwMSA9IG9iamVjdENhY2hlTWFwW2RvY0lkXSA9IG9iamVjdENhY2hlTWFwW2RvY0lkXSB8fCB7fTtcbiAgICBsZXQgbWFwMiA9IG1hcDFbcGFnZUlkXSA9IG1hcDFbcGFnZUlkXSB8fCB7fTtcbiAgICBtYXAyW29iai5pZF0gPSBvYmo7XG59XG5mdW5jdGlvbiBnZXRPYmplY3RGcm9tQ2FjaGUgKGRvY0lkLCBwYWdlSWQsIGlkKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIG9iamVjdENhY2hlTWFwW2RvY0lkXVtwYWdlSWRdW2lkXTtcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5mdW5jdGlvbiBjbGVhck9iamVjdEZyb21DYWNoZSAoZG9jSWQsIHBhZ2VJZCwgaWQpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBvYmplY3RDYWNoZU1hcFtkb2NJZF1bcGFnZUlkXVtpZF07XG4gICAgICAgIH0gZWxzZSBpZiAocGFnZUlkKSB7XG4gICAgICAgICAgICBkZWxldGUgb2JqZWN0Q2FjaGVNYXBbZG9jSWRdW3BhZ2VJZF07XG4gICAgICAgIH0gZWxzZSBpZiAoZG9jSWQpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBvYmplY3RDYWNoZU1hcFtkb2NJZF07XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChleCkge31cbn1cbmxldCB3b3JrZXJPYmogPSB7fTtcbmZ1bmN0aW9uIGV4dGVuZHNHcmFwaGljQVBJIChcbiAgZnVuY3Rpb25NYXAsXG4gIGdldFBERkRvY0J5SWQsXG4gIGdldFBhZ2VCeUlkLFxuICBwZGZKUlByb21pc2UsXG4gIHJlc29sdmUsXG4gIHJlamVjdFxuKSB7XG4gIGZvciAobGV0IGtleSBpbiBncmFwaGljT2JqZWN0QVBJKSB7XG4gICAgZnVuY3Rpb25NYXBba2V5XSA9IGdyYXBoaWNPYmplY3RBUElba2V5XTtcbiAgfVxuICB3b3JrZXJPYmogPSB7XG4gICAgZ2V0RG9jQnlJRDogZ2V0UERGRG9jQnlJZCxcbiAgICBnZXRQYWdlQnlJRDpnZXRQYWdlQnlJZCxcbiAgICBqclByb21pc2U6IHBkZkpSUHJvbWlzZSxcbiAgICByZXNvbHZlOiByZXNvbHZlLFxuICAgIHJlamVjdDogcmVqZWN0LFxuICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIGNsZWFyT2JqZWN0RnJvbUNhY2hlXG4gICAgfVxufVxuXG5sZXQgZ3JhcGhpY09iamVjdEFQSSA9IHt9O1xuXG4vL2dyYXBoaWNPYmplY3RBUEkuZ2V0R3JhcGhpY09iamVjdHNJbmZvID0gKGNhbGxJRCwge2RvY0lkLCBwYWdlSWQsdHlwZT0wfSkgPT4ge1xuLy8gICAgcmV0dXJuIHdvcmtlck9ialxuLy8gICAgICAgIC5nZXREb2NCeUlEIChkb2NJZClcbi8vICAgICAgICAudGhlbiAocGRmRG9jID0+IHtcbi8vICAgICAgICAvKipcbi8vICAgICAgICAgKiBAdHlwZSBQREZQYWdlXG4vLyAgICAgICAgICovXG4vLyAgICAgICAgcmV0dXJuIHBkZkRvYy5nZXRQYWdlQnlJZCAocGFnZUlkKTtcbi8vICAgIH0pXG4vLyAgICAgICAgLnRoZW4gKHBhZ2UgPT4ge1xuLy8gICAgICAgIHJldHVybiBnZXRHcmFwaGljT2JqZWN0c0luZm8gKHBhZ2UuZW5naW5lLCBwYWdlLnBhZ2UsIG51bGwsIHR5cGUpO1xuLy8gICAgfSkudGhlbiAoanNvbiA9PiB7XG4vLyAgICAgICAgd29ya2VyT2JqLnJlc29sdmUoY2FsbElELGpzb24pXG4vLyAgICB9KTtcbi8vfTtcblxuZnVuY3Rpb24gZ2V0R3JhcGhpY3NPYmplY3RBdFBvaW50IChjYWxsSWQsIHtkb2NJZCwgcGFnZUlkLCBwb2ludCwgdG9sZXJhbmNlLCB0eXBlfSkge1xuICAgIHdvcmtlck9iai5nZXRQYWdlQnlJRChkb2NJZCwgcGFnZUlkKS50aGVuKChwYWdlKSA9PiB7XG4gICAgICAgIHJldHVybiBwYWdlLmdldEdyYXBoaWNzT2JqZWN0QXRQb2ludChwb2ludCwgdG9sZXJhbmNlLCB0eXBlKTtcbiAgICB9KS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgIGlmKHJlc3VsdCl7XG4gICAgICAgICAgICBwdXNoT2JqZWN0VG9DYWNoZShyZXN1bHQsIGRvY0lkLCBwYWdlSWQpO1xuICAgICAgICAgICAgd29ya2VyT2JqLnJlc29sdmUoY2FsbElkLCByZXN1bHQudG9Kc29uKCkpO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIHdvcmtlck9iai5yZXNvbHZlKGNhbGxJZCwge30pO1xuICAgICAgICB9XG4gICAgfSwgKGUpID0+IHtcbiAgICAgICAgd29ya2VyT2JqLnJlamVjdChjYWxsSWQpO1xuICAgIH0pO1xufVxuZ3JhcGhpY09iamVjdEFQSS5nZXRHcmFwaGljc09iamVjdEF0UG9pbnQgPSBnZXRHcmFwaGljc09iamVjdEF0UG9pbnQ7XG5cbmZ1bmN0aW9uIHNldEdyYXBoaWNzT2JqZWN0TWF0cml4IChjYWxsSWQsIHtkb2NJZCwgcGFnZUlkLCBpZCwgcmVjdH0pIHtcbiAgICBsZXQgZm9jdXNlZE9iamVjdCA9IGdldE9iamVjdEZyb21DYWNoZShkb2NJZCwgcGFnZUlkLCBpZCk7XG4gICAgaWYgKGZvY3VzZWRPYmplY3QpIHtcbiAgICAgICAgZm9jdXNlZE9iamVjdC5zZXRNYXRyaXgocmVjdCx0cnVlKTtcbiAgICAgICAgd29ya2VyT2JqLnJlc29sdmUoY2FsbElkLCBmb2N1c2VkT2JqZWN0LnRvSnNvbigpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB3b3JrZXJPYmoucmVqZWN0KGNhbGxJZCk7XG4gICAgfVxufVxuZ3JhcGhpY09iamVjdEFQSS5zZXRHcmFwaGljc09iamVjdE1hdHJpeCA9IHNldEdyYXBoaWNzT2JqZWN0TWF0cml4O1xuXG5mdW5jdGlvbiBnZXRHcmFwaGljc09iamVjdEJpdG1hcCAoY2FsbElkLCB7ZG9jSWQsIHBhZ2VJZCwgaWQsc2NhbGV9KSB7XG4gICAgbGV0IGpyPW51bGw7XG4gICAgbGV0IGZvY3VzZWRPYmplY3QgPSBnZXRPYmplY3RGcm9tQ2FjaGUoZG9jSWQsIHBhZ2VJZCwgaWQpO1xuICAgIC8vd29ya2VyT2JqLmpyUHJvbWlzZS50aGVuKGpyPT57XG4gICAgICAgIGxldCBpbWFnZURhdGEgPSBmb2N1c2VkT2JqZWN0LnJlbmRlcihzY2FsZSxqcik7XG4gICAgICAgIHdvcmtlck9iai5yZXNvbHZlKGNhbGxJZCwgaW1hZ2VEYXRhLCBbaW1hZ2VEYXRhLmJ1ZmZlcl0pO1xuXG4gICAgLy99KVxufVxuZ3JhcGhpY09iamVjdEFQSS5nZXRHcmFwaGljc09iamVjdEJpdG1hcCA9IGdldEdyYXBoaWNzT2JqZWN0Qml0bWFwO1xuXG5mdW5jdGlvbiBzZXRHcmFwaGljc09iamVjdEJvcmRlclN0eWxlIChjYWxsSWQsIHtkb2NJZCwgcGFnZUlkLCBpZCxzdHlsZSxkYXNoZXN9KSB7XG4gICAgbGV0IGZvY3VzZWRPYmplY3QgPSBnZXRPYmplY3RGcm9tQ2FjaGUoZG9jSWQsIHBhZ2VJZCwgaWQpO1xuICAgIGlmIChmb2N1c2VkT2JqZWN0KSB7XG4gICAgICAgIGZvY3VzZWRPYmplY3Quc2V0Qm9yZGVyU3R5bGUoc3R5bGUsZGFzaGVzLHRydWUpO1xuICAgICAgICB3b3JrZXJPYmoucmVzb2x2ZShjYWxsSWQsIGZvY3VzZWRPYmplY3QudG9Kc29uKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHdvcmtlck9iai5yZWplY3QoY2FsbElkKTtcbiAgICB9XG59XG5ncmFwaGljT2JqZWN0QVBJLnNldEdyYXBoaWNzT2JqZWN0Qm9yZGVyU3R5bGUgPSBzZXRHcmFwaGljc09iamVjdEJvcmRlclN0eWxlO1xuZnVuY3Rpb24gc2V0R3JhcGhpY3NPYmplY3RCb3JkZXJXaWR0aCAoY2FsbElkLCB7ZG9jSWQsIHBhZ2VJZCwgaWQsd2lkdGh9KSB7XG4gICAgbGV0IGZvY3VzZWRPYmplY3QgPSBnZXRPYmplY3RGcm9tQ2FjaGUoZG9jSWQsIHBhZ2VJZCwgaWQpO1xuICAgIGlmIChmb2N1c2VkT2JqZWN0KSB7XG4gICAgICAgIGZvY3VzZWRPYmplY3Quc2V0Qm9yZGVyV2lkdGgod2lkdGgsdHJ1ZSk7XG4gICAgICAgIHdvcmtlck9iai5yZXNvbHZlKGNhbGxJZCwgZm9jdXNlZE9iamVjdC50b0pzb24oKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgd29ya2VyT2JqLnJlamVjdChjYWxsSWQpO1xuICAgIH1cbn1cbmdyYXBoaWNPYmplY3RBUEkuc2V0R3JhcGhpY3NPYmplY3RCb3JkZXJXaWR0aCA9IHNldEdyYXBoaWNzT2JqZWN0Qm9yZGVyV2lkdGg7XG5mdW5jdGlvbiBzZXRHcmFwaGljc09iamVjdEJvcmRlckNvbG9yIChjYWxsSWQsIHtkb2NJZCwgcGFnZUlkLCBpZCxjb2xvcn0pIHtcbiAgICBsZXQgcmV0O1xuICAgIGxldCBmb2N1c2VkT2JqZWN0ID0gZ2V0T2JqZWN0RnJvbUNhY2hlKGRvY0lkLCBwYWdlSWQsIGlkKTtcbiAgICBpZihmb2N1c2VkT2JqZWN0KXtcbiAgICAgICAgcmV0ID0gZm9jdXNlZE9iamVjdC5zZXRCb3JkZXJDb2xvcihjb2xvcix0cnVlKTtcbiAgICB9XG4gICAgd29ya2VyT2JqLnJlc29sdmUoY2FsbElkLHJldCk7XG59XG5ncmFwaGljT2JqZWN0QVBJLnNldEdyYXBoaWNzT2JqZWN0Qm9yZGVyQ29sb3IgPSBzZXRHcmFwaGljc09iamVjdEJvcmRlckNvbG9yO1xuZnVuY3Rpb24gc2V0R3JhcGhpY3NPYmplY3RGaWxsQ29sb3IgKGNhbGxJZCwge2RvY0lkLCBwYWdlSWQsIGlkLGNvbG9yfSkge1xuICAgIGxldCBmb2N1c2VkT2JqZWN0ID0gZ2V0T2JqZWN0RnJvbUNhY2hlKGRvY0lkLCBwYWdlSWQsIGlkKTtcbiAgICBpZiAoZm9jdXNlZE9iamVjdCkge1xuICAgICAgICBmb2N1c2VkT2JqZWN0LnNldEZpbGxDb2xvcihjb2xvcix0cnVlKTtcbiAgICAgICAgd29ya2VyT2JqLnJlc29sdmUoY2FsbElkLCBmb2N1c2VkT2JqZWN0LnRvSnNvbigpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB3b3JrZXJPYmoucmVqZWN0KGNhbGxJZCk7XG4gICAgfVxufVxuZ3JhcGhpY09iamVjdEFQSS5zZXRHcmFwaGljc09iamVjdEZpbGxDb2xvciA9IHNldEdyYXBoaWNzT2JqZWN0RmlsbENvbG9yO1xuZnVuY3Rpb24gc2V0R3JhcGhpY3NPYmplY3RPcGFjaXR5IChjYWxsSWQsIHtkb2NJZCwgcGFnZUlkLCBpZCxvcGFjaXR5fSkge1xuICAgIGxldCByZXQ7XG4gICAgbGV0IGZvY3VzZWRPYmplY3QgPSBnZXRPYmplY3RGcm9tQ2FjaGUoZG9jSWQsIHBhZ2VJZCwgaWQpO1xuICAgIGlmKGZvY3VzZWRPYmplY3Qpe1xuICAgICAgICByZXQgPSBmb2N1c2VkT2JqZWN0LnNldE9wYWNpdHkocGFyc2VGbG9hdChvcGFjaXR5KSx0cnVlKTtcbiAgICB9XG4gICAgd29ya2VyT2JqLnJlc29sdmUoY2FsbElkLHJldCk7XG59XG5ncmFwaGljT2JqZWN0QVBJLnNldEdyYXBoaWNzT2JqZWN0T3BhY2l0eSA9IHNldEdyYXBoaWNzT2JqZWN0T3BhY2l0eTtcblxuZnVuY3Rpb24gYWRkR3JhcGhpY3NPYmplY3QgKGNhbGxJZCwge2RvY0lkLHBhZ2VJZCxpbmZvfSkge1xuICAgIFByb21pc2UuYWxsKFt3b3JrZXJPYmouanJQcm9taXNlLCB3b3JrZXJPYmouZ2V0UGFnZUJ5SUQoZG9jSWQscGFnZUlkKV0pLnRoZW4oKFtqciwgcGFnZV0pID0+IHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFtqciwgcGFnZSwgcGFnZS5jX3BhZ2VQcm9taXNlXSk7XG4gICAgfSkudGhlbigoW2pyLCBwYWdlLCBjX3BhZ2VdKSA9PiB7XG4gICAgICAgIHJldHVybiBqci5ncmFwaGljc09iamVjdE1hbmFnZXIuY3JlYXRlKGluZm8sIGNfcGFnZSwgcGFnZSk7XG4gICAgfSkudGhlbigoZ3JhcGhpY3MpID0+IHtcbiAgICAgICAgY2xlYXJPYmplY3RGcm9tQ2FjaGUoZG9jSWQsIHBhZ2VJZCk7XG4gICAgICAgIHB1c2hPYmplY3RUb0NhY2hlKGdyYXBoaWNzLCBkb2NJZCwgcGFnZUlkKTtcbiAgICAgICAgd29ya2VyT2JqLnJlc29sdmUoY2FsbElkLCBncmFwaGljcy50b0pzb24oKSk7XG4gICAgfSkuY2F0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgICB3b3JrZXJPYmoucmVqZWN0KGNhbGxJZCk7XG4gICAgfSlcbiAgICAvL3dvcmtlck9iai5qclByb21pc2UudGhlbihqcj0+e1xuICAgIC8vICAgIHdvcmtlck9iai5nZXRQYWdlQnlJRChkb2NJZCxwYWdlSWQpLnRoZW4ocGFnZT0+e1xuICAgIC8vICAgICAgICBqci5ncmFwaGljc09iamVjdE1hbmFnZXIuY3JlYXRlKGluZm8sIHBhZ2UucGFnZSk7XG4gICAgLy8gICAgfSlcbiAgICAvL30pXG4gICAgLy93b3JrZXJPYmoucmVzb2x2ZShjYWxsSWQpO1xufVxuZ3JhcGhpY09iamVjdEFQSS5hZGRHcmFwaGljc09iamVjdCA9IGFkZEdyYXBoaWNzT2JqZWN0O1xuXG5mdW5jdGlvbiBzZXRJbWFnZU9iamVjdE9wYWNpdHkoY2FsbElkLCB7ZG9jSWQsIHBhZ2VJZCwgaWQsIG9wYWNpdHl9KSB7XG4gICAgbGV0IHJldDtcbiAgICBsZXQgZm9jdXNlZE9iamVjdCA9IGdldE9iamVjdEZyb21DYWNoZShkb2NJZCwgcGFnZUlkLCBpZCk7XG4gICAgaWYoZm9jdXNlZE9iamVjdCl7XG4gICAgICAgIHJldCA9IGZvY3VzZWRPYmplY3Quc2V0T3BhY2l0eShvcGFjaXR5LHRydWUpO1xuICAgIH1cbiAgICB3b3JrZXJPYmoucmVzb2x2ZShjYWxsSWQscmV0KTtcbn1cbmdyYXBoaWNPYmplY3RBUEkuc2V0SW1hZ2VPYmplY3RPcGFjaXR5ID0gc2V0SW1hZ2VPYmplY3RPcGFjaXR5O1xuXG5mdW5jdGlvbiByZW1vdmVHcmFwaGljc09iamVjdChjYWxsSWQsIHtkb2NJZCwgcGFnZUlkLCBpZH0pIHtcbiAgICBsZXQgcmV0O1xuICAgIGxldCBmb2N1c2VkT2JqZWN0ID0gZ2V0T2JqZWN0RnJvbUNhY2hlKGRvY0lkLCBwYWdlSWQsIGlkKTtcbiAgICBpZihmb2N1c2VkT2JqZWN0KXtcbiAgICAgICAgcmV0ID0gZm9jdXNlZE9iamVjdC5yZW1vdmUoKTtcbiAgICAgICAgZm9jdXNlZE9iamVjdCA9IG51bGw7XG4gICAgICAgIGNsZWFyT2JqZWN0RnJvbUNhY2hlKGRvY0lkLCBwYWdlSWQsIGlkKTtcbiAgICB9XG4gICAgd29ya2VyT2JqLnJlc29sdmUoY2FsbElkLHJldCk7XG59XG5ncmFwaGljT2JqZWN0QVBJLnJlbW92ZUdyYXBoaWNzT2JqZWN0ID0gcmVtb3ZlR3JhcGhpY3NPYmplY3Q7XG5cbmZ1bmN0aW9uIHNldEltYWdlT2JqZWN0Um90YXRpb24oY2FsbElkLCB7ZG9jSWQsIHBhZ2VJZCwgaWQsIHJvdGF0aW9ufSkge1xuICAgIGxldCBmb2N1c2VkT2JqZWN0ID0gZ2V0T2JqZWN0RnJvbUNhY2hlKGRvY0lkLCBwYWdlSWQsIGlkKTtcbiAgICBpZiAoZm9jdXNlZE9iamVjdCkge1xuICAgICAgICBmb2N1c2VkT2JqZWN0LnNldFJvdGF0aW9uKHJvdGF0aW9uLHRydWUpO1xuICAgICAgICB3b3JrZXJPYmoucmVzb2x2ZShjYWxsSWQsIGZvY3VzZWRPYmplY3QudG9Kc29uKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHdvcmtlck9iai5yZWplY3QoY2FsbElkKTtcbiAgICB9XG59XG5ncmFwaGljT2JqZWN0QVBJLnNldEltYWdlT2JqZWN0Um90YXRpb24gPSBzZXRJbWFnZU9iamVjdFJvdGF0aW9uO1xuXG5mdW5jdGlvbiBzZXRUZXh0T2JqZWN0Q2hhciAoY2FsbElkLCB7ZG9jSWQsIHBhZ2VJZCwgaWQsIGNoYXJ9KSB7XG4gICAgbGV0IGZvY3VzZWRPYmplY3QgPSBnZXRPYmplY3RGcm9tQ2FjaGUoZG9jSWQsIHBhZ2VJZCwgaWQpO1xuICAgIGlmIChmb2N1c2VkT2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBmb2N1c2VkT2JqZWN0LnNldFRleHQoY2hhcikudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB3b3JrZXJPYmoucmVzb2x2ZShjYWxsSWQsIGZvY3VzZWRPYmplY3QudG9Kc29uKCkpXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHdvcmtlck9iai5yZWplY3QoY2FsbElkKTtcbiAgICAgICAgfSlcbiAgICB9XG4gICAgcmV0dXJuIHdvcmtlck9iai5yZWplY3QoY2FsbElkKTtcbn1cbmdyYXBoaWNPYmplY3RBUEkuc2V0VGV4dE9iamVjdENoYXIgPSBzZXRUZXh0T2JqZWN0Q2hhcjtcblxuZnVuY3Rpb24gc2V0VGV4dE9iamVjdEl0YWxpYyAoY2FsbElkLCB7ZG9jSWQsIHBhZ2VJZCwgaWQsIGl0YWxpY30pIHtcbiAgICBsZXQgZm9jdXNlZE9iamVjdCA9IGdldE9iamVjdEZyb21DYWNoZShkb2NJZCwgcGFnZUlkLCBpZCk7XG4gICAgaWYgKGZvY3VzZWRPYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGZvY3VzZWRPYmplY3Quc2V0SXRhbGljKGl0YWxpYykudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB3b3JrZXJPYmoucmVzb2x2ZShjYWxsSWQsIGZvY3VzZWRPYmplY3QudG9Kc29uKCkpXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHdvcmtlck9iai5yZWplY3QoY2FsbElkKTtcbiAgICAgICAgfSlcbiAgICB9XG4gICAgcmV0dXJuIHdvcmtlck9iai5yZWplY3QoY2FsbElkKTtcbn1cbmdyYXBoaWNPYmplY3RBUEkuc2V0VGV4dE9iamVjdEl0YWxpYyA9IHNldFRleHRPYmplY3RJdGFsaWM7XG5cbmZ1bmN0aW9uIHNldFRleHRPYmplY3RCb2xkIChjYWxsSWQsIHtkb2NJZCwgcGFnZUlkLCBpZCwgYm9sZH0pIHtcbiAgICBsZXQgZm9jdXNlZE9iamVjdCA9IGdldE9iamVjdEZyb21DYWNoZShkb2NJZCwgcGFnZUlkLCBpZCk7XG4gICAgaWYgKGZvY3VzZWRPYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGZvY3VzZWRPYmplY3Quc2V0Qm9sZChib2xkKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHdvcmtlck9iai5yZXNvbHZlKGNhbGxJZCwgZm9jdXNlZE9iamVjdC50b0pzb24oKSlcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgd29ya2VyT2JqLnJlamVjdChjYWxsSWQpO1xuICAgICAgICB9KVxuICAgIH1cbiAgICByZXR1cm4gd29ya2VyT2JqLnJlamVjdChjYWxsSWQpO1xufVxuZ3JhcGhpY09iamVjdEFQSS5zZXRUZXh0T2JqZWN0Qm9sZCA9IHNldFRleHRPYmplY3RCb2xkO1xuXG5mdW5jdGlvbiBzZXRUZXh0T2JqZWN0Rm9udFNpemUgKGNhbGxJZCwge2RvY0lkLCBwYWdlSWQsIGlkLCBzaXplfSkge1xuICAgIGxldCBmb2N1c2VkT2JqZWN0ID0gZ2V0T2JqZWN0RnJvbUNhY2hlKGRvY0lkLCBwYWdlSWQsIGlkKTtcbiAgICBpZiAoZm9jdXNlZE9iamVjdCkge1xuICAgICAgICByZXR1cm4gZm9jdXNlZE9iamVjdC5zZXRGb250U2l6ZShzaXplKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHdvcmtlck9iai5yZXNvbHZlKGNhbGxJZCwgZm9jdXNlZE9iamVjdC50b0pzb24oKSlcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgd29ya2VyT2JqLnJlamVjdChjYWxsSWQpO1xuICAgICAgICB9KVxuICAgIH1cbiAgICByZXR1cm4gd29ya2VyT2JqLnJlamVjdChjYWxsSWQpO1xufVxuZ3JhcGhpY09iamVjdEFQSS5zZXRUZXh0T2JqZWN0Rm9udFNpemUgPSBzZXRUZXh0T2JqZWN0Rm9udFNpemU7XG5cbmZ1bmN0aW9uIHNldFRleHRPYmplY3RTdGFuZGFyZEZvbnQgKGNhbGxJZCwge2RvY0lkLCBwYWdlSWQsIGlkLCBzdGFuZGFyZElkfSkge1xuICAgIGxldCBmb2N1c2VkT2JqZWN0ID0gZ2V0T2JqZWN0RnJvbUNhY2hlKGRvY0lkLCBwYWdlSWQsIGlkKTtcbiAgICBpZiAoZm9jdXNlZE9iamVjdCkge1xuICAgICAgICByZXR1cm4gZm9jdXNlZE9iamVjdC5zZXRTdGFuZGFyZEZvbnQoc3RhbmRhcmRJZCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB3b3JrZXJPYmoucmVzb2x2ZShjYWxsSWQsIGZvY3VzZWRPYmplY3QudG9Kc29uKCkpXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHdvcmtlck9iai5yZWplY3QoY2FsbElkKTtcbiAgICAgICAgfSlcbiAgICB9XG4gICAgcmV0dXJuIHdvcmtlck9iai5yZWplY3QoY2FsbElkKTtcbn1cbmdyYXBoaWNPYmplY3RBUEkuc2V0VGV4dE9iamVjdFN0YW5kYXJkRm9udCA9IHNldFRleHRPYmplY3RTdGFuZGFyZEZvbnQ7XG5mdW5jdGlvbiBzZXRUZXh0T2JqZWN0Rm9udEJ5TmFtZSAoY2FsbElkLCB7ZG9jSWQsIHBhZ2VJZCwgaWQsIG5hbWUsIHN0eWxlcywgY2hhcnNldH0pIHtcbiAgICBsZXQgZm9jdXNlZE9iamVjdCA9IGdldE9iamVjdEZyb21DYWNoZShkb2NJZCwgcGFnZUlkLCBpZCk7XG4gICAgaWYgKGZvY3VzZWRPYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGZvY3VzZWRPYmplY3Quc2V0Rm9udEJ5TmFtZShuYW1lLCBzdHlsZXMsIGNoYXJzZXQpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgd29ya2VyT2JqLnJlc29sdmUoY2FsbElkLCBmb2N1c2VkT2JqZWN0LnRvSnNvbigpKVxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB3b3JrZXJPYmoucmVqZWN0KGNhbGxJZCk7XG4gICAgICAgIH0pXG4gICAgfVxuICAgIHJldHVybiB3b3JrZXJPYmoucmVqZWN0KGNhbGxJZCk7XG59XG5ncmFwaGljT2JqZWN0QVBJLnNldFRleHRPYmplY3RGb250QnlOYW1lID0gc2V0VGV4dE9iamVjdEZvbnRCeU5hbWU7XG5cbmZ1bmN0aW9uIGdldFRleHRPYmplY3RXb2ZmIChjYWxsSWQsIHtkb2NJZCwgcGFnZUlkLCBpZH0pIHtcbiAgICBsZXQgZm9jdXNlZE9iamVjdCA9IGdldE9iamVjdEZyb21DYWNoZShkb2NJZCwgcGFnZUlkLCBpZCk7XG4gICAgaWYgKGZvY3VzZWRPYmplY3QpIHtcbiAgICAgICAgbGV0IHdvZmYgPSBmb2N1c2VkT2JqZWN0LmdldFdvZmYoKTtcbiAgICAgICAgbGV0IHRyYW5zZmVyID0gW107XG4gICAgICAgIC8vaWYgKHdvZmYuYnVmZmVyKSB7XG4gICAgICAgIC8vICAgIHRyYW5zZmVyPVt3b2ZmLmJ1ZmZlcl07XG4gICAgICAgIC8vfVxuICAgICAgICByZXR1cm4gd29ya2VyT2JqLnJlc29sdmUoY2FsbElkLCB3b2ZmLCB0cmFuc2Zlcik7XG4gICAgICAgIC8vcmV0dXJuIGZvY3VzZWRPYmplY3Quc2V0V29mZkJsb2IoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gICAgd29ya2VyT2JqLnJlc29sdmUoY2FsbElkKVxuICAgICAgICAvL30sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gICAgd29ya2VyT2JqLnJlamVjdChjYWxsSWQpO1xuICAgICAgICAvL30pXG4gICAgfVxuICAgIHJldHVybiB3b3JrZXJPYmoucmVqZWN0KGNhbGxJZCk7XG59XG5ncmFwaGljT2JqZWN0QVBJLmdldFRleHRPYmplY3RXb2ZmID0gZ2V0VGV4dE9iamVjdFdvZmY7XG5cbmV4cG9ydCBkZWZhdWx0IGV4dGVuZHNHcmFwaGljQVBJO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==